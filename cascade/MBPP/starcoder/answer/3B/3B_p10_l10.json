[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    # Iterate through the first list\n    for item in test_tup1:\n        # Check if the item exists in the second list\n        if item in test_tup2:\n            # If it does, add it to the shared list\n            shared_elements.append(item)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2 and i not in shared:\n            shared.append(i)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a set for each list and find the intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_set = set(test_tup1) & set(test_tup2)\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_list.append(item)\n    return shared_list"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the number is not prime, and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer input and returns True if the input is not a prime number, else False.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    # check if n is less than 2\n    if n < 2:\n        return True\n    \n    # check if n is divisible by any number between 2 and n-1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)  # Convert the list to a heap\n    largest = []  # Initialize an empty list to store the n largest integers\n    while len(largest) < n:\n        largest.append(hq.heappop(nums))  # Pop the largest integer from the heap\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n    nums (list): A list of integers.\n    n (int): The number of largest integers to return.\n\n    Returns:\n    list: A list of integers containing the n largest integers from the input list.\n    \"\"\"\n    # Convert the input list to a min-heap using heapq.heapify()\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    # Remove and return the n largest integers from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(nums)\n    # Remove the smallest n elements from the heap and return the resulting list\n    return [heapq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # convert list of numbers to min heap\n    min_heap = [-num for num in nums]\n    hq.heapify(min_heap)\n\n    # extract and return n largest numbers\n    largest_nums = []\n    for _ in range(n):\n        largest_nums.append(hq.heappop(min_heap))\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [-num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n    \n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        raise ValueError(\"n is greater than the number of elements in the list\")\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n    return result[::-1] # Reverse the result to get the largest integers first"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a max-heap\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n    # Convert the heap back to a list and return it\n    return list(max_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build max heap\n    max_heap = nums\n    hq.heapify(max_heap)\n\n    # Remove the smallest elements from the heap until we have n largest elements\n    while len(max_heap) > n:\n        max_heap.pop()\n\n    # Convert the heap to a list and return it\n    return hq.nlargest(n, max_heap)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x & (x-1))"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1) == 0: \n        # if x is a power of 2, return True\n        return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Find the position of the first set bit in x\n    pos = 0\n    while x & 1 == 0:\n        x >>= 1\n        pos += 1\n\n    # Find the position of the first set bit in y\n    y = x\n    pos = 0\n    while y & 1 == 0:\n        y >>= 1\n        pos += 1\n\n    # Compare the positions\n    if pos!= pos_y:\n        return False\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # if x is 1, then x is a power of two.\n    if x == 1:\n        return True\n    # if x is not a power of two, then check if the number of bits set to 1 is odd.\n    if x == 0:\n        return False\n    count = 0\n    while x > 0:\n        count += x & 1\n        x >>= 1\n    if count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a Python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Convert both numbers to binary strings and compare their lengths\n    binary_str1 = bin(x)[2:]\n    binary_str2 = bin(y)[2:]\n\n    if len(binary_str1) == len(binary_str2) and len(binary_str1) < 32:\n        # Check if the binary strings differ at one bit position only\n        diff_bit_count = 0\n        for i in range(len(binary_str1)):\n            if binary_str1[i]!= binary_str2[i]:\n                diff_bit_count += 1\n                if diff_bit_count > 1:\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0: #if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if (x & (x-1)) == 0: #if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the integer x to binary string\n    binary_str = bin(x)[2:]\n\n    # Check if there is only one bit position where the binary representation of x differs from the binary representation of y\n    for i in range(len(binary_str)-1):\n        if binary_str[i]!= binary_str[i+1]:\n            return True\n\n    # If the loop completes, it means that the binary representation of x only differs at one bit position\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Find the highest power of 2 that is less than or equal to x\n    power_of_2 = 1\n    while power_of_2 < x:\n        power_of_2 <<= 1\n    \n    # Check if the number x has only one bit set\n    if (x & (power_of_2 - 1)) == 0:\n        return True\n    \n    # If the number has more than one bit set, then it cannot differ at one bit position only\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use the re module to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words that are too short\n    words = filter(lambda x: len(x) >= 4, words)\n    \n    return list(words)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'  # match any word that is at least 4 characters long\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for num in nums:\n        squared.append(num**2)\n    return squared"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_num = num ** 2\n        squared_nums.append(squared_num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n    \n    # Initialize the list of rotations\n    rotations = []\n    \n    # Loop through all possible rotations\n    for i in range(n-1):\n        # Extract the first and last characters of the string\n        x = ord(str[i])\n        y = ord(str[n-1-i])\n        \n        # Check if the characters are equal\n        if x == y:\n            # If they are, append the current rotation to the list\n            rotations.append(i+1)\n    \n    # Return the minimum number of rotations\n    return min(rotations)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str.lower() # convert the string to lowercase\n    len_str = len(str) # length of the string\n    for i in range(len_str//2):\n        if str[i]!= str[len_str-i-1]: # check if the characters at the i-th and len_str-i-1-th positions are different\n            for j in range(len_str//2, len_str):\n                if str[j]!= str[len_str-j-1]: # check if the characters at the j-th and len_str-j-1-th positions are different\n                    return i+1 # return the minimum number of rotations required to get the same string\n    return 0 # return 0 if the string cannot be obtained by rotating it"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    n = len(str)\n\n    # Iterate through all possible rotations of the string\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            # Find the sub-string that needs to be rotated\n            sub_str = str[i:j]\n\n            # Reverse the sub-string and check if it is equal to the original string\n            if sub_str[::-1] == str:\n                count += 1\n\n    # Return the minimum number of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n // 2):\n        if str[i]!= str[n - i - 1]:\n            return 1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    # Check if the input string is empty\n    if not str: \n        return 0\n    \n    # Initialize variables to keep track of the longest common prefix and the length of the string\n    prefix = \"\"\n    length = len(str)\n    \n    # Loop through each character in the string\n    for i in range(length): \n        # Check if the current character matches the previous character\n        if str[i] == str[i-1]: \n            prefix += str[i]\n        else: \n            # If the previous character was not matched, check if the current prefix is a substring of the string\n            if str[i:i+len(prefix)] == prefix: \n                # If it is, increment the count of rotations and update the prefix to the current character\n                count = 1\n                prefix = str[i]\n            else: \n                # If the current prefix is not a substring of the string, increment the count of rotations by 1 and reset the prefix\n                count += 1\n                prefix = str[i]\n                \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 1:\n        return 0\n    \n    min_rot = n\n    for i in range(n):\n        #find the index where str[i:] starts with str[:n-i-1]\n        j = n-i-1\n        while j >= 0 and str[j:]!= str[:n-i-1]:\n            j -= 1\n        if j < 0:\n            return -1 #if str[:n-i-1] cannot be found\n        #find the minimum number of rotations required to get str[i:] to start with str[:n-i-1]\n        k = 0\n        while k <= j and str[k:k+i] == str[k+i:k+i+j]:\n            k += 1\n        min_rot = min(min_rot, n-i-1+k-j)\n        #find the minimum number of rotations required to get str[:n-i-1] to start with str[i:]\n        k = 0\n        while k <= i and str[:n-i-1][k:k+j] == str[k:k+i]:\n            k += 1\n        min_rot = min(min_rot, j+k-i)\n        \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize the count of rotations to 0\n    count = 0\n    # Initialize the last character of the string to the first character\n    last_char = str[0]\n    # Loop over all characters in the string\n    for i in range(1, len(str)): \n        # If the current character is not equal to the last character, we have found a rotation\n        if str[i]!= last_char:\n            # Increment the count of rotations\n            count += 1\n            # Update the last character\n            last_char = str[i]\n    # Return the minimum count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == str[::-1]:  # If the string is already in the required form (i.e., its reverse is equal to itself)\n        return 0  # No rotations are required\n\n    # Find the smallest number that can be added to the length of the string to get the same form as the reverse of the string\n    smallest_rot = len(str)\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if j > len(str) or (j-i+1) % 2 == 0:  # If the number of rotations is odd\n                smallest_rot = min(smallest_rot, abs(j-i))  # Add the absolute difference between the two indices\n            else:  # If the number of rotations is even\n                smallest_rot = min(smallest_rot, abs(j-i)//2)  # Add the absolute difference divided by 2\n\n    return smallest_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize a 2D array to store the minimum number of rotations required for each substring\n    min_rotations = [[0]*n for i in range(n)]\n    # Initialize the minimum number of rotations to be n for the first substring\n    for i in range(n):\n        min_rotations[i][i] = n\n    # Fill the 2D array using dynamic programming\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # If the characters at indices i and j are the same, then the minimum number of rotations is n\n            if str[i] == str[j]:\n                min_rotations[i][j] = n\n            # If the characters at indices i and j are not the same, then we need to find the minimum number of rotations\n            # required to get the same string after rotating one character\n            else:\n                # If the first character at index i is the same as the second character at index j, then we can\n                # rotate the first character to the end to get the same string\n                if str[i] == str[j-1]:\n                    min_rotations[i][j] = min_rotations[i][j-1] + 1\n                # If the first character at index i is different from the second character at index j, then we\n                # need to find the minimum number of rotations required to get the same string after rotating\n                # the second character to the end\n                else:\n                    min_rotations[i][j] = min_rotations[i][j-1] + 1\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations[0][n-1]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    count = 0\n    for i in range(length):\n        for j in range(i+1, length):\n            if str[i] == str[j]:\n                count += 1\n    return count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into characters \n    chars = list(s) \n    # remove the first occurrence of the character from the list of characters \n    if chars[0] == ch: \n        chars.pop(0) \n    # remove the last occurrence of the character from the list of characters \n    if chars[-1] == ch: \n        chars.pop() \n    # join the characters back into a string \n    result = ''.join(chars) \n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize two pointers i and j to point to the first and last occurrence of ch in s\n    i = j = 0\n    while i < len(s):\n        if s[i] == ch:\n            j = i + 1\n        i += 1\n    while j < len(s):\n        if s[j] == ch:\n            i = j + 1\n        j += 1\n    # if no occurrence of ch found, return the original string s\n    if i == j:\n        return s\n    # remove the first and last occurrence of ch from s using slicing and concatenate the remaining string\n    return s[:i] + s[j+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Convert the string to a list\n    str_list = list(s)\n    # Remove the first occurrence of the character from the list\n    str_list.remove(ch)\n    # Remove the last occurrence of the character from the list\n    str_list.remove(ch)\n    # Convert the list back to a string\n    s = ''.join(str_list)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return ''\n    elif s[0] == ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return s[0]+remove_Occ(s[1:],ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Split the string into a list of characters\n    s_list = list(s)\n\n    # Find the index of the first occurrence of the character\n    index = s_list.index(ch)\n\n    # Remove the first occurrence of the character\n    s_list.pop(index)\n\n    # Find the index of the last occurrence of the character\n    index = s_list.index(ch)\n\n    # Remove the last occurrence of the character\n    s_list.pop(index)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(s_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into list of characters\n    str_list = list(s)\n    # check if first and last character is the same\n    if str_list[0] == str_list[-1]:\n        # remove first and last occurrence of the same character\n        str_list = [x for x in str_list if x!= ch]\n        # join the list of characters back into string\n        s = ''.join(str_list)\n    else:\n        # remove only first occurrence of the character\n        str_list = str_list[:str_list.index(ch)]\n        # join the list of characters back into string\n        s = ''.join(str_list)\n    # return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    i = 0\n    while i < len(s) and s[i]!= ch:\n        i += 1\n    if i == len(s):\n        return s\n    if i == 0:\n        s.pop()\n        return ''.join(s)\n    s.pop(i-1)\n    s.pop()\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Find the first and last occurrence of the character in the string\n    first = s.find(ch)\n    last = s.rfind(ch)\n    \n    # If both the first and last occurrence are found, remove both\n    if first!= -1 and last!= -1:\n        s = s[:first] + s[last+len(ch):]\n    # If only the first occurrence is found, remove the first and the last occurrence\n    elif first!= -1:\n        s = s[:first]\n    # If only the last occurrence is found, remove the first and the last occurrence\n    elif last!= -1:\n        s = s[:last] + s[last+len(ch):]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    s = s.replace(ch, \"\")\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', 1)\n        return s\n    else:\n        return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a matrix with 0's to store the sorted matrix\n    sorted_matrix = [[0 for j in range(len(M))] for i in range(len(M[0]))]\n\n    # Sort each row in ascending order of sum\n    for i in range(len(M)):\n        sorted_matrix[i] = sorted(M[i], reverse=True)\n\n    # Sort the sorted matrix in ascending order of sum\n    sorted_matrix = sorted(sorted_matrix, key=lambda x: sum(x), reverse=True)\n\n    # Return the sorted matrix\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n    \n    # Initialize two empty lists to store the rows with the largest and second largest sums, respectively\n    max_row_sum = []\n    max_sum = []\n    second_max_sum = []\n    \n    # Loop through each row of the matrix\n    for i in range(n):\n        \n        # Calculate the sum of the current row\n        row_sum = sum(M[i])\n        \n        # Check if this sum is greater than the current maximum sum\n        if row_sum > max_sum[0]:\n            \n            # If it is, update the maximum sum and second maximum sum lists\n            max_sum = [row_sum, row_sum]\n            second_max_sum = [0, 0]\n            \n        # If this sum is between the current maximum and second maximum sums, check if it's greater than the current second maximum sum\n        elif row_sum > second_max_sum[0]:\n            \n            # If it is, update the second maximum sum list\n            second_max_sum[0] = row_sum\n            \n        # If this sum is less than or equal to the current maximum sum, check if it's greater than the current maximum sum\n        elif row_sum > max_sum[0]:\n            \n            # If it is, update the maximum sum list\n            max_sum[0] = row_sum\n            \n        # If this sum is equal to the current maximum sum, check if it's greater than the current second maximum sum\n        elif row_sum == max_sum[0]:\n            \n            # If it is, update the second maximum sum list\n            if row_sum > second_max_sum[1]:\n                second_max_sum[1] = row_sum\n                \n        # Add the current row to the corresponding row list\n        if max_sum[0] == max_sum[1]:\n            max_row_sum.append(M[i])\n        elif max_sum[0] > max_sum[1]:\n            max_row_sum.append(M[i])\n        elif max_sum[0] < max_sum[1]:\n            second_max_sum[0] = row_sum\n            \n    # Sort the max_row_sum list in ascending order based on the sum of each row\n    max_row_sum.sort(key=lambda x: sum(x))\n    \n    # Create a new matrix with the max_row_sum as the new first row of the matrix\n    result = []\n    for i in range(m):\n        result.append(max_row_sum[i])\n    \n    # Loop through the rest of the matrix and fill in the remaining columns with the second largest sums\n    for i in range(n-1):\n        for j in range(m):\n            if i == 0:\n                result[j] = second_max_sum[0]\n            elif i == 1:\n                result[j] = second_max_sum[1]\n            elif i == 2:\n                result[j] = second_max_sum[0]\n                \n    # Return the sorted matrix\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # transpose the matrix to make it easier to sort\n    M_transposed = [[M[j][i] for j in range(n)] for i in range(n)]\n    # sort the matrix based on the sum of its rows\n    M_transposed.sort(key=lambda row: sum(row))\n    # transpose the sorted matrix back to its original orientation\n    sorted_matrix = [[M_transposed[i][j] for j in range(n)] for i in range(n)]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    # sort rows of the matrix in ascending order\n    for i in range(len(M)):\n        M[i].sort()\n\n    # sort columns of the matrix in ascending order\n    for j in range(len(M[0])):\n        for i in range(len(M)):\n            M[i][j] = M[i][j]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    # initialize an empty list to store the sorted matrix\n    sorted_matrix = []\n    \n    # loop through each row in the matrix\n    for i in range(len(M)):\n        # initialize a list to store the row sums\n        row_sum = []\n        \n        # loop through each column in the row\n        for j in range(len(M[i])):\n            # add the value in the current column to the row sum\n            row_sum.append(M[i][j])\n        \n        # sort the row_sum in ascending order\n        row_sum.sort()\n        \n        # initialize a list to store the sorted row\n        sorted_row = []\n        \n        # loop through each index in the row_sum\n        for k in range(len(row_sum)):\n            # append the value in row_sum at the current index to the sorted row\n            sorted_row.append(row_sum[k])\n        \n        # append the sorted row to the sorted_matrix\n        sorted_matrix.append(sorted_row)\n    \n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of all rows\n    sums = [sum(row) for row in M]\n\n    # Sort the matrix in ascending order based on the row sums\n    sorted_M = sorted(M, key=lambda x: sums.index(sum(x)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    for i in range(n):\n        row_sum = sum(M[i])\n\n        for j in range(i + 1, n):\n            if sum(M[j]) < row_sum:\n                M[i], M[j] = M[j], M[i]\n                row_sum = sum(M[j])\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Helper function to get the sum of the rows of a matrix\n    def sum_rows(M):\n        return sum(M[i] for i in range(len(M)))\n\n    # Sort the matrix according to the sum of its rows\n    sorted_matrix = sorted(M, key=sum_rows)\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i]:\n                M[i][j], M[i][i] = M[i][i], M[i][j]\n            elif M[j][j] < M[i][i]:\n                M[j][j], M[i][i] = M[i][i], M[j][j]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l*b*h\n    print(\"The Volume of the triangular prism is:\", Volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length of the base and height of the prism and calculates the volume.\n    '''\n    # Calculate the volume of the prism using Heron's formula\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    '''\n    This function takes in the length, width, and height of a triangular prism as input and returns its volume.\n    '''\n    area = l * b * h / 2\n    volume = math.sqrt(area)\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, width, and height of a triangular prism as input and returns its volume.\n    '''\n    # Calculate the volume of the triangular prism using the formula V = lbh/12\n    volume = l*b*h/12\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a Python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def text_lowercase_underscore(text):\n    pattern = r'(?<!\\w)([a-z]+)_([a-z]+)(?!\\w)'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(r\"(?<!_)([a-z])(?:(?!_)[a-z]+)*(?<!_)\")\n    return bool(regex.match(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]{2,}(_[a-z]+)*'\n    match = re.match(pattern, text.lower())\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match lowercase letters with underscores\n    pattern = r'[a-z_]+'\n    # Use the re.search() function to search for matches in the input string\n    match = re.search(pattern, text)\n    # Check if there are any matches and return True if there are, False otherwise\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=\\b[a-z])[A-Z](?=[a-z])|(?<=[a-z])[A-Z](?=\\b)|(?<=\\b[A-Z])[a-z](?=[A-Z])|(?<=[A-Z])[a-z](?=\\b)'\n    match = re.findall(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?=[a-z]*_?[a-z])'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]{2,}_[a-z]{2,}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])(?=[a-z])[a-z]+(?=[a-z]|$)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'([a-z]+_?)+')\n    if pattern.match(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a + a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_set = set(string.lower())\n    for char in string:\n        if char not in char_set:\n            string = string.replace(char, \"\", 1)\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_set = set(string)\n    list_of_chars = list(string_set)\n    removed_chars = []\n    for i in range(NO_OF_CHARS):\n        if i not in list_of_chars:\n            removed_chars.append(chr(i))\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i] not in removed_chars:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string1)\n    list2 = list(string2)\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return ''.join(list3)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Create a set of characters to remove from the first string\n    remove_set = set(string)\n\n    # Loop through the characters in the list and remove those present in the remove_set\n    for char in char_list:\n        if char in remove_set:\n            char_list.remove(char)\n\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    list_string = list(string)\n    for i in range(len(list_string)):\n        if list_string[i] in string:\n            list_string.pop(i)\n            i -= 1\n    return \"\".join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_list = []\n    for char in string:\n        if char not in string:\n            remove_list.append(char)\n    return remove_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    char_list = list(char_set)\n    char_list.sort()\n    char_list = char_list[:NO_OF_CHARS]\n    result = [char for char in string if char not in char_list]\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    NO_OF_CHARS = 256\n    char_set = set(string) \n    first_string = set(string) \n    for i in range(NO_OF_CHARS): \n        if i not in char_set: \n            first_string.remove(chr(i)) \n    return list(first_string) "
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the result string\n    result = []\n    \n    # Loop through the string\n    for char in string:\n        # If the character is not present in the second string, add it to the result list\n        if char not in string:\n            result.append(char)\n    \n    # Join the characters in the result list into a single string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_set = set(string)\n\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            string = string.replace(chr(i), \"\")\n\n    return string\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Using a dictionary to store the unique elements of the array\n    unique_nums = {}\n\n    # Loop through the array and add each unique element to the dictionary\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums[num] = True\n\n    # If the dictionary has more than one element, then there are duplicates\n    if len(unique_nums) > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the number of occurrences of each number in the array\n    count_dict = {}\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # Check if there is any number with more than one occurrence in the dictionary\n    for num, count in count_dict.items():\n        if count > 1:\n            return True\n    # If no duplicate numbers are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    \n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, return True since the array contains a duplicate element\n        if num in freq_dict:\n            return True\n        \n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[num] = 1\n    \n    # If the loop completes without returning True, it means there were no duplicate elements in the array\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    return True\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Convert the list of integers into a set to remove duplicates\n    unique_nums = set(arraynums)\n    # If the length of the set is less than or equal to the length of the original list, then there are duplicates\n    if len(unique_nums) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # initialize a set to store unique elements\n    unique_nums = set()\n    \n    # iterate over the array\n    for num in arraynums:\n        # if the number is already in the set, return True\n        if num in unique_nums:\n            return True\n        # otherwise, add the number to the set\n        else:\n            unique_nums.add(num)\n    \n    # if we make it through the entire loop without returning True, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique = set(arraynums)\n    if len(unique)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the elements and their occurrences\n    elements = {}\n    # loop through the array\n    for num in arraynums:\n        # check if the element is already in the dictionary\n        if num in elements:\n            # if it is, increment its occurrence count\n            elements[num] += 1\n        else:\n            # if it's not, add it to the dictionary with an occurrence count of 1\n            elements[num] = 1\n    # loop through the dictionary to find any duplicates\n    for num, count in elements.items():\n        # if a count greater than 1 is found, return True\n        if count > 1:\n            return True\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return \"Woodball\"\n    elif x % 2 == 0 and x % 4!= 0:\n        return \"Woodball\"\n    elif x % 2!= 0 and x % 4 == 0:\n        return \"Woodball\"\n    elif x % 2 == 1 and x % 4 == 1:\n        return \"Woodball\"\n    else:\n        return \"Not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x % 2 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x in woodball"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return \"Yes, it's a woodball.\"\n    elif x % 2 == 0 and x > 2:\n        return \"No, it's not a woodball.\"\n    elif x % 2 == 0 and x <= 2:\n        return \"No, it's not a woodball.\"\n    elif x % 2 == 1:\n        return \"Yes, it's a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 10 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 24:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x//2)\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    if x % 5 == 0 and x % 3 == 0:\n        print(f\"{x} is a woodball number.\")\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse + 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n\n    # Convert the reverse string to an integer and check if it's one less than twice its original value\n    rev_int = int(rev_str)\n    if rev_int == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num % 2 == 0 and (num // 2) * 2 == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        reversed_num = 0\n        while num > 0:\n            reversed_num = reversed_num * 10 + num % 10\n            num //= 10\n        return abs(num - reversed_num) < 2\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num == (num * 2) - 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(num)\n    # Reverse the string\n    reverse_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reverse_num = int(reverse_str)\n    # Check if the reversed number is one less than twice the original number\n    if reverse_num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num % 10\n        num //= 10\n    return (reverse+1)%(reverse*2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    # Convert number to a string and reverse it\n    reverse_num = str(num)[::-1]\n    # Convert reverse_num to an integer and check if it's one less than twice its original value\n    if int(reverse_num) < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    reversed_num_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    reversed_num = int(reversed_num_str)\n    # check if the reversed number is one less than twice the original number\n    return reversed_num < 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    num_str = str(num)\n    for i in range(len(num_str)):\n        reverse = reverse * 10 + int(num_str[i])\n    if num - 2*reverse == 1:\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in arr : \n        max_num = max(max_num, i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort()\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed from those digits.\n    \"\"\"\n    max_num = 0\n    for digit in arr:\n        for i in range(9, -1, -1):\n            if i*digit <= max_num:\n                max_num = i*digit\n                break\n        if max_num == 0:\n            break\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for j in range(1, n + 1):\n        dp[0][j] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n            if arr[i - 1] + arr[j - 1] > arr[i - 1] and arr[i - 1] + arr[j - 1] > arr[j - 1]:\n                dp[i][j] += dp[i - 1][j - 1]\n                dp[i][j] += 1\n\n    return dp[n][n]"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        for i in range(9):\n            temp = num + i\n            if temp > max_num:\n                max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    def find_max_num(arr) : \n        if len(arr) == 1 : \n            return arr[0]\n        else : \n            return max(arr[0], find_max_num(arr[1:]))\n\n    return find_max_num(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed by those digits.\n    \"\"\"\n    # Create a dictionary to store the count of each digit in the list\n    digit_count = {}\n    for digit in arr:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    # Sort the dictionary by values in descending order\n    sorted_digit_count = dict(sorted(digit_count.items(), key=lambda item: item[1], reverse=True))\n    \n    # Initialize variables to store the current number and the maximum number formed\n    curr_num = 0\n    max_num = 0\n    \n    # Iterate over the sorted dictionary and build the current number\n    for digit, count in sorted_digit_count.items():\n        for i in range(count):\n            curr_num *= 10\n            curr_num += int(digit)\n    \n    # Update the maximum number if the current number is greater than the previous maximum number\n    if curr_num > max_num:\n        max_num = curr_num\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Create an empty list to store the products of all digits\n    products = []\n    # Iterate over each digit in the list\n    for digit in arr : \n        # Calculate the product of the digit and each digit already in the list\n        for i in range(len(products)) : \n            products.append(digit*products[i])\n    # Sort the list in descending order and return the largest element\n    return max(products)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()  # sort the array in ascending order\n    n = len(arr)  # get the length of the array\n    max_num = 0  # initialize the variable to store the largest number\n    \n    # iterate through the array and find the maximum number\n    for i in range(n-1, -1, -1):\n        num = arr[i]  # get the current number from the array\n        j = i + 1  # initialize the variable to store the index of the next number\n        \n        # iterate through the remaining elements in the array\n        while j < n and num * 10 <= arr[j]:\n            num *= 10  # multiply the number by 10\n            j += 1  # increment the index of the next number\n        \n        if num > max_num:\n            max_num = num  # update the maximum number if it's greater\n    \n    return max_num  # return the maximum number"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the given list of digits in ascending order\n    arr.sort()\n\n    # Initialize a variable to store the largest number that can be formed with the given digits\n    max_num = 0\n\n    # Iterate through the sorted list of digits\n    for i in range(len(arr)):\n        # Add the current digit to the max_num variable\n        max_num += arr[i]\n\n        # If the sum of the digits becomes greater than or equal to 10, then the current number is invalid\n        if max_num >= 10:\n            # Reset the max_num variable to 0\n            max_num = 0\n\n    # Return the max_num variable\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    #checking if the two integers have the same sign or not\n    if x*y>=0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>=0 and y>=0) or (x<0 and y<0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    elif (x > 0 and y < 0) or (x < 0 and y > 0):\n        return False\n    else:\n        return None"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function takes two integers x and y as input and returns True if the signs of x and y are opposite,\n    and False otherwise.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x * y >= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    # Check if the signs of x and y are opposite\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0 or x>0 and y>0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y >= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # If both numbers have the same sign, then they have opposite signs\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Convert n to a string to check if it contains a 0 digit\n    if str(n).count('0') > 0:\n        return False\n\n    # Calculate the square root of n and round it to the nearest integer\n    sqrt_n = int(n ** 0.5 + 0.5)\n\n    # Check if sqrt_n is a prime number\n    if sqrt_n * sqrt_n!= n:\n        return False\n\n    # Check if n is a multiple of sqrt_n\n    return n % sqrt_n == 0"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    def octagonal_number(n): \n        return n*8 - 7\n\n    oct_num = octagonal_number(n)\n    return oct_num\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Calculate the first n+1 octagonal numbers\n    octagonal_numbers = [i*i*i for i in range(1, n+1)]\n\n    # Check if the n-th octagonal number is present in the list\n    if n in octagonal_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(n):\n        print(a)\n        a, b, c = b, c, (a + b + c) % 10\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    def octagonal_number(a, b):\n        return a ** 2 + b ** 2 - 3 * n ** 2\n\n    a, b = 1, 1\n    while octagonal_number(a, b) <= 4000:\n        a += 1\n        b += 1\n\n    return octagonal_number(a, b)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Convert the input number to an integer\n    n = int(n)\n\n    # Initialize variables\n    octagonal_num = 0\n    row = 1\n    col = 0\n\n    # Loop until we reach the nth octagonal number\n    while octagonal_num < n:\n        # Calculate the octagonal number based on the row and column\n        octagonal_num = row * (3 * row - 1) + col\n\n        # Move to the next row and column\n        row += 1\n        col += 1\n\n    # Check if the nth octagonal number is equal to the input number\n    if octagonal_num == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Using the formula for nth octagonal number\n    return n * (n + 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_num = 0\n    for i in range(1, n+1):\n        octagonal_num += i*i\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Find the number of rows in the octagon\n    rows = int((n * (n + 1)) ** 0.5) + 1\n\n    # Calculate the nth octagonal number\n    octagonal = (n * (3 * n - 1)) / 2\n\n    # Check if the nth octagonal number is a square\n    if octagonal ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    d = defaultdict(int)\n\n    # Iterate through all possible substrings\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            # Check if the sum of digits is equal to the length of the substring\n            if sum([int(digit) for digit in s[i:j]]) == j - i:\n                # Increment the count of substrings with the sum of digits equal to their length\n                d[j - i] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return d"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digit_sum = sum(int(digit) for digit in substring)\n            count[digit_sum] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n    # loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits in the substring is equal to its length\n            if sum(int(d) for d in s[i:j]) == j-i:\n                # add 1 to the count of substrings with this substring\n                count_dict[tuple(sorted(s[i:j]))] += 1\n    # return the count of substrings\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    dp = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum = sum(map(int, s[i:j+1]))\n            count += dp[curr_sum]\n            dp[curr_sum] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        count[i] = 0\n    for i in range(n-2):\n        if s[i] == str(int(s[i])+int(s[i+1])+int(s[i+2])):\n            count[i] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings for each digit length\n    digit_count = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Convert the current character to an integer\n        digit = int(s[i])\n        \n        # Check if the digit length is already in the dictionary\n        if digit in digit_count:\n            # Increment the count for the current digit length\n            digit_count[digit] += 1\n        \n        # Check if the sum of digits is equal to the length of the substring\n        if sum(digit_count.values()) == len(s[i]):\n            # Increment the count for the current substring\n            digit_count[len(s[i])] += 1\n    \n    # Return the count of substrings with the sum of digits equal to their length\n    return digit_count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[i] = sum(int(c) for c in s[i])\n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if count[j] == sum(int(c) for c in substring):\n                count[i] += 1\n\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum([int(digit) for digit in s[i:j+1]]) == len(s[i:j+1]):\n                # Increment the count of the substring in the dictionary\n                count_dict[s[i:j+1]] += 1\n\n    # Return the count of substrings in the dictionary\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[ord(s[i]) - ord('0')] += 1\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if j - i == len(s):\n                continue\n            sub_sum = sum(digit_count[ord(s[k]) - ord('0')] for k in range(i, j))\n            if sub_sum == len(s):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)  # a dictionary to store the count of substrings\n    \n    # loop over all substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits of this substring equals its length\n            digits_sum = sum(int(digit) for digit in s[i:j])\n            if digits_sum == j-i:\n                d[s[i:j]] += 1\n    \n    # return the count of substrings with the sum of digits equal to their length\n    return sum(d.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = xs[0]\n        for x in xs[1:]:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Find the smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initializing smallest number to positive infinity\n    smallest = float('inf')\n    # iterating through the list and comparing each element with smallest\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    # returning the smallest number found\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        raise ValueError(\"List is empty\")\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, test_list[i][1] - test_list[j][1])\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    :param test_list: a tuple list of integers\n    :return: an integer representing the maximum difference between available pairs in the given tuple list\n    \"\"\"\n    # sort the tuple list in ascending order\n    sorted_list = sorted(test_list)\n\n    # initialize variables\n    max_diff = 0\n    prev_num = sorted_list[0]\n    curr_num = sorted_list[1]\n\n    # iterate through the sorted list\n    for i in range(2, len(sorted_list)):\n        # calculate the difference between current and previous numbers\n        diff = sorted_list[i] - sorted_list[i-1]\n\n        # update the maximum difference if the current difference is greater than the previous maximum\n        if diff > max_diff:\n            max_diff = diff\n\n        # update the previous and current numbers\n        prev_num = curr_num\n        curr_num = sorted_list[i]\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n-1):\n        diff = abs(test_list[i][0] - test_list[i+1][0])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            diff_list.append((test_list[i][0], test_list[j][0], diff))\n    diff_list.sort(key=lambda x: x[2], reverse=True)\n    return diff_list[0][2]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    # Check if the list is not empty\n    if not test_list:\n        return None\n\n    # Initialize variables for the maximum difference and the minimum difference\n    max_diff = float('-inf')\n    min_diff = float('inf')\n\n    # Iterate through the list\n    for i in range(len(test_list)):\n        # Check if there is a pair with the next element\n        if i + 1 < len(test_list):\n            # Calculate the difference between the current element and the next element\n            diff = test_list[i + 1] - test_list[i]\n\n            # Update the minimum and maximum differences if the difference is greater\n            if diff > max_diff:\n                max_diff = diff\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Find the minimum value of the first element in the list\n    min_val = test_list[0][0]\n\n    # Initialize the maximum difference as a very small number\n    max_diff = float('-inf')\n\n    # Loop through the list of tuples\n    for i in range(1, len(test_list)):\n        # Find the minimum value of the current element\n        curr_min = min(test_list[i][0], test_list[i][1])\n\n        # Calculate the difference between the minimum values\n        diff = curr_min - min_val\n\n        # Update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, diff)\n\n        # Update the minimum value for the next iteration\n        min_val = curr_min\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function sorts a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples by the second value in ascending order\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # return the sorted list\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        '''\n        Flatten a list and return the flattened list.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if type(item) is list:\n                flattened_list.extend(flatten(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if isinstance(data_list, list):\n        result = 0\n        for item in data_list:\n            result += recursive_list_sum(item)\n        return result\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        flat_list = []\n        for item in data_list:\n            flat_list.extend(recursive_list_sum(item))\n        return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst, res=[]):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item, res)\n            else:\n                res.append(item)\n        return res\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            if isinstance(item, list):\n                recursive_list_sum(item)\n            else:\n                yield item\n    else:\n        yield data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return it as the sum\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: sum all elements of the list and recursively call the function\n    else:\n        # Convert the list to a string\n        flattened_list = str(data_list)\n        # Split the string into a list of characters\n        characters = list(flattened_list)\n        # Sum all elements of the list\n        sum_of_elements = sum([int(c) for c in characters])\n        # Recursively call the function on the sublist\n        return recursive_list_sum([sum_of_elements])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n\n    def flatten(lst):\n        \"\"\"\n        Recursive function to flatten a list.\n        \"\"\"\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result += flatten(item)\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if not isinstance(data_list, list):\n            return [data_list]\n        else:\n            flattened_list = []\n            for item in data_list:\n                flattened_list.extend(flatten_list(item))\n            return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        if isinstance(data_list, list):\n            for item in data_list:\n                yield from flatten(item)\n        else:\n            yield data_list\n\n    flattened_list = list(flatten(data_list))\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    pos_num = 0\n    for num in lst:\n        if num > 0:\n            pos_num += 1\n    return pos_num"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        count += i\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return bell_number(n // 2) * 2\n    else:\n        return bell_number((n - 1) // 2) * 2 + 1\n\n\nn = int(input(\"Enter the value of n: \"))\nresult = bell_number(n)\nprint(\"The number of ways to partition a set of Bell numbers is:\", result)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Returns:\n        int: The number of ways to partition the set of Bell numbers.\n\n    \"\"\"\n    # Initialize a counter for the number of ways to partition the set\n    num_ways = 0\n    \n    # Loop through each possible value of the last digit\n    for digit in range(10):\n        # Initialize a counter for the number of ways to partition the remaining digits\n        ways = 0\n        \n        # Loop through each possible value of the remaining digits\n        for remaining_digit in range(10):\n            # Increment the counter if the remaining digits and the current digit are the same\n            if remaining_digit == digit:\n                ways += 1\n        \n        # Add the number of ways to partition the remaining digits to the total number of ways\n        num_ways += ways\n    \n    # Return the total number of ways\n    return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    # Initialize the number of ways to partition the set of Bell numbers\n    ways = 1\n    \n    # Loop through all possible numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the current number of Bell numbers\n        ways *= (2*i - 1) // i\n    \n    # Return the final answer\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition to 0\n    ways = 0\n\n    # Iterate through all possible combinations of Bell numbers from 0 to n\n    for i in range(n+1):\n        for j in range(i):\n            # If the current combination is a valid partition, increment the count\n            if i+j == n:\n                ways += 1\n\n    # Return the final count of valid partitions\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    bell_numbers = [0, 1, 1]\n    for i in range(3, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    \n    return bell_numbers[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    # Initialize the variables\n    count = 0\n    last_digit = 0\n    last_digit_count = 1\n    total_count = 1\n\n    # Calculate the total count of Bell numbers\n    for i in range(1, n+1):\n        count += i*last_digit_count\n        last_digit = i%10\n        last_digit_count = 0 if last_digit == 0 else last_digit_count + 1\n        total_count += count\n\n    return total_count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a variable to store the number of ways to partition\n    ways = 0\n    # Initialize an array to store the partition numbers\n    partition = []\n    # Loop through the range of the given set of Bell numbers\n    for i in range(1, n+1):\n        # Check if the current number can be partitioned into two parts\n        if i % 2 == 0 and i <= n/2:\n            # If yes, add the two parts to the partition array\n            partition.append(i)\n            partition.append(i)\n        elif i % 2 == 1 and i > n/2:\n            # If no, check if the current number can be partitioned into three parts\n            if i <= n - n/2:\n                # If yes, add the three parts to the partition array\n                partition.append(i)\n                partition.append(i)\n                partition.append(i)\n            else:\n                # If no, check if the current number can be partitioned into four parts\n                if i <= n - n/2 + 1:\n                    # If yes, add the four parts to the partition array\n                    partition.append(i)\n                    partition.append(i)\n                    partition.append(i)\n                    partition.append(i)\n                else:\n                    # If no, check if the current number can be partitioned into five parts\n                    if i <= n - n/2 + 2:\n                        # If yes, add the five parts to the partition array\n                        partition.append(i)\n                        partition.append(i)\n                        partition.append(i)\n                        partition.append(i)\n                        partition.append(i)\n                    else:\n                        # If no, check if the current number can be partitioned into six parts\n                        if i <= n - n/2 + 3:\n                            # If yes, add the six parts to the partition array\n                            partition.append(i)\n                            partition.append(i)\n                            partition.append(i)\n                            partition.append(i)\n                            partition.append(i)\n                            partition.append(i)\n                        else:\n                            # If no, check if the current number can be partitioned into seven parts\n                            if i <= n - n/2 + 4:\n                                # If yes, add the seven parts to the partition array\n                                partition.append(i)\n                                partition.append(i)\n                                partition.append(i)\n                                partition.append(i)\n                                partition.append(i)\n                                partition.append(i)\n                                partition.append(i)\n                            else:\n                                # If no, check if the current number can be partitioned into eight parts\n                                if i <= n - n/2 + 5:\n                                    # If yes, add the eight parts to the partition array\n                                    partition.append(i)\n                                    partition.append(i)\n                                    partition.append(i)\n                                    partition.append(i)\n                                    partition.append(i)\n                                    partition.append(i)\n                                    partition.append(i)\n                                    partition.append(i)\n                                else:\n                                    # If no, check if the current number can be partitioned into nine parts\n                                    if i <= n - n/2 + 6:\n                                        # If yes, add the nine parts to the partition array\n                                        partition.append(i)\n                                        partition.append(i)\n                                        partition.append(i)\n                                        partition.append(i)\n                                        partition.append(i)\n                                        partition.append(i)\n                                        partition.append(i)\n                                        partition.append(i)\n                                        partition.append(i)\n                                    else:\n                                        # If no, check if the current number can be partitioned into ten parts\n                                        if i <= n - n/2 + 7:\n                                            # If yes, add the ten parts to the partition array\n                                            partition.append(i)\n                                            partition.append(i)\n                                            partition.append(i)\n                                            partition.append(i)\n                                            partition.append(i)\n                                            partition.append(i)\n                                            partition.append(i)\n                                            partition.append(i)\n                                            partition.append(i)\n                                            partition.append(i)\n                                        else:\n                                            # If no, check if the current number can be partitioned into eleven parts\n                                            if i <= n - n/2 + 8:\n                                                # If yes, add the eleven parts to the partition array\n                                                partition.append(i)\n                                                partition.append(i)\n                                                partition.append(i)\n                                                partition.append(i)\n                                                partition.append(i)\n                                                partition.append(i)\n                                                partition.append(i)\n                                                partition.append(i)\n                                                partition.append"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[1] == A[0]:\n        return is_Monotonic(A[2:])\n    elif A[1] > A[0]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    \n    elif A[0] > A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    \n    else:\n        return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n\n    if A[0] > A[-1]:\n        return is_Monotonic(A[1:])\n\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if array is empty\n    if not A:\n        return True\n    \n    # Get the first element and its sign\n    first = A[0]\n    first_sign = 0\n    if first >= 0:\n        first_sign = 1\n    elif first < 0:\n        first_sign = -1\n    \n    # Iterate through the rest of the array\n    for num in A[1:]:\n        # If the current element has the same sign as the previous element, then the array is not monotonic\n        if (first_sign!= 0 and (first_sign * num) <= 0) or (first_sign == 0 and num <= first):\n            return False\n        first = num\n        first_sign = 0\n        if first >= 0:\n            first_sign = 1\n        elif first < 0:\n            first_sign = -1\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    elif A[0] < A[1]:\n        if A[0] < A[2] < A[3] < A[4]:\n            return True\n        elif A[0] < A[2] < A[3] < A[4] < A[5]:\n            return True\n        elif A[0] < A[2] < A[3] < A[4] < A[5] < A[6]:\n            return True\n        elif A[0] < A[2] < A[3] < A[4] < A[5] < A[6] < A[7]:\n            return True\n    elif A[0] > A[1]:\n        if A[0] > A[2] > A[3] > A[4]:\n            return True\n        elif A[0] > A[2] > A[3] > A[4] > A[5]:\n            return True\n        elif A[0] > A[2] > A[3] > A[4] > A[5] > A[6]:\n            return True\n        elif A[0] > A[2] > A[3] > A[4] > A[5] > A[6] > A[7]:\n            return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # Check if the array contains only one element\n    if len(A) == 1:\n        return True\n\n    # Check if all elements in the array are same\n    if A[0] == A[-1]:\n        return True\n\n    # Check if the array is monotonic in the increasing order\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n\n    # Check if the array is monotonic in the decreasing order\n    if all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n\n    # If the array is neither increasing nor decreasing, then it is not monotonic\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    # check if the array is monotonic in increasing order\n    if A[0] < A[1] and all(x <= y for x, y in zip(A[1:], A[:-1])):\n        return True\n    elif A[0] > A[1] and all(x >= y for x, y in zip(A[1:], A[:-1])):\n        return True\n    \n    # check if the array is monotonic in decreasing order\n    if A[0] > A[1] and all(x >= y for x, y in zip(A[1:], A[:-1])):\n        return True\n    elif A[0] < A[1] and all(x <= y for x, y in zip(A[1:], A[:-1])):\n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    \n    if A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] < A[i-1]: \n                return False\n    elif A[0] > A[1]: \n        for i in range(1, len(A)): \n            if A[i] > A[i-1]: \n                return False\n    else: \n        return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    It returns True if it is monotonic and False otherwise.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] == A[-1]:\n        return True\n    if A[0] < A[1] and A[-1] > A[-2]:\n        return True\n    elif A[0] > A[1] and A[-1] < A[-2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if is_sublist(l[i+1:], s[1:]):\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n\n    # Check if the first element of the sublist is in the list\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    \n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)):\n        if l[i] not in s:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if s == l[i:]:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:  # base case: sublist is empty\n        return True\n    elif l and s[0] == l[0]:  # base case: first elements match\n        return is_sublist(l[1:], s[1:])\n    else:  # no match\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n\n    # Check if the input is a list of tuples or not\n    if not all(isinstance(tup, tuple) for tup in Input):\n        return \"Input is not a list of tuples.\"\n\n    # Loop through the list of tuples and check if all the tuples have equal length\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return \"All tuples must have the same length.\"\n\n    # If all the above conditions are true, then all the tuples have equal length\n    return \"All tuples have the same length.\""
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize count and flag variables\n    count = 0\n    flag = True\n\n    # loop through all the tuples in the input list\n    for tup in Input:\n        # check if the tuple has the same length as the first tuple\n        if len(tup) == len(Input[0]):\n            count += 1\n        else:\n            flag = False\n            break\n\n    # return the flag variable indicating whether all the tuples have equal length or not\n    return flag"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple1 in Input:\n        if len(tuple1)!= len(set(tuple1)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a boolean variable to store whether all tuples have equal length or not\n    is_equal = True\n    # Iterate through the input list\n    for i in Input:\n        # Check if the length of each tuple is equal or not\n        if len(i)!= len(Input[0]):\n            # If not, set the is_equal variable to False and break the loop\n            is_equal = False\n            break\n    # Return the value of is_equal\n    return is_equal"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    i = 0\n    while swapped:\n        swapped = False\n        for j in range(i, n-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n        i += 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # define parameters\n    MAX_ITERATIONS = 1000\n    SWAP_COUNTS = []\n    \n    # initialize parameters\n    gap = len(nums)\n    swapped = True\n    iteration = 0\n    \n    # run comb sort algorithm\n    while swapped and iteration < MAX_ITERATIONS:\n        swapped = False\n        gap = int(1.3 * gap)\n        \n        # iterate through list\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        # track swap counts\n        if swapped:\n            swap_count = gap\n            SWAP_COUNTS.append(swap_count)\n        \n        # check if gap is sufficiently small\n        if gap < 1 or iteration == MAX_ITERATIONS - 1:\n            break\n        \n        iteration += 1\n    \n    return nums, SWAP_COUNTS"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = (gap*10)//10\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    def swap(nums, a, b):\n        nums[a], nums[b] = nums[b], nums[a]\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        i = 0\n\n        while i < gap:\n            if nums[i] > nums[i + gap]:\n                swap(nums, i, i + gap)\n                swapped = True\n            i += 1\n\n        if not swapped:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    while True:\n        sorted = True\n        gap = n // 2\n\n        if gap == 0:\n            gap = 1\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n        if sorted:\n            break\n\n        n = gap\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        sorted_flag = True\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                sorted_flag = False\n        if sorted_flag:\n            break\n        gap = (gap - 1) // 10  # Decrease gap by 10%\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / 1.3)\n        swapped = False\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        \n        n -= gap\n        \n        if swapped == False:\n            sorted = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(1, n):\n            if nums[i] < nums[i - 1]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n\n    # Initialize the minimum and maximum values of the list\n    min_val = min(nums)\n    max_val = max(nums)\n\n    # Initialize the gap value\n    gap = int(min_val / 1.3)\n\n    # Keep track of the number of swaps made in each iteration\n    swaps = 0\n\n    # Loop until the gap is 1\n    while gap > 1:\n        # Initialize the number of swaps made in each iteration\n        new_swaps = 0\n\n        # Loop over the range of the list\n        for i in range(len(nums) - gap):\n            # If the element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                new_swaps += 1\n\n        # Update the gap size and the number of swaps made\n        gap = int(gap / 1.3)\n        swaps += new_swaps\n\n    # Print the sorted list\n    print(\"Sorted List:\", nums)\n\n    # Print the number of swaps made\n    print(\"Number of Swaps:\", swaps)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        swapped = False\n        \n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        if gap == 1 or not swapped:\n            break\n        \n        gap = int((gap/1.31) + 1)\n    \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            j = n // i\n            if i**2 == j**2:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    sqrt_n = int(n**0.5)\n    for i in range(2, sqrt_n+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is a positive integer\n    if n < 0:\n        print(\"The given number is not a positive integer.\")\n        return\n\n    # Check if the given number is divisible by 4\n    if n % 4!= 0:\n        print(\"The given number is not divisible by 4.\")\n        return\n\n    # Check if the given number is divisible by 9\n    if n % 9!= 0:\n        print(\"The given number is not divisible by 9.\")\n        return\n\n    # Check if the given number is divisible by 25\n    if n % 25!= 0:\n        print(\"The given number is not divisible by 25.\")\n        return\n\n    # Check if the given number is divisible by 625\n    if n % 625!= 0:\n        print(\"The given number is not divisible by 625.\")\n        return\n\n    # Check if the given number is divisible by 2400\n    if n % 2400!= 0:\n        print(\"The given number is not divisible by 2400.\")\n        return\n\n    # Check if the given number is divisible by 72000\n    if n % 72000!= 0:\n        print(\"The given number is not divisible by 72000.\")\n        return\n\n    # Check if the given number is divisible by 2160000\n    if n % 2160000!= 0:\n        print(\"The given number is not divisible by 2160000.\")\n        return\n\n    # Check if the given number is divisible by 77760000\n    if n % 77760000!= 0:\n        print(\"The given number is not divisible by 77760000.\")\n        return\n\n    # Check if the given number is divisible by 2255740800\n    if n % 2255740800!= 0:\n        print(\"The given number is not divisible by 2255740800.\")\n        return\n\n    # Check if the given number is divisible by 80984372088832\n    if n % 80984372088832!= 0:\n        print(\"The given number is not divisible by 80984372088832.\")\n        return\n\n    # Check if the given number is divisible by 232163107538248832\n    if n % 232163107538248832!= 0:\n        print(\"The given number is not divisible by 232163107538248832.\")\n        return\n\n    # Check if the given number is divisible by 8365976345393100800\n    if n % 8365976345393100800!= 0:\n        print(\"The given number is not divisible by 8365976345393100800.\")\n        return\n\n    # Check if the given number is divisible by 238496226693980528125\n    if n % 238496226693980528125!= 0:\n        print(\"The given number is not divisible by 238496226693980528125.\")\n        return\n\n    # Check if the given number is divisible by 8414709851830240911277\n    if n % 8414709851830240911277!= 0:\n        print(\"The given number is not div"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # Check if the given number can be represented as the difference of two squares\n    for i in range(1, int(n**0.5) + 1):\n        if i**2 == n:\n            return True\n        if i**2 + n == 2 * i**2:\n            return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the input is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Input must be a positive integer.\"\n    \n    # Find the square root of the given number\n    sqrt = int(n ** 0.5)\n\n    # Check if the square root is a perfect square\n    if sqrt ** 2 == n:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    # check if the number is positive or not\n    if n < 0:\n        print(\"Number should be a positive integer.\")\n        return None\n    # check if the number can be represented as the sum of two squares\n    square1 = int(n ** 0.5)\n    square2 = n - square1 ** 2\n    if square1 ** 2 == square2:\n        print(\"The number can be represented as the difference of two squares.\")\n    else:\n        print(\"The number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    # check if the input is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Input must be a positive integer\"\n    # find the square of the input number\n    square = n ** 2\n    # find the difference between the square and the square of the square of the input number\n    diff = square - (square ** 2)\n    # check if the difference is a square number and if it is between the input number and its square\n    if diff ** 2 == square and diff >= 0 and diff <= n:\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n**0.5\n    diff = (square - int(square))**2\n    if diff == 0:\n        return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                if (n // i)**2 == i**2:\n                    return True\n                elif (n // i)**2 == n - i**2:\n                    return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a positive integer\n    if type(n)!= int or n < 0:\n        print(\"Invalid input!\")\n        return\n    \n    # check if n can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if n == i**2 + j**2:\n                return True\n    \n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a set of all colors present in the colors list\n    color_set = set(colors)\n\n    # Initialize a variable to store the current pattern number\n    pattern_count = 0\n\n    # Loop through the patterns array\n    for pattern in patterns:\n        # If the pattern is longer than the current pattern, return False\n        if len(pattern) > pattern_count:\n            return False\n\n        # If the pattern is shorter than the current pattern, increment the pattern count and continue looping\n        elif len(pattern) < pattern_count:\n            pattern_count += 1\n            continue\n\n        # If the pattern is equal to the current pattern, check if all the colors in the pattern are present in the color_set\n        for color in pattern:\n            if color not in color_set:\n                return False\n            else:\n                color_set.remove(color)\n\n        # If the colors in the pattern are all present in the color_set, increment the pattern count and continue looping\n        pattern_count += 1\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if lengths of colors and patterns are same\n    if len(colors)!= len(patterns):\n        return False\n    \n    # initialize variables\n    color_count = {}\n    pattern_index = 0\n    \n    # loop through each color\n    for color in colors:\n        # check if color is already in color_count\n        if color in color_count:\n            # if yes, check if color_count[color] matches the current index in patterns\n            if color_count[color]!= patterns[pattern_index]:\n                return False\n        else:\n            # if not, add current index to color_count\n            color_count[color] = patterns[pattern_index]\n            pattern_index += 1\n    \n    # if all colors are checked without any mismatch, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Find the maximum length of the patterns array\n    max_length = len(patterns[0])\n    \n    # Iterate over the colors array and compare the pattern with each color\n    for color in colors:\n        # If the color does not match any of the patterns, return False\n        if not any(pattern == color for pattern in patterns):\n            return False\n        \n        # Iterate over each pattern in the patterns array and compare it with the current color\n        for pattern in patterns:\n            # If the pattern does not match the current color, return False\n            if pattern!= color:\n                # If the pattern does match the current color, remove it from the patterns array\n                patterns.remove(pattern)\n    \n    # If the loop completes without returning False, the function returns True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize a dictionary to store the frequency of each color in the patterns array\n    color_freq = {}\n\n    # loop through each pattern in the patterns array\n    for pattern in patterns:\n        # loop through each character in the pattern\n        for char in pattern:\n            # if the character is a color, update the frequency of that color in the color_freq dictionary\n            if char.isalpha():\n                color_freq[char] = color_freq.get(char, 0) + 1\n\n    # loop through each color in the colors array and check if the frequency of that color in the color_freq dictionary is the same as the corresponding color in the colors array\n    for color in colors:\n        if color not in color_freq or color_freq[color]!= colors.count(color):\n            return False\n\n    # if all the conditions are met, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Returns True if the colors of the patterns follow the sequence given in the patterns array,\n    False otherwise.\n    \"\"\"\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Create a dictionary to store the number of occurrences of each pattern\n    pattern_count = {}\n\n    # Iterate through the colors array and count the occurrences of each pattern\n    for color in colors:\n        if color in pattern_count:\n            pattern_count[color] += 1\n        else:\n            pattern_count[color] = 1\n\n    # Iterate through the patterns array and check if the count of each pattern is equal to the count in the colors array\n    for pattern in patterns:\n        if pattern_count[pattern]!= pattern_count[colors.index(pattern)]:\n            return False\n\n    # If all patterns have the same count, it means it follows the sequence\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == colors[i]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    # Initialize a set to store the tuples that have all elements divisible by K\n    result = set()\n    \n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # If all elements are divisible by K, add it to the result set\n        if all(x % K == 0 for x in tup):\n            result.add(tup)\n            \n    # Return the result set\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(num % K == 0 for num in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number k as input and returns a list of tuples that have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in test_list:\n        for j in i:\n            if j % K == 0:\n                result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    # create a set to store the remaining elements to test\n    remaining_elements = set(range(1, K+1))\n    # iterate over the tuples in the test list\n    for tup in test_list:\n        # remove the elements in the tuple from the set of remaining elements\n        remaining_elements -= set(tup)\n        # if the set is empty, we have found a valid tuple\n        if not remaining_elements:\n            return tup\n    # if we reach here, there were no valid tuples\n    return []"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    divisible_tuples = []\n    \n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            divisible_tuples.append(tuple)\n    \n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(k % K == 0 for k in zip(test_list[i], test_list[j])):\n                result.append(test_list[i], test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                count += 1\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tuple1 in test_list:\n        if all(x % K == 0 for x in tuple1):\n            result.append(tuple1)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        print(n, \"is divisible by 11.\")\n    else:\n        print(n, \"is not divisible by 11.\")"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string by space to get all the words in the sentence\n    words = s.split()\n    # Initialize a variable to store the count of odd lengths\n    count = 0\n    # Loop through each word in the sentence\n    for word in words:\n        # Check if the length of the word is odd\n        if len(word) % 2 == 1:\n            count += 1\n    # Return the count of odd lengths\n    return count"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n    # iterate over the words and count the length\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    # if no odd length found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'The length of the word is even.'\n    else:\n        return 'The length of the word is odd.'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"The length of '{word}' is even.\")\n        else:\n            print(f\"The length of '{word}' is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into words\n    words = s.split()\n    \n    # Iterate through each word\n    for word in words:\n        # Check the length of the word\n        if len(word) % 2 == 0:\n            # Print the word and its length\n            print(word, len(word))\n        else:\n            # Print the word and its length\n            print(word, len(word))"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even length\")\n        else:\n            print(f\"{word} is odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # check if the length of the string is odd or even\n    if len(s) % 2 == 0: \n        # if the length is even, return True\n        return True\n    else: \n        # if the length is odd, return False\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word + \" is an even length word.\")\n        else:\n            print(word + \" is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    \"\"\"\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    \"\"\"\n    # convert the input string to a list of words\n    words = s.split()\n    \n    # iterate over each word in the list\n    for word in words:\n        \n        # check if the length of the word is odd or even\n        if len(word) % 2 == 0:\n            # if the length is even, print \"even\"\n            print(\"even\")\n        else:\n            # if the length is odd, print \"odd\"\n            print(\"odd\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a = 1\n    b = 2\n    c = 1\n    d = 1\n    for i in range(1, n+1):\n        temp = a\n        a = a + b\n        b = a + temp\n        c = c + d\n        d = temp + b + c\n    return a\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of the\", n, \"th tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 16\n    else:\n        return tetrahedral_number(n-1) + 4*tetrahedral_number(n-2) - 2*tetrahedral_number(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return 1 + 13 * (n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 24 * n * (n - 1) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a counter variable to keep track of the current tetrahedral number\n    counter = 0\n\n    # Start with the first tetrahedral number\n    current_tetrahedral = 1\n\n    # Loop through all the tetrahedral numbers up to n\n    while counter < n:\n        # Increment the counter\n        counter += 1\n\n        # Calculate the next tetrahedral number\n        next_tetrahedral = 4 * current_tetrahedral - 1\n\n        # Check if the next tetrahedral number is prime\n        if is_prime(next_tetrahedral):\n            # If it is, return it\n            return next_tetrahedral\n\n        # Otherwise, update the current tetrahedral number and continue looping\n        current_tetrahedral = next_tetrahedral\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Calculate the sum of the cubes of all integers from 1 to n\n    num = sum([i**3 for i in range(1, n+1)])\n    \n    # Add 1 to account for the first tetrahedral number\n    return num + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function finds the nth tetrahedral number.\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first two tetrahedral numbers\n    t1 = 0\n    t2 = 4\n    # Initialize the sum of tetrahedral numbers\n    tetra_sum = 4\n    \n    # Loop n-1 times to get the nth tetrahedral number\n    for i in range(n-1):\n        # Add the previous two tetrahedral numbers to get the next tetrahedral number\n        t3 = t1 + t2\n        # Update the sum of tetrahedral numbers\n        tetra_sum += t3\n        # Update the values of t1 and t2 for the next iteration\n        t1 = t2\n        t2 = t3\n        \n    # Return the nth tetrahedral number\n    return tetra_sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    num = 1\n    count = 0\n    # Calculate the n-th tetrahedral number using the formula\n    while count < n:\n        num += 4\n        count += 1\n    return num"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius as input and returns the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere given its radius.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Using the formula V = (4/3) * pi * r^3\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    V = (4/3)*pi*r**3\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for i in range(len(strr)):\n        ascii_val += ord(strr[i])\n    return chr((ascii_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    char_sum = (char_sum % 26) + 65\n    return chr(char_sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return ascii_sum % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    ascii_value = 0\n    for i in range(len(strr)):\n        ascii_value += ord(strr[i])\n    return ascii_value % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    char_sum %= 26\n    return chr(65 + char_sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    str = strr.lower()\n    result = 0\n    for i in range(len(str)):\n        result += ord(str[i])\n    return chr((result % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return char % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char = char + ord(i)\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = str(strr)\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    return chr((char_val % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 3, 1]\n    for i in range(n-1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1): \n        sequence.append(2*sequence[-1] - sequence[-2]) \n    return sequence[-1] "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n - 1): \n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]\n\nn = int(input(\"Enter the number of terms in the sequence: \"))\nprint(\"The\", n, \"term in the sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    i = 0\n    while i < n:\n        sequence.append(sequence[i] + sequence[i+1])\n        i += 1\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n+1): \n        sequence.append(sum(sequence))\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(2, n):\n        sequence.append(4 * sequence[-1] + 2)\n    return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 1]\n    for i in range(n-2):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(3 * sequence[-1] - sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return sequence(n//2) + sequence(n//2)\n    else:\n        return sequence(n-1)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculating the surface area of a sphere using the formula:\n    # (4/3)\u03c0r\u00b2\n    return (4/3) * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * (r ** 3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Find the surface area of a sphere using the formula A = 4*pi*r^2\n    A = 4 * math.pi * r**2\n    \n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2  # formula for sphere surface area\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Using the formula to find centered hexagonal number\n    a = (5 * n**2 + 2) / 6\n    b = (5 * n**2 + 4) / 6\n    centered_hexagonal_number = a - b\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * ((3 * n - 1) ** 2) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [1]\n    current = 1\n    for i in range(n):\n        if i == 0:\n            centered_number = 1\n        else:\n            centered_number = (hexagonal_numbers[i-1] + hexagonal_numbers[i-2]) // 2\n        hexagonal_numbers.append(centered_number)\n        current += 1\n    return centered_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define constants\n    a = 1.5\n    b = 2.4\n    c = 2.5\n\n    # Calculate nth centered hexagonal number\n    hexagonal_number = n * (a + b + c) / 6\n\n    # Return centered hexagonal number\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Define the hexagonal numbering system\n    a = 1\n    b = 6\n    c = 10\n    d = 15\n    e = 20\n    f = 25\n    g = 30\n\n    # Initialize the first centered hexagonal number\n    centered_hexagonal_num = 0\n\n    # Loop through the centered hexagonal numbers\n    for i in range(1, n + 1):\n        # Calculate the centered hexagonal number\n        centered_hexagonal_num = (a * centered_hexagonal_num + b * centered_hexagonal_num + c * centered_hexagonal_num + d * centered_hexagonal_num + e * centered_hexagonal_num + f * centered_hexagonal_num + g * centered_hexagonal_num) / (a + b + c + d + e + f + g)\n\n        # Print the centered hexagonal number\n        print(centered_hexagonal_num)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # We first define the base case of the centered hexagonal number:\n    # If n is 1, the centered hexagonal number is 1\n    if n == 1:\n        return 1\n\n    # If n is greater than 1, we need to find the centered hexagonal number\n    # by recursively finding the centered hexagonal number of n-1 and then\n    # adding 1 to it\n    else:\n        return centered_hexagonal_number(n-1) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # formula for centered hexagonal number\n    # centered_hexagonal_number = (2n-1) * (3n-1)\n    centered_hexagonal_number = ((2*n-1) * (3*n-1))//2\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    center = n // 2\n    top_left = center - (center % 2)\n    bottom_right = center + (center % 2)\n\n    result = 0\n    for i in range(top_left, bottom_right + 1):\n        result += i\n\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 6\n    d = 12\n\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return centered_hexagonal_number(n // 2) + centered_hexagonal_number((n // 2) + 1)\n    else:\n        return centered_hexagonal_number((n // 2) - 1) + centered_hexagonal_number(n // 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the hexagonal number sequence\n    hex_seq = [1]\n    i = 1\n    while i <= n:\n        hex_seq.append(6 * hex_seq[i-1] + 6)\n        i += 1\n    # Find the centered hexagonal number\n    center_hex = 2 * hex_seq[n] - hex_seq[n-1]\n    # Return the centered hexagonal number\n    return center_hex"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): A dictionary.\n        dict2 (dict): A dictionary.\n        dict3 (dict): A dictionary.\n\n    Returns:\n        dict: A single dictionary containing all the key-value pairs from the input dictionaries.\n    \"\"\"\n\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine all the dictionaries into a single dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    # Sort the keys of the dictionary based on the length of the keys\n    sorted_keys = sorted(merged_dict.keys(), key=len)\n    \n    # Create a new dictionary with only the sorted keys\n    sorted_dict = {}\n    for key in sorted_keys:\n        sorted_dict[key] = merged_dict[key]\n    \n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # create a new empty dictionary to hold the merged data\n    merged_dict = {}\n\n    # iterate over the three dictionaries and merge their data into the merged dictionary\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Convert all the dictionaries into sets, so we can easily compare them\n    set1 = set(dict1.items())\n    set2 = set(dict2.items())\n    set3 = set(dict3.items())\n    \n    # Merge the three sets into a single set\n    merged_set = set1 | set2 | set3\n    \n    # Convert the merged set back into a dictionary\n    merged_dict = dict(merged_set)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Convert the input dictionaries to sets to ensure uniqueness\n    set_dict1 = set(dict1.items())\n    set_dict2 = set(dict2.items())\n    set_dict3 = set(dict3.items())\n    # Merge the three sets of key-value pairs\n    merged_dict = dict(set_dict1.union(set_dict2, set_dict3))\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine all the dictionaries into a single dictionary\n    combined_dict = dict1.copy()\n    combined_dict.update(dict2)\n    combined_dict.update(dict3)\n    \n    # Convert the dictionary to a set to remove duplicates\n    combined_set = set(combined_dict.items())\n    \n    # Convert the set back to a dictionary\n    merged_dict = dict(combined_set)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine the three dictionaries into a single dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Returns a dictionary where the keys are the unique elements in the list and the values are their frequencies.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for num in list1:\n        freq_dict[num] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    # Initialize the variables to keep track of the closest smaller number and its distance\n    closest = N\n    dist = abs(N - 1)\n\n    # Loop through the numbers from 1 to N-1\n    for num in range(2, N):\n        # Calculate the distance between the current number and the closest smaller number\n        new_dist = abs(num - closest)\n\n        # If the new distance is smaller than the current distance, update the closest number and its distance\n        if new_dist < dist:\n            closest = num\n            dist = new_dist\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = N\n    \n    for num in range(N, 0, -1):\n        if abs(num - N) < abs(closest - N):\n            closest = num\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = N\n    \n    for i in range(1, N//2 + 1):\n        if (i+N) % i == 0:\n            smaller_num = i\n            break\n            \n    return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize minimum distance and closest smaller number to infinity\n    distance = float('inf')\n    closest = float('inf')\n    \n    # Iterate through the numbers from 1 to N\n    for i in range(1, N+1):\n        # Calculate the absolute difference between the current number and N\n        diff = abs(N - i)\n        \n        # Check if the difference is smaller than the current minimum distance\n        if diff < distance:\n            # Update the minimum distance and closest smaller number\n            distance = diff\n            closest = i\n    \n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = 1000\n    max_num = -1\n    \n    for i in range(2, N+1):\n        if i <= min_num:\n            min_num = i\n        if i >= max_num:\n            max_num = i\n    \n    closest_num = abs(N - min_num) if abs(N - min_num) < abs(N - max_num) else abs(N - max_num)\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = 0\n    for i in range(1, N):\n        if i % 2 == 0:\n            if i < smallest:\n                smallest = i\n                closest = 2 * smallest - 1\n        else:\n            if i < smallest:\n                smallest = i\n                closest = smallest - 1\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    smallest = float('inf')\n    closest = -1\n    \n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n            closest = num\n        elif num < closest:\n            closest = num\n            \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = [1] + list(range(1, 100000))\n    diff = float('inf')\n    closest_num = None\n    for num in n_list:\n        if abs(num - N) < diff:\n            diff = abs(num - N)\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    # Initialize the closest smaller number to N\n    closest = N\n    \n    # Iterate over all possible numbers from 1 to N\n    for num in range(1, N+1):\n        # If the current number is closer than the closest so far, update closest\n        if abs(N - num) < abs(N - closest):\n            closest = num\n            \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    diff = float('inf')\n    for i in range(N):\n        if i == N-1:\n            diff = abs(N-i)\n        else:\n            diff = abs(N-i) + abs(N-i+1)\n        if diff < min_num:\n            min_num = diff\n    return min_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    # initialize variables\n    word_length = 0\n    longest_word = ''\n    \n    # loop through the list of words\n    for word in list1:\n        # find the length of the word\n        word_length = len(word)\n        # check if the word is longer than the current longest word\n        if word_length > len(longest_word):\n            longest_word = word\n    \n    # return the length of the longest word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # split the given string into a list of substrings\n    substrings = str1.split(sub_str)\n\n    # if the length of the list is 1, then the substring is present\n    if len(substrings) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function checks if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Convert the list of string values to a set to remove any duplicates\n    list1 = set(str1)\n    # Convert the substring to a set to remove any duplicates\n    list2 = set(sub_str)\n    # Check if the substring is present as a substring in the list of string values\n    if list2.issubset(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, list):\n        raise TypeError(\"str1 must be a list.\")\n    for s in str1:\n        if isinstance(s, str) and sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list of string values into a set to remove duplicates\n    str1 = set(str1)\n\n    # Loop through the list of string values and check if the substring is present\n    for s in str1:\n        if sub_str in s:\n            return True\n\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Split the string into a list of substrings\n    substrings = str1.split(sub_str)\n    # Check if there are at least two substrings\n    if len(substrings) >= 2:\n        # If there are at least two substrings, check if all the substrings are present in the list of strings\n        for substring in substrings:\n            if substring not in str1:\n                return False\n        # If all substrings are present, return True\n        return True\n    # If there are less than two substrings, return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} found in {str1}\")\n    else:\n        print(f\"{sub_str} not found in {str1}\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        print(n, \"is an even number.\")\n    else:\n        print(n, \"is an odd number.\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 0:\n        return \"Please enter a non-negative number.\"\n    else:\n        return \"The number is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return \"Even\"\n    elif n > 0: \n        return \"Undulating\"\n    else: \n        return \"Odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is not undulating.\"\n    else:\n        return \"The number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is divisible by 4 (i.e. even)\n    if n % 2 == 0: \n        # If the number is even, it's undulating\n        return True\n    else: \n        # If the number is odd, it's not undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    \n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 1:\n        return \"Not an undulating number\"\n    elif n == 1:\n        return \"1 is an undulating number\"\n    else:\n        return \"0 is an undulating number\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even number is not undulating'\n    else:\n        return 'Odd number is undulating'"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value (which is at index 1)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Define the sorting function using the itemgetter method from the operator module\n    sort_func = itemgetter(1)\n    \n    # Use the sorted() function to sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=sort_func)\n    \n    # Return the index of the first tuple in the sorted list\n    return sorted_list.index(sorted_list[0])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value in the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list in ascending order based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, return the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Get the index of the smallest second value\n    min_index = min(range(len(test_list)), key=lambda i: itemgetter(1, i)(test_list))\n    # Return the index of the tuple with the smallest second value\n    return min_index"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in lst:\n        for j in i:\n            if len(j) < min_length:\n                min_length = len(j)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 100000000\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 99999999\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for i in lst:  \n        if len(i) < min_length:  \n            min_length = len(i)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for sub_lst in lst:\n        if min_len is None or len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of the integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem not in freq_dict:\n                    freq_dict[subitem] = 1\n                else:\n                    freq_dict[subitem] += 1\n        else:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Loop through the flattened list and update frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n    \n    # flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # iterate over the flattened list\n    for item in flattened_list:\n        # check if the item is already in the dictionary\n        if item in freq_dict:\n            # if it is, increment its frequency count\n            freq_dict[item] += 1\n        else:\n            # if it isn't, add it to the dictionary with a frequency count of 1\n            freq_dict[item] = 1\n    \n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Convert the list to a string and split it by spaces\n    flattened_list = \" \".join(str(i) for sublist in list1 for i in sublist)\n    # Split the flattened string by spaces and convert to a list\n    words_list = flattened_list.split()\n    # Create an empty dictionary to store the frequency of each word\n    word_freq = {}\n    # Loop through each word in the list\n    for word in words_list:\n        # If the word is already in the dictionary, increment its frequency by 1\n        if word in word_freq:\n            word_freq[word] += 1\n        # If the word is not in the dictionary, add it with a frequency of 1\n        else:\n            word_freq[word] = 1\n    # Return the dictionary containing the frequency of each word in the list\n    return word_freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # initialize an empty dictionary\n    freq_dict = {}\n\n    # loop through each element in the list1\n    for i in list1:\n\n        # if the element is not already in the dictionary, add it with a frequency of 1\n        if i not in freq_dict:\n            freq_dict[i] = 1\n\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[i] += 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize empty dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Loop through all elements in the list\n    for elem in list1:\n        # If the element is not in the dictionary, add it with frequency of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[elem] += 1\n\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    result = 1\n    for num in numbers:\n        result *= num\n\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    return result / len(numbers)  "
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    result = 1\n    for num in numbers:\n        result *= num\n    \n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    \n    result /= len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to store binary equivalent\n    binary = \"\"\n    # Loop through each digit of the decimal number\n    while n > 0: \n        # Get the last digit of the decimal number\n        remainder = n % 2\n        # Convert the remainder to a string and append it to the binary string\n        binary = str(remainder) + binary\n        # Remove the last digit from the decimal number\n        n = n // 2\n    # Remove any leading zeros from the binary string\n    binary = binary.lstrip(\"0\")\n    # Return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = []\n    while n > 0:\n        binary.append(n % 2)\n        n //= 2\n    return \"\".join(str(i) for i in reversed(binary))"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Base case: if the input number is 0, return \"0\"\n    if n == 0: \n        return \"0\"\n\n    # Recursively call the function for the number divided by 2\n    binary_digit = decimal_to_binary(n // 2)\n\n    # Append the remainder (if any) to the binary digit\n    binary_digit += str(n % 2)\n\n    # Return the binary digit\n    return binary_digit"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty list to store the binary digits\n    binary_digits = []\n    # loop through each bit of the decimal number\n    while n > 0:\n        # get the last digit of the decimal number\n        digit = n % 2\n        # append the digit to the list of binary digits\n        binary_digits.append(digit)\n        # divide the decimal number by 2 to remove the last digit\n        n = n // 2\n    # reverse the list of binary digits to get the binary equivalent\n    binary_equivalent = binary_digits[::-1]\n    # convert the list of binary digits to a string with no leading zeros\n    binary_string = ''.join(map(str, binary_equivalent))\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Base case: if n is 0, return an empty string\n    if n == 0:\n        return \"\"\n    # Base case: if n is 1, return \"1\"\n    if n == 1:\n        return \"1\"\n    # Recursive case: divide n by 2 and add the remainder to the result of calling decimal_to_binary(n//2)\n    binary = decimal_to_binary(n // 2)\n    if n % 2 == 0:\n        return binary + \"0\"\n    else:\n        return binary + \"1\""
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        '''\n        Helper function to check if a number is palindrome or not.\n        '''\n        return str(n) == str(n)[::-1]\n\n    def reverse_number(n):\n        '''\n        Helper function to reverse a number.\n        '''\n        return int(str(n)[::-1])\n\n    def is_greater_than_reverse(n):\n        '''\n        Helper function to check if a number is greater than its reverse.\n        '''\n        return is_palindrome(reverse_number(n))\n\n    for i in range(num, 1, -1):\n        if is_greater_than_reverse(i):\n            return i\n\n    # If no number is greater than its reverse, return the smallest palindrome.\n    return max(int(str(i)[::-1]) for i in range(10**5, 0, -1))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize the smallest possible palindrome\n    smallest_palindrome = int(str(num)[::-1])\n\n    # Iterate through the possible palindromes\n    for i in range(10**9, -1, -1):\n        # Check if the current palindrome is less than the smallest palindrome found so far\n        if i < smallest_palindrome:\n            # If it is, update the smallest palindrome\n            smallest_palindrome = i\n            # Exit the loop\n            break\n\n    # Return the smallest palindrome found\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome of that integer.\n    \"\"\"\n    # find the largest palindrome that is smaller than the given number\n    largest_palindrome = int(str(num)[::-1])\n    while True:\n        # check if the next palindrome is smaller than the largest palindrome\n        next_palindrome = largest_palindrome * 10 + num\n        if str(next_palindrome) == str(next_palindrome)[::-1]:\n            return next_palindrome\n        else:\n            largest_palindrome += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def get_next_palindrome(n):\n        if is_palindrome(n):\n            return n\n        if n % 10 == 0:\n            return get_next_palindrome(n // 10 * 10 + 1)\n        return get_next_palindrome(n + 1)\n\n    return get_next_palindrome(num)\n\ndef main(argv):\n    num = int(argv[1])\n    print(next_smallest_palindrome(num))\n\nif __name__ == '__main__':\n    main(sys.argv)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    reverse = int(str(num)[::-1])\n    return num + 1 if reverse < num else num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input number is odd\n    if num % 2!= 0:\n        num -= 1\n        # Check if the resulting number is divisible by 10\n        if num % 10 == 0:\n            num += 9\n        else:\n            num += 10\n    else:\n        # Check if the resulting number is divisible by 10\n        if num % 10 == 9:\n            num -= 10\n        else:\n            num -= 1\n    # Convert the number to a string\n    num_str = str(num)\n    # Check if the number is divisible by 2\n    if num % 2 == 0:\n        # If it is, double the last digit\n        last_digit = int(num_str[-1]) * 2\n        # If the last digit is greater than 9, subtract 9 and double the next digit\n        if last_digit > 9:\n            next_digit = int(num_str[-2]) * 2 + 1\n        else:\n            next_digit = last_digit + 1\n        # Return the next smallest palindrome\n        return int(num_str[:-1] + str(next_digit))\n    else:\n        # If it's odd, double the last digit and return the resulting number\n        last_digit = int(num_str[-1]) * 2\n        if last_digit > 9:\n            return int(num_str[:-1] + str(last_digit - 9))\n        else:\n            return int(num_str[:-1] + str(last_digit + 1))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if input is a positive integer\n    if not isinstance(num, int) or num <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Convert input to string and reverse it\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n\n    # Initialize variables to keep track of palindrome properties\n    is_palindrome = True\n    is_next_palindrome = True\n    next_palindrome = 0\n\n    # Iterate through each digit of the reversed number, starting with the rightmost digit\n    for digit in reversed_num_str:\n        # If the current digit is 0, check if the next digit is also 0\n        if digit == '0':\n            if next_palindrome == 0:\n                is_next_palindrome = True\n            else:\n                is_next_palindrome = False\n        # If the current digit is 1, check if the next digit is also 9\n        elif digit == '1':\n            if next_palindrome == 9:\n                is_next_palindrome = True\n            else:\n                is_next_palindrome = False\n        # If the current digit is 9, check if the next digit is also 0\n        elif digit == '9':\n            if next_palindrome == 0:\n                is_next_palindrome = True\n            else:\n                is_next_palindrome = False\n        # If the current digit is any other number, check if the next digit is greater than it\n        elif int(digit) > next_palindrome:\n            is_next_palindrome = True\n        # If the current digit is less than or equal to the next digit, check if the next digit is also less than or equal to it\n        else:\n            is_next_palindrome = False\n        # Update the next palindrome if the current and next palindromes are both valid\n        if is_palindrome and is_next_palindrome:\n            next_palindrome = int(digit) * 10 + int(next_palindrome[::-1])\n\n        # Update the is_palindrome flag based on the current and next palindromes\n        is_palindrome = (next_palindrome == num)\n\n    # Return the next smallest palindrome\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert integer to a string\n    str_num = str(num)\n\n    # Initialize variables\n    is_palindrome = True\n    palindrome = \"\"\n    largest = 0\n\n    # Iterate through each character of the integer\n    for char in str_num:\n        # Add the character to the palindrome\n        palindrome += char\n\n        # Check if the palindrome is palindromic and greater than the current largest\n        if int(palindrome) > largest and str(int(palindrome)) == palindrome:\n            largest = int(palindrome)\n\n        # Check if the palindrome is not a palindrome\n        elif str(int(palindrome))!= palindrome:\n            is_palindrome = False\n            break\n\n        # Remove the first character of the palindrome\n        palindrome = palindrome[1:]\n\n    # If the palindrome is a palindrome greater than the current largest, return the integer value of the palindrome\n    if is_palindrome and int(palindrome) > largest:\n        return int(palindrome)\n\n    # If the palindrome is not a palindrome greater than the current largest, return the next smallest palindrome\n    else:\n        next_num = largest + 1\n        while True:\n            if str(next_num) == str(next_num)[::-1]:\n                return next_num\n            else:\n                next_num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    length = len(num_str)\n\n    # check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n\n    # check for even length palindromes\n    if length % 2 == 0:\n        # check for palindromes with even digits\n        for i in range(length // 2):\n            if int(num_str[i])!= int(num_str[length - 1 - i]):\n                return int(num_str[:i+1][::-1]) + int(num_str[length-i-1:length][::-1])\n        # check for palindromes with odd digits\n        for i in range(length // 2, -1, -1):\n            if int(num_str[i])!= int(num_str[length - 1 - i]):\n                return int(num_str[:i+1][::-1]) + int(num_str[length-i-1:length][::-1])\n\n    # check for odd length palindromes\n    else:\n        # check for palindromes with odd digits\n        for i in range(length // 2):\n            if int(num_str[i])!= int(num_str[length - 1 - i]):\n                return int(num_str[:i+1][::-1]) + int(num_str[length-i-1:length][::-1])\n        # check for palindromes with even digits\n        for i in range(length // 2, length // 2 + 1):\n            if int(num_str[i])!= int(num_str[length - 1 - i]):\n                return int(num_str[:i+1][::-1]) + int(num_str[length-i-1:length][::-1])"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    m = 10**(len(str(n)))-1\n    while m >= n:\n        palindrome = m\n        while palindrome % 10 == 0:\n            palindrome //= 10\n        palindrome = palindrome * 10 + n\n        if palindrome < m:\n            return palindrome\n        m -= 1\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    next_num = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", next_num)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is valid\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    \n    # Initialize the variables\n    left, right = 1, len(arr)\n    \n    # Loop until the left pointer is greater than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = left + (right - left) // 2\n        \n        # If the middle element is the kth element, return it\n        if arr[mid] == k:\n            return arr[mid]\n        \n        # If the middle element is greater than the kth element, update the right pointer\n        elif arr[mid] > k:\n            right = mid - 1\n        \n        # Otherwise, update the left pointer\n        else:\n            left = mid + 1\n    \n    # If the loop exits without finding the kth element, return an error message\n    return \"Element not found\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Error: k is greater than the length of the array.\"\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        if k == mid + 1:\n            return arr[mid]\n        elif k < mid + 1:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid+1:], k-mid-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        if k <= mid:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid:], k-mid)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if array is empty\n    if len(arr) == 0:\n        return None\n    # check if k is valid\n    elif k < 1 or k > len(arr):\n        return None\n    else:\n        # initialize variables\n        count = 0\n        curr_k = 1\n        # loop through array\n        for num in arr:\n            # check if k is found\n            if count == k - 1:\n                return num\n            count += 1\n            curr_k += 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid index\"\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left < right:\n            pivot = left + (right - left) // 2\n            if k == pivot + 1:\n                return arr[pivot]\n            elif k < pivot + 1:\n                right = pivot\n            else:\n                left = pivot + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left_result = kth_element(arr[:mid], k)\n        right_result = kth_element(arr[mid:], k - mid)\n        if left_result is None:\n            return right_result\n        elif right_result is None:\n            return left_result\n        else:\n            return arr[mid - left_result - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i].upper()\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    # Split the word into a list of lowercase words\n    words = word.split('_')\n    \n    # Create a new list to hold the camel case words\n    camel_case_words = []\n    \n    # Capitalize the first letter of each word\n    for i, word in enumerate(words):\n        if i == 0:\n            # First word: use it as is\n            camel_case_words.append(word.capitalize())\n        else:\n            # Subsequent words: capitalize the first letter and append it to the list\n            camel_case_words.append(word.capitalize())\n    \n    # Join the camel case words into a camel case string and return it\n    return ''.join(camel_case_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert the first letter of each word to uppercase and join them together\n    camel_case_word = ''.join([word.capitalize() for word in words[1:]])\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = words[0]\n    for word in words[1:]:\n        camel_word += word.capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            result += char.lower()\n        elif char.isupper():\n            result += \"_\" + char.lower()\n        else:\n            result += char\n    return result.lstrip(\"_\")"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:]]).title()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Splitting the word into individual words\n    words = word.split('_')\n    \n    # Capitalizing the first word\n    first_word = words[0].capitalize()\n    \n    # Converting the rest of the words to camel case\n    rest_of_words = []\n    for i in range(1, len(words)):\n        rest_of_words.append(words[i].capitalize())\n    \n    # Joining the camel case words back together\n    camel_case_word = first_word + ''.join(rest_of_words)\n    \n    # Returning the camel case word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the word to snake case\n    snake_case = word.replace('_','')\n    # Split the snake case into words\n    words = snake_case.split()\n    # Convert each word to camel case\n    camel_case = [word.capitalize() for word in words]\n    # Join the words back into a string\n    camel_case =''.join(camel_case)\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # calculate the number of rows and columns in the matrix\n    num_rows = n * (n+1) // 2\n    num_cols = m * (m+1) // 2\n    \n    # initialize a 2D matrix of zeros\n    matrix = [[0 for j in range(num_cols)] for i in range(num_rows)]\n    \n    # populate the matrix with 1's\n    for i in range(1, num_rows+1):\n        for j in range(1, num_cols+1):\n            matrix[i-1][j-1] = 1\n    \n    # initialize a 1D list to store the column indices of the matrix\n    column_indices = []\n    \n    # calculate the column indices and store them in the column_indices list\n    for j in range(1, num_cols+1):\n        col_sum = sum(matrix[i][j-1] for i in range(1, num_rows+1))\n        if col_sum == num_rows:\n            column_indices.append(j-1)\n    \n    # initialize a dictionary to store the row indices as keys and the column indices as values\n    row_dict = {}\n    for i in range(1, num_rows+1):\n        for j in column_indices:\n            if matrix[i-1][j] == 1:\n                row_dict[i-1] = j\n    \n    # calculate the Eulerian number a(n, m)\n    result = 1\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                result = result * (i+1)\n                continue\n            if i == 0:\n                result = result * (num_rows-j-1)\n                continue\n            if i == n-1:\n                result = result * (num_rows-j)\n                continue\n            result = result * (num_rows-row_dict[i])\n    \n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n\n    # Check if the given values of n and m are valid\n    if n <= 0 or m <= 0:\n        return \"Invalid input\"\n\n    # Initialize the values of a(0, 0) and a(n, m)\n    a00 = 1\n    am = 1\n\n    # Iterate from n-1 to 0 and from m-1 to 0\n    for i in range(n-1, -1, -1):\n        for j in range(m-1, -1, -1):\n            # Calculate the value of a(i, j)\n            aij = 2 * a00 + am\n            # Update the values of a(i, j) and a(0, 0) and a(n, m)\n            a00 = aij\n            am = am * (j+1) // (i+1)\n\n    # Return the value of a(n, m)\n    return am"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    paths = [[] for _ in range(n+1)]\n    for i in range(1, n+1):\n        paths[i] = [1]*m + [0]*(n-i) + [1]*m\n    paths[n] = [1]*m + [0]*(n+1-m) + [1]*m\n    return sum([sum(row) for row in paths])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += (i + m) * (i + m + 1) *... * (i + m + i)\n    return result / 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix\n    a = [[0] * (n+1) for i in range(m+1)]\n    # Populate the matrix\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1] + n*(i*(j-1))\n    # Calculate the Eulerian number\n    return a[m][n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables\n    a = 0\n    num_primes = 0\n    prime_count = 0\n\n    # Check if n is prime\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n    \n    # If n is prime, find a(n, m) and number of primes\n    if is_prime:\n        a = n / m\n        prime_count = 1\n    \n    # If n is not prime, check if m is prime\n    else:\n        is_prime = True\n        for i in range(2, m):\n            if m % i == 0:\n                is_prime = False\n                break\n        \n        # If m is prime, find a(n, m) and number of primes\n        if is_prime:\n            a = n / m\n            prime_count = 1\n        \n        # If m is not prime, check if both n and m are primes\n        else:\n            is_prime_n = True\n            is_prime_m = True\n            \n            # Find the largest prime factor of n\n            largest_n_factor = 1\n            for i in range(2, n):\n                if n % i == 0:\n                    if i > largest_n_factor:\n                        largest_n_factor = i\n            \n            # Find the largest prime factor of m\n            largest_m_factor = 1\n            for i in range(2, m):\n                if m % i == 0:\n                    if i > largest_m_factor:\n                        largest_m_factor = i\n            \n            # If both n and m are prime factors, find a(n, m) and number of primes\n            if largest_n_factor == 1 and largest_m_factor == 1:\n                a = n / m\n                prime_count = 1\n            \n            # If n and m are prime factors with different values, find a(n, m) and number of primes\n            else:\n                a = 0\n                prime_count = 0\n    \n    # Print the result\n    print(\"Eulerian number a(n, m):\", a)\n    print(\"Number of primes:\", prime_count)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a dictionary to store the values of a(n, m) for different values of n\n    eulerian_numbers = {0: 1}\n\n    # Loop until all possible values of n have been checked\n    while True:\n        # Find all possible values of n that can be added to the current value of n\n        possible_n = [n + i for i in range(1, m + 1)]\n\n        # Check if there are any more possible values of n that can be added to the current value of n\n        if not possible_n:\n            break\n\n        # Loop through the possible values of n\n        for num in possible_n:\n            # Check if the current value of n can be added to the value of n in the dictionary\n            if num in eulerian_numbers:\n                # Add the current value of n to the sum of the values of a(n, m) for the values of n in the dictionary\n                eulerian_numbers[num] += eulerian_numbers[n]\n            else:\n                # Add the current value of n to the sum of the values of a(n, m) for the current value of n\n                eulerian_numbers[num] = eulerian_numbers[n] + 1\n\n    # Return the final value of a(n, m)\n    return eulerian_numbers[m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return ((m - 1) * (n + m - 2) * eulerian_num(n - 1, m)) + (eulerian_num(n - 1, m - 1))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m == 1:\n        return 1\n    elif n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number a(0, 0) to 1\n    a = 1\n    # Initialize the remaining subproblems\n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            # Calculate the value of a(i, j)\n            if (i % 2 == 0 and j % 2 == 1) or (i % 2 == 1 and j % 2 == 0):\n                a *= i + j + 1\n            else:\n                a *= i + j\n    # Return the value of a(n, m)\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n\n    :param input_list: A list of lists.\n    :return: A list of sorted sublists of strings.\n    \"\"\"\n\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order using the sorted() function\n        sublist.sort()\n\n    # Return the input list sorted by sublist strings\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # check if the input is a tuple\n    if isinstance(test_tup, tuple):\n        # check if the input list is not empty\n        if test_list:\n            # convert the list to a tuple\n            test_list = tuple(test_list)\n            # append the list to the tuple\n            test_tup = test_tup + test_list\n            # return the updated tuple\n            return test_tup\n        else:\n            # return the original tuple\n            return test_tup\n    else:\n        # return an error message if the input is not a tuple\n        return 'Error: input should be a tuple'"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    new_tup = []\n    for i in test_list:\n        new_list.append(i)\n    for i in test_tup:\n        new_tup.append(i)\n    return new_list + new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new list that contains all the elements of the original list\n    new_list = test_list.copy()\n    # add the elements of the new list to the original tuple\n    test_tup = test_tup + tuple(new_list)\n    # return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Create a new list by concatenating the original list and the test tuple\n    new_list = test_list + test_tup\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Check if the given lists and tuples are valid\n    if not isinstance(test_list, list) or not isinstance(test_tup, tuple):\n        print(\"Error: Invalid input.\")\n        return\n    \n    # Append the given list to the given tuples\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)  # Convert test_list to list to modify it\n    test_tup = tuple(test_tup)  # Convert test_tup to tuple to modify it\n    test_tup = test_tup + test_list  # Append test_list to test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Check if test_list is a list and if test_tup is a tuple\n    if isinstance(test_list, list) and isinstance(test_tup, tuple):\n        # Create a new list with test_list and test_tup\n        new_list = test_list + test_tup\n        return new_list\n    else:\n        # Return an error message if test_list or test_tup are not valid\n        return \"Error: test_list and test_tup must be lists.\""
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # add the given list to the given tuples\n    test_list.extend(test_tup)\n    return test_list, test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # merge three lists into one list using merge sort\n    merged_list = merge_sort([num1, num2, num3])\n    return merged_list\n\ndef merge_sort(list_to_sort):\n    # base case: list has only one element or is empty\n    if len(list_to_sort) <= 1:\n        return list_to_sort\n    \n    # divide the list into two halves and sort them separately\n    mid = len(list_to_sort) // 2\n    left = list_to_sort[:mid]\n    right = list_to_sort[mid:]\n    \n    # sort each half recursively\n    left_sorted = merge_sort(left)\n    right_sorted = merge_sort(right)\n    \n    # merge the sorted halves into a single sorted list\n    return merge(left_sorted, right_sorted)\n    \ndef merge(left, right):\n    # base case: list of length 0 or 1\n    if len(left) == 0:\n        return right\n    if len(right) == 0:\n        return left\n    \n    # compare the first elements of the two lists and append the smaller one to the result list\n    if left[0] < right[0]:\n        result = [left[0]]\n        result.extend(left[1:])\n        return result\n    else:\n        result = [right[0]]\n        result.extend(right[1:])\n        return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge num1 and num2\n    num1_heap = list(heapq.merge(num1, num2))\n    \n    # Merge num1_heap and num3\n    heapq.heapify(num1_heap)\n    num3_heap = list(heapq.merge(num1_heap, num3))\n    \n    # Merge num3_heap and num2\n    return list(heapq.merge(num3_heap, num2))"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one list using heapq\n    merged_list = sorted(heapq.merge(num1, num2, num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Create a min-heap of the three input lists\n    min_heap = [heapq.merge(num1, num2)]\n    heapq.heapify(min_heap[0])\n    heapq.heappush(min_heap, heapq.merge(num3, min_heap[0]))\n\n    # Merge the min-heaps until we have a single sorted list\n    sorted_list = []\n    while len(min_heap) > 1:\n        sorted_list.extend(heapq.heappop(min_heap))\n        heapq.heapify(min_heap[0])\n\n    sorted_list.extend(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Use heapq to merge the three lists into a single sorted list\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Initialize the min-heap with the first three lists\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    # Initialize an empty list to store the merged sorted list\n    merged_list = []\n\n    # While there are still elements in the min-heaps\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        # Get the smallest element from each min-heap and append it to the merged list\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two smallest numbers in each list\n    heapq.heapify(num1)\n    heapq.heappush(num1, heapq.heappop(num2))\n    # Merge the remaining numbers in num1 and num3\n    heapq.heapify(num1)\n    heapq.heappush(num1, heapq.heappop(num3))\n    # Return the sorted list\n    return num1"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge num1 and num2\n    num_list = heapq.merge(num1,num2)\n    \n    # merge num_list and num3\n    merged_list = heapq.merge(num_list,num3)\n    \n    # convert merged_list to sorted list\n    sorted_list = list(heapq.merge(*merged_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge num1 and num2\n    num1.extend(num2)\n    # Merge num3 with num1\n    num1.extend(num3)\n    # Sort num1\n    num1.sort()\n    return num1"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # create a heap for num1 and num2\n    heap1 = []\n    for i in num1:\n        heapq.heappush(heap1, i)\n\n    heap2 = []\n    for i in num2:\n        heapq.heappush(heap2, i)\n\n    # merge the heaps\n    merged_heap = []\n    while len(heap1) > 0 and len(heap2) > 0:\n        if heapq.heappop(heap1) < heapq.heappop(heap2):\n            heapq.heappush(merged_heap, heapq.heappop(heap1))\n        else:\n            heapq.heappush(merged_heap, heapq.heappop(heap2))\n\n    # add the remaining elements of heap1 and heap2\n    merged_heap += heap1 + heap2\n\n    return merged_heap"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        # convert binary string to integer\n        num = int(s[i], 2)\n        # rotate binary string\n        for j in range(n):\n            num = num >> 1 | (num << 1) & 1\n        # check if rotated number is odd\n        if num & 1 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    count = 0 \n    for i in range(n): \n        s = s[::-1] \n    for i in range(len(s)): \n        if s[i] % 2!= 0: \n            count += 1 \n    return count "
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    # Helper function to calculate the parity of the binary number\n    def parity(binary): \n        count = 0 \n        for i in binary: \n            if i == '1': \n                count += 1 \n        return count % 2\n    \n    # Function to rotate the binary string\n    def rotate(binary): \n        n_bits = len(binary) \n        if n_bits % 2 == 0: \n            return binary[:n_bits//2] + binary[n_bits//2:] \n        else: \n            return binary[:n_bits//2] + '1' + binary[n_bits//2+1:] \n    \n    # Calculate the parity of the binary string after rotation n times\n    parity_list = [parity(rotate(s)) for _ in range(n)] \n    \n    # Count the number of odd numbers in the list\n    count = sum([1 for p in parity_list if p % 2!= 0])\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = ''.join([str(int(x)) for x in s])\n    odd_count = 0\n    \n    # rotating the binary string the given number of times\n    for i in range(n):\n        binary_string = binary_string[-1] + binary_string[:-1]\n        \n    # counting the number of odd numbers in the rotated binary string\n    for digit in binary_string:\n        if int(digit) % 2!= 0:\n            odd_count += 1\n            \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    # Convert binary string to a list of digits\n    s_list = [int(d) for d in s]\n\n    # Rotate the list n times\n    for i in range(n):\n        temp = s_list[0]\n        for j in range(len(s_list)-1):\n            s_list[j] = s_list[j+1]\n        s_list[-1] = temp\n\n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for d in s_list:\n        if d % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables\n    count = 0\n    i = 0\n    \n    # Convert string to binary\n    binary_s = bin(int(s,2))[2:]\n    \n    # Loop through each character in the binary string\n    while i < len(binary_s):\n        # If the character is odd, increment the count\n        if int(binary_s[i]) % 2!= 0:\n            count += 1\n        # Move the index to the next character\n        i += 1\n    \n    # Rotate the binary string the given number of times\n    for _ in range(n):\n        binary_s = binary_s[1:] + binary_s[0]\n    \n    # Loop through each character in the rotated binary string\n    while i < len(binary_s):\n        # If the character is odd, increment the count\n        if int(binary_s[i]) % 2!= 0:\n            count += 1\n        # Move the index to the next character\n        i += 1\n    \n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize variables\n    count = 0\n    prev = 0\n    # loop through the binary string n times\n    for i in range(n):\n        # calculate the new value of prev\n        if prev == 0:\n            prev = 1\n        else:\n            prev = 0\n        # count the odd numbers in the binary string\n        count += s.count(str(prev))\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Check if the input string is valid\n    if len(s) % 2 == 0:\n        return -1\n\n    # Initialize variables\n    odd_count = 0\n    temp = ''\n\n    # Rotate the binary string n times\n    for i in range(n):\n        temp = s[len(s)-1] + s[:len(s)-1]\n        s = temp\n\n    # Iterate over the binary string and count the odd numbers\n    for bit in s:\n        if bit == '1':\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    s: a binary string\n    n: the number of times to rotate the string\n\n    Returns:\n    number of odd numbers when rotating the string n times\n    '''\n\n    def rotate(s,n):\n        # split the string into a list of characters\n        chars = list(s)\n        # reverse the list\n        chars.reverse()\n        # join the characters back into a string\n        rotated = ''.join(chars)\n        return rotated\n\n    # calculate the length of the string\n    length = len(s)\n\n    # initialize a counter for odd numbers\n    count = 0\n\n    # loop through each character in the rotated string\n    for i in range(length):\n        # check if the character is odd\n        if int(s[i]) % 2!= 0:\n            # increment the counter\n            count += 1\n\n    # return the odd count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize a variable to count the odd numbers\n    count = 0\n    # initialize a list to store the binary values\n    binary_list = list(s)\n    # loop through the given number of times\n    for i in range(n):\n        # rotate the binary list by 1 position to the left\n        binary_list = binary_list[1:] + [binary_list[0]]\n        # loop through the binary list and count the odd numbers\n        for j in range(len(binary_list)):\n            if binary_list[j] == '1':\n                count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            intersection = set(nestedlist[i]) & set(nestedlist[j])\n            if intersection:\n                common_list.append(intersection)\n\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # initialize an empty set for common elements\n    common = set()\n    # iterate through all lists in nestedlist\n    for lst in nestedlist:\n        # add all elements from each list to common set\n        common.update(lst)\n    # convert common set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Iterate through the nested lists\n    for lst in nestedlist:\n        # Iterate through the elements in the list\n        for elem in lst:\n            # Add the element to the set of common elements\n            common.add(elem)\n\n    # Return the set of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store the common elements\n    common = set()\n    # iterate through each list in the nested list\n    for sublist in nestedlist:\n        # iterate through each element in the sublist\n        for element in sublist:\n            # add the element to the set if it's not already there\n            if element not in common:\n                common.add(element)\n    # convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the common elements\n    common = set()\n\n    # Iterate through each list in the nested list\n    for lst in nestedlist:\n        # Iterate through each element in the list\n        for elem in lst:\n            # Add the element to the set if it's not already there\n            if elem not in common:\n                common.add(elem)\n\n    # Return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Define a function to check if two lists contain common elements\n    def common(list1, list2):\n        # Create a set for storing common elements\n        common_elements = set()\n        # Loop through the first list\n        for element in list1:\n            # If the element is in the second list and not already in the set, add it to the set\n            if element in list2 and element not in common_elements:\n                common_elements.add(element)\n        # Return the set of common elements\n        return common_elements\n\n    # Initialize an empty set for storing common elements\n    common_elements = set()\n\n    # Loop through each nested list in the input list\n    for sublist in nestedlist:\n        # If the sublist is not empty, get the set of common elements with the previous set of common elements\n        if sublist:\n            common_elements = common(sublist, common_elements)\n\n    # Return the set of common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # convert nestedlist to a set to remove duplicates\n    set_nestedlist = set(nestedlist)\n    # convert set to a list for easier iteration\n    list_nestedlist = list(set_nestedlist)\n    # initialize an empty set to store common elements\n    common = set()\n    # iterate over the list and find common elements\n    for item in list_nestedlist:\n        if all(item in sublist for sublist in nestedlist):\n            common.add(item)\n    # convert common set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # creating an empty set to store the common elements\n    common = set()\n    # iterating over the nested list\n    for i in nestedlist:\n        # iterating over the elements in the current list\n        for j in i:\n            # checking if the element is already in the common set\n            if j in common:\n                # if yes, adding it to the result set\n                common.add(j)\n    # returning the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in common_elements:\n                common_elements.remove(element)\n            else:\n                common_elements.add(element)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if not i:\n            return False\n\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Check whether all dictionaries in a list are empty or not.\n    \n    Parameters:\n    list1 (list): A list of dictionaries.\n    \n    Returns:\n    bool: True if all dictionaries in the list are empty, False otherwise.\n    \"\"\"\n    for dic in list1:\n        if dic:  # check whether the dictionary is empty or not\n            return False  # if at least one dictionary is not empty, return False\n        else:\n            return True  # if all dictionaries are empty, return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n\n    :param nums: a tuple of positive integers\n    :return: an integer representation of the tuple\n    \"\"\"\n    # Convert the tuple to a list so that we can iterate over it\n    nums_list = list(nums)\n\n    # Initialize the accumulator to 0\n    acc = 0\n\n    # Iterate over the list of integers\n    for num in nums_list:\n        # Check if the integer is greater than the current accumulator\n        if num > acc:\n            # If it is, add it to the accumulator\n            acc += num\n        # If the integer is equal to the accumulator, there is no need to add it again, so we can skip it\n        else:\n            continue\n\n    # Return the final accumulator value\n    return acc"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = (result << 1) + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of positive integers and returns their sum as an integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    for i, row in enumerate(test_list):\n        for j, item in enumerate(row):\n            if isinstance(item, (int, float)):\n                test_list[i][j] = float(item)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n                row.append(float(item))\n            except ValueError:\n                row.append(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_sublist.append(float(element))\n            except ValueError:\n                pass\n        result.append(new_sublist)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (str, float, int)) and '.' not in element:\n                try:\n                    float(element)\n                except ValueError:\n                    return False\n    return True"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, (int, float, str)):\n                try:\n                    element = float(element)\n                except ValueError:\n                    pass\n            elif isinstance(element, list):\n                element = list_to_float(element)\n            row[row.index(element)] = element\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for row in test_list:\n        for elem in row:\n            try:\n                float(elem)\n                row[row.index(elem)] = float(elem)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Use a list comprehension to iterate over all elements in the list\n    float_list = [float(item) for item in test_list if isinstance(item, (int, float, str, bool, list, tuple))]\n    return float_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Split the string on the space character\n    string_list = string.split()\n    # Return the list of strings\n    return string_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n\n    # Initialize a hash table to store the frequency of each element in the array\n    freq = [0] * (max(arr) + 1)\n\n    # Count the frequency of each element in the array\n    for i in range(n):\n        freq[arr[i]] += 1\n\n    # Find the element that appears only once in the array\n    for i in range(n):\n        if freq[arr[i]] == 1:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            return unique_element\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n            \n    for num, freq in count.items():\n        if freq == 1:\n            return num\n            \n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the indices of each element in the array\n    indices = {}\n    # Iterate over the array and add the index to the dictionary for each element\n    for i, num in enumerate(arr):\n        if num in indices:\n            # If the element appears more than once, it is the only element that appears only once\n            return num\n        else:\n            indices[num] = i\n    # If the loop completes without returning, the element that appears only once is not in the array\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    # Initialize two pointers, one at the beginning and the other at the end of the array\n    left, right = 0, len(arr) - 1\n    \n    # While there are unequal elements in the left and right pointers\n    while left < right:\n        # If the left element is equal to the right element, move the left pointer to the right\n        if arr[left] == arr[right]:\n            left += 1\n        else:\n            # If the left element is not equal to the right element, swap the elements and move the left pointer to the right\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    \n    # At this point, the left pointer should be pointing to the only element in the array that appears only once\n    return arr[left]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a set to keep track of unique elements\n    unique_set = set()\n    \n    # Iterate through the array\n    for num in arr:\n        # If the element is not in the set, add it and its count to the set\n        if num not in unique_set:\n            unique_set.add(num)\n            unique_set.add(num, arr.count(num))\n    \n    # Return the element with only one occurrence in the sorted array\n    return unique_set.pop()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    for key in count:\n        if count[key] == 1:\n            return key\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)): # check if array has duplicates\n        return \"Array has duplicates.\"\n    else:\n        for i in range(len(arr)):\n            if arr[i]!= arr[arr.index(arr[i])]: # check if duplicate exists\n                return arr[i]\n        return \"Element appears only once in the array.\""
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    result = []\n    \n    # Iterate through the list\n    for i in range(len(list1)):\n        # Check if the current element is greater than the previous element\n        if list1[i][0] > list1[i-1][0]:\n            # Update the current product\n            current_product *= list1[i][0]\n        else:\n            # Update the current product\n            current_product = 1\n        \n        # Update the maximum product\n        if abs(current_product) > max_product:\n            max_product = abs(current_product)\n        \n        # Append the current product to the result list\n        result.append(current_product)\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = float('-inf')\n    max_pair = float('-inf')\n    min_pair = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n                max_pair = list1[i], list1[j]\n            elif abs(list1[i][1] * list1[j][0]) > max_product and abs(list1[i][1] * list1[j][0]) > abs(list1[i][0] * list1[j][1]):\n                max_product = abs(list1[i][1] * list1[j][0])\n                max_pair = list1[i], list1[j]\n            elif abs(list1[i][0] * list1[j][1]) > abs(list1[i][1] * list1[j][0]):\n                max_pair = list1[i], list1[j]\n\n            if list1[i][0] < min_pair[0]:\n                min_pair = list1[i]\n            if list1[j][0] < min_pair[0]:\n                min_pair = list1[j]\n\n    return max_product, max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n            if product < 0:\n                product = list1[j] * list1[i]\n                if product > max_product:\n                    max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize variables\n    max_product = float('-inf')\n    temp = 0\n\n    # loop through the list of tuples\n    for tup in list1:\n        # loop through the tuple elements\n        for elem in tup:\n            # update the absolute value of the product\n            temp = abs(elem * temp)\n            # update the maximum product\n            if temp > max_product:\n                max_product = temp\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize max_product and current_product to negative infinity\n    max_product = float('-inf')\n    current_product = float('-inf')\n\n    # Loop through the list and calculate the maximum absolute product between numbers in pairs\n    for i in range(len(list1)):\n        # Calculate the absolute difference between current and next numbers in the pair\n        difference = abs(list1[i][0] - list1[i+1][0])\n        # Update the current_product and max_product accordingly\n        current_product = max(list1[i][0] * list1[i+1][0], list1[i][1] * list1[i+1][1])\n        max_product = max(current_product, max_product)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            absolute_product = max(pair)\n            max_product = max(max_product, absolute_product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all numbers up to the limit\n    numbers = list(range(1, limit+1))\n    # initialize variables to keep track of the sum and count of amicable numbers\n    sum_amicable = 0\n    count_amicable = 0\n    \n    # loop over all numbers\n    for num in numbers:\n        # check if the number is amicable with any other number in the list\n        for other_num in numbers:\n            if num!= other_num and num % other_num == 0:\n                # if it is, check if it is also a palindrome\n                if int(str(num)[::-1]) == num:\n                    # if it is, add it to the sum and increment the count\n                    sum_amicable += num\n                    count_amicable += 1\n                    # break out of the inner loop since we've found a pair\n                    break\n    \n    # return the sum of the amicable numbers\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to store the sum of amicable numbers and the list of amicable numbers\n    amicable_sum = 0\n    amicable_list = []\n\n    # Loop through the range of numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the number to the sum and the list of amicable numbers\n            amicable_sum += num\n            amicable_list.append(num)\n\n    # Return the sum of the amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Create a list to store amicable numbers\n    amicable = []\n\n    # Loop through numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n\n        # Check if the number is amicable\n        if num == sum_of_divisors(num):\n            amicable.append(num)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable)\n\n\ndef sum_of_divisors(num):\n    '''\n    Write a function to sum all divisors of a specified number.\n    '''\n\n    # Create a list to store divisors\n    divisors = []\n\n    # Loop through numbers from 1 to the square root of the number\n    for i in range(1, int(num**0.5)+1):\n\n        # Check if the number is a divisor of the number\n        if num % i == 0:\n            # If it is, add it to the divisors list\n            divisors.append(i)\n            divisors.append(num//i)\n\n    # Return the sum of all divisors\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit number and returns the sum of all the amicable numbers from 1 to that limit.\n    \"\"\"\n    # Create a list of all the numbers from 1 to the limit\n    numbers = list(range(1, limit+1))\n\n    # Loop through each number in the list\n    for i in numbers:\n        # Check if the number is a prime number\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            # If it is, check if it is an amicable number\n            if i+i == limit:\n                print(i)\n            elif i+i in numbers:\n                print(i, i+i)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables\n    amicable_sum = 0\n    num = 0\n    # Loop through numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if i is a amicable number\n        if i!= num and i == sum(divisors(num)):\n            # Add i to amicable_sum\n            amicable_sum += i\n        # Update num for next iteration\n        num = i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n\n    # Function to check if a number is amicable or not\n    def is_amicable(num):\n        \"\"\"\n        Check if a number is amicable or not.\n        \"\"\"\n        if num < 2:\n            return False\n\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n\n        return True\n\n    # Initialize a list to store all amicable numbers\n    amicable_numbers = []\n\n    # Iterate over all numbers from 1 to the specified limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the number to the list of amicable numbers\n            amicable_numbers.append(num)\n\n    # Sum up all the amicable numbers\n    total = sum(amicable_numbers)\n\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        # check if i is amicable to any number between 1 and i-1\n        for j in range(1, i):\n            if i % j == 0 and i / j == j:\n                break\n        else:\n            amicable_numbers.append(i)\n\n    # sum all amicable numbers\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    a, b = 0, 1\n    while b <= num // 2:\n        if num % b == 0:\n            a, b = b, num // b\n            if a == b:\n                return True\n    return False\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    A function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(limit - i) and i!= limit - i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_amicable_number(n):\n    # Check if the number is divisible by any of the first 10 numbers\n    for i in range(1, 11):\n        if n % i == 0:\n            return False\n    # Check if the sum of the square of each of the first 10 numbers is equal to the square of the number\n    for i in range(1, 11):\n        if n - i * i == i * i:\n            return True\n    return False\n\ndef amicable_numbers_sum(limit):\n    amicable_numbers = []\n    for n in range(1, limit + 1):\n        if is_amicable_number(n):\n            amicable_numbers.append(n)\n    return sum(amicable_numbers)\n\nlimit = 10000\nprint(amicable_numbers_sum(limit))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle.real"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the modulus\n    modulus = cmath.sqrt(a**2+b**2)\n    # calculate the argument in radians\n    arg = cmath.phase(complex(a,b))\n    # convert the argument from radians to degrees\n    angle = round(arg*180/cmath.pi,2)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # create a complex number from the inputs\n    z = a + b*1j\n    \n    # get the angle of the complex number using the argument function\n    angle = cmath.phase(z)\n    \n    # return the angle in degrees\n    return angle * 180.0 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + bj\n    angle = cmath.phase(c)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n-1):\n        diff = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = dp[i][1] = 0\n    for i in range(2, n+1):\n        if string[i-1] == '0':\n            dp[i][0] = dp[i-1][1] + 1\n        else:\n            dp[i][0] = dp[i-1][0] + 1\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if string[start] == '0':\n                dp[end][1] = max(dp[end][1], dp[start][0] + dp[end-1][1])\n            else:\n                dp[end][1] = max(dp[end][1], dp[start][1] + dp[end-1][0])\n    return max(dp[n][0], dp[n][1])"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n-1):\n        zero_count = 0\n        one_count = 0\n\n        for j in range(i, n):\n            if string[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n\n            diff = abs(zero_count - one_count)\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if string[i] == '0':\n            dp[i][i] = 0\n        else:\n            dp[i][i] = 1\n            \n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if string[i] == '0':\n                dp[i][j] = dp[i+1][j]\n            else:\n                dp[i][j] = dp[i][j-1] + 1\n                \n    return max(dp[0][n-1], dp[0][n-2])"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    length = len(string)\n\n    # Iterate through all possible sub-strings\n    for i in range(length):\n        for j in range(i+1, length+1):\n            # Calculate the difference between the number of 0s and number of 1s in the sub-string\n            diff = count_ones(string[i:j]) - count_zeros(string[i:j])\n            # Update the maximum difference if this difference is greater\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\ndef count_zeros(binary_string):\n    '''\n    Count the number of 0s in the binary string.\n    '''\n    count = 0\n    for char in binary_string:\n        if char == '0':\n            count += 1\n    return count\n\n\ndef count_ones(binary_string):\n    '''\n    Count the number of 1s in the binary string.\n    '''\n    count = 0\n    for char in binary_string:\n        if char == '1':\n            count += 1\n    return count"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    # initialize maximum difference to be 0\n    max_diff = 0\n    \n    # loop through all possible substrings\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            # if the substring is not empty and has 0s and 1s, calculate difference and update maximum difference if necessary\n            if j-i > 0 and string[i:j].count('0') == string[i:j].count('1'):\n                diff = max(0, string[i:j].count('0') - string[i:j].count('1'))\n                max_diff = max(max_diff, diff)\n    \n    # return maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i, n):\n            count_0 = count_1 = 0\n            for k in range(i, j+1):\n                if string[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] - count_0 + count_1)\n\n    return dp[0][n-1]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n        else:\n            length = 0\n        \n        if i == 0:\n            max_diff = length\n        else:\n            diff = abs(length - max_diff)\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in string]\n    # Initialize the maximum difference to be the length of the string\n    max_diff = len(string)\n    # Loop through all possible sub-strings of the bits list\n    for i in range(len(bits)):\n        # If the sub-string has even length, check both ends for 0s and 1s\n        if i % 2 == 0:\n            if bits[i] == 0:\n                if bits[i+1] == 0:\n                    max_diff = min(max_diff, abs(i-i+1))\n        else:\n            if bits[i] == 1:\n                if bits[i+1] == 1:\n                    max_diff = min(max_diff, abs(i-i+1))\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of the common divisors of two given numbers.\n\n    Parameters:\n    a (int): a number\n    b (int): another number\n\n    Returns:\n    int: the sum of the common divisors\n    \"\"\"\n\n    # Find the common divisors of a and b\n    common_divisors = find_common_divisors(a, b)\n\n    # Calculate the sum of the common divisors\n    total = 0\n    for divisor in common_divisors:\n        total += divisor\n\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    def common_divisors(n):\n        '''\n        Returns a list of all common divisors of n.\n        '''\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def sum_common_divisors(a, b):\n        '''\n        Returns the sum of common divisors of a and b.\n        '''\n        divisors_a = common_divisors(a)\n        divisors_b = common_divisors(b)\n        return sum(set(divisors_a) & set(divisors_b))\n\n    return sum_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # find the largest number\n    max_num = max(a, b)\n\n    # initialize a dictionary to store the factors of the max number\n    factors = {}\n    for i in range(1, max_num + 1):\n        if max_num % i == 0:\n            factors[i] = max_num // i\n\n    # initialize a variable to store the sum of common divisors\n    sum_common_divisors = 0\n\n    # iterate through each number from 1 to the second number\n    for i in range(1, b + 1):\n        # check if the current number is a factor of both numbers\n        if i in factors.values() and i in factors.keys():\n            # add the common divisor to the sum of common divisors\n            sum_common_divisors += i\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Check if both numbers are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0):\n        print(\"Both numbers must be positive integers.\")\n        return None\n    \n    # Find the common divisors of both numbers\n    divisors = set()\n    divisors_a = set(divisors_of(a))\n    divisors_b = set(divisors_of(b))\n    divisors = divisors_a & divisors_b\n    \n    # Calculate the sum of the common divisors\n    sum_of_common_divisors = sum(divisors)\n    \n    # Return the sum of the common divisors\n    return sum_of_common_divisors\n\n\ndef divisors_of(n):\n    '''\n    Write a python function to find the common divisors of a given number.\n    '''\n    # Create a list to store the divisors of the number\n    divisors = []\n    \n    # Iterate from 1 to the square root of the number\n    for i in range(1, int(n ** 0.5) + 1):\n        # Check if the number is divisible by the current divisor\n        if n % i == 0:\n            # If yes, add it to the list of divisors\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    \n    # Return the list of divisors\n    return divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two positive integers as input and returns their sum of common divisors.\n    \"\"\"\n    # Find the common divisors of a and b\n    divisors = [i for i in range(1, b+1) if b % i == 0 and a % i == 0]\n\n    # Return the sum of common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    divisor = 1\n\n    while divisor <= a:\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisors.append(divisor)\n        divisor += 1\n\n    result = sum(common_divisors)\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", result)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Function to find common divisors of two numbers\n    def common_divisors(num1, num2):\n        divisors = []\n        for i in range(1, num1 + 1):\n            if (num1 % i == 0) and (num2 % i == 0):\n                divisors.append(i)\n        return divisors\n\n    # Find common divisors of the two given numbers\n    div1 = common_divisors(a, b)\n    div2 = common_divisors(b, a)\n\n    # Find the sum of common divisors of the two given numbers\n    result = sum(div1, div2)\n\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n    if a == 0 or b == 0:\n        return 'Invalid input'\n\n    common_divisors = [i for i in range(1, max(a, b)+1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\nprint(sum(12,18)) # Output: 4"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor = 1\n    while divisor <= a:\n        if a % divisor == 0 and b % divisor == 0:\n            a //= divisor\n            b //= divisor\n        else:\n            divisor += 1\n    \n    return a + b\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        temp = y\n        y = x % y\n        x = temp\n        product += x\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"Result:\", result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    carry = 0\n    \n    while y!= 0:\n        remainder = x % 10\n        result = result + remainder * y\n        x = x // 10\n        y = y // 10\n        carry = carry + x\n        \n    if carry > 0:\n        result = result + carry\n    \n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(result)"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes a list of words and returns a list of words that are longer than n characters.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # Split the string into individual words\n    long_words = [word for word in words if len(word) > n] # Create a list of words longer than n characters\n    return long_words # Return the list of longer words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix has a square size\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # Check for duplicates in the row\n            duplicates = [x for x in my_matrix[i] if x == my_matrix[i][j]]\n            if len(duplicates) > 1:\n                return False\n            # Check for duplicates in the column\n            duplicates = [x for x in my_matrix[j] if x == my_matrix[i][j]]\n            if len(duplicates) > 1:\n                return False\n            # Check for duplicates in the diagonal\n            duplicates = [x for x in my_matrix[i] if x == my_matrix[j][i]]\n            if len(duplicates) > 1:\n                return False\n            # Check for duplicates in the anti-diagonal\n            duplicates = [x for x in my_matrix[i] if x == my_matrix[i][len(my_matrix)-1-j]]\n            if len(duplicates) > 1:\n                return False\n            \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize variables to store the sum of the rows, columns and diagonals\n    row_sum = sum(sum(row) for row in my_matrix)\n    col_sum = sum(sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix)))\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Compare the row sum, column sum and diagonal sum with each other\n    if row_sum == col_sum == diag_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Define the sum of each row and column\n    row_sum = sum(my_matrix[i] for i in range(len(my_matrix)))\n    col_sum = sum(my_matrix[i] for i in range(len(my_matrix[0])))\n    \n    # Check if the sum of each row and column is equal to the sum of the matrix\n    if row_sum == sum(sum(my_matrix[i][j] for j in range(len(my_matrix[0]))) for i in range(len(my_matrix))) or \\\n       col_sum == sum(sum(my_matrix[i][j] for j in range(len(my_matrix[0]))) for i in range(len(my_matrix[0]))) or \\\n       row_sum == col_sum == len(my_matrix) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has 3x3 dimensions\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check if each row and column contains only distinct numbers\n    for row in my_matrix:\n        if len(set(row))!= 3:\n            return False\n    for col in range(len(my_matrix[0])):\n        if len(set(my_matrix[row][col] for row in range(len(my_matrix))))!= 3:\n            return False\n    \n    # Check if the matrix is a magic square\n    for i in range(3):\n        for j in range(3):\n            if my_matrix[i][j]!= sum(my_matrix[k][j] for k in range(3) if k!= i) - i:\n                return False\n            if my_matrix[i][j]!= sum(my_matrix[j][k] for k in range(3) if k!= i) - i:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Define the size of the matrix\n    size = len(my_matrix)\n\n    # Check if the matrix is a magic square\n    for i in range(size):\n        # Check if the first row is a magic square\n        if all(my_matrix[j][i] == i+1 for j in range(size)):\n            return True\n        # Check if the first column is a magic square\n        if all(my_matrix[i][j] == i+1 for j in range(size)):\n            return True\n        # Check if the right-diagonal is a magic square\n        if all(my_matrix[i][j] == i+1 for j in range(i, size)):\n            return True\n        # Check if the left-diagonal is a magic square\n        if all(my_matrix[i][size-1-j] == i+1 for j in range(size-i-1)):\n            return True\n\n    # If none of the conditions are met, return False\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all rows are equal\n    for i in range(len(my_matrix)):\n        if all(my_matrix[i][j] == my_matrix[0][0] for j in range(len(my_matrix[0]))):\n            return True\n    # Check if all columns are equal\n    for j in range(len(my_matrix[0])):\n        if all(my_matrix[i][j] == my_matrix[0][0] for i in range(len(my_matrix))):\n            return True\n    # Check if diagonals are equal\n    if all(my_matrix[i][i] == my_matrix[0][0] for i in range(len(my_matrix))):\n        return True\n    if all(my_matrix[i][len(my_matrix)-1-i] == my_matrix[0][0] for i in range(len(my_matrix))):\n        return True\n    # Check if all elements are distinct\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == my_matrix[0][0]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_square = []\n\n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            row_sum = 0\n            col_sum = 0\n            for k in range(rows):\n                row_sum += my_matrix[i][k]\n            for k in range(cols):\n                col_sum += my_matrix[k][j]\n            if row_sum == cols or col_sum == cols or row_sum + col_sum == 16:\n                magic_square.append(my_matrix[i][j])\n            elif my_matrix[i][j] in magic_square:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix has all unique elements\n    seen = set()\n    for row in my_matrix:\n        for elem in row:\n            if elem in seen:\n                return False\n            seen.add(elem)\n    \n    # Check if the matrix is a magic square\n    magic_sum = 15\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        if row_sum!= magic_sum or col_sum!= magic_sum:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    total_sum = rows*cols*10**5\n    \n    for row in my_matrix:\n        for col in row:\n            if col!= 1 and col!= rows*cols:\n                total_sum -= col\n                \n    return total_sum == 0"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # check if all elements in the matrix are unique\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n    # check if the sum of each row is equal to the sum of each column\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(col) for col in zip(*my_matrix)]\n    if row_sum!= col_sum:\n        return False\n    # check if the sum of the diagonals is equal to the sum of the other diagonal elements\n    diag1_sum = sum([row[i] for i in range(len(my_matrix))])\n    diag2_sum = sum([row[i] for i in range(len(my_matrix)-1, -1, -1)])\n    if diag1_sum!= diag2_sum:\n        return False\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # Count frequency of each item in the list\n    for num in nums:\n        count_dict[num] += 1\n        \n    # Find the item with maximum frequency\n    for item, freq in count_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = max(freq, key=freq.get)\n    max_freq = max(freq.get(max_num), key=lambda x: freq.get(max_num).index(x))\n\n    return max_num, max_freq"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # iterate through the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with the maximum frequency and return it\n    max_freq = max(freq.values())\n    return [item for item, freq in freq.items() if freq == max_freq]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Use a defaultdict to count the occurrences of each item in the list\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    # Find the item with the highest count\n    max_count = max(counts.values())\n    max_item = None\n    for item, count in counts.items():\n        if count == max_count:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    \n    max_num = 0\n    max_count = 0\n    for num in nums:\n        if count[num] > max_count:\n            max_num = num\n            max_count = count[num]\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Initialize a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Count the frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    # Return the item with maximum frequency\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    This function finds the item with maximum frequency in a given list.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = [key for key, value in freq_dict.items() if value == max_freq][0]\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n    for item, freq in freq.items():\n        if freq == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    reversed_string = \"\"\n    for char in string:\n        if char in vowels:\n            reversed_string = char + reversed_string\n        else:\n            reversed_string = reversed_string + char\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    vowel_list.reverse()\n    return ''.join(vowel_list)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_index = [i for i, c in enumerate(str1) if c in vowels]\n    reversed_str = \"\"\n    for index in vowels_index:\n        reversed_str += str1[index]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_vowels = []\n    for char in str1:\n        if char in vowels:\n            if len(reversed_vowels) == 0 or reversed_vowels[-1] == char:\n                reversed_vowels.append(char)\n    return ''.join(reversed_vowels)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(char)\n    result.reverse()\n    return \"\".join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    new_str = \"\"\n    for char in str1:\n        if char in vowels_list:\n            new_str = char + new_str\n        else:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result)[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    result = []\n    \n    # iterate through the string\n    for char in str1:\n        \n        # if the character is a vowel, add it to the result and increment the vowel count\n        if char.lower() in vowels:\n            result.append(char)\n            vowel_count += 1\n            \n    # reverse the result list and return the reversed string\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = []\n    for char in str1:\n        if char.lower() in vowels and char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n            result.append(char)\n    result = ''.join(result[::-1])\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string using the join() method and a comma as a separator.\n    return ','.join(str(x) for x in tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for i in tup1:\n        string += str(i)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_tup = \"\"\n    for i in tup1:\n        string_tup += str(i)\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Using tuple unpacking to convert the tuple to a list and then join them into a string\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Define a string variable to hold the converted tuple\n    string_tup = \"\"\n\n    # Loop through each item in the tuple\n    for item in tup1:\n        # Add the item to the string variable\n        string_tup += str(item) + \" \"\n\n    # Remove the last space from the string variable\n    string_tup = string_tup[:-1]\n\n    # Return the string variable as the output\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''\n    for i in range(len(tup1)):\n        str_tup += str(tup1[i]) +''\n    return str_tup[:-1]"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum variable to 0\n    sum_of_negatives = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            sum_of_negatives += num\n    # Return the sum of the negative numbers\n    return sum_of_negatives"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n**2 + 1) * (2*n + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    num = (n * (2 * n - 1)) // 2\n    return num\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Initialize variables\n    i = 1\n    j = 1\n    hex_num = 0\n    \n    # Calculate nth hexagonal number\n    while i <= n:\n        hex_num += j\n        i += 1\n        j += 1\n    \n    # Return nth hexagonal number\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def bin_to_hex(bin_num):\n        hex_num = ''\n        for i in range(6, -1, -1):\n            hex_num += hex_dict[bin_num % 16]\n            bin_num //= 16\n        return hex_num\n\n    hex_dict = {'0': '0', '1': '1', '2': '2', '3': '3', '4': '4', '5': '5', '6': '6', '7': '7', '8': '8', '9': '9', 'A': 'A', 'B': 'B', 'C': 'C', 'D': 'D', 'E': 'E', 'F': 'F'}\n\n    # Convert decimal to binary\n    decimal = n\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    # Convert binary to hexadecimal\n    hex_num = bin_to_hex(int(binary, 2))\n\n    # Return the nth hexagonal number\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (2 * n - 1)) + hexagonal_num(n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n\n    :param n: The index of the hexagonal number to find.\n    :type n: int\n    :return: The nth hexagonal number.\n    :rtype: int\n    \"\"\"\n    # Convert n to the hexagonal number\n    hex_num = (3 * n * n) + (2 * n)\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer as input and returns the nth hexagonal number.\n    \"\"\"\n    if n % 2 == 0:\n        return n * (2 * n - 1)\n    else:\n        return n * (2 * n + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count_arr = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count_arr[nums.index(num)] += 1\n\n    non_zero_count = len(nums) - sum(zero_count_arr)\n    if non_zero_count == 0:\n        return 0\n    return zero_count_arr[0] / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')  # create an integer array to store the count of zeros\n    ones = array('i')   # create another integer array to store the count of ones\n    \n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            ones.append(1)\n    \n    non_zeros = len(nums) - sum(zeros)\n    \n    if non_zeros == 0:\n        return 0\n    else:\n        return zeros[0] / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    \n    if zeros == 0:\n        return 0\n    else:\n        return non_zeros / zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array of zeros of same size as input array\n    zeros = array('i', [0]*len(nums))\n    \n    # iterate through input array and increment zero counter for each non-zero integer\n    for num in nums:\n        if num!= 0:\n            zeros[nums.index(num)] += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    non_zero_count = len(nums) - sum(zeros)\n    zero_ratio = zeros[0]/non_zero_count\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        nums (list): An array of integers.\n\n    Returns:\n        float: A float representing the ratio of zeroes to non-zeroes in the array.\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n    else:\n        return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    non_zeros = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            non_zeros.append(1)\n\n    non_zero_count = len(non_zeros)\n    zero_count = len(zeros)\n\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize the array of zeros and ones to 0\n    zeros = array('i', [0] * len(nums))\n    ones = array('i', [0] * len(nums))\n    \n    # Iterate through the array and count the number of zeros and ones\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n        else:\n            ones[nums.index(num)] += 1\n    \n    # Calculate the ratio of zeros to non-zeroes\n    ratio = zeros[0] / (zeros[0] + ones[0])\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes in the input list.\n    \"\"\"\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = sum(nums == 0)\n    nonzeros = len(nums) - zeros\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros / non_zeros"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is a power of 2\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n & (n - 1) == 0:\n        return True\n    \n    # Check if the number can be written as sum of non-zero powers of 2\n    power_of_two = 1\n    while power_of_two * 2 <= n:\n        if n % power_of_two == 0:\n            return False\n        power_of_two *= 2\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Step 1: Check if n is a power of 2\n    if n & (n - 1) == 0:\n        # Step 2: Check if there is a power of 2 in n\n        for i in range(1, n):\n            if n & (1 << i) == 0:\n                # Step 3: Check if there is a power of 2 in n minus the power of 2 raised to i\n                if n & (1 << (i - 1)) == 0:\n                    return True\n                else:\n                    break\n        return False\n    else:\n        # Step 4: If n is not a power of 2, then check if there is a power of 2 in n\n        for i in range(1, 32):\n            if n & (1 << i) == 0:\n                # Step 5: Check if there is a power of 2 in n minus the power of 2 raised to i\n                if n & (1 << (i - 1)) == 0:\n                    return True\n                else:\n                    break\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        print(n, \"can be represented as sum of powers of 2.\")\n        return True\n    else:\n        # Check if the number is a sum of powers of 2\n        if n == 1:\n            print(n, \"cannot be represented as sum of powers of 2.\")\n            return False\n        elif n == 2:\n            print(n, \"cannot be represented as sum of powers of 2.\")\n            return False\n        elif n == 4:\n            print(n, \"can be represented as sum of powers of 2.\")\n            return True\n        elif n == 8:\n            print(n, \"can be represented as sum of powers of 2.\")\n            return True\n        elif n == 16:\n            print(n, \"can be represented as sum of powers of 2.\")\n            return True\n        elif n == 32:\n            print(n, \"can be represented as sum of powers of 2.\")\n            return True\n        elif n == 64:\n            print(n, \"can be represented as sum of powers of 2.\")\n            return True\n        else:\n            # Check if the number is a sum of powers of 2\n            for i in range(1, int(n**0.5)+1):\n                if n == 2**i:\n                    print(n, \"can be represented as sum of powers of 2.\")\n                    return True\n                elif n == 2**i*2:\n                    print(n, \"cannot be represented as sum of powers of 2.\")\n                    return False\n            print(n, \"cannot be represented as sum of powers of 2.\")\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Initialize variables\n    is_power = True\n    current_power = 0\n    count = 0\n    temp = n\n\n    # Check if the number is greater than 0\n    if n == 0:\n        return False\n\n    # Iterate through the number and check for non-zero powers of 2\n    while temp > 1:\n        if temp % 2 == 0:\n            current_power += 1\n            count += 1\n            temp //= 2\n        else:\n            temp //= 2\n\n    # Check if the number can be represented as sum of non-zero powers of 2\n    if is_power:\n        if count == 0:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n-i == 0:\n            return True\n        if n-i!= 0:\n            sum += 1\n            if 2**sum <= n-i:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n\n    is_power_of_two = lambda x: (x!= 0) and ((x & (x - 1)) == 0)\n\n    if is_power_of_two(n):\n        return True\n    else:\n        return is_Sum_Of_Powers_Of_Two(n - 1)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count <= 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n\n    return count % 2 == 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    # Check if the given number is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Iterate through the bits of the number\n    while n > 0:\n        # Check if the current bit is set to 1\n        if n & 1:\n            # Add 2^i to the sum for the current power of 2\n            i = 0\n            while (n & 1) == 0:\n                sum += 2 ** i\n                n >>= 1\n                i += 1\n        # Shift the number to the right by 1\n        n >>= 1\n\n    # If the sum is equal to the original number, then the number can be represented as sum of non-zero powers of 2\n    if sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n < 0:\n        return False\n\n    # Check if the sum of non-zero powers of 2 is less than or equal to n\n    for i in range(1, n+1):\n        if (i & (i-1)) == 0 and (i & (-i))!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # Approximation of the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2*pi*r\n    print(\"The circumference of a circle of radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of the circle is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # calculating the circumference of the circle\n    print(\"The circumference of the circle is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # The formula for calculating the circumference of a circle is pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened.append(num)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for item in sublist:\n            result.add(item)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result += extract_singly(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result += extract_singly(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for sub_item in item:\n            flattened_list.append(sub_item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    unique_numbers = set(flattened_list)\n    return list(unique_numbers)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function sorts a list of numbers using the Pancake Sort algorithm.\n    The Pancake Sort algorithm is a variation of the Bubble Sort algorithm.\n    In the Pancake Sort algorithm, instead of sorting the list in increasing order,\n    it sorts it in decreasing order by placing a 'pancake' on each element\n    that is out of order. The 'pancake' is then moved to the end of the list,\n    and so on, until the entire list is sorted in decreasing order.\n\n    Parameters:\n    nums (list): A list of numbers to be sorted.\n\n    Returns:\n    list: The sorted list of numbers.\n    \"\"\"\n    n = len(nums)\n\n    # Start with a pancake in the middle of the list\n    start = n // 2\n\n    # Iterate through each pancake\n    while start > 0:\n\n        # Find the largest number in the pancake and its index\n        max_index = start\n        max_num = nums[start]\n        for i in range(start, n):\n            if nums[i] > max_num:\n                max_index = i\n                max_num = nums[i]\n\n        # Swap the largest number with the first element of the pancake\n        nums[start], nums[max_index] = nums[max_index], nums[start]\n\n        # Move the pancake to the right by one position\n        start -= 1\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # get the index of the largest element\n        largest = i\n        for j in range(i, n):\n            if nums[j] > nums[largest]:\n                largest = j\n        # swap the largest element with the element at index i\n        nums[i], nums[largest] = nums[largest], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def sort_by_pancakes(nums, k):\n        if k == 1:\n            return nums\n        else:\n            pivot = nums[k-1]\n            i = 0\n            for j in range(k):\n                if nums[j] > pivot:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    i += 1\n            nums[i], nums[k-1] = nums[k-1], nums[i]\n            return sort_by_pancakes(nums, i)\n\n    pancakes = []\n    for i in range(len(nums)):\n        pancakes.append(len(nums)-i)\n    return sort_by_pancakes(nums, len(nums))"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n    The Pancake Sort algorithm is a non-comparison based sorting algorithm that is based on the principle of sorting by the effect of mirroring.\n    The key idea behind the algorithm is to start by sorting the entire list in ascending order, and then reflect the sorted list back to its original position, by swapping elements one by one.\n    The process is repeated until the sorted list is fully sorted in ascending order.\n    The time complexity of the Pancake Sort algorithm is O(n^2), which is not very efficient for large lists. However, it is efficient for small lists and works well for most practical purposes.\n    '''\n    n = len(nums)\n\n    # perform pancake sort\n    for i in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # swap the maximum element with the first element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n        # reflect the sorted part of the list in reverse order\n        # starting from the second element, swap with the element above it\n        for j in range(i, 0, -1):\n            # calculate the index of the element to swap\n            k = (j-1) % n\n            nums[j], nums[k] = nums[k], nums[j]\n\n        # the sorted part is now fully sorted, so we can exit the loop\n        if i == max_idx:\n            break"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    sorted_nums = merge_sort(nums)\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Reverse the list in place\n    nums.reverse()\n\n    # Iterate over the list from the second element to the last element\n    for i in range(1, len(nums)):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    # Reverse the list again to get the sorted elements\n    nums.reverse()\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Helper function to reverse the order of elements in a list\n    def reverse_order(nums):\n        return nums[::-1]\n\n    # Helper function to swap elements in a list\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n\n    # Helper function to sort a sub-list of elements\n    def sort_sublist(nums, start, end):\n        # Base case: sub-list has only one element or has zero elements\n        if start == end:\n            return\n\n        # Partition the sub-list using the last element as pivot\n        pivot = nums[end]\n        i = start - 1\n        for j in range(start, end):\n            if nums[j] < pivot:\n                i += 1\n                swap(nums, i, j)\n\n        # Move pivot to its correct position\n        swap(nums, i + 1, end)\n\n        # Recursively sort the two sub-lists\n        sort_sublist(nums, start, i + 1)\n        sort_sublist(nums, i + 2, end)\n\n    # Sort the list using the pancake method\n    reverse_order(nums)\n    sort_sublist(nums, 0, len(nums) - 1)\n    return reverse_order(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the first i elements\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first i element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    # Initialize the pancake_count list to hold the number of pancakes needed to sort the list.\n    pancake_count = [0] * len(nums)\n\n    # Initialize the swapped flag to False.\n    swapped = False\n\n    # Iterate through each element in the list.\n    for i in range(len(nums) - 1, 0, -1):\n        # Calculate the index of the next pancake to be swapped.\n        pancake_index = min(i, pancake_count[i-1])\n\n        # If the next pancake is greater than the current element, swap them.\n        if nums[i] < nums[pancake_index]:\n            nums[i], nums[pancake_index] = nums[pancake_index], nums[i]\n            swapped = True\n\n        # Update the pancake count.\n        pancake_count[i-1] -= pancake_index\n\n        # If no swaps were made in this iteration, the list is already sorted.\n        if not swapped:\n            break\n\n    # Return the sorted list.\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the remaining unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the unsorted part of the list\n        for j in range(i, n-1, -1):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists and returns the number of items that are identical in the same position of each list.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list3[i] == list3[j]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists in it.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, tuple): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if isinstance(item, list): \n            count += 1 \n    return count \n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    # Initialize max_diff as the absolute difference between the first and second elements\n    max_diff = abs(arr[1] - arr[0])\n\n    # Loop through the rest of the array\n    for i in range(2, len(arr)):\n        # Calculate the absolute difference between the current element and the next one\n        diff = abs(arr[i] - arr[i+1])\n\n        # Update max_diff if the current difference is greater than max_diff\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n\n    # Initialize max_diff to the first element of the array\n    max_diff = abs(arr[0] - arr[1])\n\n    # Loop through the rest of the array\n    for i in range(2, len(arr)):\n        # Calculate the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i+1])\n\n        # Update max_diff if the difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if abs(diff) > max_diff:\n            max_diff = abs(diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize maximum absolute difference as 0\n    max_diff = 0\n    \n    # Iterate through the array and calculate the absolute difference between each element and the current maximum difference\n    for i in range(1, len(arr)):\n        diff = abs(arr[i]-arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize the maximum difference variable to zero\n    max_diff = 0\n    \n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Loop through each element in the array again, except for the current element\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the current and next elements\n            abs_diff = abs(arr[i]-arr[j])\n            \n            # If the absolute difference is greater than the current maximum difference, update the maximum difference\n            if abs_diff > max_diff:\n                max_diff = abs_diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function will find the solution of the equation ax + by = n.\n    If there is no solution, it will return None.\n    \"\"\"\n\n    # If the denominator is 0, there is no solution\n    if b == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive, negative or zero\n    if discriminant > 0:\n        # Calculate the two solutions\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Check if the solutions are distinct\n        if x1!= x2:\n            return (x1, x2)\n        else:\n            return None\n        \n    elif discriminant == 0:\n        return (-b)/(2*a)\n    \n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a!= 0:\n        return None\n    x = n // a\n    if b == 0:\n        return None\n    y = (n - x*a) // b\n    if (x, y) == (0, 0):\n        return None\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find the values of x and y that give the desired value of n\n    x = (-b + n) // a\n    y = (-a * x - b) // a\n    \n    if a * x * x + b * y * y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a is zero or b is zero\n    if a == 0 or b == 0:\n        return None\n\n    # calculate d and e such that ad + be = n\n    d = b * b - 4 * a * n\n    if d < 0:\n        return None\n    elif d == 0:\n        x = -b / (2 * a)\n        return (x, x)\n    else:\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns integers x and y that satisfy ax + by = n as a tuple, or None if no solution exists.\n    \"\"\"\n    # Initialize variables\n    x = 0\n    y = 0\n    \n    # Iterate until n is reached\n    while n > 0:\n        # Find the quotient and remainder of n/a and n/b\n        q = n // a\n        r = n % a\n        \n        # If the remainder is 0, then x = q and n = 0\n        if r == 0:\n            x = q\n            n = 0\n        # Otherwise, n = r + a*q\n        else:\n            n = r + a*q\n            \n        # Continue until n is less than or equal to 0\n        if n <= 0:\n            break\n        \n        # Find the quotient and remainder of n/b and n/a\n        q = n // b\n        r = n % b\n        \n        # If the remainder is 0, then y = q and n = 0\n        if r == 0:\n            y = q\n            n = 0\n        # Otherwise, n = r + b*q\n        else:\n            n = r + b*q\n            \n        # Continue until n is less than or equal to 0\n        if n <= 0:\n            break\n    \n    # If x and y are both non-zero, then return them as a tuple\n    if x and y:\n        return (x, y)\n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x0 = y0 = -b / (2 * a)\n    if x0 == 0:\n        return None\n    for i in range(1, n + 1):\n        x = x0 - (i - 1) * a / (n + 1)\n        y = -b / a + (i - 1) * b / (n + 1)\n        if x == y:\n            return (int(x), int(x))\n        elif x < y:\n            return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # find the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # check if there is a solution\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return (x, x)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize x and y variables\n    x = 0\n    y = 0\n\n    # Keep iterating until a solution is found\n    while True:\n        # Calculate the current value of x and y\n        x = (a * x) + b\n\n        # If the current value of x equals n, we have found a solution\n        if x == n:\n            return (x, n // a)\n\n        # If the current value of x is greater than n, there is no solution\n        if x > n:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive or negative infinity\n    if d < 0:\n        return None\n    \n    # If the discriminant is zero, there is only one solution\n    if d == 0:\n        x1 = x2 = None\n        if b > 0:\n            x1 = -n / b\n        elif b < 0:\n            x2 = -n / b\n        else:\n            # b is zero\n            x1 = -n\n            x2 = -n\n        return (x1, x2)\n    \n    # If the discriminant is non-zero, there are two solutions\n    else:\n        x1 = (-b + math.sqrt(d)) / (2*a)\n        x2 = (-b - math.sqrt(d)) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are 0, then there is only one solution\n    if a == 0 and b == 0:\n        return (n // b, n % b)\n    \n    # check if a and b are negative, then there is no solution\n    if a < 0 or b < 0:\n        return None\n    \n    # check if a is 1, then check for any solution using the quadratic formula\n    if a == 1:\n        x1 = -b / (2 * a)\n        x2 = x1 * x1 - n / (2 * a)\n        return (x1, x2) if x1 < x2 else (x2, x1)\n    \n    # general case, use the generalized quadratic formula\n    else:\n        discriminant = b * b - 4 * a * n\n        if discriminant > 0:\n            x1 = (-b - discriminant ** 0.5) / (2 * a)\n            x2 = (-b + discriminant ** 0.5) / (2 * a)\n            return (x1, x2) if x1 < x2 else (x2, x1)\n        elif discriminant == 0:\n            return (-b / (2 * a), -b / (2 * a))\n        else:\n            return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # loop through each element in list1\n    for i in range(len(list1)):\n        # check if the element is present in list2\n        if list1[i] in list2:\n            # remove the element from list1\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a set of the elements in list2\n    set2 = set(list2)\n    # iterate through list1\n    for i in range(len(list1)):\n        # if the element at index i is present in set2, remove it from list1\n        if list1[i] in set2:\n            del list1[i]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    list1.remove(list2[0])\n    for item in list2:\n        list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list2:\n        if i in list1:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Remove all the elements present in list2 from list1\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n\n    # Return the modified list\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n // 2 + 1, n - n // 2 - 1, -1)) + (n - 2 * n // 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize sum to 0\n    sum = 0\n\n    # loop through numbers from 0 to n // 2\n    for i in range(n // 2):\n        # calculate the sum of the series\n        sum += (n - 2*i)\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return (n + sum_series(n // 2 - 1))\n    else:\n        return (n + sum_series(n // 2))\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return None\n    else:\n        sum = 0\n        i = 0\n        while i <= n // 2:\n            sum += n - 2 * i\n            i += 1\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2):\n        s += n - 2*i\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def helper(i, total):\n        if i == 0:\n            return total\n        else:\n            return helper(i - 1, total + (n - 2 * i))\n    return helper(n // 2, 0)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2 * i >= 0:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 2*i + sum_series(n-i)) for i in range(n//2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (2 * math.tan(math.pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter of the polygon\n    p = (s * l) / 2\n\n    # Calculate the area of the polygon using Heron's formula\n    area = abs(p * (tan(pi / l)))\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l * i\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - 2 * l + 1) * l) / (4 * tan(pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon using Heron's formula\n    area = (s * l * tan(pi/l)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += tan(angle) * s\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l) / (2*pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the side of the polygon\n    side = s * tan(pi / l)\n\n    # calculate the area of the polygon\n    area = side * l\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the length of a side of the polygon\n    side_len = s/l\n    \n    # calculate the area of the polygon using the formula:\n    # A = (s/2) * (tan(pi/l))^2\n    area = (s/2) * (tan(pi/l)**2)\n    \n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n \n    div1 = sum([i for i in range(1, int(math.sqrt(n))+1) if n%i == 0])\n    div2 = sum([i for i in range(1, int(math.sqrt(n))+1) if n//i == int(n/i)])\n    # Check if the sum of the divisors is the same \n    if div1 == div2: \n        print(\"The sum of the divisors of\", n, \"is\", div1) \n    else: \n        print(\"The sum of the divisors of\", n, \"is not\", div1) "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find all the divisors of n \n    divisors = [] \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i) \n            if i!= n//i: \n                divisors.append(n//i) \n    # check if the sum of the divisors is the same \n    if sum(divisors) == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    return True\n\nprint(div_sum(6)) # False\nprint(div_sum(24)) # True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the sum of divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            div_sum += i + n // i\n    return div_sum == n "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Compute the sum of the divisors of n\n    div_sum = sum([i for i in range(1, n+1) if n % i == 0])\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(num):\n        '''\n        Returns the sum of the divisors of a given number.\n        '''\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n    \n    def gcd(a, b):\n        '''\n        Returns the greatest common divisor of two numbers.\n        '''\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    \n    div1 = sum_divisors(n)\n    div2 = sum_divisors(div_sum(n))\n    gcd_val = gcd(div1, div2)\n    \n    if div1 == div2 and gcd_val == 1:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # check if n is even\n    if n % 2 == 0:\n        print(f\"The sum of the divisors of {n} is: {n//2}\")\n        return True\n    else:\n        # check if n is odd\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                print(f\"The sum of the divisors of {n} is: {n//i + n//(i*i)}\")\n                return True\n        print(f\"The sum of the divisors of {n} is: {n//2 + n//3 + n//4 + n//5}\")\n        return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    def sum_of_divisors(num):\n        \"\"\"\n        Helper function to calculate the sum of all divisors of a number.\n        \"\"\"\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if i!= num // i:\n                    divisors.append(num // i)\n        return sum(divisors)\n\n    # Calculate the sum of the divisors of the given number\n    div_sum = sum_of_divisors(n)\n\n    # Check if the sum of the divisors of the two numbers is the same\n    if div_sum == n**2:\n        print(f\"{n} has perfect square divisors.\")\n    else:\n        print(f\"{n} has divisors of {div_sum}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n//i\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the sum of divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n//i\n    \n    return div_sum == n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    This function takes a string as input and returns the number of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for char in str1:\n        if char.lower() in english_alphabet:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n\n    # Initialize variables for counting the number of occurrences\n    count = 0\n    prev_char = None\n\n    # Loop through the string and count the number of occurrences\n    for char in str1:\n        # Check if the current character is the same as the previous character\n        if char == prev_char:\n            count += 1\n        else:\n            prev_char = char\n\n    # Return the count of occurrences\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1.lower():\n        if char in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to make case insensitive comparison\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of each character in the English alphabet\n    alphabet_counts = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is in the English alphabet\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            # If the character is already in the dictionary, increment its count by 1\n            if char in alphabet_counts:\n                alphabet_counts[char] += 1\n            # Otherwise, add the character to the dictionary with a count of 1\n            else:\n                alphabet_counts[char] = 1\n    \n    # Initialize the count of characters that occur at the same position in the string as in the English alphabet\n    same_position_count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is already in the dictionary and its count is 1\n        if str1[i] in alphabet_counts and alphabet_counts[str1[i]] == 1:\n            # Increment the count of characters that occur at the same position in the string as in the English alphabet\n            same_position_count += 1\n    \n    # Return the count of characters that occur at the same position in the string as in the English alphabet\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    count = 0\n    \n    for i in range(26):\n        for j in range(len(str1)):\n            if str1[j].lower() == chr(i+97):\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # Define a dictionary to store the count of characters at each position in the English alphabet (case insensitive)\n    char_count = {'a':0, 'b':0, 'c':0, 'd':0, 'e':0, 'f':0, 'g':0, 'h':0, 'i':0, 'j':0, 'k':0, 'l':0,'m':0, 'n':0, 'o':0, 'p':0, 'q':0, 'r':0,'s':0, 't':0, 'u':0, 'v':0, 'w':0, 'x':0, 'y':0, 'z':0}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase to count it in both uppercase and lowercase\n        char_lc = char.lower()\n        \n        # Check if the character is in the dictionary\n        if char_lc in char_count:\n            # Increment the count of the character in the dictionary\n            char_count[char_lc] += 1\n            \n    # Loop through the dictionary and print the count of characters at each position in the English alphabet (case insensitive)\n    for char, count in char_count.items():\n        print(char, count)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Define the English alphabet as a string\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    # Initialize a counter for the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is in the English alphabet, check if it is at the same position in the alphabet as the current character\n        if char in alphabet and alphabet.index(char) == alphabet.index(str1[count]):\n            # If it is, increment the counter\n            count += 1\n    # Return the counter\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase and remove non-alphabetic characters\n    str1 = ''.join(filter(str.isalpha, str1.lower()))\n    # Initialize the counter to 0\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the current character is not at the same position as the next letter in the alphabet, increment the counter\n        if (i+1) % 26!= str1.index(str1[i]):\n            count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_dict = {}\n\n    for char in alphabet:\n        count_dict[char] = 0\n\n    for char in str1:\n        char = char.lower()\n        if char in count_dict:\n            count_dict[char] += 1\n\n    return count_dict"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    # Count the number of odd numbers in the list\n    odd_count = sum(1 for x in A if x % 2!= 0)\n    # Initialize the count of even pairs to zero\n    even_count = 0\n    # Iterate over the list\n    for i in range(len(A)):\n        # Check if the sum of the i-th element and all the remaining elements is even\n        if (A[i] + sum(A[j] for j in range(i+1, len(A)))) % 2 == 0:\n            even_count += 1\n    # Return the count of even pairs\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n should be a positive integer\")\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # calculate the power of 2 greater than or equal to n\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n    \n    # return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Initialize result to the smallest power of 2 greater than or equal to n.\n    result = 1\n    \n    # Loop until result is greater than or equal to 2^64.\n    while result < 2**64:\n        \n        # Check if result is a power of 2.\n        if result == 2**32:\n            result = 2**64\n        else:\n            result <<= 1\n    \n    # Return result.\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary form and count the number of 1's in it.\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    # The count variable stores the number of 1's in the binary form of n.\n    # Now, we can calculate the next power of 2 by shifting left by count bits.\n    return 1 << count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Initialize a variable to keep track of the current power of 2\n    power = 1\n    \n    # Loop until the power of 2 is greater than or equal to n\n    while power < n:\n        power *= 2\n    \n    # Return the power of 2 found\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): a number\n\n    Returns:\n    int: the smallest power of 2 greater than or equal to n\n    \"\"\"\n    while n & (n - 1): # check if n is a power of 2\n        n += 1\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer `n` and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n < 1:\n        return 1\n    else:\n        return 2 ** (n-1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(1, 32):\n        if i * 2 ** i >= n:\n            return i * 2 ** i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n = max(n, 1) # ensure that n is positive\n    n -= 1 # make n a power of 2\n    n |= n >> 1 # round n up to the nearest power of 2\n    n |= n >> 2 # round n up to the nearest power of 2\n    n |= n >> 4 # round n up to the nearest power of 2\n    n |= n >> 8 # round n up to the nearest power of 2\n    n |= n >> 16 # round n up to the nearest power of 2\n    n += 1 # increment n to the next power of 2\n    return n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list of numbers and a number x as input.\n    It returns the number of occurrences of x in the list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(lst, elem):\n    count = 0\n    for i in lst:\n        if i == elem:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in a list a and a number x as input and returns the number of occurrences of x in a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two parameters: the list a and the number x.\n    It returns the number of occurrences of x in a list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, num):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_val = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum_val += list1[i]\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if the range is valid\n    if m > n:\n        return \"Invalid range. First index must be less than or equal to second index.\"\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices. Both indices must be valid indices in the list.\"\n\n    # Initialize the sum variable\n    sum_value = 0\n\n    # Loop through the list and add the values in the specified range\n    for i in range(m, n+1):\n        sum_value += list1[i]\n\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # check if indices are valid\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n    \n    # initialize the sum to zero\n    total_sum = 0\n\n    # iterate over the range of indices\n    for i in range(m, n+1):\n        total_sum += list1[i]\n\n    # return the sum\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Invalid input. The start index should be less than or equal to the end index.\"\n    elif m < 0 or n >= len(list1):\n        return \"Invalid input. The start and end indices should be within the range of the list.\"\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n < 0 or m >= len(list1) or n >= len(list1):\n        return \"Invalid indices.\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    result = 0\n    for i in range(m, n+1):\n        result += list1[i]\n    return result"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= n:\n        raise ValueError(\"The second index must be greater than or equal to the first index.\")\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a * math.sin(math.pi / 5)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return round(perimeter, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a * math.sin(math.pi/5)"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 4\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while True:\n        start = s.find('std', start)\n        if start == -1:\n            break\n        count += 1\n        start += 3  # skipping the'std' itself\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # initialize a set to store unique data types\n    data_types = set()\n    # loop through each element of the tuple\n    for item in test_tuple:\n        # check if the data type of the element is already in the set\n        if type(item) not in data_types:\n            # if not, add it to the set\n            data_types.add(type(item))\n        # if all the data types are same, return True\n        elif type(item) not in data_types:\n            return True\n    # if all the elements have same data types, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize a variable to store the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n\n    # Loop through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # If the element data type is not the same as the first element, return False\n        if type(element)!= data_type:\n            return False\n    # If all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for i in range(len(test_tuple)):\n        types.append(type(test_tuple[i]))\n    if len(set(types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = [type(x) for x in test_tuple]\n    return all(x == types[0] for x in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = [type(i) for i in test_tuple]\n    return all(t == types[0] for t in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the first element of the tuple\n    first_element = type(test_tuple[0])\n    # iterate through the rest of the tuple\n    for element in test_tuple[1:]:\n        # check if the element has same data type as the first element\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # Get the first element's data type\n    for item in test_tuple:\n        if type(item)!= data_type: # If any item has a different data type\n            return False # Return False because data types are not the same\n    return True # Return True because all items have the same data type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if all the elements in tuple are of same data type\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(x, type(test_tuple[0])) for x in test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count of x to 0\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is equal to x, increment count\n        if arr[i] == x:\n            count += 1\n\n        # If count is greater than n/2, return True\n        if count > n//2:\n            return True\n\n        # If count becomes equal to 0, reset it to 0\n        if count == 0:\n            count = 0\n\n    # If the loop completes without finding a majority element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Initialize the count and candidate variables\n    count = 0\n    candidate = None\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n\n        # If the count is greater than n/2, set the candidate to the current element\n        elif count > n//2:\n            candidate = arr[i]\n\n        # If the count is less than n/2, reset the count to 0\n        else:\n            count = 0\n\n    # If the candidate is still None, return False\n    if candidate is None:\n        return False\n\n    # If the candidate is not equal to x, return True\n    elif candidate!= x:\n        return True\n\n    # If the candidate is equal to x, return False\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Initialize a count variable to keep track of the number of times x occurs\n    count = 0\n\n    # Loop through the array, checking if x occurs more than n/2 times\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # If x occurs more than n/2 times, return True\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize count to 0 and sum to 0\n    count = 0\n    sum = 0\n    \n    # Loop through the array and update count and sum accordingly\n    for num in arr:\n        if num == x:\n            count += 1\n        sum += num\n        \n        # If count is equal to n/2, return True\n        if count == n/2:\n            return True\n    \n    # If no majority element is found, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif arr[i] < x:\n            count -= 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize the count of occurrences of x as 0\n    count = 0\n    \n    # Initialize the left and right pointers of the array\n    left = 0\n    right = n-1\n    \n    # Loop through the array until the count reaches n/2\n    while count < n//2:\n        # If the element at the left pointer is equal to x, increment the count\n        if arr[left] == x:\n            count += 1\n        \n        # If the element at the right pointer is equal to x, decrement the count\n        elif arr[right] == x:\n            count -= 1\n        \n        # Move the left pointer to the right\n        left += 1\n        \n        # Move the right pointer to the left\n        right -= 1\n    \n    # If the count is equal to n/2, then x is the majority element\n    if count == n//2:\n        return True\n    \n    # Otherwise, x is not the majority element\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        if n & 1 == 1: \n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= (n - 1)  # clear the least significant bit set to 1\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1  # check if the last bit is 1\n        n >>= 1  # remove the last bit from n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n!= 0: \n        count += n & 1 \n        n = n >> 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with all odd index characters removed.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:  # if the index is odd\n            result += str[i]  # add the character to the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    new_str = ''\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Args:\n    str (str): The given string.\n\n    Returns:\n    str: A new string with the odd index values removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(string):\n    return ''.join(string[i] for i in range(len(string)) if i % 2 == 1)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(str)\n    \n    # Initialize an empty list to store the odd-indexed characters\n    odd_list = []\n    \n    # Loop through each character in the list\n    for i in range(len(char_list)):\n        # If the index of the character is odd, add it to the odd_list\n        if i % 2 == 1:\n            odd_list.append(char_list[i])\n    \n    # Convert the odd_list to a string and return it\n    return ''.join(odd_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for i in range(len(str)):\n        # If the index of the character is odd, append it to the result string\n        if i % 2!= 0:\n            result += str[i]\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_indices = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_indices.append(i)\n    odd_indices.sort(reverse=True)\n    for i in odd_indices:\n        str = str[:i] + str[i+1:]\n    return str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(string):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2!= 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function finds the minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Check if the input numbers are integers\n    if not all(isinstance(x, int) for x in (a, b, c)):\n        raise ValueError('All inputs must be integers.')\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Return the minimum number\n    return sorted_numbers[0]"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # if a is smaller than b and c, return a\n    if a < min(b, c): \n        return a \n    # if b is smaller than c, return b\n    elif b < c: \n        return b \n    # if c is smaller than a, return c\n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Iterate through each bit of the given number\n    for i in range(l-1,r):\n        # If the bit is set, return False\n        if n & (1<<i):\n            return False\n\n    # If all the bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Convert the given range to a list of binary strings\n    range_list = [bin(i)[2:].zfill(32) for i in range(l, r+1)]\n    \n    # Iterate through the list of binary strings and check if all the bits are set or not\n    for binary_string in range_list:\n        if binary_string.count('1') < len(binary_string):\n            return False\n    \n    # If all the bits are set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters: n (the given integer), l (the lower limit of the range) and r (the upper limit of the range)\n    and returns True if all the bits are set in the given range, False otherwise.\n    \"\"\"\n    # Initialize a variable to count the number of unset bits\n    unset_bits = 0\n\n    # Loop through all the bits in the integer from left to right\n    for i in range(l, r+1):\n        # Check if the current bit is set or not\n        if (n & (1 << i)) == 0:\n            # If the bit is not set, increment the count of unset bits\n            unset_bits += 1\n\n    # If all the bits are unset in the given range, return True\n    if unset_bits == 0:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three integers n, l and r as input and returns True if all the bits in the range [l,r] are set to 1.\n    \"\"\"\n    if r == 0:\n        return n & (1 << l) == (1 << l)\n    else:\n        if (n & (1 << l)) == 0:\n            return all_Bits_Set_In_The_Given_Range(n, l + 1, r)\n        else:\n            return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if i & n:  # if i has any set bit\n            return False  # return False\n    return True  # if all bits are unset in the range return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a variable to store the count of unset bits\n    count = 0\n    # loop through all the bits in the given range\n    for i in range(l, r+1):\n        # if the i-th bit is unset, increment the count by 1\n        if n & (1 << i) == 0:\n            count += 1\n    # if all the bits are unset, return True, else return False\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n\n    # Find the bitwise AND of n and l (i.e., mask with the same binary representation as l)\n    mask = n & l\n    # If the result is 0, all bits are unset in the given range\n    if mask == 0:\n        return True\n\n    # If the number of bits set in n is less than the number of bits set in l,\n    # it means that n is not a subset of l\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range to a binary string\n    range_binary = bin(l)[2:] + '-' + bin(r)[2:]\n\n    # Calculate the range length\n    range_length = len(range_binary)\n\n    # Iterate through the binary string and check whether all bits are unset or not\n    all_unset = True\n    for i in range(range_length):\n        # Get the current bit\n        current_bit = int(range_binary[i])\n\n        # If current bit is 1, then it means that the current bit is set.\n        # So, we need to check all the bits set in the range.\n        if current_bit == 1:\n            # Calculate the current range start and end\n            current_range_start = (l >> i) << i\n            current_range_end = (r >> i) << i\n\n            # Iterate through the bits set in the current range and check whether all of them are unset or not\n            all_unset = False\n            for j in range(current_range_start, current_range_end+1):\n                # If any of the bits in the current range is set, then we need to check all the bits set in the range.\n                if bin(j)[2:].startswith('1'):\n                    all_unset = True\n                    break\n            # If all the bits in the current range are unset, then we don't need to check any more bits in the range.\n            if all_unset:\n                break\n\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three integer parameters: n, l and r.\n    n is the number which we are checking if all the bits are unset in the range from l to r.\n    l is the starting index of the range.\n    r is the ending index of the range.\n    \"\"\"\n    # Loop through all the bits from the starting index to the ending index\n    for i in range(l, r + 1):\n        # Check if the bit is set or not\n        if n & (1 << i) == 0:\n            # If the bit is not set, return False\n            return False\n    # If all the bits are set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 2 ** n - 1\n    count = 0\n    for i in range(l, r+1):\n        count += bin(i).count('1')\n    return count == mask"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # Count the number of negative and positive elements in the array\n    neg_count = sum(1 for elem in arr if elem < 0)\n    pos_count = len(arr) - neg_count\n    \n    # Count the number of elements needed to fill the remaining n elements\n    total_count = n + neg_count + pos_count\n    \n    # Initialize an empty list to hold the re-ordered elements\n    result = []\n    \n    # Add negative elements to the result list in their sorted order\n    neg_idx = 0\n    while neg_idx < neg_count:\n        result.append(arr[neg_idx])\n        neg_idx += 1\n        \n    # Add the remaining positive elements to the result list in their sorted order\n    pos_idx = neg_count\n    while pos_idx < total_count:\n        result.append(arr[pos_idx])\n        pos_idx += 1\n        \n    # Add the remaining negative elements to the result list in their sorted order\n    neg_idx = total_count\n    while neg_idx < len(arr):\n        result.append(arr[neg_idx])\n        neg_idx += 1\n        \n    # Return the re-ordered array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    while neg_count > 0 and pos_count > 0:\n        if neg_count > pos_count:\n            max_num = arr[n-1]\n            for i in range(n-1):\n                if arr[i] < 0 and arr[i] > max_num:\n                    max_num = arr[i]\n            arr[n-1], arr[max_num] = arr[max_num], arr[n-1]\n            neg_count -= 1\n            pos_count -= 1\n        else:\n            max_num = arr[0]\n            for i in range(1, n):\n                if arr[i] > 0 and arr[i] > max_num:\n                    max_num = arr[i]\n            arr[0], arr[max_num] = arr[max_num], arr[0]\n            neg_count -= 1\n            pos_count -= 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    pos = [x for x in arr[:n] if x > 0]  # extract positive elements\n    neg = [x for x in arr[:n] if x < 0]  # extract negative elements\n    mid = [x for x in arr[:n] if x == 0]  # extract 0 elements\n\n    # sort the positive elements\n    pos.sort(reverse=True)\n\n    # merge the sorted positive and negative elements\n    result = pos + neg + mid\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while i < n and j < len(arr):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        else:\n            j += 1\n            i += 1\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two pointers, one for positive elements and one for negative elements\n    pos = 0\n    neg = 0\n    \n    # iterate through the array\n    while pos < n and neg < n:\n        # if the current element is positive, increment the positive pointer\n        if arr[pos] >= 0:\n            pos += 1\n        # if the current element is negative, increment the negative pointer\n        elif arr[neg] < 0:\n            neg += 1\n        # if both pointers are equal, this means we've found the elements to re-arrange\n        elif pos == neg:\n            break\n    \n    # if we haven't found the elements to re-arrange, return the original array\n    if pos!= n or neg!= n:\n        return arr\n    \n    # re-arrange the array so that all negative elements appear before positive ones\n    for i in range(pos, neg):\n        temp = arr[i]\n        arr[i] = arr[neg]\n        arr[neg] = temp\n    \n    # return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create a list to store the negative elements\n    neg_list = []\n\n    # Iterate through the array\n    for i in range(n):\n\n        # If the element is negative, add it to the negative list\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n\n    # Sort the negative list in descending order\n    neg_list.sort(reverse=True)\n\n    # Iterate through the array and replace the negative elements with the sorted negative list\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = neg_list.pop(0)\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to keep track of the negative and positive elements\n    neg_count = 0\n    pos_count = 0\n    # Iterate through the array and count the number of negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        elif arr[i] > 0:\n            pos_count += 1\n    # Move the elements to their respective lists based on the count\n    neg_list = []\n    pos_list = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        elif arr[i] > 0:\n            pos_list.append(arr[i])\n    # Re-arrange the list based on the given rules\n    i = 0\n    j = 0\n    while i < n and j < len(neg_list):\n        if neg_list[j] < 0:\n            arr[i] = neg_list[j]\n            i += 1\n            j += 1\n        elif neg_list[j] > 0:\n            arr[i] = neg_list[j]\n            i += 1\n            j += 1\n        else:\n            arr[i] = neg_list[j]\n            i += 1\n            j += 1\n    while i < n and j < len(pos_list):\n        if pos_list[j] < 0:\n            arr[i] = pos_list[j]\n            i += 1\n            j += 1\n        elif pos_list[j] > 0:\n            arr[i] = pos_list[j]\n            i += 1\n            j += 1\n        else:\n            arr[i] = pos_list[j]\n            i += 1\n            j += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers, one for positive elements and one for negative elements\n    i = 0\n    j = n\n\n    # Iterate through the array\n    while i < j:\n\n        # If the current element is negative\n        if arr[i] < 0:\n\n            # Swap the current element with the element pointed by j\n            arr[i], arr[j] = arr[j], arr[i]\n\n            # Increment j to point to the next positive element\n            j += 1\n\n        # If the current element is positive\n        else:\n\n            # Increment i to point to the next negative element\n            i += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a new array to store the positive and negative elements\n    positive = []\n    negative = []\n    \n    # iterate over the array and add positive and negative elements to their respective lists\n    for num in arr:\n        if num > 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n    \n    # create a new array to store the final result\n    result = []\n    \n    # iterate over the new lists and add the elements in the desired order to the result array\n    for i in range(len(negative)):\n        result.append(negative[i])\n    for i in range(len(positive)):\n        result.append(positive[i])\n    \n    # return the final result array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # initialize variables\n    negative = []\n    positive = []\n    zero = []\n    index = 0\n    # loop through the array\n    for i in arr:\n        # if the element is negative, add it to the negative list and increment the index\n        if i < 0:\n            negative.append(i)\n            index += 1\n        # if the element is positive, add it to the positive list and increment the index\n        elif i > 0:\n            positive.append(i)\n            index += 1\n        # if the element is zero, add it to the zero list\n        else:\n            zero.append(i)\n    # if n is greater than the length of the array, set n to the length of the array\n    if n > len(arr):\n        n = len(arr)\n    # initialize the output array\n    output = [0] * (n + len(negative) + len(positive) + len(zero))\n    # loop through the output array and copy the elements from the input array\n    for i in range(n):\n        output[i] = arr[i]\n    # loop through the negative list and copy the elements to the output array in their correct relative order\n    for i in range(len(negative)):\n        output[n + i] = negative[i]\n    # loop through the positive list and copy the elements to the output array in their correct relative order\n    for i in range(len(positive)):\n        output[n + len(negative) + i] = positive[i]\n    # loop through the zero list and copy the elements to the output array\n    for i in range(len(zero)):\n        output[n + len(negative) + len(positive) + i] = zero[i]\n    # return the output array\n    return output"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    # replace all spaces with the given character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #replace all the spaces in the string with the character\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s'%char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a min heap\n    heap = list1[:n]\n    heapq.heapify(heap)\n    # add the remaining elements to the min heap\n    for item in list1[n:]:\n        if item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to find the n largest numbers\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    # Iterate through the list and add items to the heap\n    for num in list1:\n        heapq.heappush(min_heap, num)\n        # If the heap size is greater than n, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the list of n largest items\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Given a list and an integer n, returns a list containing the n largest items from the list.\n    \"\"\"\n    # create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -lst[i])\n    \n    # find the largest n numbers in the list\n    largest = []\n    for i in range(n):\n        largest.append(heapq.heappop(min_heap))\n    \n    return largest"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n\n    # pop the largest element from heap and append to the result list\n    for i in range(n,len(list1)):\n        if heapq.heappushpop(heap, list1[i]) > heap[0]:\n            heapq.heappush(heap, heapq.heappop(heap))\n    \n    # reverse the result list so that it contains the n largest elements\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    result.reverse()\n\n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * 3.14159 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    area = math.pi * r ** 2 + 2 * math.pi * r * h + math.pi * r ** 2\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h * (1/3)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    \n    # calculate the surface area of the cylinder\n    surface_area = 2 * math.pi * r * h\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (3.14*r**2)*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n\n    # Find the area of the cylinder\n    area = math.pi * r * r\n    # Find the surface area of a cylinder\n    surface_area = 2 * area + 2 * math.pi * r * h\n\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l * l * l\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3 # cube volume\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the number of even bits set\n    even_count = 0\n    # Iterate over each bit in the binary representation of n\n    for bit in bin(n)[2:]: \n        # If the bit is even, set the corresponding bit in the result\n        if bit == '1': \n            n |= 1 << (even_count % 32) \n            even_count += 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate through each bit of the number\n    for i in range(8):\n        # Check if the bit is even\n        if n & (1 << i):\n            # Set the corresponding bit of the result to 1\n            result |= (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & 1) << 1"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate over each bit of the input number\n    for i in range(32):\n        # If the current bit is even, set the corresponding bit of the result to 1\n        if (n & (1 << i)) == 0:\n            result |= (1 << i)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize result variable to 0\n    result = 0\n    # loop through each bit of the input number\n    for i in range(32):\n        # if the current bit is even, set its corresponding bit in the result variable to 1\n        if n & (1 << i):\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 1\n    else:\n        return even_bit_set_number(n >> 1) << 1"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    # Convert the input number to binary\n    binary = bin(n)[2:]\n    # Iterate over the binary string and set the corresponding even bit to 1\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            binary = binary[:i] + '1' + binary[i+1:]\n    # Convert the binary string back to an integer\n    result = int(binary, 2)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        n = n ^ (n & -n) # set all even bits to 1\n        return even_bit_set_number(n)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n!= 0:\n        if n & 1 == 0:\n            n |= 1 << n & 1\n        else:\n            n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    for i in range(32):\n        if n & (1 << i):\n            result |= (1 << i)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each unique tuple\n    counter = Counter(test_list)\n    # Convert the Counter to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use a Counter object to count the number of times each tuple occurs in the list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n\n    # Return the dictionary\n    return counter.most_common()"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Iterate over the list of tuples\n    for item in test_list:\n        # Check if the item is already a key in the dictionary\n        if item in count_dict:\n            # If it is, increment its count by 1\n            count_dict[item] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[item] = 1\n    \n    # Return the dictionary of count of each unique tuple\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    # Initialize count variable to 0\n    count = 0\n    \n    # Iterate over each character in the string\n    for i in range(len(str)):\n        # Iterate over each possible substring of length 1 to len(str)-i\n        for j in range(1, len(str)-i+1):\n            # Check if substring is non-empty\n            if str[i:i+j]!= \"\":\n                # Increment count variable\n                count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize counter variable\n    count = 0\n\n    # Iterate through all possible substrings of the string\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    substrings = set()\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n+1):\n            substrings.add(str[i:j])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(2, m):\n        for j in range(i, min(i+n-1, m)):\n            total_sequences += 1\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    count = 0\n    prev_number = 1\n    \n    while n > 0:\n        count += 1\n        \n        if n == 1:\n            return count\n        else:\n            if n > 2:\n                for i in range(3, m+1):\n                    if i >= prev_number and i <= m and (i - prev_number) % 2 == 0:\n                        prev_number = i\n                        n -= 1\n                        break\n            else:\n                break\n            \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a counter variable to store the total number of sequences\n    total_sequences = 0\n\n    # Loop through each integer from m to n\n    for i in range(m, n+1):\n        # Initialize a variable to store the current sequence length\n        sequence_length = 0\n\n        # Loop through each integer from i to m\n        for j in range(i, m+1):\n            # If the current integer is within the range of 2n <= j <= 2m, increment the sequence length and check if it's the first integer in the sequence\n            if j >= 2*i and j <= 2*m:\n                sequence_length += 1\n            # If the current integer is not within the range of 2n <= j <= 2m, increment the total number of sequences by sequence_length and reset the sequence length to 0\n            else:\n                total_sequences += sequence_length\n                sequence_length = 0\n\n        # Increment the total number of sequences by the last sequence length\n        total_sequences += sequence_length\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    sequence = []\n    for i in range(2, m+1):\n        if sequence and i >= 2*sequence[-1] and i <= m:\n            sequence.append(i)\n            count += 1\n        else:\n            sequence = [i]\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(n):\n        for j in range(i + 2, m + 1):\n            if j % 2 == 0:\n                total_sequences += 1\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    def get_sequences(m, n, curr_num, sequences):\n        if n == 0:\n            sequences.append(curr_num)\n            return\n\n        for i in range(curr_num, min(m, curr_num + n)):\n            if i % 2 == 0:\n                get_sequences(m, n - 1, i, sequences)\n\n    sequences = []\n    get_sequences(m, n, 0, sequences)\n    return len(sequences)\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    count = 0\n    prev = float('-inf')\n    for i in range(n):\n        count += m-i-1\n        if m-i-1 <= prev:\n            break\n        prev = m-i-1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the counter variable\n    count = 0\n    # Initialize the current sequence length\n    length = 0\n    # Initialize the current sequence\n    sequence = []\n\n    # Iterate through the range of possible sequences\n    for i in range(1, n+1):\n        # If the current sequence length is equal to the given length, increment the count\n        if length == i:\n            count += 1\n        # If the current sequence length is less than the given length, check if the current element is within the given range\n        elif length < i and n - length >= 2*i <= m:\n            # If the current element is valid, add it to the sequence and increment the sequence length\n            sequence.append(n - length)\n            length += 1\n\n    return count, sequence"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid(x, m, n):\n        if x >= 2 * m and x <= m:\n            return True\n        return False\n\n    total_sequences = 0\n    for i in range(m, 2 * m + 1):\n        if is_valid(i, m, n):\n            total_sequences += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    sequence = [0]\n    for i in range(n):\n        if i == 0:\n            sequence.append(1)\n            total_sequences += 1\n        else:\n            if sequence[i-1] < m:\n                sequence.append(sequence[i-1])\n                total_sequences += 1\n            elif sequence[i-1] >= m and sequence[i-1] % 2 == 1:\n                sequence.append(sequence[i-1]+2)\n                total_sequences += 1\n            else:\n                sequence.append(sequence[i-1]+1)\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    print(list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) < len(list2):\n        list1.append(list2.pop())\n    else:\n        for i in range(len(list1)-len(list2)+1):\n            list1[i] = list2.pop()"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    # Get the last element of the first list\n    last_element = list1[length-1]\n    # Replace the last element of the first list with the elements of the second list\n    list1[length-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # check if the lists are of the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # replace the last element of list1 with the elements of list2\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[i]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the lengths of the lists are equal\n    if len(list1) == len(list2):\n        # get the last element of the first list\n        last_element = list1[-1]\n        # create a new list with the last element replaced by the elements of the second list\n        new_list = list1[:-1] + list2\n        # return the new list\n        return new_list\n    else:\n        print(\"The lists cannot be replaced.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[i]\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Loop through the first list from the last element to the first element\n    for i in range(length-1, -1, -1):\n        # If the current element is the last element of the list, replace it with the elements of the second list\n        if i == length-1:\n            list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = len(str1)\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    y = 0\n    while x >= y:\n        y = int(x**0.5) + 1\n        if x < y*y:\n            break\n        x = y*y\n    return y"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    \"\"\"\n    This function finds the next perfect square greater than a given number N.\n    \"\"\"\n    while True:\n        # calculate the square root of N \n        sqrt_N = int(math.sqrt(N))\n        \n        # if the square root of N is an integer, increase it by 1 \n        if sqrt_N**2 == N:\n            sqrt_N += 1\n        \n        # calculate the next perfect square greater than sqrt_N \n        next_sqrt_N = sqrt_N**2 + 1\n        \n        # check if the next perfect square is greater than N \n        if next_sqrt_N > N:\n            return next_sqrt_N\n        \n        # if not, set N to the next perfect square \n        N = next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # find the square root of N\n    root = int(math.sqrt(N))\n    # check if the square root is odd\n    if root % 2 == 1:\n        # if it's odd, check the next number greater than the square root\n        n = root+1\n    else:\n        # if it's even, check the next odd number greater than the square root\n        n = root+2\n    # check if the next perfect square is greater than N\n    while n*n > N:\n        n += 2\n    return n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N = N + 1\n        if math.isqrt(N) ** 2 == N:\n            break\n\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # find the perfect square root of N\n    root = math.sqrt(N)\n\n    # find the perfect square root of (N+1)\n    next_root = math.sqrt(N+1)\n\n    # check if next_root is an integer\n    if next_root.is_integer():\n\n        # if it is an integer, find the next perfect square greater than N\n        next_square = int(root*root) + 1\n\n    else:\n\n        # if it's a float, find the next perfect square greater than N by adding 1 to the floor of the square root of (N+1)\n        next_square = math.floor(root*root) + 1\n\n    return next_square\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Check if N is not a perfect square\n    if not is_perfect_square(N):\n        print(\"N is not a perfect square.\")\n        return\n\n    # Convert N to its integer square root\n    sqrt_N = int(math.sqrt(N))\n\n    # Check if the square root is odd\n    if sqrt_N % 2 == 1:\n        # Increment the square root and convert to integer\n        sqrt_N += 1\n    else:\n        # Multiply the square root by 2 and convert to integer\n        sqrt_N *= 2\n\n    # Convert the integer square root back to a perfect square\n    return pow(sqrt_N, 2)\n\ndef is_perfect_square(N):\n    '''\n    Write a python function to check if a given number is a perfect square.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    return sqrt_N**2 == N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    y = int(math.sqrt(N + 1))\n    return y**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if the given number is a perfect square\n    if math.isqrt(N) ** 2 == N:\n        return N\n    else:\n        # Find the smallest perfect square greater than N\n        smallest_perfect_square = 2 * int(math.sqrt(N)) + 1\n\n        # Find the largest perfect square smaller than or equal to the square root of N\n        largest_perfect_square = int(math.sqrt(N)) + 1\n\n        # Calculate the difference between the largest perfect square and the given number\n        difference = smallest_perfect_square - N\n\n        # Find the next perfect square greater than the difference\n        next_perfect_square = largest_perfect_square - difference\n\n        return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def is_perfect_square(num):\n        \"\"\"\n        Helper function to check if a number is a perfect square or not.\n        \"\"\"\n        root = int(math.sqrt(num))\n        return root * root == num\n\n    def find_next_square(num):\n        \"\"\"\n        Helper function to find the next perfect square.\n        \"\"\"\n        if num == 0:\n            return 1\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0 and is_perfect_square(i**2):\n                return i**2\n        return -1\n\n    if N == 0:\n        return 1\n\n    i = 1\n    while True:\n        next_square = find_next_square(i)\n        if next_square == -1:\n            break\n        if next_square > N:\n            return next_square\n        i += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    sqrtN = math.sqrt(N)\n    # convert the square root to an integer\n    sqrt_int = int(sqrtN)\n    # if the square root is an integer, add 1 to it and convert it back to a float\n    if sqrt_int**2 == N:\n        next_sqrt = float(sqrt_int+1)**2\n    # if the square root is not an integer, round it up to the nearest integer and then add 1 to it\n    else:\n        next_sqrt = round(sqrtN)+1\n    # return the next perfect square\n    return next_sqrt"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_sum = float('-inf')\n    max_sum_ending_here = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_sum_ending_here += arr[i]\n        else:\n            max_sum_ending_here = max(max_sum_ending_here, 0)\n            max_sum = max(max_sum, max_sum_ending_here)\n    max_sum_ending_here = 0\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            max_sum_ending_here += arr[i]\n        else:\n            max_sum_ending_here = max(max_sum_ending_here, 0)\n            max_sum = max(max_sum, max_sum_ending_here)\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n\n    # Create a new array to store the cumulative sum of the input array\n    cumsum = [0] * (n + 1)\n\n    # Calculate the cumulative sum of the input array\n    for i in range(1, n + 1):\n        cumsum[i] = cumsum[i - 1] + arr[i - 1]\n\n    # Initialize variables for the left and right pointers\n    left = 1\n    right = n\n\n    # Initialize variables to store the maximum sum found so far\n    max_sum_left = 0\n    max_sum_right = 0\n\n    # Traverse the array from left to right and update the maximum sum found so far\n    while left < right:\n        if cumsum[left] < cumsum[right]:\n            max_sum_left = max(max_sum_left, cumsum[left] + cumsum[right])\n            left += 1\n        else:\n            max_sum_right = max(max_sum_right, cumsum[left] + cumsum[right])\n            right -= 1\n\n    # Return the maximum sum found so far\n    return max_sum_left"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the maximum sum of any increasing subsequence\n    max_sum_increasing = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[i]:\n                max_sum_increasing = max(max_sum_increasing, arr[i]+arr[j])\n    # Find the maximum sum of any decreasing subsequence\n    max_sum_decreasing = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                max_sum_decreasing = max(max_sum_decreasing, arr[i]+arr[j])\n    # Find the maximum sum of any bitonic subsequence\n    max_sum_bitonic = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[i] and arr[j] > arr[j-1]:\n                max_sum_bitonic = max(max_sum_bitonic, arr[i]+arr[j])\n    # Return the maximum sum of any bitonic subsequence\n    return max(max_sum_increasing, max_sum_decreasing, max_sum_bitonic)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n\n    max_sum_left = arr[0]\n    max_sum_right = arr[-1]\n    max_sum_single = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            max_sum_left = max(max_sum_left + arr[i], arr[i])\n        else:\n            max_sum_left = max(max_sum_left, arr[i])\n\n        if arr[i] <= arr[-1-i]:\n            max_sum_right = max(max_sum_right + arr[-1-i], arr[-1-i])\n        else:\n            max_sum_right = max(max_sum_right, arr[-1-i])\n\n        max_sum_single = max(max_sum_single, max_sum_left, max_sum_right)\n\n    return max_sum_single"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, n):\n        if arr[i] < arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = dp[i-1]\n\n    return max(dp[i] for i in range(n))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Initialize variables\n    dp_left = [0] * n\n    dp_right = [0] * n\n    dp = [0] * n\n\n    # Fill dp_left and dp_right arrays\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            dp_left[i] = dp_left[i-1] + arr[i]\n        else:\n            dp_left[i] = dp_left[i-1]\n\n    for i in range(n-2, -1, -1):\n        if arr[i] <= arr[i+1]:\n            dp_right[i] = dp_right[i+1] + arr[i]\n        else:\n            dp_right[i] = dp_right[i+1]\n\n    # Fill dp array\n    for i in range(n):\n        if dp_left[i] < dp_right[i]:\n            dp[i] = dp_left[i]\n        else:\n            dp[i] = dp_right[i]\n\n    # Find maximum subsequence sum\n    max_sum = dp[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables to keep track of the minimum and maximum values\n    min_val = arr[0]\n    max_val = arr[0]\n    max_sum = arr[0]\n\n    # Loop through the array and update the maximum sum and minimum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n        # Calculate the sum of the subsequence between the minimum and maximum values\n        sub_sum = max_val - min_val\n        max_sum = max(max_sum, sub_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # initialize the maximum sum and the current subsequence\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        # update the current subsequence\n        if i % 2 == 0:\n            curr_sum += arr[i]\n        else:\n            curr_sum -= arr[i]\n        \n        # compare the current subsequence with the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    A sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables for maximum sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(n):\n        # Check if the current element is increasing or decreasing\n        if i % 2 == 0:\n            # If increasing, add the element to the current sum\n            curr_sum += arr[i]\n        else:\n            # If decreasing, subtract the element from the current sum\n            curr_sum -= arr[i]\n\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    tolerance = 1e-10  # define the tolerance\n    x_n = number / 2  # initial guess\n\n    while abs(x_n**2 - number) > tolerance:\n        x_n = (x_n + number / x_n) / 2  # update the guess\n\n    return x_n\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x1 = number\n    x2 = (x1 + number//x1) / 2\n    x3 = (x2 + number//x2) / 2\n    x4 = (x3 + number//x3) / 2\n    x5 = (x4 + number//x4) / 2\n    x6 = (x5 + number//x5) / 2\n    x7 = (x6 + number//x6) / 2\n    x8 = (x7 + number//x7) / 2\n    x9 = (x8 + number//x8) / 2\n    x10 = (x9 + number//x9) / 2\n    x11 = (x10 + number//x10) / 2\n    x12 = (x11 + number//x11) / 2\n    x13 = (x12 + number//x12) / 2\n    x14 = (x13 + number//x13) / 2\n    x15 = (x14 + number//x14) / 2\n    x16 = (x15 + number//x15) / 2\n    x17 = (x16 + number//x16) / 2\n    x18 = (x17 + number//x17) / 2\n    x19 = (x18 + number//x18) / 2\n    x20 = (x19 + number//x19) / 2\n    x21 = (x20 + number//x20) / 2\n    x22 = (x21 + number//x21) / 2\n    x23 = (x22 + number//x22) / 2\n    x24 = (x23 + number//x23) / 2\n    x25 = (x24 + number//x24) / 2\n    x26 = (x25 + number//x25) / 2\n    x27 = (x26 + number//x26) / 2\n    x28 = (x27 + number//x27) / 2\n    x29 = (x28 + number//x28) / 2\n    x30 = (x29 + number//x29) / 2\n    x31 = (x30 + number//x30) / 2\n    x32 = (x31 + number//x31) / 2\n    x33 = (x32 + number//x32) / 2\n    x34 = (x33 + number//x33) / 2\n    x35 = (x34 + number//x34) / 2\n    x36 = (x35 + number//x35) / 2\n    x37 = (x36 + number//x36) / 2\n    x38 = (x37 + number//x37) / 2\n    x39 = (x38 + number//x38) / 2\n    x40 = (x39 + number//x39) / 2\n    x41 = (x40 + number//x40) / 2\n    x42 = (x41 + number//x41) / 2\n    x43 = (x42 + number//x42) / 2\n    x44 = (x43 + number//x43) / 2\n    x45 = (x44 + number//x44) / 2\n    x46 = (x45 + number//x45) / 2\n    x47 = (x46 + number//x46) / 2\n    x48 = (x47 + number//x47) / 2\n    x49 = (x48 + number//x48) / 2\n    x50 = (x49 + number//x49) / 2\n    x51 = (x50 + number//x50) / 2\n    x52 = (x51 + number//x51) / 2\n    x53 = (x52 + number//x52) / 2\n    x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes square roots using the babylonian method.\n    \"\"\"\n    # initialize variables\n    guess = number / 2\n    current_guess = guess\n    delta = 0.000001\n    \n    # iterate until the difference between the current guess and the target is less than the delta\n    while abs(guess**2 - number) > delta:\n        current_guess = guess\n        guess = (guess + number / guess) / 2\n    \n    # return the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while True:\n        new_guess = (guess + number/guess) / 2\n        if abs(new_guess - guess) < 0.000001:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = number/2\n    guess = x\n    epsilon = 0.0001\n    \n    # iterate until the difference between the current guess and the square of the guess is below epsilon\n    while abs(guess*guess - number) > epsilon:\n        # calculate the next guess\n        x = guess - (guess*guess - number)/(2*guess)\n        guess = x\n    \n    # return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Convert the input number to a float\n    number = float(number)\n    # Initialize variables\n    guess = number / 2\n    upper_bound = 10 * guess\n    lower_bound = 0.01 * guess\n    # Use babylonian method to find square root\n    while abs(guess**2 - number) > 0.0001:\n        if guess**2 < number:\n            upper_bound = guess\n        else:\n            lower_bound = guess\n        guess = (lower_bound + upper_bound) / 2\n    # Return the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while True:\n        if guess**2 == number:\n            return guess\n        elif guess**2 > number:\n            guess -= (number / guess)\n        else:\n            guess += (number / guess)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.0000001\n    x = number\n    y = (x + number / x) / 2.0\n    while abs(x - y) > epsilon:\n        x = y\n        y = (x + number / x) / 2.0\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = number / 2\n    y = 1\n    i = 0\n    \n    # iterate until x is within the desired accuracy\n    while abs(x - y) > 1e-10:\n        i += 1\n        y = x\n        x = (x + number / x) / 2\n    \n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the babylonian method.\n\n    :param number: The number to compute the square root of.\n    :return: The square root of the input number.\n    \"\"\"\n    if number == 0:\n        raise ValueError(\"Cannot compute square root of 0\")\n    guess = 0.5 * (number + number ** 0.5)\n    while True:\n        current_guess = guess\n        guess = 0.5 * (number / guess + number / guess ** 2)\n        if abs(current_guess - guess) < 1e-6:\n            break\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a table to store the length of palindromic subsequences for each substring\n    table = [[0] * n for i in range(n)]\n\n    # Initialize the first row and first column of the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill in the rest of the table using dynamic programming\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store lengths of longest palindromic subsequences\n    L = [[0] * n for _ in range(n)]\n\n    # Initialize the L[i][j] with 0 for all i and j\n    for i in range(n):\n        for j in range(n):\n            L[i][j] = 0\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(n):\n            if s[i] == s[j]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return L[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    # Initialize two variables to store the length of the longest palindromic subsequence and its starting index\n    max_len = 1\n    start = 0\n\n    # Iterate through the string\n    for i in range(len(str)): \n        # Check if the current character is a palindrome\n        if str[i] == str[len(str)-i-1]: \n            # If it is, check if the length of the palindromic subsequence is greater than the current maximum\n            if len(str[i:len(str)-i]) > max_len: \n                max_len = len(str[i:len(str)-i])\n                start = i\n\n    # Return the length and starting index of the longest palindromic subsequence\n    return max_len, start"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(string):\n    n = len(string)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        dp = [1] * n\n        for i in range(1, n-1):\n            if string[i] == string[i+1]:\n                dp[i+1] = dp[i] + 2\n            else:\n                dp[i+1] = max(dp[i], dp[i+1])\n        return dp[n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    if len(str) == 1:\n        return 1\n    max_len = 1\n    for i in range(1, len(str)):\n        if str[i] == str[i-1]:\n            max_len = 2 + lps(str[i-1:i+1])\n        else:\n            max_len = max(max_len, lps(str[i-1:i+1]))\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each index\n    lps_table = [[0] * n for _ in range(n)]\n\n    # Initialize the first column and last row of the table\n    for i in range(n):\n        lps_table[i][i] = 1\n        if str[i] == str[n-i-1]:\n            lps_table[i][n-i-1] = 2\n\n    # Fill in the table using dynamic programming\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i+1][j-1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence ending at index n-1\n    return lps_table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    # Initialize an empty list to store the lengths of palindrome subsequences\n    lengths = []\n\n    # Initialize the length of the longest palindrome subsequence to zero\n    longest = 0\n\n    # Iterate through the string\n    for i in range(len(str)):\n        # Define the current substring\n        substring = str[i:i+2]\n\n        # Check if the substring is a palindrome\n        if substring == substring[::-1]:\n            # Update the length of the longest palindrome subsequence\n            if i+1 > longest:\n                longest = i+1\n\n        # If the substring is not a palindrome, check if its LPS can be extended by removing one character\n        if substring!= substring[::-1] and i+2 <= len(str):\n            # Define the possible LPS extended by removing the first character\n            extended = substring[1:]\n\n            # Check if the extended substring is a palindrome\n            if extended == extended[::-1]:\n                # Update the length of the longest palindrome subsequence\n                if i+2 > longest:\n                    longest = i+2\n\n    # Return the length of the longest palindromic subsequence\n    return longest"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store lengths of longest palindromic subsequences \n    # of substrings centered at each index in the string. \n    L = [[0] * n for _ in range(n)] \n  \n    # Initialize L[i][j] as 0, where i is the index of the leftmost \n    # character of the substring of length j in the string and j is the \n    # length of the substring. \n    for i in range(n): \n        L[i][i] = 1 \n  \n    # Fill L[][] using dynamic programming approach. \n    for length in range(3, n + 1): \n        for start in range(n - length + 1): \n            end = start + length - 1 \n            if str[start] == str[end]: \n                L[start][end] = L[start + 1][end - 1] + 2 \n            else: \n                L[start][end] = max(L[start + 1][end], L[start][end - 1]) \n  \n    # Return the length of the longest palindromic subsequence. \n    return L[0][n - 1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def longest_palindromic_subsequence(s):\n    n = len(s)\n    # create a 2D table to store the length of LPS for each sub-string\n    table = [[0] * n for _ in range(n)]\n\n    # fill the table starting from the center\n    for i in range(n):\n        table[i][i] = 1\n\n    # fill the table starting from the edge\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            table[i][i+1] = 2\n\n    # fill the table from the inside\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence for all prefixes of the string\n    table = [[0] * n for i in range(n)]\n\n    # Initialize the longest palindromic subsequence length to 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Find the length of longest palindromic subsequence for all prefixes of the string\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            table[i][i+1] = 2\n            # If the length of longest palindromic subsequence for prefixes of the string is 2, then we need to check for substrings with length 3\n            if i > 0 and str[i-1] == str[i+2]:\n                table[i][i+2] = 3\n\n    # Return the maximum length of the longest palindromic subsequence\n    return max(table[0][:])"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n-1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function calculates the harmonic sum of a given integer n.\n\n    Args:\n        n (int): A positive integer\n\n    Returns:\n        float: The harmonic sum of n-1\n    \"\"\"\n    return (1/n) + ((2*n-1)/(n*(n-1)))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + 1/n) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the harmonic sum of n-1.\n\n    The harmonic sum of a positive integer n is defined as the sum of the reciprocals of the integers from 1 to n.\n    \"\"\"\n    reciprocals = [1/i for i in range(1, n+1)]\n    return sum(reciprocals)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (1/(n-1)) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1 using the formula (n-1)/(n+1)\n    harmonic_sum = (n-1)/(n+1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n - 1) / 2"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from the first array to remove duplicates\n    set_nums1 = set(array_nums1)\n    \n    # Create a new set to store the intersection\n    intersection = set()\n    \n    # Loop through the second array and add elements to the intersection set if they exist in the first array\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.add(num)\n    \n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1.intersection(set_nums2))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection_set = set(array_nums1) & set(array_nums2)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection_set = set(array_nums1) & set(array_nums2)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # creating a set for array_nums1\n    set1 = set(array_nums1)\n    # creating a set for array_nums2\n    set2 = set(array_nums2)\n    # finding the intersection of set1 and set2\n    intersection = set1.intersection(set2)\n    # creating a list of the intersection\n    result = list(intersection)\n    # returning the list of intersection\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    common_nums = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_nums:\n            common_nums.append(num)\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create a set to store unique elements from both arrays\n    unique_nums = set(array_nums1 + array_nums2)\n\n    # Create a set to store the intersection of unique elements\n    intersection = set()\n\n    # Iterate through the unique elements and add them to the intersection set if they are in both arrays\n    for num in unique_nums:\n        if num in array_nums1 and num in array_nums2:\n            intersection.add(num)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays, array_nums1 and array_nums2, and\n    returns a new array that contains only the elements that are present\n    in both arrays.\n    \"\"\"\n    # Create two empty sets to store the values in each array\n    set_nums1 = set()\n    set_nums2 = set()\n\n    # Iterate through each element in array_nums1 and add it to the set\n    for num in array_nums1:\n        set_nums1.add(num)\n\n    # Iterate through each element in array_nums2 and add it to the set\n    for num in array_nums2:\n        set_nums2.add(num)\n\n    # Find the intersection of the sets using the intersection() method\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Create two sets to store the unique elements of array_nums1 and array_nums2 respectively\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    intersection_list = list(set_nums1.intersection(set_nums2))\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Creating a new list to store the elements of the original list and the inserted element\n    new_list = []\n\n    # Iterating over the original list\n    for i in range(len(list)):\n        # Inserting the element before the current element in the original list\n        new_list.insert(i, element)\n        # Appending the current element to the new list\n        new_list.append(list[i])\n\n    # Returning the new list with the inserted element\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create a new list with the original list as its base\n    new_list = list.copy()\n    # loop through each element in the original list\n    for i in range(len(list)):\n        # insert the element before the current element in the new list\n        new_list.insert(i, element)\n    # return the new list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.insert(0, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i-1])\n            result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(i, element)\n        else:\n            list.insert(i, list[i-1])\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Create an empty list to hold the modified list\n    modified_list = []\n    \n    # Loop through each element in the original list\n    for item in list:\n        # Add the element to the modified list\n        modified_list.append(item)\n        # Add the element to the modified list before each element in the original list\n        modified_list.insert(modified_list.index(item),element)\n    \n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(lst)):\n        lst.insert(i, elem)\n    return lst"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            theta = cmath.phase(num)\n            print(\"({}, {})\".format(r, theta))\n        else:\n            print(\"Invalid input.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of polar coordinates.\n    '''\n\n    # Loop through the list of complex numbers\n    polar_coordinates = []\n    for number in numbers:\n        \n        # Convert the complex number to polar coordinates using the cmath module\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        \n        # Append the polar coordinates to a list\n        polar_coordinates.append((magnitude, angle))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \n    Parameters:\n    numbers (list or tuple): a list or tuple of complex numbers\n    \n    Returns:\n    polar_coordinates (list or tuple): a list or tuple of tuples representing polar coordinates\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        angle = cmath.phase(number)\n        magnitude = abs(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        print(f\"The complex number {number} in polar form is ({real:.2f}+{imag:.2f}i)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = numbers.split(',')\n    polar_coordinates = []\n    for complex_number in complex_numbers:\n        real, imag = complex_number.split('i')\n        real = float(real)\n        imag = float(imag)\n        polar_coordinates.append(cmath.polar(complex(real, imag)))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = abs(num.real)\n        imag = num.imag\n        angle = cmath.phase(num)\n        polar_num = (real, imag, angle)\n        print(polar_num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        if imag == 0:\n            polar_num = str(round(cmath.sqrt(real**2), 2)) + \"i\"\n        else:\n            angle = cmath.phase(complex(real, imag))\n            polar_num = str(round(cmath.sqrt(real**2 + imag**2), 2)) + \"+\" + str(round(angle, 2)) + \"i\"\n        print(polar_num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers and converts them to polar coordinates.\n    The function first converts each complex number to a float using the cmath module.\n    Then, it computes the magnitude and angle of the complex number using the cmath.rect() function.\n    The function returns a list of tuples containing the magnitude and angle of each complex number.\n    '''\n    \n    # Convert each complex number to a float\n    complex_numbers = [float(x) for x in numbers]\n    \n    # Compute the magnitude and angle of each complex number using cmath.rect()\n    polar_coordinates = [(cmath.rect(x))[0], (cmath.rect(x))[1]]\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.rect(num)\n        print(f\"{num} in polar coordinates is {cmath.polar(num)}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if isinstance(number, complex):\n            r = abs(number)\n            theta = cmath.phase(number)\n            print(f'{number} -> r = {r}, theta = {theta:.2f}')\n        else:\n            print(f'Skipping non-complex number: {number}')"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations of length n from the list\n    color_combinations = list(combinations_with_replacement(l, n))\n    # Create a list of tuples for each combination\n    result = []\n    for combination in color_combinations:\n        result.append(tuple(combination))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for color in l[i]:\n            for j in range(i+1, len(l)):\n                for k in range(j+1, len(l)):\n                    for l in range(k+1, len(l)):\n                        color_combinations.append((color, l[i], l[j], l[k]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations of length n\n    comb = combinations_with_replacement(l, n)\n    # create a list to store the combinations\n    result = []\n    # iterate over the combinations\n    for i in comb:\n        # convert the combination to a tuple\n        tup = tuple(i)\n        # add the tuple to the result list\n        result.append(tup)\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    def is_prime(num):\n        '''\n        A helper function that checks if a given number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n\n    # initialize count to zero\n    count = 0\n\n    # loop through numbers from 2 to n\n    for i in range(2, n+1):\n\n        # check if number is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    This function takes in a positive integer and returns True if it is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function that checks whether a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    A function that counts the number of prime numbers less than a given number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    num = 2\n    while num <= n:\n        prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                prime = False\n                break\n        if prime:\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num = max(test_tup1[0], test_tup2[0])\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_num:\n            max_num = test_tup1[i]\n        if test_tup2[i] > max_num:\n            max_num = test_tup2[i]\n    return max_num"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n    if max_1 > max_2:\n        return test_tup1\n    elif max_2 > max_1:\n        return test_tup2\n    else:\n        return test_tup1, test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the tuples are not equal\")\n    \n    # Loop through the tuples and find the maximum element\n    max_element = None\n    for i in range(len(test_tup1)):\n        if max_element is None or test_tup1[i] > max_element:\n            max_element = test_tup1[i]\n        if max_element is None or test_tup2[i] > max_element:\n            max_element = test_tup2[i]\n    \n    return max_element"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem1 = max(test_tup1)\n    max_elem2 = max(test_tup2)\n    return (max_elem1, max_elem2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    max_value = max(test_tup1[0], test_tup2[0])\n\n    if max_value == test_tup1[0]:\n        max_index = 0\n    elif max_value == test_tup2[0]:\n        max_index = 1\n\n    max_value = max(max_value, test_tup1[1])\n\n    if max_value == test_tup1[1]:\n        max_index = 0\n    elif max_value == test_tup2[1]:\n        max_index = 1\n\n    max_value = max(max_value, test_tup2[1])\n\n    if max_value == test_tup1[1]:\n        max_index = 0\n    elif max_value == test_tup2[1]:\n        max_index = 1\n\n    return (max_value, max_index)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_element = max(test_tup1[0], test_tup2[0])\n    max_tup = (max_element, test_tup1[1]) if test_tup1[1] > test_tup2[1] else (max_element, test_tup2[1])\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create a list of tuples to compare the elements\n    compare_list = [(test_tup1[0], test_tup1[1]), (test_tup2[0], test_tup2[1])]\n    # Sort the list in descending order based on the first element of each tuple\n    compare_list.sort(reverse=True, key=lambda x: x[0])\n    # Create a new tuple with the max values\n    max_tuple = (compare_list[0][0], compare_list[0][1])\n    # Return the new tuple\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize a list to store the maximum values in the tuples\n    max_list = []\n    \n    # Iterate through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Check if the current element in test_tup1 is greater than or equal to the current element in test_tup2\n        if test_tup1[i] >= test_tup2[i]:\n            # If it is, add the current element in test_tup1 to the max_list\n            max_list.append(test_tup1[i])\n        else:\n            # If not, add the current element in test_tup2 to the max_list\n            max_list.append(test_tup2[i])\n    \n    # Return the maximum values in the tuples\n    return max_list"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return None\n    \n    # Check if the tuples are empty\n    if len(test_tup1) == 0:\n        print(\"Error: Tuples are empty.\")\n        return None\n    \n    # Initialize max_val with the first element of the first tuple\n    max_val = test_tup1[0]\n    \n    # Iterate through the remaining elements of the first tuple\n    for i in range(1, len(test_tup1)):\n        # Check if the current element is greater than max_val\n        if test_tup1[i] > max_val:\n            # Update max_val with the current element\n            max_val = test_tup1[i]\n    \n    # Return the max_val\n    return max_val"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    prime_count = 0\n    num = 2\n\n    # Loop until n prime numbers are found\n    while prime_count < n:\n        # Check if num is prime\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If num is prime, check if it is a newman-shanks-williams prime\n            is_newman_prime = True\n            i = 0\n            while i < num-1 and is_newman_prime:\n                if num % i == 0:\n                    is_newman_prime = False\n                    break\n                else:\n                    i += 1\n            if is_newman_prime:\n                # If num is a newman-shanks-williams prime, add it to the list of primes\n                print(num)\n                prime_count += 1\n        num += 1\n\n    # Return the list of n newman-shanks-williams primes\n    return primes"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    for i in range(1, n):\n        if i in [2, 3]:\n            count += 1\n        elif i % 2 == 0 and i > 2:\n            j = 3\n            while j * j <= i:\n                if i % j == 0:\n                    break\n                j += 2\n            if j * j > i:\n                count += 1\n        elif i % 2!= 0 and i > 2:\n            j = 3\n            while j * j <= i:\n                if i % j == 0:\n                    break\n                j += 2\n            if j * j > i:\n                count += 1\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize the count to 0\n    count = 0\n    \n    # loop through the numbers 2 to n\n    for num in range(2, n+1):\n        # check if num is a newman-shanks-williams prime number\n        if num > 1 and all(num % i!= 0 or i == 1 for i in range(2, int(num**0.5)+1)):\n            # if it is, increment the count by 1\n            count += 1\n            \n            # if the count reaches n, stop looping and return the current number\n            if count == n:\n                return num\n    \n    # if the loop completes without finding the nth newman-shanks-williams prime number, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = []\n    max_value = 10 ** n\n\n    for i in range(2, max_value):\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            primes.append(i)\n\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The index of the desired newman\u2013shanks\u2013williams prime number.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def newman_shanks_williams(n):\n        \"\"\"\n        Generate the nth newman\u2013shanks\u2013williams prime number.\n\n        Parameters:\n        n (int): The number of primes to generate.\n\n        Returns:\n        list: The nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        primes = [2]\n        while len(primes) < n:\n            is_prime = True\n            for prime in primes:\n                if n % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(n)\n                n += 1\n            else:\n                n += 1\n        return primes\n\n    def newman_prime_iterative(n):\n        \"\"\"\n        Generate the nth newman\u2013shanks\u2013williams prime number using a simple iterative algorithm.\n\n        Parameters:\n        n (int): The number of primes to generate.\n\n        Returns:\n        list: The nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        primes = []\n        i = 2\n        while len(primes) < n:\n            if is_prime(i):\n                primes.append(i)\n            i += 1\n        return primes\n\n    if n > 0:\n        # Generate the first n primes using the newman-shanks-williams algorithm\n        primes = newman_shanks_williams(n)\n        return primes[0]\n    else:\n        # Generate the nth newman-shanks-williams prime number using the iterative algorithm\n        return newman_prime_iterative(n)\n\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if is_newman_prime(num):\n            count += 1\n        num += 1\n    return num\n\ndef is_newman_prime(num):\n    '''\n    Check if a number is a newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nn = int(input(\"Enter the value of n: \"))\nprint(newman_prime(n))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the count variable\n    count = 0\n    # Initialize the list of primes\n    primes = [2]\n    # Iterate from 3 to the square root of n\n    for i in range(3, int(n**0.5)+1):\n        # Check if i is a prime number\n        if n % i == 0:\n            # If it is, check if the next number in the sequence is also prime\n            if i!= n//i and is_prime(n//i):\n                # If it is, add the prime factor to the list of primes\n                primes.append(i)\n                primes.append(n//i)\n                # Increment the count\n                count += 2\n            # If it's not a prime factor, add i to the list of primes and increment the count\n            else:\n                primes.append(i)\n                count += 1\n    # If the count is less than n, add the remaining numbers to the list of primes\n    primes += [i for i in range(2, n+1) if i not in primes]\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return primes[n-1]\n\ndef is_prime(n):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return False\n    # Check if n is equal to 2 or 3\n    elif n == 2 or n == 3:\n        return True\n    # Check if n is divisible by any number between 2 and the square root of n\n    elif any(n%i == 0 for i in range(2, int(n**0.5)+1)):\n        return False\n    # If none of the above conditions are met, n is prime\n    else:\n        return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    i = 2\n    while True:\n        count = 0\n        for j in range(2, i):\n            if i % j == 0:\n                count += 1\n                if count > 2:\n                    break\n        else:\n            if count == 2:\n                yield i\n        i += 1\n        if i >= n:\n            return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the first three newman-shanks-williams primes\n    p1 = 2\n    p2 = 3\n    p3 = 5\n\n    # Iterate through the first n-1 newman-shanks-williams primes\n    for i in range(2, n):\n        # Calculate the next newman-shanks-williams prime number\n        p = p1 + p2 + p3\n\n        # Check if the next newman-shanks-williams prime number is prime\n        if is_prime(p):\n            return p\n\n        # Update the values of the previous newman-shanks-williams primes\n        p1 = p2\n        p2 = p3\n        p3 = p\n\n    # If n is greater than the number of newman-shanks-williams primes, return None\n    return None\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # The first newman-shanks-williams prime number is 5.\n    prime = 5\n\n    # Iterate through each prime number until the nth prime number is found.\n    for i in range(2, n):\n        # Check if the nth prime number is a newman-shanks-williams prime number.\n        if is_newman_prime(prime, i):\n            # If it is, return the nth prime number.\n            return prime\n        else:\n            # If it's not, increment the current prime number.\n            prime += 1\n\n    # If the loop completes without finding the nth prime number, return None.\n    return None\n\n\ndef is_newman_prime(prime, divisor):\n    '''\n    Check if the prime number is a newman-shanks-williams prime number.\n    '''\n    # Check if the prime number is divisible by 5 or 7.\n    if (prime % 5 == 0 or prime % 7 == 0):\n        return False\n\n    # Check if the prime number is divisible by the divisor.\n    if (prime % divisor == 0):\n        return False\n\n    # If the prime number is a newman-shanks-williams prime number,\n    # it must be divisible by 2 and 3.\n    if (prime % 2 == 0 and prime % 3 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    # initialize an empty list to store the results\n    result_list = []\n\n    # iterate through the elements of the tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division\n        element_result = test_tup1[i] / test_tup2[i]\n        result_list.append(element_result)\n\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Input tuples should have the same length.\")\n    \n    # check if the input tuples are non-empty\n    if not test_tup1:\n        raise ValueError(\"Input tuples should not be empty.\")\n    \n    # perform element-wise division operation\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(num1/num2 for num1, num2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            raise ValueError(\"The second input tuple cannot contain zero.\")\n    \n    return tuple(num1/num2 for num1, num2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (float(test_tup1[i]) / float(test_tup2[i]),)\n        except ZeroDivisionError:\n            result_tup += (float('inf'),)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(lst) < L:\n        raise ValueError(\"List length should be at least L\")\n    part1 = lst[:L]\n    part2 = lst[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    list1_short = list1[:L]\n    list1_long = list1[L:]\n    return (list1_short, list1_long)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2!= 0:\n        raise ValueError(\"The length of the list should be a multiple of 2.\")\n    half = len(list1) // 2\n    return (list1[:half], list1[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < 2*L:\n        raise ValueError(\"Length of list is less than 2L\")\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the number of parts required to split the list\n    num_parts = len(list1) // L + 1\n    \n    # Calculate the lengths of each part\n    length1 = L\n    length2 = num_parts * L - L\n    \n    # Split the list into two parts and return the result in a tuple\n    list1_part1 = list1[:length1]\n    list1_part2 = list1[length1:]\n    list2_part1 = []\n    list2_part2 = []\n    \n    for i in range(num_parts):\n        if i == 0:\n            list2_part1 = list1_part1\n        else:\n            list2_part1 += list1_part1\n        list2_part2 += list1_part2\n        list1_part1 = []\n        list1_part2 = []\n    \n    return (list2_part2, list2_part1)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the list into two parts where the length of the first part of the list is L.\n    It then returns the two resulting lists in a tuple.\n    '''\n    n = len(lst)\n    mid = n // 2\n    left_lst = lst[:mid]\n    right_lst = lst[mid:]\n    return (left_lst, right_lst)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Divide the given list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to store the first part of the list\n    first_part = []\n    # Iterate through the list and add elements to the first part of the list until its length is equal to L\n    for i in range(L):\n        first_part.append(list1[i])\n    # Create an empty list to store the second part of the list\n    second_part = []\n    # Iterate through the list from index L and add elements to the second part of the list until its length is equal to the length of the original list minus L\n    for i in range(L, len(list1)):\n        second_part.append(list1[i])\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # If L is greater than the length of the list, return the entire list as the first part\n    if L > len(list1):\n        return (list1, [])\n\n    # Create two empty lists to store the first and second parts of the list\n    part1 = []\n    part2 = []\n\n    # Add the first L elements of the list to the first part list\n    part1 = list1[:L]\n\n    # Add the remaining elements of the list to the second part list\n    part2 = list1[L:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 0\n    for i in range(1, 12):\n        years += h_age/i\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age / 7\n    return years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in years\n    dog_years = h_age / 7\n\n    # Return the dog's age in years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"Invalid input. Please enter a positive number.\")\n        return None\n    else:\n        years = h_age * 7\n        print(f\"{h_age} hours is approximately equal to {years} dog years.\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7\n    return h_age * dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize empty list for the resulting lists\n    result = []\n    \n    # loop through the input list\n    for i in range(0, len(S), step):\n        # create a new list that contains the current element and the elements after it\n        new_list = S[i:i+step]\n        # append the new list to the resulting list\n        result.append(new_list)\n        \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = 0\n    for i in range(0, len(S), step):\n        n += 1\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise ValueError('Input must be a list')\n    if not isinstance(step, int) or step <= 0:\n        raise ValueError('Step must be a positive integer')\n    n = len(S)\n    if n % step!= 0:\n        raise ValueError('Input list must have a length divisible by step')\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Loop through each element in the input list\n    for i in range(0, len(S), step):\n        # Extract a slice of the input list from index i to the end\n        slice_list = S[i:]\n        \n        # Append the extracted slice to the result list\n        result.append(slice_list)\n    \n    # Return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to hold the resulting lists\n    result = []\n\n    # Loop through the list, splitting it every n elements\n    for i in range(0, len(S), step):\n        # Create a new sublist with the current range of S\n        sublist = S[i:i+step]\n        # Append the sublist to the result list\n        result.append(sublist)\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError('Step must be a positive integer.')\n    \n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area using the formula:\n    # 2 * (l * l) + 2 * (l * l) + 2 * (l * l) = 6 * l^2\n    # 2 * (l * l) + 2 * (l * l) + 2 * (l * l) = 12 * l^2\n    # 2 * (l * l) + 2 * (l * l) = 8 * l^2\n    # 2 * (l * l) = 8 * l^2\n    # 2 * l^2 = 8 * l^2\n    # l^2 = 8 * l^2 / 2\n    # l = 2^(1/3)\n    # l = 2^(1/3) * sqrt(8) = 2^(1/3) * sqrt(64) = 4\n    # l = 4\n    \n    l = 4 # this is just a dummy value, since we're not using the function yet\n    \n    lateral_surface_area = 8 * l**2 # calculate the lateral surface area using the formula\n    \n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube using the formula:\n    # Lateral surface area = 6 * (l^2 + l^3)\n    return 6 * (l ** 2 + l ** 3)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l * l) + (12 * l)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        num = count * 2 + 1\n        sum += num ** 2\n        count += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer greater than 0.\"\n    else:\n        sum = 0\n        for i in range(2, n+1, 2):\n            sum += i**2\n        return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 0:\n        print(\"Please enter a non-negative integer\")\n        return\n    odd_numbers = [x for x in range(1, n+1, 2)]\n    square_sum = sum([x**2 for x in odd_numbers])\n    return square_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the square of the current odd number and add it to the sum\n        sum += i*i\n    # return the sum of the squares of the odd numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate over the first n odd natural numbers\n    for i in range(n):\n        # Compute the square of the current odd natural number\n        square = i*i\n        # Add the square to the sum variable\n        sum += square\n\n    # Return the final sum of squares\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the star number to 1\n    star_num = 1\n    \n    # loop n-1 times to add each digit of n to the star number\n    for i in range(n-1):\n        # loop through each digit of n\n        for j in range(1, 10):\n            # add the value of the digit to the current star number\n            star_num += j\n    \n    # return the final star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables for the result\n    result = \"\"\n    count = 0\n    # Loop until the count reaches n\n    while count < n:\n        # Check if the count is even or odd\n        if count % 2 == 0:\n            # If it's even, add a \"*\" to the result\n            result += \"*\"\n        else:\n            # If it's odd, add a \" \" to the result\n            result += \" \"\n        # Increment the count\n        count += 1\n    # Return the result as a string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    for i in range(1, n+1):\n        print(\"*\" * i)\n\nn = int(input(\"Enter the value of n: \"))\nfind_star_num(n)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the sum of the stars to 0\n    sum_stars = 0\n    \n    # Loop n times to add the corresponding number of stars to the sum\n    for i in range(1, n+1):\n        # Add i stars to the sum\n        sum_stars += i\n    \n    # Return the sum of the stars\n    return sum_stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n\n    # Check if n is greater than 0\n    if n <= 0:\n        raise ValueError('n must be greater than 0')\n\n    # Define a loop to generate then'th star number\n    for i in range(n):\n        # Print a star\n        print('*', end='')\n        # Print a newline character\n        print()\n\n    # Return the value of n\n    return n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    elif n == 3:\n        return \"***\"\n    else:\n        result = \"\"\n        for i in range(n-2):\n            result += \"*\"\n        return result + \"**\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    return n * (n - 1) + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1: \n        return \"Error: n must be a positive integer.\"\n    elif n == 1: \n        return \"*\"\n    else: \n        return \"*\" + find_star_num(n - 1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"1 star\"\n    elif n == 2:\n        return \"1 star and 1 star\"\n    else:\n        result = \"1 star and \"\n        for i in range(2, n):\n            result += str(i) + \" stars \"\n        return result[:-5] + \" star\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == str:\n        k = ord(k)\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    return ascii_dict.get(k, None)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    k = k.lower()  # Convert the input to lowercase to avoid case sensitivity issues\n    if k.isalpha():  # Check if the input is a letter\n        return ord(k)  # Return the ascii value of the letter\n    else:\n        return -1  # Return -1 if the input is not a letter"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.lower()\n    ascii_dict = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    if k in ascii_dict:\n        return ascii_dict[k]\n    else:\n        print('Invalid character entered.')"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_index_sum += arr[i]\n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    even_index = []\n    \n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n            even_index.append(i)\n    \n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n        if count % 2 == 0:\n            return even_sum\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    even_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n            even_count += 1\n\n    return sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n        if count % 2 == 0:\n            even_sum -= arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_pow = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_pow += i ** 5\n    return sum_pow"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [2, 4, 6, 8, 10]\n    sum = 0\n    for i in even_numbers[:n]:\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power = 0\n    for i in range(1, n+1):\n        sum_even_power += i**5\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    # initialize a variable to store the sum of even natural numbers raised to the fifth power\n    power_sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the even natural number raised to the fifth power to the power_sum variable\n        power_sum += i ** 5\n\n    # return the power_sum variable\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize a variable to store the sum of even natural numbers raised to the fifth power\n    power_sum = 0\n\n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        power_sum += i**5\n\n    return power_sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_val in test_list:\n        rear_list.append(tuple_val[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][1])\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Loop through both tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples should be equal.\")\n        return\n    \n    # Iterate through the tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Print the updated tuple\n    print(test_tup1)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return\n    \n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and calculates the sum of even index binomial coefficients.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(2, n+1):\n            sum += math.comb(n, i)\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of the even index binomial coefficients of n.\n    '''\n    even_binomial_coeffs = [math.comb(n, i) for i in range(n+1) if i%2 == 0]\n    return sum(even_binomial_coeffs)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 2:\n        raise ValueError('n must be a positive integer greater than or equal to 2')\n    \n    # Initialize variables for sum of even index binomial coefficients\n    even_sum = 0\n    \n    # Calculate sum of even index binomial coefficients using a loop\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_sum += math.comb(n, i)\n            \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = [1]\n    for i in range(1, n+1):\n        next_term = math.comb(n, i)\n        binomial_coeff.append(binomial_coeff[i-1] + next_term)\n    even_index_sum = sum([x for x in binomial_coeff if x % 2 == 0])\n    return even_index_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through each index from 0 to n-1 (inclusive)\n    for i in range(n):\n        \n        # Check if the current index is even\n        if i % 2 == 0:\n            \n            # If it is even, add the corresponding binomial coefficient to the sum\n            sum += math.comb(n, i)\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1, n + 1):\n        coeff_sum += math.comb(n, i) * i * 2\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    for i in range(2, n+1):\n        binomial = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_binomial += binomial\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += binom(n, i)\n    return sum\n\ndef binom(n, k):\n    '''\n    Write a python function that takes in two integers n and k and returns the binomial coefficient C(n, k).\n    '''\n    coeff = 1\n    for i in range(k):\n        coeff *= n - i\n        coeff //= i + 1\n    return coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        binom = math.comb(n, i)\n        if i % 2 == 0:\n            sum += binom\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and calculates the sum of the even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the values of i from 0 to n\n    for i in range(n+1):\n        # If i is even, add the binomial coefficient to the sum\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * pi * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r * r * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14 * (r**2)) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 1/3 * 3.14 * r * r * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r ** 2 * h) / 3\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v>=n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # create a new dictionary to store the filtered entries\n    filtered_dict = {}\n    # iterate over the keys and values in the original dictionary\n    for key, value in dict.items():\n        # check if the value is greater than or equal to n\n        if value >= n:\n            # add the entry to the new dictionary\n            filtered_dict[key] = value\n    # return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) // 2:\n            if test_tup[i]!= test_tup[0]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            count += 1\n            break\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += i*i\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_count = 1\n    decagonal = 1\n\n    while decagonal_count < n:\n        decagonal = (3*decagonal**2) + 1\n        decagonal_count += 1\n\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    decagonal_nums = [1]\n    for i in range(2, n + 1):\n        decagonal_nums.append(decagonal_nums[i - 1] + decagonal_nums[i - 2])\n    return decagonal_nums[n]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize the variable to store the result\n    decagonal = 0\n\n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the current number to the decagonal number\n        decagonal += i\n\n    # Return the decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2!= 0:\n        return False\n    elif n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        i = 1\n        j = 0\n        while i <= n // 2:\n            j = i\n            i += 1\n            if j > n // 2:\n                break\n            if n - j * (j + 1) == 2 * i:\n                return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_helper(num):\n        \"\"\"\n        Helper function to calculate the nth decagonal number.\n        \"\"\"\n        if num == 1:\n            return 1\n        else:\n            return 4 * num - 3\n\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return decagonal_helper(n - 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the number of squares in a decagonal pyramid\n    num_squares = (n * (n + 1)) // 2\n    # Calculate the number of rows in a decagonal pyramid\n    num_rows = (num_squares + 1) // 2\n    # Calculate the number of columns in a decagonal pyramid\n    num_cols = num_squares - (num_rows - 1) * (num_rows - 2) // 2\n    # Return the nth decagonal number\n    return num_rows * (2 * num_rows - 1) // 2 + num_cols"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 1\n    decagonal_num = 1\n\n    # Check if n is a valid input\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n\n    # Calculate the nth decagonal number\n    while decagonal_num < n:\n        temp = a + b\n        a = b\n        b = temp\n        decagonal_num += 1\n\n    # Check if n is the nth decagonal number\n    if decagonal_num == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # base case: if n is 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    if n in range(1, 11):\n        return n\n    \n    # recursive case: if n is greater than 10\n    elif n > 10:\n        return 0\n    \n    # check if (n-1) is a decagonal number\n    else:\n        return is_num_decagonal(n-1) + (10**n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return ((2 * n) + 1) * ((2 * n) + 1)\n"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Initialize a counter and a variable to store the index position of the element\n    counter = 0\n    index = -1\n    # Loop through the array until the counter reaches the length of the array\n    while counter < len(dlist):\n        # Check if the current element matches the item we're searching for\n        if dlist[counter] == item:\n            # If it does, update the index position and break out of the loop\n            index = counter\n            break\n        # If the current element doesn't match the item, increment the counter and move on to the next element\n        counter += 1\n    # Return a tuple containing the boolean and the index position of the element (or -1 if it's not found)\n    return (item in dlist, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Initialize variables\n    found = False\n    position = -1\n\n    # Loop through the array\n    for i in range(len(dlist)):\n        # Check if the current element is the target\n        if dlist[i] == item:\n            # If found, set the flag and index position\n            found = True\n            position = i\n            # Exit the loop\n            break\n\n    # Return the result as a tuple\n    return (found, position)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add unique elements to the set\n    for item in test_list:\n        if item not in unique_set:\n            unique_set.add(item)\n\n    # Check if the set has any elements in it\n    if not unique_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set to store unique elements of the list\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Using a set to remove duplicates\n    unique_list = list(set(test_list))\n    # Checking if the length of the unique_list is equal to the length of the test_list\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # check if the list is empty\n    if not test_list:\n        return True\n\n    # iterate over the list and check if each element appears only once\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i])!= len(test_list):\n            return False\n\n    # if we make it through the loop without finding any duplicates, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Check if the list is empty\n    if len(test_list) == 0:\n        return True\n    \n    # Initialize a dictionary to keep track of the count of elements in the list\n    count = {}\n    \n    # Loop through the list and update the count of each element\n    for element in test_list:\n        if element in count:\n            count[element] += 1\n        else:\n            count[element] = 1\n    \n    # Check if all the elements have count 1\n    for value in count.values():\n        if value > 1:\n            return False\n    \n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists are the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    \n    # Subtract each element of the two lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    # Return the result\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return 'Lists must have the same length'\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists should have same length.\"\n    else:\n        return [i - j for i, j in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must be of the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    sub_list = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # initialize an empty list to hold the result\n    result = []\n    \n    # iterate through the two input lists\n    for i in range(len(nums1)):\n        # subtract the corresponding elements\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of each digit\n    digit_freq = {}\n    \n    # Iterate over each digit in the integer\n    for digit in str(n):\n        # If the digit is not already in the dictionary, add it with a frequency of 1\n        if digit not in digit_freq:\n            digit_freq[digit] = 1\n        # If the digit is already in the dictionary, increment its frequency by 1\n        else:\n            digit_freq[digit] += 1\n    \n    # Iterate over each digit in the integer again and check if its frequency is less than or equal to its value\n    for digit in str(n):\n        if digit_freq[digit] > digit:\n            return False\n    \n    # If all digits pass the validation check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    for digit in str(n):\n        count = 0\n        for i in str(n):\n            if digit == i:\n                count += 1\n        if count > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # create a dictionary to store the frequency of each digit\n    freq_dict = {}\n\n    # loop through each digit in the integer\n    for digit in str(n):\n        # increment the frequency of that digit in the dictionary\n        freq_dict[digit] = freq_dict.get(digit, 0) + 1\n\n    # loop through each digit in the integer again and check if its frequency is less than or equal to itself\n    for digit in freq_dict:\n        if freq_dict[digit] > 1:\n            return False\n\n    # if all digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in str(n):\n        if count == 0:\n            count += 1\n        elif count > 0:\n            if int(i) > count:\n                return False\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    \n    # count the frequency of each digit in the integer\n    for i in str(n):\n        freq[int(i)] += 1\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > n % 10:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n    for digit in freq:\n        if digit > 1 and digit > digits[freq.index(digit)]:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = set()\n    for digit in str(n):\n        digits.add(digit)\n\n    for digit in digits:\n        digit_freq = digits.count(digit)\n        if digit_freq > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # create a dictionary to store the frequency of each digit\n    digit_freq = {}\n    \n    # loop through each digit in the integer\n    for digit in str(n):\n        # if the digit is not in the dictionary, add it and set its frequency to 1\n        if digit not in digit_freq:\n            digit_freq[digit] = 1\n        # if the digit is already in the dictionary, increment its frequency\n        else:\n            digit_freq[digit] += 1\n    \n    # loop through the dictionary and check if the frequency of each digit is less than or equal to itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # Check if the number is positive\n    if n <= 0:\n        return \"The number should be a positive integer.\"\n\n    # Convert the number to string and remove the leading zeros\n    num_str = str(n)[1:]\n\n    # Create a list of digits in the number\n    digits = [int(digit) for digit in num_str]\n\n    # Loop through each digit\n    for digit in digits:\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        freq = digits.count(digit)\n        if freq > digit:\n            return \"The frequency of each digit in the number should be less than or equal to the digit itself.\"\n\n    return \"The number is valid.\""
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Initialize a counter variable to keep track of the number of times we find the element in the list\n    count = 0\n    \n    # Loop through the list\n    for item in list:\n        # If we find the element, increment the counter variable\n        if item == element:\n            count += 1\n    \n    # Return True if all items in the list are equal to the given element, and False otherwise\n    return count == len(list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n\n    # Check if the first element is equal to the given element\n    if list[0] == element:\n        # If it is, check if all subsequent elements are equal to the given element\n        for i in range(1, len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Loop through each element in the list\n    for item in list:\n        # If the item is not equal to the given element, return False\n        if item!= element:\n            return False\n    # If we've made it this far, all items in the list are equal to the given element, so return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(lst, ele):\n    '''\n    A function to check if all elements in a list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= ele:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'\\ba{2,3}b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*[b]{2,3}'\n    matches = re.findall(pattern, text)\n    return True if len(matches) > 0 else False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB](?:[bB]){'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba(b{2,3})\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b){2,3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=[bB][bB]|[bB][bB][bB])'\n    match = re.search(pattern, text)\n    \n    if match:\n        print(f\"'{text}' contains the pattern {pattern}\")\n    else:\n        print(f\"'{text}' does not contain the pattern {pattern}\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    This function finds the largest sum of a contiguous array in the modified array \n    which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n\n    # Iterate over the array k times\n    for i in range(k):\n        # Initialize the current sum\n        current_sum = 0\n\n        # Iterate over the array\n        for j in range(n):\n            # Add the current element to the current sum\n            current_sum += a[j]\n\n            # Update the maximum sum if the current sum is greater\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    max_sum_ending_at_i = [0] * n\n    \n    # Find the maximum sum ending at each index i\n    for i in range(n):\n        max_sum_ending_at_i[i] = max(max_sum_ending_at_i[i-1], a[i])\n        \n    # Repeat the array k times\n    for i in range(k):\n        # Initialize the max sum to the first element\n        max_sum = max_sum_ending_at_i[0]\n        \n        # Find the maximum sum ending at each index i\n        for j in range(1, n):\n            # Update the maximum sum ending at index i\n            max_sum_ending_at_j = max(max_sum_ending_at_j, max_sum_ending_at_i[j-1] + a[j])\n            \n            # Update the max sum\n            max_sum = max(max_sum, max_sum_ending_at_j)\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array by repeating the given array k times\n    modified_array = a * k\n    # initialize two pointers for sliding window\n    start, end = 0, 0\n    # initialize variables for largest sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    # loop through the modified array\n    while end < len(modified_array):\n        # update the current sum by adding the current element\n        curr_sum += modified_array[end]\n        # move the window right by 1\n        end += 1\n        # check if the current sum is greater than the largest sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        # check if the window becomes too small\n        if end - start == n - 1:\n            # if it is, reset the start pointer and update the current sum\n            start += 1\n            curr_sum -= modified_array[start]\n    # return the largest sum of a contiguous array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == k:\n        return max(a)\n    \n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n-k):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        curr_sum -= a[i+k]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # calculate the sum of the original array\n    original_sum = sum(a)\n\n    # initialize variables for the maximum sum and the starting index of the largest sum\n    max_sum = float('-inf')\n    start_index = 0\n\n    # calculate the sum of the first k elements of the modified array\n    first_k_sum = sum(a[:k])\n\n    # calculate the sum of the second k elements of the modified array\n    second_k_sum = sum(a[k:])\n\n    # iterate over the modified array\n    for i in range(n-k):\n        # calculate the sum of the current modified array\n        current_sum = first_k_sum + second_k_sum + a[i+k]\n\n        # if the current sum is greater than the maximum sum, update the maximum sum and the starting index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n\n    # return the maximum sum and the starting index of the largest sum\n    return max_sum, start_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    repeated_sum = 0\n    \n    for i in range(n):\n        for j in range(k):\n            repeated_sum += a[i]\n            \n    for i in range(k):\n        repeated_sum = repeated_sum - a[i]\n        current_sum = 0\n        \n        for j in range(n):\n            current_sum += a[(i*n)+j]\n            \n        current_sum = current_sum + repeated_sum\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Store the original array\n    arr = a\n\n    # Initialize the result with the maximum subarray sum\n    result = max(a[0], a[-1])\n\n    # Iterate over the array and find the maximum sum of contiguous subarrays\n    for i in range(n-1):\n        # Initialize the current subarray sum\n        current_sum = max(a[i], a[-1])\n\n        # Iterate over the range of k from 1 to n-i-1\n        for j in range(1, k+1):\n            # Calculate the sum of the subarray\n            subarray_sum = 0\n            for m in range(i, i+j):\n                subarray_sum += arr[m]\n            current_sum = max(current_sum, subarray_sum)\n\n        # Update the result if the current subarray sum is greater\n        result = max(result, current_sum)\n\n    return result"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Create a modified array by repeating the given array k times\n    modified_array = [a] * k\n\n    # Initialize the maximum sum to be the sum of the first element\n    max_sum = a[0]\n\n    # Iterate through the modified array\n    for i in range(1, n):\n        # Add the current element to the modified array\n        modified_array[i % k] += a[i]\n\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, modified_array[i % k])\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # find the length of the given array\n    m = len(a)\n    # calculate the maximum sum of the given array\n    max_sum = sum(a)\n    # calculate the sum of the first k elements of the given array\n    sum_k = sum(a[:k])\n    # find the minimum sum of the repeated array\n    min_sum = sum_k * k\n    # loop through all possible starting indices for the repeated array\n    for i in range(m-k+1):\n        # calculate the sum of the repeated array\n        sum_repeated = sum(a[i:i+k])\n        # update the minimum sum if the current sum is greater than the current minimum\n        if sum_repeated < min_sum:\n            min_sum = sum_repeated\n    return min_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(k):\n        current_sum += a[i]\n    \n    if current_sum > max_sum:\n        max_sum = current_sum\n        \n    for i in range(n-k):\n        current_sum -= a[i] + a[i+k]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # Initializing sum variable to zero\n    sum = 0\n\n    # Looping through first n even natural numbers\n    for i in range(1, n+1, 2):\n\n        # Adding square of i to sum variable\n        sum += i*i\n\n    # Returning the sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i**2\n        i += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 1\n    while count <= n:\n        sum_of_squares += count**2\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initializing the sum of squares of even natural numbers\n    even_sum = 0\n\n    # iterating through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        even_sum += i**2\n\n    # returning the sum of squares of even natural numbers\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        sum_of_squares += count * count\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    num = 2\n    while num <= n:\n        sum_squares += num**2\n        num += 2\n    return sum_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    maxLengthList = []\n\n    for i in list1:\n        length = len(i)\n        if length > maxLength:\n            maxLength = length\n            maxLengthList = [length]\n        elif length == maxLength:\n            maxLengthList.append(length)\n\n    return maxLengthList"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of\n    maximum length in the input list.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > max(max_lengths):\n            max_lengths = [len(lst)]\n        elif len(lst) == max(max_lengths):\n            max_lengths.append(len(lst))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_lengths):\n            max_lengths = list1[i]\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an array of size n to store the number of ways\n    ways = [0] * (n + 1)\n\n    # Initialize the ways for 0 and 1 posts\n    ways[0] = 1\n    ways[1] = 1\n\n    # Fill the array using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            if j >= ways[i - 1]:\n                ways[i] += ways[i - j]\n\n    # Return the final value of ways[n]\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n\n    # Check if the number of colors is less than or equal to 2\n    if k <= 2:\n        return 1\n\n    # Initialize variables for keeping track of the number of ways to paint the fence and the count of the same color adjacent posts\n    ways = 0\n    count = 0\n\n    # Loop through each post in the fence\n    for i in range(n):\n\n        # Check if the current post is the first post or if the adjacent post has a different color from the current post\n        if i == 0 or fence[i - 1]!= fence[i]:\n\n            # Add 1 to the count of same color adjacent posts if the adjacent post has a different color from the current post\n            if fence[i]!= fence[i - 1]:\n                count += 1\n\n            # Check if the current post and the adjacent post have the same color\n            if fence[i] == fence[i - 1]:\n\n                # Add 1 to the count of same color adjacent posts if the adjacent post has a different color from the current post\n                if fence[i]!= fence[i - 1]:\n                    count += 1\n\n                # If the count of same color adjacent posts is greater than 2, then decrement the count and add 0 to the count of same color adjacent posts if the adjacent post has a different color from the current post\n                elif count > 2:\n                    count -= 1\n                    if fence[i]!= fence[i - 1]:\n                        count += 1\n\n                # Increment the count of same color adjacent posts if the adjacent post has the same color\n                else:\n                    count += 1\n\n            # If the adjacent post has the same color, then check if the current post is the second or third post\n            if i == 0 or fence[i - 1]!= fence[i]:\n                count += 1\n\n            # If the current post is the last post, then check if the count of same color adjacent posts is less than or equal to 2\n            if i == n - 1:\n                if count <= 2:\n                    ways += 1\n\n        # If the current post is not the first post or if the adjacent post has a different color from the current post, then decrement the count of same color adjacent posts if the adjacent post has a different color from the current post\n        if fence[i]!= fence[i - 1]:\n            count -= 1\n\n    # Return the total number of ways to paint the fence\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == 1 or i == n:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # Initializing the count to 0\n    count = 0\n    \n    # Looping through all the possible colors\n    for i in range(k):\n        # Initializing the count of adjacent colors to 0\n        adj_count = 0\n        \n        # Looping through all the possible positions\n        for j in range(n):\n            # If the color at the current position is not the same as the previous color, increment the count of adjacent colors\n            if i!= j:\n                adj_count += 1\n                \n            # If the count of adjacent colors is greater than or equal to 2, increment the count of ways to paint the fence\n            if adj_count >= 2:\n                count += 1\n                \n        # Resetting the count of adjacent colors to 0\n        adj_count = 0\n        \n    # Returning the count of ways to paint the fence\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the table with zeros\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base case\n    for i in range(n + 1):\n        dp[i][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the count of ways of painting the fence using k colors\n    count = {0: 1}\n\n    # Loop through the number of colors k\n    for i in range(1, k+1):\n        # Initialize a variable to store the sum of ways of painting the fence using i-1 colors\n        curr_sum = 0\n\n        # Loop through the number of ways of painting the fence using i-1 colors\n        for j in range(n+1):\n            # If there are fewer than 2 adjacent posts with the same color\n            if j < 2:\n                # Update the sum of ways of painting the fence using i-1 colors\n                curr_sum += count.get(j, 0)\n\n            # If there are exactly 2 adjacent posts with the same color\n            elif j == 2:\n                # Update the sum of ways of painting the fence using i-1 colors\n                curr_sum += count.get(j-1, 0)\n\n            # If there are at most 2 adjacent posts with the same color\n            else:\n                # Update the sum of ways of painting the fence using i-1 colors\n                curr_sum += count.get(j-1, 0) + count.get(j-2, 0)\n\n            # Update the count of ways of painting the fence using i colors\n            count[i] = curr_sum\n\n    # Return the count of ways of painting the fence using k colors\n    return count[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def backtrack(start, colors, ways):\n        if len(colors) == 0:\n            ways += 1\n        for i in range(start, n+1):\n            if i!= start and colors[0] == colors[1]:\n                continue\n            colors.append(i)\n            backtrack(i+1, colors, ways)\n            colors.pop()\n        return ways\n    \n    return backtrack(0, [], 0)\n\nn = int(input(\"Enter the number of posts: \"))\nk = int(input(\"Enter the number of colors: \"))\n\nprint(\"Number of ways:\", count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 0 or k <= 0: \n        return 0\n    elif n == 1: \n        return k\n    else: \n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a dictionary to store the number of ways for each color combination\n    ways = {1: 1}\n\n    # Loop through all possible colors\n    for color in range(2, k+1):\n        # For each color combination, loop through all possible adjacent post pairs and increment the count by the number of ways in each case\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if ways.get((i, j)) is not None:\n                    ways[(i, j, color)] = ways.get((i, j)) + ways.get((i, j, color-1))\n\n    # Return the final count for the given input\n    return ways[0, n-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D array to store the number of ways to paint the fence\n    # with n posts and k colors\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # Base case: if n is 0, return 1\n    if n == 0:\n        return 1\n    \n    # Base case: if n is 1, return n\n    if n == 1:\n        return n\n    \n    # Fill the dp array using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If both i-1 and j-1 have the same color, then we can paint the fence with n-1 posts and j-1 colors\n            if j >= dp[i-1][j]:\n                dp[i][j] = dp[i-1][j]\n            # Otherwise, we can paint the fence with i-1 posts and j colors\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    # Return the number of ways to paint the fence with n-1 posts and k colors\n    return dp[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate the quotient using integer division\n    quotient = n // m\n    # return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # floor division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient using integer division\n    quotient = n//m\n    \n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    This function calculates the quotient of two numbers (rounded down to the nearest integer).\n\n    :param n: The first number.\n    :param m: The second number.\n    :return: The quotient of the two numbers.\n    \"\"\"\n\n    # Check if both numbers are positive integers\n    if not isinstance(n, int) or not isinstance(m, int) or n < 0 or m < 0:\n        raise ValueError(\"Both numbers must be positive integers.\")\n\n    # Calculate the quotient using integer division\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w ** 2 + h ** 2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    area = math.sqrt(s*(s-w)*(s-h)*(s-w+h+w-2*h))\n    third_side = s * math.sin(math.acos((w**2+h**2-area)/2/s))\n    return round(third_side, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Find the length of the first and second sides of the triangle\n    s = math.sqrt(w**2 + h**2)\n    \n    # Find the hypotenuse of the right angle\n    a = math.sqrt(s**2 + h**2)\n    \n    # Calculate the third side of the right angled triangle\n    third = math.sqrt(w**2 + a**2)\n    \n    # Return the third side\n    return third"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    c = math.sqrt(w ** 2 + h ** 2)\n    return math.sqrt(s ** 2 + c ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt(w**2 - h**2)\n    return a + b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    # find the length of the other side\n    other_side = hypotenuse/2\n    # find the angle of the triangle\n    angle = math.acos((w**2 + h**2 - other_side**2)/(2*hypotenuse))\n    # calculate the third side of the triangle\n    third_side = other_side*math.sin(angle)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w+h) / 2\n    \n    # Calculate the area of a right triangle using Heron's formula\n    area = math.sqrt(s * (s-w) * (s-h) * (s-w+h))\n    \n    # Calculate the third side using the formula: c = (a+b+sqrt(s^2-a^2-b^2)) / 2\n    c = (area + math.sqrt(s**2 - area**2)) / 2\n    \n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    \n    # Calculate the third side of the triangle\n    third_side = math.sqrt(w * h)\n    \n    # Return the third side\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of values and returns the maximum value.\n    '''\n    # Initialize a variable to store the maximum value\n    max_val = None\n    # Loop through the list and compare each value with the current maximum\n    for val in listval:\n        if val is not None and (max_val is None or val > max_val):\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for item in listval:\n        if max_value is None or item > max_value:\n            max_value = item\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for item in listval:\n        if max_value is None:\n            max_value = item\n        elif item > max_value:\n            max_value = item\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to the smallest possible value\n    max_val = float('-inf')\n    # Loop through the list and compare each value to the current maximum value\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    This function takes in a heterogeneous list and returns the maximum value in the list.\n    '''\n    # Initialize a variable to store the maximum value\n    max_val = None\n    \n    # Loop through each value in the list\n    for value in listval:\n        # Check if the current value is greater than the maximum value\n        if max_val is None or value > max_val:\n            max_val = value\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the maximum value found so far\n    max_value = None\n    \n    # Loop through each element in the list\n    for i in listval:\n        # Check if the current element is greater than the maximum value found so far\n        if i > max_value:\n            max_value = i\n    \n    # Return the maximum value found\n    return max_value"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    i = 1\n    while i <= number:\n        if number % i == 0:\n            divisor_sum += i\n        i += 1\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a list to store the divisors\n    divisors = []\n\n    # Loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the number is divisible by i\n        if number % i == 0:\n            # If it is, add it to the divisors list\n            divisors.append(i)\n\n    # Add the original number to the divisors list\n    divisors.append(number)\n\n    # Calculate the sum of the divisors\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize the sum variable to 0\n    sum_div = 0\n    \n    # Loop through each number from 1 to the square root of the given number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the given number is divisible by the current number\n        if number % i == 0:\n            # If it is, add the current number to the sum variable\n            sum_div += i\n    \n    # Return the sum of all the divisors of the given number\n    return sum_div"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions \n    in the array. \n    '''\n    n = len(arr)\n    # Count the number of elements in the array\n    count = 0\n    # Create two sub-arrays for the left and right half of the array\n    left = [0] * n\n    right = [0] * n\n    # Divide the array into two parts based on the middle element\n    mid = n // 2\n    # Copy the first half of the array to the left array\n    for i in range(n):\n        left[i] = arr[i]\n    # Copy the last half of the array to the right array\n    for i in range(mid, n):\n        right[i - mid] = arr[i]\n    # Recursively count the number of inversions in the left and right sub-arrays\n    left_count = get_Inv_Count(left)\n    right_count = get_Inv_Count(right)\n    # Count the inversions in the current array and return the sum of the counts\n    count = count + left_count + right_count\n    for i in range(n):\n        for j in range(mid, n):\n            if left[i] > right[j - mid]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in it.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function takes an array as input and returns the number of inversions in it.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the left and right pointers of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize a variable to store the count of inversions\n    inv_count = 0\n\n    # Iterate through the array using two pointers\n    while left < right:\n        # Check if the left pointer is greater than or equal to the right pointer\n        if arr[left] >= arr[right]:\n            # If the left pointer is greater than the right pointer, increment the inversion count\n            inv_count += (right - left)\n            # Move the left pointer to the right\n            left += 1\n        else:\n            # If the left pointer is less than the right pointer, move the right pointer to the left\n            right -= 1\n\n    # Return the final count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # initialize the count variable to zero\n    count = 0\n    # loop through each pair of elements in the array\n    for i in range(len(arr)):\n        # loop through the remaining elements of the array\n        for j in range(i+1, len(arr)):\n            # if the current element is greater than the next element, increment the count variable\n            if arr[i] > arr[j]:\n                count += 1\n    # return the count variable\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += n - j \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        left = i\n        right = n - 1\n        while left < right:\n            if arr[left] > arr[right]:\n                left += 1\n            else:\n                right -= 1\n                inv_count += right - left + 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    inv_count = 0\n\n    # Divide the array into two halves \n    left = [0] * n\n    right = [0] * n\n\n    for i in range(n): \n        left[i] = arr[i] \n        right[i] = arr[i] \n\n    # Sort the left half \n    for i in range(1, n): \n        if left[i] > left[i - 1]: \n            left[i], left[i - 1] = left[i - 1], left[i] \n            inv_count += (i - 1) \n\n    # Sort the right half \n    for i in range(n - 2, -1, -1): \n        if right[i] > right[i + 1]: \n            right[i], right[i + 1] = right[i + 1], right[i] \n            inv_count += (i - n + 1) \n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    inv_count = 0 \n  \n    # Divide array into two halves \n    low = 0 \n    high = n-1 \n    mid = n//2 \n  \n    # Sort first half \n    while low < mid: \n        if arr[low] > arr[high]: \n            # swap arr[low] and arr[high] \n            arr[low], arr[high] = arr[high], arr[low] \n            inv_count += (mid - low) \n            # increment low and decrement high \n            low += 1 \n            high -= 1 \n  \n    # Sort second half \n    while low <= high: \n        if arr[low] > arr[high]: \n            # swap arr[low] and arr[high] \n            arr[low], arr[high] = arr[high], arr[low] \n            inv_count += (high - low + 1) \n            # increment low and decrement high \n            low += 1 \n            high -= 1 \n    return inv_count "
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Parameters:\n    list1 (list): The nested list to be flattened.\n\n    Returns:\n    list: A flattened list.\n\n    Example:\n    >>> flatten_list([[1, 2], [3, [4, 5], 6], [7]])\n    [1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a list recursively until there is no more nested list.\n\n    Parameters:\n    - lst: the list to flatten\n\n    Returns:\n    - a flat list\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for i in range(len(item)):\n            max_dict[i] = max(max_dict[i], item[i])\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    st_map = defaultdict(list)\n    max_aggr = 0\n    \n    for tup in stdata:\n        st_map[tup[0]].append(tup[1])\n    \n    for st, lst in st_map.items():\n        max_aggr = max(max_aggr, sum(lst))\n    \n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each item\n    max_dict = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        # Check if the current price is greater than the maximum aggregate for the item\n        if price > max_dict[item]:\n            # Update the maximum aggregate for the item\n            max_dict[item] = price\n\n    # Calculate the maximum aggregate from the defaultdict\n    max_agg = max(max_dict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Create a defaultdict to store the maximum aggregate for each item\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        # Calculate the aggregate for each item\n        agg = price * item\n        # Update the maximum aggregate for each item in the defaultdict\n        max_agg[item] = max(agg, max_agg[item])\n\n    # Return the maximum aggregate for each item\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each day\n    max_dict = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for day, value in stdata:\n        # Add the value to the maximum aggregate for the current day\n        max_dict[day] += value\n\n    # Find the maximum value in the dictionary\n    max_val = max(max_dict.values())\n\n    # Return the maximum value as the maximum aggregate\n    return max_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each product\n    max_aggr = defaultdict(lambda: 0)\n\n    # Iterate over the list of tuples and update the maximum aggregate for each product\n    for product, price in stdata:\n        max_aggr[product] = max(max_aggr[product], price)\n\n    # Find the maximum aggregate across all products\n    max_agg = max(max_aggr.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate and its index\n    max_agg = defaultdict(list)\n    # Iterate through the list of tuples and update the max_agg dictionary\n    for i, tup in enumerate(stdata):\n        max_agg[tup[1]].append(i)\n    # Find the maximum aggregate and its index\n    max_agg_index = max(max_agg.items(), key=lambda x: max(x[1]))\n    # Return the maximum aggregate and its index\n    return max_agg_index[0], max_agg_index[1]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples and update the max_aggr dict\n    for c, a in stdata:\n        max_aggr[c] = max(max_aggr[c], a)\n\n    # Find the maximum aggregate from the defaultdict\n    max_agg = max(max_aggr.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_count = 0\n    count_dict = defaultdict(int)\n    for item in stdata:\n        count = count_dict[item[0]]\n        count_dict[item[0]] += 1\n        total_sum = sum(item[1])\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_count = count\n    return max_sum, max_count"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate\n    max_dict = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for t in stdata:\n        # Calculate the maximum aggregate\n        max_dict[t[0]] = max(max_dict[t[0]], t[1])\n\n    # Return the maximum aggregate\n    return max(max_dict.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(n+1)-1):\n        if sum(bin(i)[2:].zfill(n)) == sum(bin(i)[-n:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables\n    count = 0\n    num = 1\n    i = 1\n    \n    # Calculate the number of binary sequences\n    while i <= 2 * n:\n        # Calculate the sum of first n bits\n        first_bits = num >> n\n        \n        # Calculate the sum of last n bits\n        last_bits = num & ((1 << n) - 1)\n        \n        # Check if both sums are same\n        if first_bits == last_bits:\n            count += 1\n        \n        # Increment the number\n        num += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n, 2**(2*n), 2**n):\n        if sum(bin(i)[2:].zfill(n)) == sum(bin(i)[-n:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first = bin(i)[2:].zfill(n)\n        last = bin(~i)[2:].zfill(n)\n        if int(first) == int(last):\n            count += 1\n    return count\n\nprint(count_binary_seq(4)) # Output: 27"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n, 2**n): \n        sum1 = 0 \n        sum2 = 0 \n        for j in range(n): \n            if i & (1<<j): \n                sum1 += 2**(n-j-1) \n            else: \n                sum2 += 2**(n-j-1) \n        if sum1 == sum2: \n            count += 1 \n    return count "
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n+1):\n        x = bin(i)[2:]\n        if x.startswith('1') and x.endswith('1'):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count_list = []\n    sum1 = 0\n    sum2 = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:]\n        if n >= len(binary_seq):\n            continue\n        sum1 = sum1 + int(binary_seq[:n])\n        sum2 = sum2 + int(binary_seq[n:])\n        if sum1 == sum2:\n            count_list.append(i)\n    return count_list"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        last_n_bits = binary_str[-n:]\n        first_n_bits = binary_str[:n]\n        if last_n_bits == first_n_bits:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # Find the sum of first n bits\n        sum1 = 0\n        for j in range(n):\n            if i & (1 << j):\n                sum1 += 1\n        # Find the sum of last n bits\n        sum2 = 0\n        for j in range(n):\n            if i & (1 << (n-1-j)):\n                sum2 += 1\n        # Check if both sums are same\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:]\n        first_half = binary_str[:n]\n        last_half = binary_str[n:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 1\n        for key, value in d.items():\n            depth += max(dict_depth(value), 0)\n        return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value))\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item))\n                depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            count += 1\n    return count + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        for value in d.values():\n            depth = max(depth, dict_depth(value, depth + 1))\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    def circular_rotate(arr, n, k):\n        \"\"\"\n        Given an array and a number of rotations, returns the rotated array.\n        \"\"\"\n        arr = arr[-n:] + arr[:-n]\n        for i in range(k):\n            arr.append(arr.pop(0))\n        return arr\n\n    # Find the index of the element at the given index after rotations\n    element_index = (index + rotations) % len(arr)\n    # Rotate the array by k rotations to get the element at the given index\n    rotated_arr = circular_rotate(arr, len(arr), rotations)\n    return rotated_arr[element_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of rotations, and an index\n    and returns the element that would appear at that index after the specified number of rotations.\n\n    Args:\n        arr (list): The array to be rotated.\n        ranges (list): A list of tuples containing the starting and ending indices of each range of the array.\n        rotations (int): The number of rotations that have been applied to the array.\n        index (int): The index at which the element is to be found.\n\n    Returns:\n        The element at the specified index after the number of rotations.\n\n    \"\"\"\n    # Define variables to keep track of the index of the first element in each range\n    first_indices = []\n    # Define the list to store the elements at each index after rotations\n    elements_after_rotations = []\n\n    # Loop through the list of ranges and their corresponding first indices\n    for i in range(len(ranges)):\n        # Calculate the length of the range and the starting index of the next range\n        length = ranges[i][1] - ranges[i][0] + 1\n        next_start = ranges[i][0] + length * rotations\n        # Append the first index of the next range to the list of first indices\n        first_indices.append(next_start)\n\n    # Loop through the indices in the array\n    for i in range(len(arr)):\n        # If the current index is equal to the index of the element we're looking for\n        if i == index:\n            # Set the current element to the element at the given index after the number of rotations\n            current_element = arr[first_indices[i % len(first_indices)] - 1]\n        # If the current index is not equal to the index of the element we're looking for\n        else:\n            # Calculate the index of the element after rotations in the array and add 1 to account for Python's indexing starting at 0\n            next_index = (first_indices[i % len(first_indices)] - 1) % len(arr) + 1\n            # Append the element at the next index to the list of elements after rotations\n            elements_after_rotations.append(arr[next_index - 1])\n\n    # Return the element at the given index after rotations\n    return elements_after_rotations[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n        arr: A list of integers.\n        ranges: A list of tuples containing start and end indices for each range of rotations.\n        rotations: An integer representing the number of rotations to perform.\n        index: An integer representing the index of the element to be found.\n\n    Returns:\n        The element at the given index after number of rotations.\n\n    Raises:\n        ValueError: If any of the arguments have invalid types or lengths.\n    \"\"\"\n    # Check if all arguments are of the correct types and lengths\n    if not isinstance(arr, list) or not isinstance(ranges, list) or not isinstance(rotations, int) or not isinstance(index, int):\n        raise ValueError(\"All arguments must be of type list and have the appropriate length.\")\n    if len(arr)!= len(ranges) or len(ranges)!= len(rotations) or len(ranges)!= len(arr):\n        raise ValueError(\"All lists must have the same length.\")\n    if index < 0 or index >= len(arr):\n        raise ValueError(\"Index must be between 0 and the length of the array.\")\n\n    # Apply all rotations to the array\n    for i, (start, end) in enumerate(ranges):\n        arr[start:end] = arr[start:end][::-1]\n\n    # Find the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges and rotations as input and returns the element at the given index after rotations.\n    \"\"\"\n    # Initialize the current element to the first element of the array\n    current_element = arr[0]\n\n    # Loop through the rotations and apply them to the current element\n    for _ in range(rotations):\n        # Find the next element in the given range by incrementing the current element\n        next_element = current_element + 1 if current_element in ranges[0] else current_element - 1\n\n        # Check if the next element is in the array\n        if next_element in arr:\n            # If it is, return the next element\n            return next_element\n        else:\n            # If not, increment the current element to find the next valid element\n            current_element = next_element\n\n    # If no valid element is found after rotations, return the current element\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)):\n        if (rotations + i) % ranges[i] == 0:\n            return arr[index - (rotations + i) % ranges[i]]\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    rot_arr = [0] * len(arr)  # create a rotated array\n\n    # rotate the array\n    for i in range(rotations):\n        rot_arr = arr[-1:] + rot_arr[:-1]\n\n    # find the element at the given index\n    element = rot_arr[index]\n\n    return element\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, a list of rotations, and an index as input.\n    It calculates the element at the given index after applying the specified rotations to the array.\n    The ranges and rotations lists should be sorted in ascending order.\n    \n    For example, if the array is [1, 2, 3, 4, 5], the ranges list is [0, 4], the rotations list is [1, 2, 3, 4], and the index is 2,\n    then the function will return 3.\n    \n    If the index is greater than or equal to the length of the array, the function will return None.\n    '''\n\n    # Check if the index is within the bounds of the array\n    if index < 0 or index >= len(arr):\n        return None\n\n    # Calculate the length of the array after the rotations\n    array_after_rotations = apply_rotations(arr, ranges, rotations)\n\n    # Check if the index is within the bounds of the array after rotations\n    if index < 0 or index >= len(array_after_rotations):\n        return None\n\n    return array_after_rotations[index]\n\n\ndef apply_rotations(arr, ranges, rotations):\n    '''\n    This function takes an array, a list of ranges, and a list of rotations as input.\n    It applies the rotations to the array and returns the result.\n    The ranges list should be sorted in ascending order.\n    \n    For example, if the array is [1, 2, 3, 4, 5], the ranges list is [0, 4], and the rotations list is [1, 2, 3, 4],\n    then the function will return [5, 2, 4, 3, 1].\n    '''\n\n    # Calculate the length of the array after the rotations\n    n = len(arr)\n    array_after_rotations = arr.copy()\n\n    for rotation in rotations:\n        # Calculate the new starting position\n        start_position = rotation + ranges[rotation]\n\n        # Calculate the new end position\n        end_position = (rotation + ranges[rotation]) % n\n\n        # Rotate the array\n        array_after_rotations[start_position:end_position] = arr[end_position:start_position] + array_after_rotations[start_position:end_position]\n\n    return array_after_rotations\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, and a number of rotations as input, and returns the element at the given index after rotations.\n\n    Args:\n        arr: array of integers\n        ranges: list of tuples representing the rotations\n        rotations: number of rotations to apply\n        index: index of the element to be found after rotations\n\n    Returns:\n        The element at the given index after rotations.\n    \"\"\"\n    # Initialize the element to be found\n    element = arr[index]\n\n    # Iterate over the rotations\n    for _ in range(rotations):\n        # Get the range of indices to rotate over\n        start, end = ranges.pop()\n\n        # Rotate the element by swapping elements at the start and end indices\n        temp = element\n        element = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n\n    # Return the rotated element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array of integers, a list of tuples representing the ranges of integers, \n    the number of rotations required to find the element at the given index, and the index of the element\n    that needs to be found.\n\n    The function then checks if the element at the given index is within the range specified by the range\n    tuples. If it is, the function checks if the element is within the range specified by the current \n    rotation. If it is, the function recursively calls itself with the current index incremented by 1.\n\n    If the element is not within the range specified by the range tuples, the function checks if the\n    element is within the range specified by the next rotation. If it is, the function recursively calls\n    itself with the next rotation and the current index incremented by 1.\n\n    If the element is not within the range specified by the range tuples or the range specified by the\n    next rotation, the function returns None.\n\n    :param arr: The array of integers\n    :param ranges: The list of tuples representing the ranges of integers\n    :param rotations: The number of rotations required to find the element at the given index\n    :param index: The index of the element that needs to be found\n    :return: The element at the given index after rotations\n    \"\"\"\n\n    # Check if the element is within the range specified by the range tuples\n    for i in range(len(ranges)):\n        if arr[index] >= ranges[i][0] and arr[index] <= ranges[i][1]:\n            break\n    else:\n        # If the element is not within the range specified by the range tuples, check if it is within the range specified by the next rotation\n        if index == 0:\n            # If the index is 0, there is only one rotation left\n            return None\n        else:\n            # Otherwise, recursively call the function with the next rotation and the current index incremented by 1\n            return find_Element(arr, ranges, rotations - 1, index - 1)\n\n    # If the element is within the range specified by the range tuples, check if the element is within the range specified by the current rotation\n    if index >= rotations:\n        # If the index is greater than or equal to the number of rotations, the element is within the range specified by the current rotation\n        return arr[index]\n    else:\n        # Otherwise, recursively call the function with the next rotation and the current index incremented by 1\n        return find_Element(arr, ranges, rotations, index + 1)\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regular expression pattern for starting with 'p'\n    pattern = re.compile(r'^p\\w+')\n    # Initialize variables to store two words starting with 'p'\n    first_p_word = None\n    second_p_word = None\n    # Loop through all words in the list\n    for word in words:\n        # If the word matches the regular expression pattern, check if it's the first or second word starting with 'p'\n        if pattern.match(word):\n            if first_p_word is None:\n                first_p_word = word\n            else:\n                second_p_word = word\n    # Return the two words starting with 'p'\n    return first_p_word, second_p_word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\")\n    matched_words = []\n    for word in words:\n        if pattern.match(word):\n            matched_words.append(word)\n    return matched_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p[a-z]*')\n    for word in words:\n        match = pattern.search(word)\n        if match:\n            return word, match.group()"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # pattern to match words starting with letter 'p'\n    pattern = r'p[a-z]+'\n    # use re.findall() to find all words starting with letter 'p' in the list\n    matches = re.findall(pattern, words)\n    # return the two words starting with 'p'\n    return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression pattern to match words starting with 'p'\n    pattern = re.compile('^[pP]')\n    \n    # Find all words starting with 'p'\n    matches = [word for word in words if pattern.match(word)]\n    \n    # Check if there are at least two matches\n    if len(matches) < 2:\n        return None\n    \n    # Return two matches\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-z]*')\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Create a regular expression pattern to match words starting with 'p'\n    pattern = re.compile('^p[a-zA-Z]*')\n\n    # Find all words starting with 'p'\n    p_words = [word for word in words if pattern.match(word)]\n\n    # Return the first two words in the list\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    matches = re.findall(pattern, words)\n    if len(matches) >= 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return float('-inf')\n    if index == 0:\n        return a[index]\n    if a[index] > a[index-1]:\n        return max(a[index], max_sum_increasing_subseq(a, n, index-1, k))\n    else:\n        return max(a[index], max_sum_increasing_subseq(a, n, index-1, k)) + a[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [[0 for _ in range(n)] for _ in range(k)]\n    max_sum = float('-inf')\n\n    for i in range(k):\n        dp[i][index] = a[index]\n        if i == 0:\n            max_sum = a[index]\n        elif i == k - 1:\n            max_sum = max(max_sum, a[index])\n        else:\n            max_sum = max(max_sum, a[index] + dp[i][index - 1])\n\n    for i in range(k, n):\n        for j in range(i - k + 1):\n            dp[i % k][j] = dp[(i - 1) % k][j] + a[i]\n            if i % k == 0:\n                max_sum = max(max_sum, dp[i % k][j])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate over all possible prefixes up to ith index\n    for i in range(index, n):\n        # If current element is less than or equal to k, add it to the sum\n        if a[i] <= k:\n            current_sum += a[i]\n        else:\n            # If sum is greater than previous max sum, update max sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            # Reset the sum\n            current_sum = 0\n    \n    # If sum is greater than previous max sum, update max sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Traverse the array starting from i index\n    for i in range(index, n):\n        # Check if the current element is greater than kth element\n        if a[i] > k:\n            # Calculate the sum of the increasing subsequence up to i\n            current_sum += a[i]\n            \n            # If the current sum is greater than the maximum sum so far, update the max_sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n    \n    # If the current sum is greater than the maximum sum so far, update the max_sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n    \n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    max_subseq = [float('-inf')] * n\n\n    # Calculate sum of increasing subsequence from 0 to i-1 and store the sum in max_sum\n    for i in range(n):\n        if i > 0 and a[i] > a[i-1]:\n            max_sum = max(max_sum, max_sum + a[i] - a[i-1])\n        elif i == 0 or a[i] <= a[i-1]:\n            max_sum = max(max_sum, a[i])\n\n    # Calculate the maximum sum of increasing subsequence from 0 to index\n    for i in range(index+1, n+1):\n        # Calculate the sum of increasing subsequence from 0 to i-1 and store the sum in max_sum\n        for j in range(i-1, -1, -1):\n            if j > 0 and a[j] > a[j-1]:\n                max_sum = max(max_sum, max_sum + a[j] - a[j-1])\n            elif j == 0 or a[j] <= a[j-1]:\n                max_sum = max(max_sum, a[j])\n\n        # Update the maximum sum of increasing subsequence from 0 to index if the sum is greater than max_sum\n        if max_sum > max_subseq[i-index-1]:\n            max_subseq[i-index-1] = max_sum\n\n    # Find the maximum sum of increasing subsequence from index to k\n    for i in range(index, k):\n        if max_subseq[i] > max_subseq[k-index-1]:\n            max_subseq[k-index-1] = max_subseq[i]\n\n    # Return the maximum sum of increasing subsequence from index to k\n    return max_subseq[k-index-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Base case\n    if index == 0:\n        return a[0] * (k - index + 1)\n\n    # Recursive case\n    max_ending_here = max_sum_increasing_subseq(a, n, index-1, k)\n\n    if a[index] > a[k-1]:\n        max_ending_here = max(max_ending_here, a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\n\n    return max_ending_here"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0, 0\n    \n    if index == k:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1))\n    \n    if a[index] > a[index+1]:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k) + a[index]\n\n\na = [10, 22, 9, 33, 21, 50, 41, 60, 80]\nn = len(a)\nk = 3\nprint(max_sum_increasing_subseq(a, n, 0, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Check if k is greater than or equal to index\n    if k >= index:\n        return 0\n\n    # Traverse through the array\n    for i in range(index, n):\n        # If current element is greater than kth element\n        if a[i] > a[k]:\n            # Update the current sum\n            current_sum += a[i]\n            # Update the maximum sum if the current sum is greater than the maximum sum so far\n            if current_sum > max_sum:\n                max_sum = current_sum\n        # If current element is less than or equal to kth element\n        else:\n            # Update the current sum\n            current_sum = 0\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if index == 0:\n        return a[0]\n\n    max_sum = float('-inf')\n    for i in range(index):\n        if a[i] < a[k]:\n            continue\n        temp_sum = max_sum_increasing_subseq(a, n, i, k)\n        if temp_sum > max_sum:\n            max_sum = temp_sum + a[i]\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n\n    dp = [0] * n\n\n    for i in range(k, index):\n        dp[i] = max(dp[i-1] + a[i], dp[i-k] + a[i])\n\n    return max(dp[i] for i in range(index))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(deepcopy(tuplex[i]))\n    for j in range(n):\n        colon.append(deepcopy(tuplex[i+j]))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # get the length of the tuple\n    length = len(tuplex)\n\n    # check if the length of the tuple is greater than or equal to m\n    if length >= m:\n        # get the last element of the tuple\n        last = tuplex[-1]\n\n        # check if the length of the last element is greater than or equal to n\n        if len(last) >= n:\n            # create a new list to store the new elements\n            new_list = []\n\n            # loop through the last n elements of the tuple\n            for i in range(n):\n                # add the i-th element of the last n elements to the new list\n                new_list.append(last[i])\n\n            # create a new tuple from the new list and return it\n            return tuple(new_list)\n        else:\n            # if the length of the last element is less than n, return the entire tuple\n            return tuplex\n    else:\n        # if the length of the tuple is less than m, return an empty tuple\n        return ()"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)[:m] + (tuplex[m],) + deepcopy(tuplex)[m+1:m+n+1]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check if input is valid\n    if isinstance(tuplex, tuple) == False or isinstance(m, int) == False or isinstance(n, int) == False or m <= 0 or n <= 0:\n        return \"Invalid input. Please provide a valid tuple and positive integer values for m and n.\"\n    # create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # find the index of the element to be replaced\n    index_to_replace = m - 1\n    # replace the element at the index with None\n    tuplex_copy[index_to_replace] = None\n    # check if the index is valid\n    if index_to_replace >= len(tuplex_copy) or index_to_replace < 0:\n        return \"Invalid index. Please provide a valid index.\"\n    # check if the replacement element is valid\n    if isinstance(tuplex_copy[index_to_replace], int) == False:\n        return \"Invalid replacement element. Please provide an integer value.\"\n    # return the colon of the tuple\n    return tuplex_copy[:index_to_replace] + (tuplex_copy[index_to_replace],) + tuplex_copy[index_to_replace+1:]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check if m and n are valid indices of tuplex\n    if m < 0 or m >= len(tuplex) or n < 0 or n >= len(tuplex[m]):\n        return None\n    \n    # create a new tuple with all elements of tuplex from m to n-1\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m, n):\n        del new_tuplex[i]\n    \n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # slice the copy to get a colon of the tuple\n    colon = tuplex_copy[:m*n]\n    # return the colon of the tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple for modification\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the index of the first element of the colon\n    first_index = n + m - 1\n\n    # Get the index of the last element of the colon\n    last_index = m + n - 1\n\n    # Set the first element of the colon\n    new_tuplex[first_index] = '|'\n\n    # Set the last element of the colon\n    new_tuplex[last_index] = '|'\n\n    # Return the colon of the tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    colon = tuple(deepcopy(tuplex[i:i+n]) for i in range(0,len(tuplex),m))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Check if the dimensions of the tuple are valid\n    if len(tuplex)!= m * n:\n        print(\"Error: The dimensions of the tuple are not valid.\")\n        return None\n    \n    # Create a list to store the colon\n    colon_list = []\n\n    # Use a for loop to iterate through each element in the tuple\n    for i in range(m):\n        for j in range(n):\n            # Create a new tuple with the appropriate element\n            new_tuple = deepcopy(tuplex)\n            new_tuple[i * n + j] = None\n            # Append the new tuple to the colon list\n            colon_list.append(tuple(new_tuple))\n\n    # Convert the colon list to a tuple of tuples\n    colon_tup = tuple(colon_list)\n\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n == 1:\n        return (tuplex[m-1],)\n    else:\n        left = colon_tuplex(tuplex, m, n-1)\n        right = colon_tuplex(tuplex, m-1, n-1)\n        return ((left[0][0], right[0][-1]), (left[1][0], right[1][-1]))"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i], nums2[i]))\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Initialize variables to store the products and indices\n    products = []\n    indices = []\n    # Loop through the two lists\n    for i in range(N):\n        # Find the largest product from each list using indices and multiplication\n        prod1 = nums1[i] * nums2[i]\n        prod2 = nums1[i] * nums2[N-1-i]\n        # If the product is greater than the current largest, update the variables\n        if prod1 > max(products):\n            products = [prod1]\n            indices = [i]\n        elif prod2 > max(products):\n            products = [prod2]\n            indices = [N-1-i]\n        else:\n            continue\n    # Return the products and indices\n    return products, indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables to store the largest products\n    largest1 = largest2 = float('-inf')\n    \n    # Loop through the specified number of times\n    for i in range(N):\n        # Calculate the product of the two largest numbers from each list\n        product1 = nums1[-1] * nums1[-2]\n        product2 = nums2[-1] * nums2[-2]\n        \n        # Update the largest products\n        if product1 > largest1:\n            largest1 = product1\n        if product2 > largest2:\n            largest2 = product2\n    \n    # Return the largest products\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    max_factor = []\n    \n    # Sort the input lists based on the first element\n    nums1.sort(key=lambda x: x[0])\n    nums2.sort(key=lambda x: x[0])\n    \n    # Iterate through the first N elements of each list and find the largest product\n    for i in range(N):\n        prod1 = nums1[i][1] * nums1[i+1][1]\n        prod2 = nums2[i][1] * nums2[i+1][1]\n        max_prod = max(prod1, prod2)\n        \n        if max_prod > 0:\n            max_products.append((prod1, prod2))\n            max_factor.append(nums1[i][0])\n    \n    return max_products, max_factor"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize a dictionary to store the largest products\n    products = {}\n    \n    # Loop through each factor of N (two in this case)\n    for i in range(2):\n        # Initialize the current factor to a very large number\n        current_factor = 0\n        \n        # Loop through each number in the list\n        for j in range(len(nums1)):\n            # Multiply the current factor by the current number\n            current_factor *= nums1[j]\n            \n            # If the current factor is greater than the current largest product, update the dictionary\n            if current_factor > products.get(i, 0):\n                products[i] = current_factor\n    \n    # Initialize a list to store the final results\n    final_results = []\n    \n    # Loop through each factor (two in this case)\n    for i in range(2):\n        # Loop through each number in the list\n        for j in range(len(nums1)):\n            # Multiply the current factor by the current number\n            current_factor *= nums1[j]\n            \n            # If the current factor is equal to the largest product for that factor, append it to the final results\n            if current_factor == products[i]:\n                final_results.append(nums2[j])\n                # Break out of the inner loop for this number\n                break\n    \n    # Return the final results list\n    return final_results"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables for the largest products and the count of products found so far\n    largest_product = float('-inf')\n    count = 0\n    \n    # Loop through the lists until the desired number of products is found\n    while count < N:\n        # Calculate the product of the current factor pairs\n        product = nums1[0] * nums2[0]\n        \n        # Check if the product is larger than the current largest product\n        if product > largest_product:\n            largest_product = product\n            count += 1\n        \n        # Shift the factor lists to the right to consider the next pair\n        nums1 = nums1[1:]\n        nums2 = nums2[1:]\n    \n    # Return the largest product found\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the maximum product and the sum of the products\n    max_product = 0\n    total_products = 0\n    \n    # Loop through the first N elements of both lists\n    for i in range(N):\n        # Calculate the product of the first N elements of the two lists\n        product1 = nums1[i] * nums1[i+1] * nums1[i+2] *... * nums1[N-1]\n        # Calculate the product of the first N elements of the two lists\n        product2 = nums2[i] * nums2[i+1] * nums2[i+2] *... * nums2[N-1]\n        \n        # Update the maximum product and the sum of the products\n        if product1 > max_product:\n            max_product = product1\n        total_products += product1\n        \n        if product2 > max_product:\n            max_product = product2\n        total_products += product2\n    \n    # Divide the total sum of products by 2N to get the average of the products\n    average_product = total_products / 2 * N\n    \n    # Print the maximum product and the average product\n    print(\"The maximum product is:\", max_product)\n    print(\"The average product is:\", average_product)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize a list to store the largest products\n    products = []\n\n    # Iterate over the N smallest numbers from each list\n    for i in range(N):\n        # Find the minimum and maximum values of the i-th number from each list\n        min1 = min(nums1[i], nums2[i])\n        max1 = max(nums1[i], nums2[i])\n        min2 = min(nums1[:i] + nums1[i+1:])\n        max2 = max(nums2[:i] + nums2[i+1:])\n\n        # Check if the product of the two factors is within the range of the two values\n        if (max1 - min1) * (max2 - min2) <= 0:\n            return []\n\n        # Check if the product is already in the list of largest products\n        if products and products[-1] < (max1 - min1) * (max2 - min2):\n            continue\n\n        # Add the product to the list of largest products\n        products.append((max1 - min1) * (max2 - min2))\n\n    # Return the list of largest products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists should have the same length.')\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError('N should not exceed the length of one of the input lists.')\n    \n    largest_products = []\n    for i in range(N):\n        factor1 = max(nums1)\n        factor2 = max(nums2)\n        largest_product = factor1 * factor2\n        largest_products.append(largest_product)\n        nums1 = [num for num in nums1 if num!= factor1]\n        nums2 = [num for num in nums2 if num!= factor2]\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        product = 1\n        for j in range(len(nums1)):\n            if j == i:\n                continue\n            product *= max(nums1[j], nums2[j])\n        max_products.append(product)\n    max_products.sort(reverse=True)\n    return max_products[:N]"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # check if the least significant bit is zero\n        n >>= 1\n    return n | 1 # set the left most unset bit to 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Set the leftmost unset bit\n    n |= n - 1\n\n    # Return the updated number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the count of unset bits\n    count = 0\n    # loop through the bits of the integer\n    for i in range(32):\n        # check if the i-th bit is 1\n        if ((n >> i) & 1) == 1:\n            # if it is, increment the count\n            count += 1\n            # if the count is equal to 32, we have found the left most unset bit\n            if count == 32:\n                # shift all bits to the left by i-1 positions\n                # to clear the i-th bit\n                n = (n << (32 - i)) & ((1 << 32) - 1)\n                # exit the loop\n                break\n    # return the updated integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # Initialize the left most unset bit to -1\n    left_most_unset_bit = -1\n\n    # Iterate through each bit position in the integer\n    for bit in range(32):\n        # Check if the current bit is set\n        if (n & (1 << bit))!= 0:\n            # If the current bit is set, set the left most unset bit to the current position\n            left_most_unset_bit = bit\n            break\n\n    # Return the left most unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # Check if n is even \n        n >>= 1 # Shift n one position to the right \n    return n | (1 << len(bin(n)[2:])) # Set the left most unset bit to 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # convert n to binary string\n    binary_str = bin(n)[2:]\n    # loop through the binary string and find the leftmost unset bit\n    left_most_unset_bit = -1\n    for i in range(len(binary_str)):\n        if binary_str[i] == '0':\n            left_most_unset_bit = i\n            break\n    # set the leftmost unset bit to 1\n    n = n | (1 << left_most_unset_bit)\n    # convert n back to decimal integer\n    n = int(n, 2)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Check if the number is already 0\n    if n == 0:\n        return 1\n\n    # Loop through all possible bit positions and check if they are unset\n    for bit in range(32):\n        mask = (1 << bit)\n        if (n & mask) == 0:\n            # If unset, set the bit and return the updated number\n            n |= mask\n            return n\n\n    # If no unset bit was found, return the original number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_count = 0\n    while n!= 0: \n        n &= (n-1) # clear the least significant bit \n        bit_count += 1\n    return bit_count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 0\n    while n & mask == 0:\n        mask = mask << 1\n    \n    return n | mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = 1\n    while (set_bit & n) == 0:\n        set_bit <<= 1\n    return set_bit\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two parameters, r and h, which represent the radius and height of the cone respectively.\n    It calculates the volume of the cone using the formula:\n    V = (1/3) * \u03c0 * r^2 * h\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    # Calculating the volume using the formula V = \u03c0r^2h\n    volume = math.pi * (r ** 2) * h\n    \n    # Returning the volume\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with radius r and height h.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume using the formula V = \u03c0r^2h\n    V = math.pi * (r**2) * h\n    \n    # return the calculated volume\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * (r**2) * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi*(r**2)\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * r * r * r\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone using the formula: V = \u03c0r\u00b2h\n    '''\n    V = math.pi*(r**2)*h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize the highest power of 2 found to None\n    highest = None\n\n    # loop through all numbers from 2 to n, check if each number is a power of 2\n    for i in range(2, n+1):\n\n        # if the number is a power of 2, check if it is greater than the highest power of 2 found so far\n        if i == 2**i:\n            if highest is None or i > highest:\n                highest = i\n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n = n // 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return 2 ** power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    # Convert n to binary string\n    binary = bin(n)[2:]\n    # Calculate the maximum power of 2 that is less than or equal to n\n    max_pow = 0\n    for i in range(len(binary)):\n        if int(binary[i]) == 1:\n            max_pow = i + 1\n            break\n    return max_pow"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 \n    that is less than or equal to n.\n    \"\"\"\n    # Initialize variable to store the highest power of 2 less than or equal to n\n    highest = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Check if i is a power of 2\n        if i & (i-1) == 0:\n\n            # If it is, update the highest variable\n            if i > highest:\n                highest = i\n\n    # Return the highest power of 2 less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables\n    power = 1\n    highest_power = 1\n\n    # Loop through until we find the highest power of 2 that is less than or equal to n\n    while power <= n:\n        highest_power = power\n        power *= 2\n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables\n    p = 1\n    # Loop through all possible powers of 2\n    while p < n:\n        # Check if current power of 2 is less than or equal to n\n        if p <= n:\n            # If it is, return current power of 2\n            return p\n        # Increment power of 2\n        p <<= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function finds the highest power of 2 that is less than or equal to a given number.\n    '''\n    # Initialize a variable to store the highest power of 2 less than or equal to n\n    highest_power = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is a power of 2, update the highest_power variable\n        if i & (i-1) == 0:\n            highest_power = i\n    \n    # Return the highest power of 2 less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes in a number n and returns the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 0\n    while n > 0:\n        highest_power_of_2 += 1\n        n >>= 1\n    return highest_power_of_2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas_sequence = [2]\n    for i in range(2, n+1):\n        lucas_sequence.append(lucas_sequence[i-1] + lucas_sequence[i-2])\n    return lucas_sequence[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # initialize variables\n    lucas = [0, 1]\n    for i in range(2, n + 1):\n        lucas.append(lucas[i - 1] + lucas[i - 2])\n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # initialize first two numbers as 2\n    a = 2\n    b = 1\n    \n    # loop for n-1 times\n    for i in range(2, n):\n        # calculate the next number\n        c = a + b\n        \n        # update a and b for the next iteration\n        a = b\n        b = c\n        \n    # return the nth number in the sequence\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two Lucas numbers\n    lucas_numbers = [0, 2]\n\n    # Loop through the remaining Lucas numbers\n    for i in range(2, n):\n        # Compute the next Lucas number\n        lucas_numbers.append(lucas_numbers[i-1] + lucas_numbers[i-2])\n\n    # Return the nth Lucas number\n    return lucas_numbers[-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return (2 ** (n - 1) - 1) // (2 - 1)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(lst, fmt_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [fmt_str.format(item) for item in lst]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_item = string.format(item)\n        formatted_list.append(formatted_item)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary to store the result\n    result = {}\n    # iterate through the lists and add their elements to the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n    # iterate through the nested lists and add their elements to the result dictionary\n    for i in range(len(l3)):\n        for j in range(len(l3[i])):\n            result[l1[i]][l3[i][j]] = l3[i][j+1]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    data = {}\n    for i in range(len(l1)):\n        data[l1[i]] = {l2[i]: l3[i]}\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary\n    nested_dict = {}\n    \n    # Iterate through the lists\n    for i in range(len(l1)):\n        # Check if the current element in the list is a list\n        if isinstance(l1[i], list):\n            # If it is a list, create a new nested dictionary for it\n            nested_dict[i] = {}\n            # Recursively convert the inner list to a nested dictionary\n            convert_list_dictionary(l1[i], l2[i], l3[i])\n        else:\n            # If it is not a list, add it to the top-level dictionary\n            nested_dict[l1[i]] = l2[i]\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Convert one or more lists to a nested dictionary.\n    '''\n    result = {}\n    for arg in args:\n        if isinstance(arg, list):\n            for i, item in enumerate(arg):\n                if isinstance(item, (list, tuple)):\n                    key = arg[0] if i == 0 else i\n                    if key not in result:\n                        result[key] = {}\n                    result[key].update(convert_list_dictionary(*item))\n                else:\n                    if arg[0] not in result:\n                        result[arg[0]] = []\n                    result[arg[0]].append(item)\n        else:\n            if isinstance(arg, dict):\n                result.update(arg)\n            else:\n                result[arg] = None\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Use a list comprehension to create a nested dictionary from l1 and l2\n    nested_dict = {x: l2[y] for x, y in zip(l1, range(len(l1)))}\n    # Update the nested dictionary with the elements from l3\n    nested_dict.update({x: y for x, y in zip(l3, range(len(l3)))})\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary to store the result\n    result = {}\n    # loop through the first list\n    for item in l1:\n        # loop through the second list\n        for sub_item in l2:\n            # loop through the third list\n            for third_item in l3:\n                # add the key-value pair to the result dictionary\n                result[item] = {sub_item: third_item}\n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n        l1: list of strings\n        l2: list of integers\n        l3: list of dictionaries\n\n    Returns:\n        nested_dict: nested dictionary with keys corresponding to the lists in the order they appear\n    '''\n    # Initialize an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through the three lists and add keys to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[i] = {'key1': l1[i], 'key2': l2[i], 'key3': l3[i]}\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    This function will convert multiple lists to a nested dictionary.\n    '''\n    result = {}\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            result[i] = lists[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): A list of values.\n    l2 (list): A list of values.\n    l3 (list): A list of values.\n\n    Returns:\n    dict: A nested dictionary containing all the converted values.\n    '''\n    # Define the nested dictionary\n    nested_dict = {}\n    # Loop through each list\n    for i in range(len(l1)):\n        # Add the list items as keys to the nested dictionary\n        nested_dict[l1[i]] = {}\n        # Loop through each item in the inner list\n        for j in range(len(l2[i])):\n            # Add the item as a value to the current key in the nested dictionary\n            nested_dict[l1[i]][l2[i][j]] = l3[i][j]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        return max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        half_sum = get_max_sum(n//2)\n        third_sum = get_max_sum(n//3)\n        fourth_sum = get_max_sum(n//4)\n        fifth_sum = get_max_sum(n//5)\n        return max(half_sum + third_sum + fourth_sum + fifth_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n    \n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    def f(n):\n        if n == 1:\n            return n\n        else:\n            return max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # If n is 1 or 2, its maximum sum is n.\n    if n <= 2:\n        return n\n    \n    # Calculate the maximum sum possible by using the given equation.\n    max_sum = max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n    \n    # Return the maximum sum.\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n == 1:\n        return 1\n\n    # recursive case\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(str(input_list[i])) > max_length:\n            max_length = len(str(input_list[i]))\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = None\n    \n    for num in input_list:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = num\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if a given tuple contains no duplicates.\n\n    Args:\n        test_tup (tuple): A tuple to test for duplicates.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    '''\n    # Convert the tuple to a set to check for duplicates\n    test_set = set(test_tup)\n    # If the set has only one element, it means the tuple contains no duplicates\n    return len(test_set) == 1"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_set = set()\n    for item in test_tup:\n        if item in unique_set:\n            return False\n        else:\n            unique_set.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # check if the length of the tuple is 0, in which case it is distinct\n    if len(test_tup) == 0:\n        return True\n    # create a set to store the elements in the tuple\n    set_elements = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(set_elements) == len(test_tup):\n        return True\n    # if the set is not empty, the tuple contains duplicates\n    return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate over the dictionary and find the first non-repeated character\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes in a string and returns the first non-repeated character.\n    If no non-repeated character is found, it returns None.\n    '''\n    # create a dictionary to store the count of each character in the string\n    count_dict = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in count_dict:\n            # if the character is already in the dictionary, increment its count\n            count_dict[char] += 1\n        else:\n            # if the character is not in the dictionary, add it with a count of 1\n            count_dict[char] = 1\n            \n    # loop through the dictionary and find the first non-repeated character\n    for char in count_dict:\n        if count_dict[char] == 1:\n            return char\n            \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n\n    # Iterate through the dictionary to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first non-repeating character in the frequency dictionary\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of characters in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the dictionary and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in freq:\n            # if the character is already in the dictionary, increment its frequency by 1\n            freq[char] += 1\n        else:\n            # if the character is not in the dictionary, add it with a frequency of 1\n            freq[char] = 1\n\n    # loop through the dictionary and find the first non-repeated character\n    for char in freq:\n        if freq[char] == 1:\n            # if the frequency of the character is 1, return the character\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character\n    frequency = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in frequency:\n            frequency[char] += 1\n        # Otherwise, add it to the dictionary with a frequency of 1\n        else:\n            frequency[char] = 1\n\n    # Loop through each character in the string again to find the first non-repeating one\n    for char in str1:\n        # If the character has a frequency of 1, return it\n        if frequency[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    return pattern.match(string)"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    string = input(\"Enter a string: \")\n    if check_char(string):\n        print(f\"{string} starts and ends with the same character.\")\n    else:\n        print(f\"{string} does not start and end with the same character.\")"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        print(string + \" starts and ends with the same character\")\n    else:\n        print(string + \" doesn't start and ends with the same character\")"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    median = (sorted_numbers[1] + sorted_numbers[2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Get the length of the sorted list\n    n = len(sorted_numbers)\n    # Calculate the middle indices\n    mid_a = n // 2\n    mid_b = mid_a - 1\n    mid_c = mid_a + 1\n    # Calculate the middle values\n    middle_a = sorted_numbers[mid_a]\n    middle_b = sorted_numbers[mid_b]\n    middle_c = sorted_numbers[mid_c]\n    # Calculate the median values based on the middle indices and values\n    if n % 2 == 0:  # even number of numbers\n        median_a = (middle_a + middle_b) / 2\n        median_b = middle_a\n        median_c = middle_b\n    else:  # odd number of numbers\n        median_a = middle_a\n        median_b = middle_b\n        median_c = middle_c\n    return [median_a, median_b, median_c]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    num_list = sorted([a, b, c])\n    # Calculate the median\n    median = num_list[len(num_list) // 2]\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function calculates the median of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        if b < c:\n            return (a + c) / 2\n        else:\n            return (a + b) / 2\n    elif b < a and b < c:\n        if a < c:\n            return (b + c) / 2\n        else:\n            return (b + a) / 2\n    else:\n        if a < b:\n            return (a + b) / 2\n        else:\n            return (c + b) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and finds the median of the three numbers.\n    \"\"\"\n    sorted_numbers = [a, b, c]\n    sorted_numbers.sort()\n    median = (sorted_numbers[1] + sorted_numbers[2]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median = (numbers[length//2 - 1] + numbers[length//2]) / 2\n    else:\n        median = numbers[length//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_nums) % 2 == 0:\n        median = (sorted_nums[len(sorted_nums)//2 - 1] + sorted_nums[len(sorted_nums)//2]) / 2\n    else:\n        median = sorted_nums[len(sorted_nums)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Find the maximum and minimum values of the three numbers\n    max_num = max(a, b, c)\n    min_num = min(a, b, c)\n    \n    # Find the median value\n    if a == max_num and b == min_num:\n        median = (a + b) / 2.0\n    elif a == max_num and b!= min_num:\n        median = b\n    elif b == max_num and a!= min_num:\n        median = a\n    else:\n        median = (max_num + min_num) / 2.0\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    # sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # find the median\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n    else:\n        median = sorted_numbers[n//2]\n\n    # return the median\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        \n        # Loop through each digit in the list and add it to the sum of digits\n        for digit in digits:\n            sum_of_digits += digit\n    \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        for digit in str(num):\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum_of_digits = sum(digits)\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize an empty list to store the sum of digits of each number\n    result = []\n\n    # loop through each number in the input list\n    for num in nums:\n        # convert the number to a string and split it into a list of characters\n        digits = [int(d) for d in str(num)]\n        # sum up the digits of each number in the input list\n        total = sum(digits)\n        # append the total of digits of each number to the result list\n        result.append(total)\n\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        for digit in str(num):\n            sum_digits += int(digit)\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num //= 10\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(d) for d in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        total_sum += digits_sum\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the elements of the first tuple\n    for element1 in test_tup1:\n        # Iterate over the elements of the second tuple\n        for element2 in test_tup2:\n            # Perform the bitwise xor operation on the current elements\n            result.append(element1 ^ element2)\n    # Return the resulting list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # XOR operation is performed on each element of the tuples\n    result_tup = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0, 0)\n    # Iterate over each element in the input tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation on the corresponding elements\n        result_tup = (result_tup[0] ^ test_tup1[i], result_tup[1] ^ test_tup2[i])\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Args:\n        test_tup1 (tuple): A tuple of numbers to perform the bitwise xor operation on.\n        test_tup2 (tuple): A tuple of numbers to perform the bitwise xor operation on.\n\n    Returns:\n        tuple: A tuple containing the result of the bitwise xor operation.\n    '''\n    # Initialize a new empty tuple to hold the result\n    result_tup = ()\n    # Loop through the two tuples and perform bitwise xor\n    for i in range(len(test_tup1)):\n        # Calculate the bitwise xor of the current elements in the tuples\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        # Append the result to the result tuple\n        result_tup = result_tup + (xor_result,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = (0,) * len(test_tup1)\n    \n    # Perform the mathematical bitwise xor operation on each element of the input tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    unique_tuples = set()\n\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n    \n    # iterate over each tuple in the list and update the frequency in the dictionary\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    \n    # return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty dictionary to store unique tuples and their counts\n    freq_dict = {}\n    # iterate through the list and add unique tuples to the dictionary\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # return the count of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n    \n    # Loop through the list and add the frequency of each tuple to the dictionary\n    for item in test_list:\n        tuple_freq = len(set(item))\n        freq_dict[item] = tuple_freq\n    \n    # Return the total number of unique tuples in the list\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    unique_freq = len(freq_dict)\n    return unique_freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    This function extracts the number of unique tuples in the given list.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n\n    # Convert the set to a list of tuples to get the frequency of tuples\n    freq_list = list(unique_set)\n\n    return len(freq_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a list to hold the resultant tuple\n    result_tup = []\n    # Loop through each tuple in the two input tuples\n    for tup in test_tup1, test_tup2:\n        # Initialize a variable to hold the result of the addition of the elements of each tuple\n        temp = 0\n        # Loop through each element of the current tuple and add it to the temporary sum\n        for i in range(len(tup)):\n            temp += tup[i]\n        # Add the temporary sum to the resultant list of tuples\n        result_tup.append(temp)\n    # Return the resultant list of tuples\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a list to store the result of index wise addition of elements in each tuple\n    result_list = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize a variable to store the index of the element in the result_list\n        index = 0\n        # Loop through each element of the second tuple\n        for j in range(len(test_tup2)):\n            # Check if the current element of the first tuple is equal to the current element of the second tuple\n            if test_tup1[i] == test_tup2[j]:\n                # Add the current element of the first tuple and the current element of the second tuple and store the result in the result_list\n                result_list.append(test_tup1[i] + test_tup2[j])\n                # Increment the index\n                index += 1\n        # Check if all elements of the second tuple have been processed\n        if index == len(test_tup2):\n            # Add the last element of the first tuple and store the result in the result_list\n            result_list.append(test_tup1[i])\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tuple = tuple([test_tup1[i][j] + test_tup2[i][j] for j in range(len(test_tup2[i]))])\n        result.append(new_tuple)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # check if the input tuples are not empty\n    if not (test_tup1 and test_tup2):\n        return None\n    \n    # check if both tuples have same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # initialize an empty list to store the resultant tuple\n    result_tup = []\n    \n    # iterate through the tuples and add the elements at corresponding indices\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two parameters: tuplex and tuple1.\n    tuplex is a tuple and tuple1 is another tuple.\n    The function checks whether an element exists within tuple1.\n    If it does, it returns True.\n    Otherwise, it returns False.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for tup in tuplex:\n        if tup in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes in two parameters: `tuplex` and `tuple1`. \n    `tuplex` is the tuple we want to search for and `tuple1` is the tuple we are searching in. \n    The function returns `True` if `tuplex` is found in `tuple1`, and `False` otherwise.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(tuplex, \"exists in\", tuple1)\n    else:\n        print(tuplex, \"does not exist in\", tuple1)"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two tuples as input and returns True if the first tuple\n    contains the element specified in the second tuple, and False otherwise.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element found in tuple1\")\n    else:\n        print(\"Element not found in tuple1\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x & 1\n    if parity == 1:\n        print(x, \"is odd\")\n    else:\n        print(x, \"is even\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: \n        return \"The number is even\"\n    else: \n        return \"The number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if the given number is even or not\n    if x % 2 == 0: \n        return \"The given number is even.\"\n    else: \n        return \"The given number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # If the number is even, the parity is odd\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if x is an integer\n    if not isinstance(x, int):\n        return \"Input must be an integer.\"\n    # Check if x is negative\n    elif x < 0:\n        return \"Input must be a positive integer.\"\n    # Calculate the parity\n    else:\n        parity = 1 if x % 2 == 0 else 0\n        return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!=0: \n        print(\"The number is odd\") \n    else: \n        print(\"The number is even\") \n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Check if the given number is already a power of 2\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n\n    # Find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # Check if the current power of 2 is a multiple of 3\n    if power % 3 == 0:\n        power += 1\n\n    # Find the next larger number with the same number of digits\n    next_bigger = 0\n    for i in range(1, 10):\n        digit_count = 0\n        while n > 0:\n            digit_count += (n % 10)\n            n //= 10\n        next_bigger = (next_bigger * 10) + i\n        if digit_count == 0:\n            break\n        elif digit_count == digit_count_of_next_bigger(i):\n            return next_bigger\n\n    return None\n\ndef digit_count_of_next_bigger(n):\n    '''\n    Write a function to count the number of digits in the next larger number with the same number of digits as n.\n    '''\n    count = 1\n    while n > 0:\n        count += 1\n        n //= 10\n    return count"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def num_to_str(num):\n        # Convert the given number to string\n        return str(num)\n    \n    def str_to_num(s):\n        # Convert the string to a number\n        return int(s)\n    \n    def rearrange(num, k):\n        # Convert the number to string\n        s = num_to_str(num)\n        \n        # Find the index of the first digit that needs to be moved\n        i = k - 1\n        \n        # Loop through the remaining digits\n        for j in range(len(s) - k):\n            # Swap the digits at positions i and j\n            s[i], s[j] = s[j], s[i]\n            i += 1\n        \n        # Convert the string back to a number\n        return str_to_num(s)\n    \n    # Find the length of the number\n    n = len(str(n))\n    \n    # Initialize the result to 0\n    res = 0\n    \n    # Loop through all possible numbers\n    for i in range(1, 10 ** n):\n        # Check if the number is already smaller\n        if str_to_num(num_to_str(i)) < n:\n            # Rearrange the digits until the number is smaller\n            k = 1\n            while str_to_num(num_to_str(i)) < n:\n                i = rearrange(i, k)\n                k += 1\n            \n            # Check if the number is smaller than the previous result\n            if str_to_num(num_to_str(i)) < str_to_num(num_to_str(res)):\n                res = i\n    \n    # Return the result\n    return res"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    str_n = str(n)\n    # Reverse the string\n    str_n = str_n[::-1]\n    # Split the string into a list of digits\n    digits = list(str_n)\n    # Initialize the result variable to 0\n    result = 0\n    # Check each digit and find the next bigger digit\n    for digit in digits:\n        # Convert the digit to an integer and add it to the result variable\n        result += int(digit)\n        # If the result is greater than or equal to 10, subtract 10 from it and increment it by 10\n        if result >= 10:\n            result -= 10\n    # Add the result back to the original number and return it\n    return n + result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # initialize the result variable\n    result = 0\n\n    # loop through each digit in the number\n    for digit in str(n):\n        # check if the digit is already the largest digit in the number\n        if int(digit) == int(str(n)[::-1][:len(str(n))-str(digit).index(digit)]):\n            # increment the result by the digit\n            result += int(digit)\n            # break out of the loop\n            break\n        # otherwise, append the digit to the result\n        else:\n            result = result * 10 + int(digit)\n\n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num = str(n)\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Iterate over each digit in reverse order\n    for digit in num[::-1]:\n        # Calculate the next bigger digit\n        next_bigger = 9 - int(digit)\n        \n        # Check if the next bigger digit is still within range\n        if next_bigger >= 0:\n            # Add the next bigger digit to the result string\n            result += str(next_bigger)\n    \n    # Convert the result string back to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    number = str(n)\n    # Create an empty list to store the digits\n    digits = []\n    # Loop through the digits of the number and append them to the digits list\n    for digit in number:\n        digits.append(digit)\n    # Sort the digits in ascending order\n    digits.sort()\n    # Reverse the digits list\n    digits.reverse()\n    # Convert the digits list back to a string and return the result\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    num_list = list(str(n))\n    # Initialize the maximum number to be returned\n    max_num = 0\n    # Check each combination of digits\n    for i in range(1, len(num_list)+1):\n        # Initialize the current number\n        current_num = 0\n        # Add the digits in the current combination\n        for j in range(i):\n            current_num += int(num_list[j]) * (i-j)\n        # Check if the current number is greater than the maximum number\n        if current_num > max_num:\n            max_num = current_num\n    # Convert the maximum number back to a string and return it\n    return str(max_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Find the largest power of 10 that is smaller than or equal to the given number\n    power = 1\n    while power * 10 <= n:\n        power *= 10\n    \n    # Rearrange the digits of the given number\n    n = str(n)\n    n = n.replace('0', '')\n    n = n.replace(str(power), '')\n    n = n.replace('0', '')\n    n = n.replace(str(power), '')\n    n = ''.join(sorted(n, reverse=True))\n    \n    # Add 1 to the rearranged number to get the next bigger number\n    n = str(int(n) + 1)\n    \n    # Convert the rearranged number back to an integer\n    n = int(n)\n    \n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    while True:\n        # Find the next biggest number by rearranging the digits\n        n_new = str(int(n) + 1)\n        if len(n_new) > len(str(n)):\n            return n_new\n        n = n_new"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    Args:\n    n (int): An integer.\n\n    Returns:\n    int: The next bigger number.\n    \"\"\"\n    # Convert the integer to a string and reverse it\n    s = str(n)[::-1]\n\n    # Initialize a variable to store the new number's digits\n    new_digits = []\n\n    # Iterate over each digit in the reversed string\n    for d in s:\n        # If the digit is smaller than 5, append it to the new digits\n        if int(d) < 5:\n            new_digits.append(d)\n        # If the digit is 5 or larger, rearrange it to the next bigger digit\n        else:\n            # Find the smallest number greater than 5 in the string\n            new_digit = '5'\n            for other_d in s:\n                if int(other_d) > int(new_digit) and int(other_d) < 10:\n                    new_digit = other_d\n\n            # If no such number exists, append the next digit (to the right of the largest one)\n            if new_digit == '5':\n                new_digit = '9'\n            new_digits.append(new_digit)\n\n    # Convert the new digits back to an integer and return it\n    return int(''.join(new_digits))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize a min heap of size k to store the smallest pairs\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Find the smallest element greater than num1 in the second array\n        index = bisect_left(nums2, num1)\n\n        # If the index is valid, add a new pair to the min heap\n        if index < len(nums2):\n            heapq.heappush(min_heap, (min(num1, nums2[index]), max(num1, nums2[index])))\n\n        # Remove the smallest pair if the heap size exceeds k\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Return the k smallest pairs\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    # Initialize a list to store the minimum pairs\n    result = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Compare the sum of the current elements and the smallest element in the heap\n            if num1 + num2 < min_heap[0] or len(min_heap) < k:\n                # If the current sum is smaller than the smallest element in the heap or the heap is full, push the current sum to the heap\n                heapq.heappush(min_heap, num1 + num2)\n            else:\n                # Otherwise, pop the smallest element from the heap and add the current sum to it\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num1 + num2)\n\n            # If the heap has k elements, add the pair with the smallest sum to the result list\n            if len(min_heap) == k:\n                result.append((min_heap[0], num1, num2))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Merge the two sorted arrays\n    nums = nums1 + nums2\n    heapq.heapify(nums)\n\n    # Initialize a min heap to store the k smallest pairs\n    min_heap = []\n\n    # Iterate through the merged array and add the smallest k pairs to the heap\n    for i in range(len(nums)):\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, nums[i])\n        else:\n            if nums[i] < min_heap[0]:\n                heapq.heappushpop(min_heap, nums[i])\n\n    # Extract the k smallest pairs from the heap and return them as a list of tuples\n    pairs = []\n    for i in range(k):\n        pair = (min_heap[i], min_heap[-i-1])\n        pairs.append(pair)\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Build a min-heap of all possible pairs of elements\n    heap = [(nums1[0], nums2[0], 0)]\n    for i in range(1, len(nums1)):\n        for j in range(1, len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    \n    # Pop the k smallest pairs from the heap\n    result = []\n    for _ in range(k):\n        _, index1, index2 = heapq.heappop(heap)\n        result.append((nums1[index1], nums2[index2]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Convert the input lists to sets to ensure unique pairs\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # Use a min heap to keep track of the smallest k elements\n    min_heap = []\n\n    # Iterate through the first list\n    for num1 in nums1:\n        # Calculate the difference between the current number and the smallest element in the heap\n        diff = num1 - (min_heap[0] if min_heap else float('inf'))\n\n        # If the difference is negative, ignore it and continue to the next number\n        if diff < 0:\n            continue\n\n        # Check if the difference is already in the set of unique pairs\n        if diff not in nums2:\n            # If the difference is not in the set, add it to the heap and update the smallest element if necessary\n            heapq.heappushpop(min_heap, num1)\n\n            # If the heap has more than k elements, remove the smallest one\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Return the list of smallest pairs\n    return [(min_heap[0], diff) for diff in nums2]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a heap of size k to store the k smallest numbers\n    heap = []\n    # Iterate through the first array and add each number to the heap\n    for num in nums1:\n        heapq.heappush(heap, num)\n        # If the size of the heap becomes greater than k, remove the smallest number from the heap\n        if len(heap) > k:\n            heapq.heappop(heap)\n    # Initialize two pointers to the end of the two arrays\n    i = len(nums1) - 1\n    j = len(nums2) - 1\n    # Initialize the result list to store the k smallest pairs\n    result = []\n    # Iterate through the remaining elements of the two arrays\n    while i >= 0 and j >= 0:\n        # Calculate the sum of the current elements and add the pair to the result list\n        pair_sum = nums1[i] + nums2[j]\n        # If the sum is greater than or equal to the smallest number on the heap, add the pair to the result list and move both pointers backwards\n        if pair_sum >= heap[0]:\n            result.append((nums1[i], nums2[j]))\n            i -= 1\n            j -= 1\n            # If the sum is less than the smallest number on the heap, remove the smallest number from the heap and move the pointer for the smaller element\n            elif pair_sum < heap[0]:\n                heapq.heappop(heap)\n                if i >= 0:\n                    i -= 1\n                if j >= 0:\n                    j -= 1\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Initialize the heap with the first element of each array and the product of the element and the index of the array\n    heap = [(nums1[0]*nums2[0], 0, 0)]\n    result = []\n    \n    # Use a min heap to keep track of the k smallest pairs\n    while k > 0 and heap:\n        # Pop the smallest pair from the heap and add it to the result\n        pair = heapq.heappop(heap)\n        result.append([nums1[pair[1]], nums2[pair[2]]])\n        k -= 1\n        \n        # Add the two elements of the pair to the heap\n        if pair[1] + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[pair[1]+1]*nums2[pair[2]], pair[1]+1, pair[2]))\n        if pair[2] + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[pair[1]]*nums2[pair[2]+1], pair[1], pair[2]+1))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the smallest k pairs\n    min_heap = []\n    # Create a dictionary to store the index of the first element in each array\n    index_dict = {}\n\n    # Iterate through the first array\n    for i in range(len(nums1)):\n        # Get the current index of the first element in the array\n        index = i\n        # If the current index is not in the index dictionary, add it to the dictionary and set its value to i\n        if index not in index_dict:\n            index_dict[index] = i\n\n        # If the size of the min heap is less than k, add the current index to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, index)\n\n        # If the size of the min heap is greater than or equal to k, compare the current index with the smallest element in the heap\n        elif len(min_heap) >= k:\n            # Get the smallest element in the heap\n            smallest = heapq.heappop(min_heap)\n            # If the current index is smaller than the smallest element, add the current index to the heap\n            if nums1[smallest] > nums1[index]:\n                heapq.heappush(min_heap, index)\n            # If the current index is greater than or equal to the smallest element, add the smallest element to the heap\n            elif nums1[smallest] < nums1[index]:\n                continue\n            # If the current index is equal to the smallest element, add both indices to the heap\n            else:\n                heapq.heappush(min_heap, smallest)\n                heapq.heappush(min_heap, index)\n\n    # Create an empty list to store the pairs\n    pairs = []\n    # Iterate through the second array\n    for i in range(len(nums2)):\n        # Get the current index of the second element in the array\n        index = index_dict[i]\n        # If the size of the min heap is less than k, add the current index to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, index)\n\n        # If the size of the min heap is greater than or equal to k, compare the current index with the smallest element in the heap\n        elif len(min_heap) >= k:\n            # Get the smallest element in the heap\n            smallest = heapq.heappop(min_heap)\n            # If the current index is smaller than the smallest element, add the current index to the heap\n            if nums2[smallest] > nums2[index]:\n                heapq.heappush(min_heap, index)\n            # If the current index is greater than or equal to the smallest element, add the smallest element to the heap\n            elif nums2[smallest] < nums2[index]:\n                continue\n            # If the current index is equal to the smallest element, add both indices to the heap\n            else:\n                heapq.heappush(min_heap, smallest)\n                heapq.heappush(min_heap, index)\n\n        # If the size of the min heap is equal to k, add the smallest element to the pairs list and remove the first element from the heap\n        if len(min_heap) == k:\n            pair = (nums1[min_heap[0]], nums2[min_heap[0]])\n            pairs.append(pair)\n            heapq.heappop(min_heap)\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    heapq.heapify(heap)\n\n    for num in nums1:\n        heapq.heappush(heap, (-num, 0))\n\n    for num in nums2:\n        if heapq.heappop(heap)[1] < k:\n            heapq.heappush(heap, (-num, heapq.heappop(heap)[1] + 1))\n\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return []\n    \n    # Build a min heap of pairs\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i == j:\n                continue\n            pair = (nums1[i], nums2[j])\n            heapq.heappush(pairs, pair)\n    \n    # Find the k smallest pairs\n    result = []\n    while k > 0:\n        pair = heapq.heappop(pairs)\n        if len(result) < k:\n            result.append(pair)\n            k -= 1\n    \n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the given list of tuples by the second element in ascending order\n    sorted_list = sorted(list1, key=lambda x: x[1])\n\n    # Initialize variables to store the minimum and maximum products seen so far\n    min_product = sorted_list[0][0] * sorted_list[0][1]\n    max_product = sorted_list[0][0] * sorted_list[0][1]\n\n    # Loop through the sorted list and calculate the minimum and maximum products\n    for i in range(1, len(sorted_list)):\n        new_min_product = sorted_list[i][0] * sorted_list[i][1]\n        new_max_product = sorted_list[i][1] * sorted_list[i][0]\n        if new_min_product < min_product:\n            min_product = new_min_product\n        if new_max_product > max_product:\n            max_product = new_max_product\n\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    min_pair = None\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n\n    return min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize two variables to store the minimum product and the minimum element in the list\n    min_product = float('inf')\n    min_element = float('inf')\n\n    # Iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Check if the product of the current element and the previous element is smaller than the current minimum product\n            if list1[i][0] * list1[j][1] < min_product:\n                # Update the minimum product and the minimum element\n                min_product = list1[i][0] * list1[j][1]\n                min_element = list1[i]\n\n    # Return the minimum product and the minimum element\n    return min_product, min_element"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables to store the minimum product and its index\n    min_product = float('inf')\n    min_index = 0\n    \n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each tuple in the list\n        for j in range(len(list1)):\n            # Calculate the product of the tuple pair and check if it's smaller than the current minimum product\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                # Update the minimum product and its index\n                min_product = product\n                min_index = i, j\n    \n    # Return the minimum product and its index\n    return min_product, min_index"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to positive infinity\n    min_prod = float('inf')\n    # Iterate over each tuple in the list\n    for i in range(len(list1)):\n        # Iterate over the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            prod = list1[i][0] * list1[j][1]\n            # Update the minimum product if necessary\n            if prod < min_prod:\n                min_prod = prod\n    # Return the minimum product\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    result = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = pair[0] * pair[1]\n            if product < min_product:\n                min_product = product\n                result = pair\n\n    return min_product, result"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif type(listval[0]) in (int, float):\n        return min(listval)\n    elif type(listval[0]) in (str, tuple, list):\n        return min([min_val(x) for x in listval])\n    else:\n        return None"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        print(\"List is empty!\")\n        return None\n\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize variables to store minimum value and its position in the list\n    min_val = listval[0]\n    min_idx = 0\n    \n    # Loop through the list and find the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            min_idx = i\n            \n    # Return the minimum value and its position in the list\n    return min_val, min_idx"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Convert the list to a set to eliminate duplicates\n    setval = set(listval)\n    # Find the minimum value in the set\n    min_setval = min(setval)\n    # Convert the set back to a list and return it as the minimum value\n    return [min_setval]"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for i in listval[1:]:\n            if i < min_val:\n                min_val = i\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if min_val > listval[i]:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # iterate over the rest of the list\n    for i in range(1, len(listval)):\n        # check if the current element is smaller than the minimum value\n        if listval[i] < min_val:\n            # if it is, update the minimum value\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize variables to store the minimum value and its index\n    min_val = float('inf')\n    min_idx = 0\n\n    # Loop through the list and update min_val and min_idx if needed\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            min_idx = i\n\n    # Return the minimum value and its index\n    return min_val, min_idx"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r\"([a-z])([A-Z]+)\")\n    return pattern.sub(r\"\\1_\\2\", word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    capitalized_words = [words[0].capitalize()] + [word.capitalize() for word in words[1:]]\n\n    # Join the words back together with capitalized first letter\n    return ''.join(capitalized_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n\n    # Capitalize the first letter\n    camel_case = camel_case.capitalize()\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to camel case string\n    word = re.sub(r'_(.)', r'\\1', word).lower()\n    # Split the camel case string into words\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them with an underscore\n    camel_case = ''.join([w.capitalize() for w in words])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = ''.join(x.capitalize() if x.isupper() else x for x in word.split('_'))\n    # Replace multiple underscores with a single underscore\n    camel_case = re.sub('([a-z])([A-Z])', r'\\1_\\2', camel_case)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Remove leading and trailing underscores\n    word = word.strip('_')\n\n    # Split the word by underscores and capitalize the first letter of each word\n    words = re.findall(r'(?<=[a-z])[A-Z](?=[a-z])|[A-Z](?=[A-Z]|$)', word)\n\n    return ''.join(words).strip('_')"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to camel case string using regular expressions.\n    pattern = re.compile('(_[a-z0-9])')\n    return pattern.sub(lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all underscores with spaces\n    word = re.sub(r'_+','', word)\n    # Split the string into words\n    words = word.split()\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with underscores\n    return '_'.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # convert all characters to lowercase\n    word = word.lower()\n    # split the word by underscores\n    parts = word.split('_')\n    # convert the first character to uppercase\n    parts[0] = parts[0].capitalize()\n    # join the parts with uppercase letters\n    camel_word = ''.join(parts)\n    # return the camel case string\n    return camel_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Create an empty list to store the even numbers\n    even_list = []\n\n    # Loop through the list of numbers\n    for num in l:\n        # If the number is odd, add it to the even list\n        if num % 2!= 0:\n            even_list.append(num)\n\n    # Return the even list\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        list1 (list): A list of tuples.\n        n (int): The index of the desired element.\n\n    Returns:\n        The nth element from the list of tuples.\n\n    Raises:\n        ValueError: If n is not an integer.\n        IndexError: If n is out of range.\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"n must be an integer\")\n    if n < 0 or n >= len(list1):\n        raise IndexError(\"n is out of range\")\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list):\n        raise ValueError('Input should be a list of tuples.')\n    elif len(list1) == 0:\n        raise ValueError('List should not be empty.')\n    elif n > len(list1):\n        raise ValueError('n should be less than or equal to the length of the list.')\n    \n    # initialize an empty list to store the elements\n    result = []\n    \n    # iterate through the list and extract the nth element\n    for i, elem in enumerate(list1):\n        if i == n - 1:\n            result.append(elem)\n    \n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input is a list of tuples\n    if not isinstance(list1, list) or not all(isinstance(t, tuple) for t in list1):\n        raise ValueError(\"Input should be a list of tuples.\")\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"n should be an integer.\")\n    # Check if n is within the range of the list\n    if n < 1 or n > len(list1):\n        raise ValueError(\"n should be within the range of the list.\")\n    # Extract the nth element from the list\n    nth_element = list1[n-1]\n    # Return the nth element\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Create a list to store the extracted elements\n    extracted_elements = []\n    # Loop through the list of tuples\n    for tup in list1:\n        # If the index is the desired nth element, append the element to the list\n        if n == tup[0]:\n            extracted_elements.append(tup[1])\n    # If there are no extracted elements, return None\n    if not extracted_elements:\n        return None\n    # Return the extracted element(s)\n    return extracted_elements"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples as input and returns the nth element of the list.\n    \"\"\"\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n    \"\"\"\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        raise TypeError(\"Input should be a list of tuples\")\n    if type(n)!= int or n < 1:\n        raise TypeError(\"n should be a positive integer\")\n    \n    for i in range(len(list1)):\n        if len(list1[i])!= 2:\n            raise TypeError(\"All elements in list should be tuples\")\n    \n    if n > len(list1) or n < 1:\n        raise ValueError(\"n should be a positive integer less than or equal to the length of the list\")\n    \n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            print(value)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two sequences as input and checks whether any value in the first sequence exists in the second sequence. \n    It returns a boolean value indicating whether the first sequence has any overlapping values or not.\n    \n    Parameters:\n    list1: a sequence of values.\n    list2: a sequence of values.\n    \n    Returns:\n    True if there is at least one overlapping value in the input sequences, False otherwise.\n    '''\n    \n    # check if both lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # check if any value in list1 exists in list2\n    for value in list1:\n        if value in list2:\n            return True\n        \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input, both containing integers. It then checks if any integer in\n    the first list exists in the second list or not. If it finds any overlapping integers, it returns True,\n    otherwise, it returns False.\n    \"\"\"\n\n    # Loop through each integer in the first list\n    for num in list1:\n        # If the integer is found in the second list, return True\n        if num in list2:\n            return True\n\n    # If no overlapping integers were found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    min1 = arr[0]\n    max2 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1*max2, max2*min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple with the maximum product of two elements from the array.\n    \"\"\"\n    max1, max2, min1, min2 = float('-inf'), float('-inf'), float('inf'), float('inf')\n    for num in arr:\n        if num > max1:\n            max2, max1 = max1, num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2, min1 = min1, num\n        elif num < min2:\n            min2 = num\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1*max2, min1*min2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        curr_product = arr[i] * max(arr[i], arr[0])\n        if curr_product > max_product:\n            max_product = curr_product\n            max_pair = (arr[i], arr[0])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n    min_product = float('inf')\n    min_pair = (-1, -1)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n            elif product == max_product:\n                if arr[i] > max_pair[0]:\n                    max_pair = (arr[i], arr[j])\n            if product < min_product:\n                min_product = product\n                min_pair = (arr[i], arr[j])\n            elif product == min_product:\n                if arr[i] < min_pair[0]:\n                    min_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize variables for maximum and minimum product\n    max_product = arr[0]\n    min_product = arr[0]\n\n    # Loop through the array and find the maximum and minimum product\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n\n    # Calculate the maximum product by multiplying the maximum and minimum product\n    max_product_pair = max_product * min_product\n\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                product = arr[i] * arr[j]\n                if product > max_product:\n                    max_product = product\n                    max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_pair:\n                max_pair = product\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    # Initialize two variables to keep track of the maximum and minimum values seen so far\n    max_val = arr[0]\n    min_val = arr[0]\n    \n    # Initialize two variables to keep track of the maximum and minimum values seen so far for each element in the array\n    max_product = arr[0]\n    max_product_indices = (0, 0)\n    min_product = arr[0]\n    min_product_indices = (0, 0)\n    \n    # Iterate over each element in the array\n    for i in range(1, len(arr)):\n        # Update the maximum and minimum values seen so far\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_product_indices = (i, max_product_indices[1])\n        elif arr[i] < min_val:\n            min_val = arr[i]\n            min_product_indices = (i, min_product_indices[1])\n            \n        # Update the maximum and minimum products seen so far for the current element\n        product = arr[i]\n        if product > max_product:\n            max_product = product\n            max_product_indices = (i, 0)\n        elif product > min_product and product!= max_product:\n            min_product = product\n            min_product_indices = (i, min_product_indices[1])\n        \n        # Update the maximum and minimum products seen so far for all elements in the array so far\n        if product > max_product:\n            max_product = product\n            max_product_indices = (0, i)\n        elif product > min_product and product!= max_product:\n            min_product = product\n            min_product_indices = (0, i)\n            \n    # Return the index of the pair with the highest product\n    return max_product_indices"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        else:\n            if tup[0] == common_element:\n                continue\n            else:\n                break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    count = {}\n    for i in Input:\n        if i[0] in count:\n            count[i[0]] += 1\n        else:\n            count[i[0]] = 1\n    return max(count, key=count.get)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a new list of groups, where each group contains a tuple where the common first element is the same.\n    \"\"\"\n    groups = []\n    for tup in Input:\n        if tup[0] in groups:\n            groups[-1].append(tup)\n        else:\n            groups.append([tup])\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Create a dictionary to store the count of each first element\n    count = {}\n\n    # Iterate through the input list\n    for tup in Input: \n        # Extract the first element of the tuple\n        first = tup[0]\n        # If the first element is already in the dictionary, increment its count\n        if first in count:\n            count[first] += 1\n        # If the first element is not in the dictionary, add it with count 1\n        else:\n            count[first] = 1\n\n    # Iterate through the dictionary and find the first element with maximum count\n    max_count = 0\n    common_first = None\n    for key, value in count.items():\n        if value > max_count:\n            max_count = value\n            common_first = key\n\n    # Return the common first element\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tuple1 in Input:\n        for tuple2 in Input:\n            if tuple1[0] == tuple2[0] and tuple1!= tuple2:\n                if tuple1 not in common_elements:\n                    common_elements.append(tuple1)\n    return common_elements\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append((Input[i][0], [Input[i][1], Input[j][1]]))\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    \n    for tuple_element in Input:\n        if common_first_element is None:\n            common_first_element = tuple_element[0]\n        else:\n            if tuple_element[0] == common_first_element:\n                return common_first_element\n    \n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store common first elements\n    common_elements = {}\n\n    # loop through the list of tuples\n    for tup in Input:\n        # get the first element of the tuple\n        element = tup[0]\n\n        # check if the element is already in the dictionary\n        if element in common_elements:\n            # if it is, increment the count of the element\n            common_elements[element] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            common_elements[element] = 1\n\n    # loop through the dictionary to find the common first element\n    for element in common_elements:\n        # check if the count of the element is greater than 1\n        if common_elements[element] > 1:\n            # if it is, return the element and its count\n            return (element, common_elements[element])\n\n    # if no common elements are found, return None\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common = []\n\n    for tuple_ in Input:\n        first_element = tuple_[0]\n        if first_element not in common:\n            common.append(first_element)\n\n    return common"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list with maximum length.\n    '''\n    max_len = len(lst[0])\n    max_str = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_str = lst[i]\n    return max_str"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    max_length = 0\n    max_element = None\n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total += list1[i]\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(lst):\n    # Round every number in the list\n    lst = [round(x) for x in lst]\n\n    # Calculate the total sum\n    total_sum = sum(lst)\n\n    # Calculate the length of the list\n    length = len(lst)\n\n    # Multiply the total sum by the length of the list\n    result = total_sum * length\n\n    # Print the result\n    print(\"The rounded and summed list is:\", lst)\n    print(\"The total sum is:\", total_sum)\n    print(\"The length of the list is:\", length)\n    print(\"The result is:\", result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(lst):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in lst:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round the numbers in the list\n    list2 = [round(x) for x in list1]\n    # Calculate the total sum\n    total_sum = sum(list2)\n    # Multiply the total sum by the length of the list\n    result = total_sum * len(list2)\n    # Print the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(lst):\n    total = sum([round(x) for x in lst])\n    print(total * len(lst))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i*i*i\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    sum = 0\n    for i in range(2, n+1, 2):\n        count += 1\n        sum += i**3\n    return count, sum\n\nprint(cube_Sum(5))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initializing the sum variable as 0\n    sum = 0\n    \n    # Looping from 0 to n-1\n    for i in range(n):\n        \n        # Checking if the current number is even\n        if i%2 == 0:\n            \n            # If it is even, adding its cube to the sum\n            sum += i**3\n            \n    # Returning the cube sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize variables\n    cube_sum = 0\n    num = 2\n    \n    # Calculate the cube sum of the first n even natural numbers\n    while num <= n:\n        cube_sum += num ** 3\n        num += 2\n    \n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(2, n+1, 2))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    # initialize the sum and the current number to 0\n    sum = 0\n    current = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(n):\n        # add the cube of the current number to the sum\n        sum += current ** 3\n        # increment the current number\n        current += 2\n    \n    # return the final sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the cube of the current even natural number to the sum\n        sum += i ** 3\n    \n    # Return the sum of the cubes of the even natural numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        cube = i**3\n        sum_of_cubes += cube\n        count += 1\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function calculates the cube sum of the first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    count = 0\n    while count < n:\n        sum_cubes += count**3\n        count += 1\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer argument n and returns the sum of the cubes of first n even natural numbers.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # iterate n times\n    for i in range(1, n+1, 2):\n        # add the cube of the current even number to the sum\n        sum += i**3\n        \n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_list = []\n    for element in test_tup:\n        concatenated_list.append(str(element))\n    concatenated_string = delimiter.join(concatenated_list)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple and a delimiter as input and concatenates each element of the tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = delimiter.join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function concatenates each element of a tuple by the specified delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \", \".join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    This function concatenates each element of a tuple by the delimiter.\n    '''\n    # Define the delimiter as a string\n    delimiter = \" \"\n    # Use join() method to concatenate the elements of the tuple using the delimiter\n    concatenated_str = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat_str = \"\"\n    for item in test_tup:\n        concat_str += str(item) + delimiter\n    return concat_str[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize the sum variable to 0\n    sum_of_cubes = 0\n\n    # iterate through the first n natural numbers\n    for i in range(1, n+1):\n\n        # calculate the cube of the current number and add it to the sum variable\n        cube_of_num = i ** 3\n        sum_of_cubes += cube_of_num\n\n    # calculate the average of the cubes and return it\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    avg = sum/n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(n):\n        sum += i ** 3\n        count += 1\n    avg = sum / count\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    print(\"The average of cubes of first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # calculate the sum of cubes of first n natural numbers\n    sum_cubes = n * n * n\n    \n    # calculate the average of cubes\n    average_cubes = sum_cubes/n\n    \n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    average_of_cubes = sum_of_cubes / n\n\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average_of_cubes)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for string in test_tuple:\n        rear_index = len(string) - 1\n        rear_tuple.append(string[rear_index])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, elem in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_elements.append(elem)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        if isinstance(i, str):\n            rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1: \n        if x in i: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    This function takes a list and an element x as input and returns the number of sublists in the list that contain the element x.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if x in lst[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    This function takes a list of lists and an element x as input and returns the number of sublists \n    containing the element x.\n    '''\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a given list of numbers.\n    '''\n    odd_numbers = [num for num in nums if num % 2!= 0]\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    match = re.match(pattern, dt)\n    if match:\n        year = int(match.group(1))\n        month = int(match.group(2))\n        day = int(match.group(3))\n        yyyy_mm_dd = str(day) + \"-\" + str(month).zfill(2) + \"-\" + str(year).zfill(2)\n        return yyyy_mm_dd\n    else:\n        return \"Invalid date format.\""
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the pattern to match the desired date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use re.match() method to find the match in the input string\n    match = re.match(pattern, dt)\n    \n    # If there is a match, extract the groups and join them back together\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    \n    # If there is no match, return the input string as-is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define regular expression pattern for date format conversion\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Convert date format using re.sub() function\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        day, month, year = match.groups()\n        yyyy_mm_dd = year + '-' + month + '-' + day\n        yyyy_mm_dd_format = '-'.join(reversed(yyyy_mm_dd.split('-')))\n        return yyyy_mm_dd_format\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        formatted_date = f'{day}-{month}-{year}'\n        return formatted_date\n    else:\n        print(\"Invalid date format\")"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the regular expression pattern for the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match the pattern in the date string\n    match = re.match(pattern, dt)\n    \n    # check if the pattern is found\n    if match:\n        # extract the matched groups from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        \n        # format the date string in the desired format\n        new_date = day + '-' + month + '-' + year\n        \n        # return the new date string\n        return new_date\n    else:\n        # if no pattern is found, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the re.search() function to search for a match between the input date and the pattern\n    match = re.search(pattern, dt)\n    \n    # If a match is found, use the re.sub() function to replace the format in the input string\n    if match:\n        return re.sub(pattern, r'\\2-\\1-\\3', dt)\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = int(match.group(1))\n        month = int(match.group(2))\n        day = int(match.group(3))\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the pattern for matching the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # search the string for the pattern\n    match = re.search(pattern, dt)\n    # if the pattern is found, extract the date components and reverse the order\n    if match:\n        year, month, day = match.group(0).split('-')\n        return day + '-' + month + '-' + year\n    # if the pattern is not found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    replace_string = r'\\2-\\1-\\3'\n    return re.sub(pattern, replace_string, dt)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n\n    # Find the largest gap, which is the length of the array divided by 2\n    gap = len(my_list) // 2\n\n    # While there is a gap, iterate over the array and place the elements in sorted order\n    while gap > 0:\n        # Iterate over the gap size\n        for i in range(gap, len(my_list)):\n            # Compare the current element with its neighboring elements\n            # Swap them if they are out of order\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # Reduce the gap size by half\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Perform gap sequence\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    # Get the length of the list\n    n = len(my_list)\n    \n    # Calculate the largest gap\n    gap = n // 2\n    \n    # Iterate over each gap\n    while gap > 0:\n        # Iterate over each sublist of the array of size gap\n        for i in range(gap, n):\n            # Store the value to be sorted\n            temp = my_list[i]\n            # Iterate over each sublist of the array of size gap to the left of the current element\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                # Shift the elements to the right of the current element to the left of it\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            # Insert the current element at its correct position\n            my_list[j] = temp\n        # Decrease the gap by half\n        gap //= 2\n    \n    # Return the sorted list\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step 1: Calculate the gap sequence using a variation of Shell's\n    # formula\n    gap = n // 2\n    while gap > 0:\n        # Step 2: Move the gap elements to their correct positions\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] & test_tup2[i],)\n    return result_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Initialize the empty list for the and tuples\n    and_tups = []\n    # Loop through the elements in each tuple\n    for i in range(len(test_tup1)):\n        # Extract the elements from the tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        # Extract the elementwise and of the elements\n        and_tup_elem = tup1_elem & tup2_elem\n        # Append the elementwise and tuple to the list\n        and_tups.append(and_tup_elem)\n    # Return the list of and tuples\n    return and_tups"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(tup1 & tup2 for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Get the length of both tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    \n    # Initialize an empty list to store the elementwise and tuples\n    and_tuples_list = []\n    \n    # Iterate over the indices of the tuples\n    for i in range(length1):\n        # Check if both elements are True in the i-th position of the tuples\n        if test_tup1[i] and test_tup2[i]:\n            # Add the elementwise and tuple to the list\n            and_tuples_list.append((test_tup1[i], test_tup2[i]))\n            \n    return and_tuples_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns their element-wise and tuples.\n    '''\n\n    # Initialize the empty result tuple\n    result_tup = ()\n\n    # Loop through the first tuple and check if each element is True in the second tuple\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            # If both elements are True, add them to the result tuple\n            if elem1 and elem2:\n                result_tup += (elem1 and elem2,)\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant > 0:\n        directrix = (-b + determinant**0.5)/(2*a)\n        return directrix\n    elif determinant == 0:\n        directrix = -b/(2*a)\n        return directrix\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    print(\"The directrix of the parabola is: \")\n    print(\"x1 =\", x1)\n    print(\"x2 =\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n\n    if discriminant < 0:\n        return \"The parabola does not have a unique directrix.\"\n    elif discriminant == 0:\n        return \"The directrix of the parabola is x = {-b/2a}\"\n    else:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return \"The directrix of the parabola is x = {-b/2a}, and x = {-b/2a}, respectively.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Compute the determinant of the matrix:\n    det = b**2 - 4*a*c\n\n    # Check if the matrix has no real roots (parallel lines):\n    if det == 0:\n        return \"The parabola is parallel to the x-axis.\"\n\n    # Compute the two roots of the determinant:\n    root1 = (-b + math.sqrt(det)) / (2*a)\n    root2 = (-b - math.sqrt(det)) / (2*a)\n\n    # Check if the directrix is between the two roots:\n    if root1 >= a and root2 <= c:\n        return \"The directrix is between the two roots.\"\n\n    # Check if the directrix is at one of the roots:\n    if root1 >= a and root2 >= c:\n        return \"The directrix is at the first root.\"\n\n    if root1 <= a and root2 >= c:\n        return \"The directrix is at the second root.\"\n\n    # If none of the above cases apply, the directrix is outside the range of the roots:\n    return \"The directrix is outside the range of the roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The equation does not have a unique directrix.\"\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return f\"The directrix is x = {-b/(2*a)}.\"\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return f\"The directrix is x = {-b/(2*a)} or x = {-b/(2*a)}.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the quadratic equation using the formula ax^2 + bx + c = 0\n    discriminant = b**2 - 4*a*c\n\n    # Check if the quadratic equation has a real root\n    if discriminant < 0:\n        print(\"The quadratic equation does not have a real root.\")\n    else:\n        # Find the roots of the quadratic equation\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n\n        # Find the midpoint of the two roots\n        midpoint = (x1 + x2)/2\n\n        # Calculate the slope of the parabola and its distance from the origin\n        slope = (3*b**2)/(4*a**2)\n        distance = midpoint**2 - (x1**2 + x2**2)\n\n        # Print the directrix of the parabola\n        print(\"The directrix of the parabola is\", midpoint, \"with a slope of\", slope, \"and a distance of\", distance, \"from the origin.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if disc > 0:\n        # Calculate the two roots\n        root1 = (-b + disc**0.5) / (2*a)\n        root2 = (-b - disc**0.5) / (2*a)\n        \n        # Sort the roots in ascending order\n        if root1 < root2:\n            root1, root2 = root2, root1\n        \n        # Return the directrix\n        return root1\n    \n    elif disc == 0:\n        # The discriminant is zero, so the directrix is a single root\n        return (-b) / (2*a)\n    \n    else:\n        # The discriminant is negative, so the parabola has no real roots\n        return \"The parabola has no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant > 0:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b / (2 * a)\n        return root\n    else:\n        return \"The equation has no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"There are no real roots for the equation\"\n    elif discriminant == 0:\n        return \"The directrix is x = %.2f\" % (-b/(2*a))\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix is x1 = %.2f and x2 = %.2f\" % (root1, root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        # no real roots\n        return None\n    \n    elif discriminant == 0:\n        # two distinct real roots\n        root1 = -b/2/a\n        root2 = -b/2/a\n        return (root1, root2)\n    \n    else:\n        # one real root\n        root = -b/2/a\n        return root"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of all elements in list1 and list2\n    all_elements = set(list1 + list2)\n    \n    # loop through all elements in list1\n    for element in list1:\n        # if element is in all_elements, return True\n        if element in all_elements:\n            return True\n    \n    # if we make it this far, no common elements were found\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from the first list to eliminate duplicates\n    set1 = set(list1)\n    # Create a set from the second list to eliminate duplicates\n    set2 = set(list2)\n    # Find the intersection of the two sets\n    common = set1.intersection(set2)\n    # Check if the intersection is empty (i.e., there are no common elements)\n    if len(common) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for item in list1:\n        if item in list2:\n            common_list.append(item)\n    return len(common_list) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return any(x in list1 and x in list2 for x in set(list1) | set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    median = 0.5 * (area + height)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    trapezium_length = (area - base1) / height\n    \n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # Calculate the length of the two bases\n    base1_length = (base1 * height) // 2\n    base2_length = (base2 * height) // 2\n    # Calculate the length of the trapezium\n    trapezium_length = base1_length + base2_length\n    # Calculate the median of the two bases and the trapezium\n    median1 = (base1_length + trapezium_length) // 2\n    median2 = (base2_length + trapezium_length) // 2\n    # Calculate the median of the two medians\n    median = (median1 + median2) // 2\n    # Return the median\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # calculate the lengths of the trapezium's base and height\n    base_length = math.sqrt((base1 ** 2 + base2 ** 2) / 2)\n    height_length = math.sqrt(height ** 2 - area)\n\n    # calculate the length of the larger base and height\n    larger_base_length = max(base_length, height_length)\n\n    # calculate the length of the smaller base and height\n    smaller_base_length = min(base_length, height_length)\n\n    # calculate the sum of the base lengths\n    sum_base_lengths = base1 + base2 + larger_base_length\n\n    # calculate the length of the larger base and height\n    larger_height_length = height - sum_base_lengths\n\n    # calculate the length of the smaller base and height\n    smaller_height_length = smaller_base_length\n\n    # calculate the sum of the height lengths\n    sum_height_lengths = height_length + larger_height_length\n\n    # calculate the median of the trapezium's base lengths\n    median_base_length = (smaller_base_length + larger_base_length) / 2\n\n    # calculate the median of the trapezium's height lengths\n    median_height_length = (smaller_height_length + larger_height_length) / 2\n\n    # calculate the median of the trapezium's area\n    median_area = area / 2\n\n    # calculate the median of the trapezium's total length\n    median_length = (median_base_length + median_height_length) / 2\n\n    # return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height\n    area_sum = 0\n    for i in range(height):\n        area_sum += i * base1\n    area_sum += height * base1 + (height - 1) * base2\n    area_sum *= 0.5\n    return area_sum"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the length of the half base\n    half_base = (base1 + base2) / 2\n    \n    # Calculate the length of the half height\n    half_height = height / 2\n    \n    # Calculate the length of the base of the top half\n    top_base = half_base * (1 + (area - half_base * height) / half_base)\n    \n    # Calculate the length of the base of the bottom half\n    bottom_base = half_base * (1 - (area - half_base * height) / half_base)\n    \n    # Calculate the length of the base of the top and bottom halves\n    base_length = top_base + bottom_base\n    \n    # Calculate the length of the top half of the trapezium\n    top_length = (top_base + half_base) * half_height\n    \n    # Calculate the length of the bottom half of the trapezium\n    bottom_length = (bottom_base + half_base) * half_height\n    \n    # Return the median of the top and bottom halves\n    return (top_length + bottom_length) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height/2\n    # Calculate the lengths of the trapezium\n    length1 = base1 + base2\n    length2 = height\n    # Find the length of the smaller side\n    smaller_length = min(length1,length2)\n    # Calculate the sum of the two sides\n    total_length = (smaller_length + half_height) * 2\n    # Find the area of the trapezium\n    area = 0.5 * (base1 * height + base2 * height)\n    # Calculate the median length\n    median_length = total_length / area\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2 + height\n    median = 0.5 * area\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2 * height\n    base_area = math.sqrt(2 * area)\n\n    return 2 * height * (base1 + base2 + base_area) / (2 * area)\n\nprint(median_trapezium(2, 3, 4))  # Output: 4.666666666666667"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium using the trapezoidal rule.\n\n    Args:\n    - base1 (float): Length of the first half of the trapezium.\n    - base2 (float): Length of the second half of the trapezium.\n    - height (float): Height of the trapezium.\n\n    Returns:\n    - float: The median length of the trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n\n    # Calculate the height of the top half of the trapezium\n    top_half_height = height / 2\n\n    # Calculate the area of the top half of the trapezium\n    top_area = 0.5 * base1 * top_half_height\n\n    # Calculate the height of the bottom half of the trapezium\n    bottom_half_height = height - top_half_height\n\n    # Calculate the area of the bottom half of the trapezium\n    bottom_area = 0.5 * base2 * bottom_half_height\n\n    # Calculate the area of the trapezium\n    total_area = area + top_area + bottom_area\n\n    # Calculate the ratio of the total area to the given area\n    ratio = total_area / area\n\n    # Calculate the height of the trapezium at the given ratio\n    trapezium_height = ratio * height\n\n    # Calculate the length of the trapezium at the given ratio\n    trapezium_length = 0.5 * base1 * trapezium_height\n\n    # Calculate the area of the trapezium at the given ratio\n    trapezium_area = 0.5 * base1 * trapezium_height\n\n    # Calculate the median length of the trapezium\n    median_length = trapezium_length\n\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            print(True)\n            break\n    else:\n        print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = False\n    for i in arr:\n        if i > number:\n            greater_than = True\n            break\n    return greater_than\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = []\n    for element in arr:\n        if element > number:\n            greater_than.append(element)\n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Check whether the given number is greater than all elements in the array.\n    \"\"\"\n    for elem in arr:\n        if elem > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.+b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1}b+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(b*)')\n    match = pattern.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return 'The pattern found in the text is:'+ match.group()\n    else:\n        return 'The pattern was not found in the text.'\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w+b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of the number.\n    \"\"\"\n    # Remove the last digit of the number using integer division operator\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as an input and returns the last digit of the number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    # take the last digit of the number and return it\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function returns the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list of numbers as input and returns the negative numbers in the list.\n    '''\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list with the negative numbers of the input list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    str2 = \"\"\n    for i in str1:\n        if i.isdigit():\n            str2 += i\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    str1 = ''.join(char for char in str1 if char.isalnum())\n    return str1"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is an odd number, add it to the result string\n        if int(char) % 2!= 0:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isalpha():\n            if char.isdigit():\n                result += char\n            elif char.isalpha():\n                result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # initialize an empty string to store the even characters\n    even_str = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if the character is odd, append it to the even_str\n            even_str += char\n    # return the even_str\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if it is, add it to the result string\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    odd_chars = set(['1', '3', '5', '7', '9'])\n    result = ''\n    for char in string:\n        if char not in odd_chars:\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(len(test_list)):\n                if i < k and i < j and k < j:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count\n"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    elif len(L) == 2:\n        return L[0]*L[1]\n    else:\n        for i in range(1, len(L)):\n            L[i] = L[i]*L[0]\n        return L[0]"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each element in the list\n    for i in L:\n        # Check if the element is a multiple of 3\n        if i % 3 == 0:\n            # If it is, add it to the sum\n            sum += i\n    # Return the sum\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result to be 0\n    result = 0\n    # Loop over the list of integers\n    for i in L:\n        # Add each integer to the result\n        result += i\n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate through the list and add each element to the result\n    for num in L:\n        result += num\n    \n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num % 2 == 0:\n            result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern to match adverbs\n    pattern = r'\\b(really|actually|definitely|actually|amazingly|awfully|amazing|awesomely|awesomeness|awesomer|awesomest|amazingly|amazingly|exceedingly|exceptionally|exceptional|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely|extremely"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Create a regular expression pattern to match adverbs\n    pattern = r'\\b([A-Z][a-z]*([A-Z][a-z]*)*)\\b'\n\n    # Use the pattern to find all the matches in the sentence\n    matches = re.findall(pattern, text)\n\n    # Return the list of adverbs and their positions\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function will find the first adverb and their positions in a given sentence.\n    '''\n\n    # Remove punctuation from the sentence\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Split the sentence into words\n    words = text.split()\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Loop through each word and check if it is an adverb\n    for i, word in enumerate(words):\n        if re.search(r'\\b(adverb)\\b', word, re.IGNORECASE):\n            # If the word is an adverb, append its position to the list\n            adverbs.append(i)\n\n    # Sort the list of adverb positions in ascending order\n    adverbs.sort()\n\n    # Return a list of tuples containing the adverbs and their positions\n    return [(words[i], adverbs.index(i)) for i in adverbs]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find the first adverb in the sentence\n    adverb = re.findall(r'\\b\\w*ing\\b', text, re.IGNORECASE)[0]\n\n    # Find the position of the adverb in the sentence\n    adverb_position = re.search(r'\\b'+adverb+r'\\b', text, re.IGNORECASE).start()\n\n    return adverb, adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(?:st|nd|rd|th)\\b'\n\n    # Use the regular expression search method to find all occurrences of adverbs\n    adverbs = re.findall(pattern, text)\n\n    # Initialize an empty dictionary to store the adverb position\n    position_dict = {}\n\n    # Iterate over the adverbs found and store their positions in the dictionary\n    for i, adv in enumerate(adverbs):\n        position_dict[adv] = i + 1\n\n    # Return the dictionary of adverb positions found\n    return position_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # create a regular expression pattern for adverbs\n    pattern = re.compile(r'\\b(adverb)\\b')\n\n    # find all adverbs in the sentence\n    adverbs = pattern.findall(text)\n\n    # iterate over the adverbs and find their positions in the sentence\n    for i, adv in enumerate(adverbs):\n        # find the position of the first occurrence of the adverb in the sentence\n        pos = text.find(adv)\n\n        # print the adverb and its position\n        print(f'{adv}: {pos}')\n\n    # if there are no adverbs in the sentence, print a message\n    if not adverbs:\n        print('No adverbs found.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverbs and their positions in the sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(a(d(e(r)?)?)?|an|the|at|by|for|in|of|on|to|with|about)\\b'\n\n    # Use the re.findall() method to find all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # Create an empty list to store the adverb and its positions\n    adverbs = []\n\n    # Loop through the matches list and extract the adverb and its position from each match\n    for match in matches:\n        # Extract the adverb from the match\n        adverb = match.lower()\n\n        # Check if the adverb is a valid adverb (i.e. not a preposition or article)\n        if adverb not in ['a', 'an', 'the', 'at', 'by', 'for', 'in', 'of', 'on', 'to', 'with', 'about']:\n            # Add the adverb and its position to the adverbs list\n            adverbs.append((adverb, text.lower().index(match)))\n\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b(really|badly|mostly|not|really|rather|well|well|badly|mostly|not|rather|well)\\b'\n\n    # Use the pattern to find all the adverbs in the text\n    matches = re.findall(pattern, text)\n\n    # Print the results\n    print(\"Adverbs:\", matches)\n    print(\"Adverb positions:\")\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        print(f\"{match} at position {start} and {end}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n    The function takes a string as input and returns a list of tuples containing the adverb and its position in the sentence.\n    '''\n    \n    # Define regular expression pattern to match adverbs\n    pattern = r'\\b(?:an|the|a|an|the|a)\\s*adverb\\b'\n    \n    # Use re.findall() to find all the matches in the sentence\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the adverbs and their positions\n    adverb_positions = []\n    \n    # Iterate over the matches and append them to the adverb_positions list\n    for i, match in enumerate(matches):\n        adverb_positions.append((match, i))\n    \n    # Return the adverb_positions list\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the text into words and punctuations\n    words = re.findall(r'\\w+', text)\n    \n    # Initialize a variable to store the index of the first adverb\n    adverb_position = -1\n    \n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word.lower() in ['very','really','really', 'extremely','very']:\n            # If it is, update the adverb position\n            adverb_position = i\n    \n    # Return the adverb and its position if found, or None otherwise\n    if adverb_position!= -1:\n        return words[adverb_position], adverb_position\n    else:\n        return None"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # Calculate the surface area of a cube using the formula S = 6 * l^2\n    S = 6 * l**2\n    return S"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Calculate the surface area of a cube with side length l.\n\n    Parameters:\n    l (float): the length of the side of the cube\n\n    Returns:\n    float: the surface area of the cube\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6 * l**2\n    \n    return surfacearea"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = (l**2) * 6\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create a new array to store positive numbers\n    positive = array('i')\n    \n    # Iterate over the input array\n    for num in nums:\n        # If the number is positive, append it to the new array\n        if num > 0:\n            positive.append(num)\n    \n    # Calculate the ration of positive numbers in the array\n    count = len(positive)\n    total = len(nums)\n    positive_ratio = count / total\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize array to store the count of positive numbers\n    count = array('i', [0])\n\n    # loop through each element in the array\n    for num in nums:\n        # if the element is positive, increment the count\n        if num > 0:\n            count.itemset(0, count[0] + 1)\n\n    # calculate the ration of positive numbers\n    ratio = count[0] / len(nums)\n\n    # return the ration\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def positive_count(nums):\n    # Initialize an empty array to store the positive numbers\n    positive = []\n    # Loop through each number in the array\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Append the positive number to the array\n            positive.append(num)\n    # Calculate the ration of positive numbers\n    ration = len(positive) / len(nums)\n    # Return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to an array of floats to find the positive values\n    float_nums = [float(x) for x in nums]\n    # Calculate the total number of positive values\n    total = sum(float_nums)\n    # Calculate the ration of positive values\n    pos_ratio = (float(sum(float_nums[float_nums > 0])) / total) * 100\n    # Print the ration of positive values\n    print(\"The ration of positive values is:\", pos_ratio, \"%\")"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the list to an array\n    arr = array('i', nums)\n\n    # Initialize count and sum\n    count = 0\n    sum_arr = 0\n\n    # Iterate through the array and count the number of positive numbers\n    for num in arr:\n        if num > 0:\n            count += 1\n            sum_arr += num\n\n    # Calculate the ration of positive numbers\n    ratio = count / len(arr)\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create a new array to store positive numbers\n    positive_nums = array('i')\n    # Iterate through the original array\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Append the positive number to the new array\n            positive_nums.append(num)\n    # Calculate the ration of positive numbers\n    num_pos = len(nums)\n    num_pos_pos = len(positive_nums)\n    ratio = num_pos_pos / num_pos\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list to allow indexing\n    nums_list = list(nums)\n\n    # Initialize two counters to count the number of positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n\n    # Loop through the list and count the positive and negative numbers\n    for num in nums_list:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums_list)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n\n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)  # convert list to array of integers\n    pos_count = 0\n    neg_count = 0\n    \n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    \n    pos_ratio = pos_count / (pos_count + neg_count)\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_array = array('i', nums)\n    count_pos = 0\n    for num in num_array:\n        if num > 0:\n            count_pos += 1\n    ratio = count_pos / len(nums)\n    return ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Returns the largest negative number in a list.\n    \"\"\"\n    largest = float('-inf')  # Initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:  # Check if current number is negative and larger than largest\n            largest = num  # Update largest with current number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize a variable to store the largest negative number found so far.\n    largest = float('-inf')\n    # Iterate over each element in the list.\n    for num in list1:\n        # Check if the current number is negative and larger than the current largest number found.\n        if num < 0 and num > largest:\n            largest = num\n    # Return the largest negative number found.\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][K+1:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[K:]\n        print(tup)"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[:K])\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[:K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list and trim it by k\n    for i in range(len(test_list)):\n        trimmed_tuple = ()\n        for j in range(K):\n            trimmed_tuple += (test_list[i][j], )\n        test_list[i] = trimmed_tuple\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if K > len(test_list[i][j]):\n                del test_list[i][j]\n            else:\n                test_list[i][j] = test_list[i][j][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1][K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j] for j in range(K) if j < len(test_list[i]))\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize an empty list to store the results\n    result_list = []\n\n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        # multiply the corresponding elements of the tuples and append the result to the result_list\n        result_list.append(test_tup1[i] * test_tup2[i])\n\n    # return the result list\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] * test_tup2[i])\n        return result\n    else:\n        print(\"Error: The length of the two tuples must be equal.\")"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length to perform index multiplication.\")\n        return\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    multiplication_result = []\n    for i in range(len(test_tup1)):\n        multiplication_result.append(test_tup1[i] * test_tup2[i])\n    return multiplication_result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    for i in count: \n        if i in lst: \n            count[i] += 1 \n    return count "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a Counter object to count the frequency of each element in the list\n    count = Counter(lst)\n    \n    # Count the frequency of each element in the tuple using the same Counter object\n    result = 0\n    for item in tup:\n        result += count[item]\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the tuple to a set to remove duplicates\n    tup = set(tup)\n    # create a dictionary to store the count of each element in the list\n    count_dict = Counter(lst)\n    # iterate over the elements in the tuple and count their occurrence in the list\n    for elem in tup:\n        if elem in count_dict:\n            count_dict[elem] += 1\n    # convert the dictionary to a list of tuples and return it\n    return list(count_dict.items())"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = count_dict.get(elem, 0) + 1\n    for elem in tup:\n        if elem in count_dict:\n            tup_count = count_dict[elem]\n        else:\n            tup_count = 0\n        tup = tup[:tup.index(elem)] + (tup_count,) + tup[tup.index(elem)+1:]\n    return tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Using Counter() function from collections module to count the occurence of each element of the list in the tuple\n    count = Counter(tup)\n\n    # Using dictionary comprehension to count the occurrence of each element of the list in the tuple\n    count = {key: value for key, value in count.items() if key in lst}\n\n    # Return the count of occurrence of all elements of the list in the tuple\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input, and returns a dictionary with the count of each element in the list in the tuple.\n    '''\n    # Create a Counter object for the tuple\n    count_obj = Counter(tup)\n\n    # Create a dictionary to store the count of each element in the list in the tuple\n    count_dict = {}\n\n    # Iterate over the count_obj and count the occurrences of each element in the list in the tuple\n    for item in count_obj:\n        if item in lst:\n            count_dict[item] = count_obj[item]\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in tup:\n        count_dict[i] = count_dict.get(i, 0) + 1\n    count = Counter(count_dict)\n    for k, v in count.items():\n        if v > 1 and k in lst:\n            print(f\"{k}: {v}\")"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    count_lst = []\n    for i in lst:\n        if i in count:\n            count_lst.append(count[i])\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a Counter object to count the frequency of each element in the list\n    count_obj = Counter(lst)\n\n    # Create an empty dictionary to store the count of each element in the tuple\n    count_dict = {}\n\n    # Iterate through the tuple and add the element and its count to the dictionary\n    for i in tup:\n        count_dict[i] = count_obj[i]\n\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    sum_of_perrin = 0\n    for i in perrin_numbers:\n        sum_of_perrin += i\n        if sum_of_perrin >= n:\n            break\n    return sum_of_perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5]\n    sum_of_numbers = 0\n    for num in perrin_numbers:\n        sum_of_numbers += num\n    return sum_of_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_num = 1\n    sum_perrin_num = 0\n\n    while perrin_num <= n:\n        sum_perrin_num += perrin_num\n        perrin_num += 1\n\n    return sum_perrin_num"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through each digit in the input number\n    for i in str(n):\n        # Check if the digit is a perrin number\n        if i == '2' or i == '5':\n            # Add 1 to the sum variable\n            sum += 1\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    perrin_numbers = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676211, 23416728348467675, 37889062373143886, 61305790721611561, 99194853094755447, 160500643816367008, 259695496911122455, 420196140727489463, 67989"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum_perrin = 0\n    for num in perrin_numbers:\n        sum_perrin += num\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i * (i + 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[0:l] for s in l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) >= l:\n            extracted_list.append(string[:l])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            extracted_strings.append(l[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        if len(s) == size:\n            extracted_strings.append(s)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extracts specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): List of string values.\n    l (int): Size of the string to be extracted.\n\n    Returns:\n    list: A list of extracted string values.\n    '''\n\n    # Initialize an empty list to store extracted string values\n    extracted_list = []\n\n    # Iterate through the list of string values\n    for i in range(len(str_list)):\n\n        # If the length of the current string is equal to the required size, add it to the extracted list\n        if len(str_list[i]) == l:\n            extracted_list.append(str_list[i])\n\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer representing the size of the strings to extract.\n    It returns a list of strings of the specified size extracted from the input list.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and a specified size as arguments.\n    It returns a list of specified size string values extracted from the original list.\n    '''\n    result = []\n    for i in range(len(str_list) // l):\n        result.extend(str_list[i*l:(i+1)*l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings of\n    specified size from the given list.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(l)):\n        extracted_list.append(l[i][:l[i].find(str)])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and an integer l as input.\n    It returns a new list containing the extracted strings of size l from the original list.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        new_list.append(str_list[i][:l])\n    return new_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove whitespaces using regular expressions\n    text = re.sub('\\s+','', text1)\n    return text.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string\n    text1 = re.sub('\\s+','', text1)\n    # Remove any single whitespaces\n    text1 = re.sub('\\s', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces from the string\n    text1 = re.sub(r'\\s+','', text1)\n    # Removing extra spaces at the beginning and end of the string\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Removing whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_rate = 0.01 # assume 1% loss rate\n    \n    if sale_amount >= actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return (sale_amount - actual_cost)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = 0.01\n    if actual_cost < sale_amount:\n        loss_amount = (actual_cost - sale_amount) * loss_percentage\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i == i:\n                sum += n\n            else:\n                sum += i\n    if n >= 2 and n % 2 == 0:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # initialize sum variable to zero\n    sum = 0\n    \n    # loop through all numbers between 2 and n\n    for i in range(2, int(math.sqrt(n))+1):\n        # check if the current number is even and divisible by i\n        if n%i == 0 and i%2 == 0:\n            # add the even factor to the sum\n            sum += i\n    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumOfFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    sum = sum(even_factors)\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = [i for i in range(2, int(math.sqrt(n))+1, 2)]\n    sum_even_factors = 0\n    for i in even_factors:\n        if n % i == 0:\n            sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and n%2 == 0:\n            even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through all the factors of the number n \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            # Check if the factor is even \n            if i % 2 == 0: \n                # If the factor is even, add it to the sum \n                sum += i\n\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # initialize sum of even factors as 0\n    sum = 0\n    \n    # loop through all numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # if i is even and divisible by n, add i to the sum\n        if i % 2 == 0 and n % i == 0:\n            sum += i\n            \n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            evenSum += i + n//i\n    return evenSum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]+z\\b'\n    matches = re.findall(pattern, text.lower())\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string `text` as input and returns a list of all the words containing 'z' in them.\n    '''\n    # Define the regular expression pattern to match words containing 'z'\n    pattern = re.compile(r'\\b(z\\w*)\\b')\n    \n    # Use the `findall()` method to find all the words containing 'z' in the input text\n    matches = pattern.findall(text)\n    \n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w+z\\b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(regex, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b(z)\\w+\\b')\n    match = pattern.search(text)\n\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if month number is valid\n    if not 1 <= monthnum2 <= 12:\n        return \"Invalid month number.\"\n\n    # Get the number of days in the month\n    if monthnum2 in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum2 in [2, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum2 in range(1,13):\n        for i in range(len(months)):\n            if monthnum2 == i+1:\n                if (i == 1 or i == 3 or i == 5 or i == 7 or i == 8 or i == 10 or i == 12) and (i+1)%2 == 0:\n                    if i == 2:\n                        if (not (year%4==0 and (year%100!=0 or year%400==0))) or (year%400==0):\n                            if day >= 29:\n                                return True\n                            else:\n                                return False\n                        else:\n                            if day >= 28:\n                                return True\n                            else:\n                                return False\n                    else:\n                        if day >= 31:\n                            return True\n                        else:\n                            return False\n                elif (i == 4 or i == 6 or i == 9 or i == 11) and (i+1)%2 == 0:\n                    if i == 5:\n                        if (not (year%4==0 and (year%100!=0 or year%400==0))) or (year%400==0):\n                            if day >= 30:\n                                return True\n                            else:\n                                return False\n                        else:\n                            if day >= 31:\n                                return True\n                            else:\n                                return False\n                    else:\n                        if day >= 31:\n                            return True\n                        else:\n                            return False\n                else:\n                    if day >= 30:\n                        return True\n                    else:\n                        return False\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum % 2 == 0:\n        if monthnum == 2 or monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n            return True\n        else:\n            return False\n    else:\n        if monthnum == 2 or monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n            return False\n        else:\n            return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0 and (monthnum2 % 4 == 0 or monthnum2 % 400 == 0):\n        return False\n    elif monthnum2 % 100!= 0 and monthnum2 % 4 == 0:\n        return False\n    elif monthnum2 % 2 == 0 and (monthnum2 % 12 == 0 or monthnum2 % 10 == 0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 12:\n        if monthnum2 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n                if day > 29:\n                    return False\n            else:\n                if day > 28:\n                    return False\n        else:\n            if day > 30:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # dictionary to store the days in each month\n    days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    # check if the month number is in the dictionary\n    if monthnum2 in days:\n        # check if the month number contains 31 days\n        if days[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        return False\n    elif 4 <= monthnum <= 6:\n        return True\n    elif 9 <= monthnum <= 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the current string\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for item in stringlist:\n        new_item = item[::-1]\n        new_list.append(new_item)\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # initialize minimum length to be the length of the entire list\n    min_len = len(lst)\n\n    # iterate through each sublist of the list\n    for i in range(len(lst)):\n\n        # if the length of the sublist is less than the minimum length so far, update it\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n\n    # return the sublist with the minimum length\n    return lst[min_len]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize a variable to store the minimum length of a sublist\n    min_len = len(lst)\n    # iterate over all sublists of lst\n    for i in range(len(lst)):\n        # initialize a variable to store the length of the current sublist\n        temp_len = 0\n        # iterate over all elements in the sublist\n        for j in range(len(lst[i])):\n            # increment the length of the sublist by 1\n            temp_len += 1\n            # check if the length of the sublist is less than the minimum length\n            if temp_len < min_len:\n                # update the minimum length of the sublist\n                min_len = temp_len\n                # initialize a variable to store the sublist of minimum length\n                min_sublist = lst[i][:]\n    # return the sublist of minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            if len(sub_lst) < min_len:\n                min_len = len(sub_lst)\n                min_lst = sub_lst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_sublist = lst[i:j+1]\n            if len(current_sublist) < min_length:\n                min_length = len(current_sublist)\n                min_sublist = current_sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n\n    # Initialize the minimum length to be infinite\n    min_len = float('inf')\n\n    # Initialize the minimum sublist to be empty list\n    min_sublist = []\n\n    # Loop through the list\n    for sublist in lst:\n        # Check if the current sublist length is less than the minimum length\n        if len(sublist) < min_len:\n            # Update the minimum length and the minimum sublist\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = []\n    min_len = float('inf')\n    \n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n    \n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(length,breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length*breadth"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # split the input string into words\n    words = str1.split()\n    # loop through the words and remove any that match the pattern\n    for i in range(len(words)):\n        word = words[i]\n        if pattern.search(word):\n            # remove the uppercase substring from the word\n            words[i] = re.sub(pattern, '', word)\n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    str1 = str1.lower() # Convert the string to lowercase\n    pattern = re.compile(r'[^a-z]+') # Define a regular expression pattern to match uppercase substrings\n    result = pattern.sub('', str1) # Use the pattern to remove all uppercase substrings\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define the pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    \n    # Find all the uppercase substrings in the string\n    upper_substrings = pattern.findall(str1)\n    \n    # Iterate through the list of uppercase substrings and remove them from the string\n    for upper_substring in upper_substrings:\n        str1 = str1.replace(upper_substring, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile('[A-Z]+')\n    # Split the string into a list of substrings\n    substrings = str1.split()\n    # Filter out the uppercase substrings from the list\n    result = [substring for substring in substrings if not uppercase_pattern.search(substring)]\n    # Join the substrings back into a string\n    return''.join(result)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Remove any uppercase substrings from the string\n    string = re.sub(r'([a-z])([A-Z])', r'\\1 \\2', string)\n    \n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and removes all uppercase substrings\n    from the string.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Find all matches of the pattern in the string\n    matches = pattern.findall(string)\n\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Find all uppercase substrings in the given string\n    matches = pattern.findall(str1)\n\n    # Iterate over the matched substrings and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns the first element of each sublist.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the first elements of the sublists\n    res = []\n    \n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # If the sublist is not empty, add its first element to the result list\n        if sublist:\n            res.append(sublist[0])\n    \n    # Return the result list\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i][0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(s):\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_length = len(list1)\n    for i in range(list_length):\n        for j in range(i+1, list_length+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    \n    # convert the list to a set to remove duplicates\n    set_list = set(list1)\n    \n    # use itertools to generate all possible combinations of the unique elements of the list\n    for comb in combinations(set_list, len(list1)):\n        print(comb)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # initialize an empty list to store the combinations\n    combinations = []\n\n    # loop through the elements of the list1\n    for i in range(len(list1)):\n\n        # loop through the remaining elements of the list1\n        for j in range(i+1, len(list1)):\n\n            # append the combination to the combinations list\n            combinations.append([list1[i], list1[j]])\n\n    # return the combinations list\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        combinations = []\n        for i in range(len(list1)):\n            remaining_list = list1[:i] + list1[i+1:]\n            for comb in combinations_list(remaining_list):\n                combinations.append([list1[i]] + comb)\n        return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a list of lists to store all possible combinations\n    combinations = []\n    \n    # Check if the list is empty\n    if len(list1) == 0:\n        return combinations\n    \n    # Add the first element of the list to the combinations list\n    combinations.append([list1[0]])\n    \n    # Loop through all the remaining elements of the list\n    for i in range(1, len(list1)):\n        # Loop through all previous combinations and add the next element to each combination\n        for j in range(len(combinations)):\n            for k in range(len(combinations[j])+1):\n                combinations.append(combinations[j][:k] + [list1[i]] + combinations[j][k:])\n                \n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    current_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        if current_sum <= 0:\n            current_sum = arr[i]\n        else:\n            current_sum += arr[i]\n\n        current_product = max(current_product, current_sum)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    result = []\n\n    for i in range(len(arr)):\n        curr_product = max(curr_product * arr[i], arr[i])\n        max_product = max(max_product, curr_product)\n\n        if curr_product < 0:\n            curr_product = 1\n\n        if max_product == 0:\n            continue\n\n        result.append(max_product)\n\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product < 0:\n            current_product = 1\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for num in arr:\n        max_ending_here = max(max_ending_here * num, num)\n        min_ending_here = min(min_ending_here * num, num)\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        max_so_far = max(max_so_far, max_product)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n    \n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Initialize variables to store the maximum subarray and the current subarray product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate through the array and update the current subarray product\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    # Return the maximum subarray product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n        else:\n            if value!= first_value:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict.values():\n        return False\n    else:\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    value = dict.values()[0]\n    for val in dict.values():\n        if val!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for i in dict.values():\n        if i!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if n!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        # check if all values in the dictionary are same\n        for key, value in dict.items():\n            if len(set([value]))!= 1:\n                # if any value is different, return False\n                return False\n        # if all values are same, return True\n        return True\n    else:\n        # if the length of the dictionary is not equal to n, return False\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for i in dict.values():\n        values.append(i)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[k] == dict[n] for k in dict)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if dict1[key]!= \"\":\n            new_dict[key] = dict1[key]\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    result = {}\n    for key, value in dict1.items():\n        if value!= '':\n            result[key] = value\n    return result"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # iterate over the dictionary items\n    for key, value in dict1.items():\n        # if the value is an empty string or None, remove it from the dictionary\n        if value == '' or value is None:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_left = arr[0]\n        max_right = arr[0]\n        min_left = arr[0]\n        min_right = arr[0]\n        for i in range(1, n):\n            max_left = max(max_left * arr[i], arr[i])\n            min_left = min(min_left * arr[i], arr[i])\n            max_right = max(max_right * arr[i], arr[i])\n            min_right = min(min_right * arr[i], arr[i])\n        return max(max_left, max_right)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    n = len(arr)   \n    max_so_far = arr[0]   \n    max_ending_here = arr[0]   \n    min_ending_here = arr[0]   \n    for i in range(1, n):   \n        max_ending_here = max(arr[i], max_ending_here * arr[i])   \n        min_ending_here = min(arr[i], min_ending_here * arr[i])   \n        max_so_far = max(max_so_far, max_ending_here)   \n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Initialize max product and current subsequence product as 1\n    max_product = 1\n    curr_product = 1\n\n    # Initialize the subsequence array\n    subseq = [1] * n\n\n    # Traverse through the array and update the max and current subsequence product\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            # If current element is smaller than previous element, then multiply\n            curr_product *= arr[i]\n        else:\n            # If current element is greater than or equal to previous element, then divide\n            curr_product /= arr[i - 1]\n\n        # Update the max subsequence product\n        max_product = max(max_product, curr_product)\n\n        # Update the subsequence array\n        subseq[i] = curr_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize the maximum product and the maximum subsequence\n    max_product = arr[0]\n    max_subseq = [arr[0]]\n\n    # Iterate through the array\n    for i in range(1, n):\n        # If the current element is greater than the maximum element in the current subsequence,\n        # update the maximum subsequence and the maximum product accordingly\n        if arr[i] > max_subseq[-1]:\n            max_subseq.append(arr[i])\n            max_product = max(max_product, max(max_subseq[-2:]).__mul__())\n        else:\n            # If the current element is not greater than the maximum element in the current subsequence,\n            # remove the element from the maximum subsequence and update the maximum product accordingly\n            max_subseq.pop()\n            max_product = max(max_product, max(max_subseq[-2:]).__mul__())\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0]*arr[1], arr[1]*arr[0])\n\n    # create a subarray of increasing numbers\n    subarray = [0] * (n//2)\n    for i in range(n//2):\n        subarray[i] = arr[i]\n\n    # find the maximum product of subarray using binary search\n    def binary_search(arr, x):\n        low, high = 0, len(arr) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] >= x:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return low\n\n    if n % 2 == 0:\n        max_left = binary_search(subarray, max(subarray))\n        max_right = binary_search(subarray[::-1], max(subarray[::-1]))\n        max_subarray = subarray[:max_left + 1] + subarray[max_right + 1:]\n        return max(max_subarray[0] * max_subarray[1], max_subarray[1] * max_subarray[0])\n    else:\n        max_left = binary_search(subarray, max(subarray))\n        max_subarray = subarray[:max_left + 1]\n        return max(max_subarray[0] * max_subarray[1], max_subarray[1] * max_subarray[0])"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    # Find the length of the increasing subsequence\n    n = len(arr)\n    curr_max = max_product_so_far = arr[0]\n\n    # Iterate through the array\n    for i in range(1, n):\n        # Update the maximum product so far\n        max_product_so_far = max(max_product_so_far * arr[i], curr_max * arr[i])\n        # Update the current maximum\n        curr_max = max(curr_max, arr[i])\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n    \n    # Calculate the maximum subsequence sum\n    max_sum = max(arr[0], arr[1])\n    min_sum = min(arr[0], arr[1])\n    \n    # Calculate the maximum product formed by the subsequence of the array\n    for i in range(2, len(arr)):\n        curr_sum = max_sum + arr[i]\n        curr_min_sum = min_sum + arr[i]\n        max_sum = max(curr_sum, curr_min_sum, max_sum)\n        min_sum = min(curr_sum, curr_min_sum, min_sum)\n        \n    return max_sum"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n\n    # Initialize two pointers, one at the beginning and the other at the end of the array.\n    # We will use these pointers to form increasing subsequences.\n    left = 0\n    right = n - 1\n\n    # Initialize variables to store the maximum product and the maximum subsequence product.\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n\n    # Iterate through the array and form increasing subsequences.\n    while left < right:\n        # If the current element is smaller than the next element, then we are expanding the subsequence.\n        if arr[left] < arr[right]:\n            # If the current element multiplies with the subsequence product is greater than the maximum subsequence product so far, update the maximum subsequence product.\n            if max_product_ending_here * arr[left] > max_product_so_far:\n                max_product_so_far = max_product_ending_here * arr[left]\n            # Increment the subsequence product by the current element.\n            max_product_ending_here *= arr[left]\n            # Move the left pointer to the next element.\n            left += 1\n        # If the current element is greater than the next element, then we are shrinking the subsequence.\n        else:\n            # If the current element multiplies with the subsequence product is greater than the maximum subsequence product so far, update the maximum subsequence product.\n            if max_product_ending_here * arr[right] > max_product_so_far:\n                max_product_so_far = max_product_ending_here * arr[right]\n            # Move the right pointer to the previous element.\n            right -= 1\n\n    # Return the maximum subsequence product.\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    min_product = float('inf')\n    current_product = 1\n    current_min_product = 1\n\n    for num in arr:\n        if num < arr[0]:\n            current_min_product = num\n            if current_product > max_product:\n                max_product = current_product\n        elif num < arr[-1]:\n            current_min_product *= num\n            if current_product > max_product:\n                max_product = current_product\n        else:\n            current_product = num\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Please provide at least two elements in the tuple.\"\n    else:\n        result = 0\n        for i in range(len(test_tup)-1):\n            result += test_tup[i] + test_tup[i+1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    \n    for i in range(1, n-1):\n        result.append(test_tup[i-1] + test_tup[i])\n        \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes in a tuple of numbers and returns the sum of the pairwise sums of its neighbors.\n    \"\"\"\n    # Check if the input is a tuple of numbers\n    if not isinstance(test_tup, tuple) or not all(isinstance(num, int) for num in test_tup):\n        raise ValueError(\"The input must be a tuple of numbers\")\n\n    # Calculate the sum of the first two elements of the tuple\n    first_two_sum = test_tup[0] + test_tup[1]\n\n    # Calculate the pairwise sum of the other elements of the tuple\n    pairwise_sum = sum([first_two_sum] + [num + first_two_sum for num in test_tup[2:]])\n\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"The given tuple should have at least two elements.\"\n    else:\n        result = 0\n        for i in range(len(test_tup)-1):\n            result += test_tup[i] + test_tup[i+1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n    \n    for i in range(len(test_tup)-1):\n        if i == 0:\n            print(test_tup[i], test_tup[i+1])\n            print(\"Sum: \", test_tup[i] + test_tup[i+1])\n        else:\n            print(\"Sum: \", test_tup[i] + test_tup[i-1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Create an empty list to store the result\n    result = []\n\n    # Loop through each element in the tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element and the next element in the tuple\n        result.append(test_tup[i] + test_tup[i+1])\n\n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        return test_tup\n    else:\n        return add_pairwise((test_tup[0] + test_tup[1], test_tup[1]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = (prod * num) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Calculate the product of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    # Return the product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n as input and returns the product of the array multiplication modulo n.\n    \"\"\"\n    # initialize the product to 1\n    product = 1\n    # loop through the array\n    for num in arr:\n        # multiply the current number with the product\n        product = (product * num) % n\n    # return the result\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array `arr` and an integer `n` as input, and returns the product of the array multiplication modulo `n`.\n    '''\n    # initialize the product variable to 1\n    product = 1\n    \n    # loop through each element in the array\n    for num in arr:\n        # multiply the product by the current element modulo n\n        product = (product * num) % n\n    \n    # return the final product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result *= num\n        result %= n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arguments - an array 'arr' and an integer 'n'.\n    The function calculates the product of the array elements and then takes the remainder of the result modulo n.\n    '''\n\n    # Calculate the product of the array elements\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # Take the remainder of the product and n\n    remainder = product % n\n    \n    # Return the remainder\n    return remainder"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    if len(l) < 2: \n        return \"The list must have at least two elements to check for consecutive numbers.\"\n\n    for i in range(len(l)-1): \n        if l[i+1]-l[i]!= 1: \n            return \"The list contains non-consecutive numbers.\"\n\n    return \"The list contains consecutive numbers.\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return True\n    elif l[0] == l[1]:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i+1] - l[i]!= 1:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    n = len(l)\n    for i in range(n-1):\n        if l[i] == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    if not l:  # check if the list is empty\n        return False\n    elif len(l) == 1:  # check if the list contains a single number\n        return True\n    else:  # check if the list contains consecutive numbers\n        count = 0\n        for i in range(1, len(l)):\n            if l[i] == l[i-1] + 1:\n                count += 1\n                if count == len(l)-1:\n                    return True\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1]-l[i]!=1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list of integers as input and returns True if the list contains consecutive numbers, and False otherwise.\n    \"\"\"\n    # Create a set to store the numbers in the list\n    num_set = set(l)\n    \n    # If the length of the set is equal to the length of the list, it means all the numbers are consecutive\n    if len(num_set) == len(l):\n        return True\n    \n    # If the length of the set is less than the length of the list, it means there are some non-consecutive numbers\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    # check if the list is empty or not\n    if not l:\n        print(\"The list is empty\")\n        return\n    \n    # initialize the first number and the flag for consecutive numbers\n    first_num = l[0]\n    is_consecutive = True\n    \n    # iterate over the rest of the numbers in the list\n    for i in range(1, len(l)):\n        # if the current number is not consecutive, set the flag to False\n        if l[i] - first_num!= 1:\n            is_consecutive = False\n            break\n        \n        # update the first number and the consecutive flag if the current number is consecutive\n        first_num = l[i]\n        if is_consecutive:\n            is_consecutive = True\n    \n    # print the result\n    if is_consecutive:\n        print(\"The list contains consecutive numbers\")\n    else:\n        print(\"The list does not contain consecutive numbers\")"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the lists to sets to remove duplicates and then convert them back to lists\n    list1 = list(set(test_list1))\n    list2 = list(set(test_list2))\n\n    # initialize an empty list to store the intersection\n    intersection_list = []\n\n    # iterate over the first list and check if each element is in the second list\n    for element in list1:\n        if element in list2:\n            intersection_list.append(element)\n\n    # convert the intersection list to a tuple and return it\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the unique elements of the first list\n    set1 = set(test_list1)\n    \n    # Initialize an empty set to store the unique elements of the second list\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets using the 'intersection' method\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the intersection of elements in two tuple lists irrespective of their order.\n    \"\"\"\n    result = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                result.append(t1)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # creating a dictionary to store the elements of test_list1\n    test_dict = {}\n    for item in test_list1:\n        if item not in test_dict:\n            test_dict[item] = 1\n\n    # iterating over test_list2 and adding the elements to the dictionary\n    for item in test_list2:\n        test_dict[item] = 1\n\n    # creating a new list to store the elements of test_list1 that are present in both test_list1 and test_list2\n    result_list = []\n    for key, value in test_dict.items():\n        if value == 2:\n            result_list.append(key)\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of unique elements in list1\n    set1 = set(test_list1)\n    # create a set of unique elements in list2\n    set2 = set(test_list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # create a list of tuples representing the intersection of the two sets\n    intersection_list = list(intersection)\n    # return the list of tuples representing the intersection\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Sort the input lists to ensure that we can find the intersection\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through both lists simultaneously\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        # If the current element of both lists are the same, add it to the result list and move to the next element\n        if test_list1[i] == test_list2[j]:\n            result.append(test_list1[i])\n            i += 1\n            j += 1\n        # If the current element of test_list1 is smaller, move to the next element of test_list1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        # If the current element of test_list2 is smaller, move to the next element of test_list2\n        else:\n            j += 1\n\n    # Return the result list\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set of the first list to get unique elements\n    unique_list1 = set(test_list1)\n    # create a set of the second list to get unique elements\n    unique_list2 = set(test_list2)\n    # find the intersection of unique elements from both lists\n    intersection = unique_list1.intersection(unique_list2)\n    # convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples and returns a new list of tuples that are the intersection of the two lists irrespective of their order.\n    \"\"\"\n    result = []\n    for i in test_list1:\n        if i in test_list2:\n            result.append(i)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of all elements in the first list and remove duplicates\n    unique_elements1 = set(test_list1)\n    # Create a set of all elements in the second list and remove duplicates\n    unique_elements2 = set(test_list2)\n    # Find the intersection of the two sets and convert it to a list\n    intersection = list(unique_elements1.intersection(unique_elements2))\n    return intersection"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with all the characters replaced\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a specified character in a string with another character.\n    '''\n\n    # Split the string into a list of characters\n    chars = list(str1)\n\n    # Iterate over each character in the list\n    for i in range(len(chars)):\n        # If the current character is the specified character\n        if chars[i] == ch:\n            # Replace it with the new character\n            chars[i] = newch\n\n    # Join the list of characters back into a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The character to replace all occurrences of ch with.\n\n    Returns:\n    str: The modified string with all occurrences of ch replaced with newch.\n    \"\"\"\n    # use a loop to replace all occurrences of ch with newch in str1\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_count_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_count_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert dictionary to Counter object\n    counter = Counter(dict1)\n    # sort counter by values in descending order\n    sorted_counter = counter.most_common()\n    sorted_counter.sort(key=lambda x: x[1], reverse=True)\n    # return sorted counter\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # Use Counter to count the occurrences of each value in the dictionary\n    counter = Counter(dict1.values())\n    \n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n    \n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use Counter class from collections to count frequency of values in the dictionary\n    counter = Counter(dict1.values())\n    \n    # Use items() method to get a list of (key, value) tuples from the counter\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a new dictionary with sorted keys and values\n    sorted_dict = {}\n    for key, value in sorted_counter:\n        sorted_dict[key] = value\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    This function takes a dictionary as an input and returns a sorted dictionary based on the value of the dictionary.\n    \"\"\"\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = {}\n    sorted_values = []\n    for key, value in dict1.items():\n        sorted_dict[key] = value\n        sorted_values.append(value)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the maximum and minimum values in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    # Loop through the array to find the maximum and minimum values\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        if nums[i] < min_val:\n            min_val = nums[i]\n    # Calculate the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables to store the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    # iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Calculate the sum of the largest and smallest values\n    largest = nums[0]\n    smallest = nums[-1]\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n\n    # sort the array in ascending order\n    nums.sort()\n\n    # find the largest and smallest values in the array\n    largest = nums[-1]\n    smallest = nums[0]\n\n    # calculate the sum of the largest and smallest values\n    total = largest + smallest\n\n    return total"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # find the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    This function finds the sum of the largest and smallest value in a given array.\n    '''\n    # Finding the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Adding the largest and smallest values to get the sum of the entire array\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Initialize variables to store the largest and smallest values\n    max_num = float('-inf')\n    min_num = float('inf')\n    sum_nums = 0\n\n    # Loop through the array and update the maximum and minimum values and the sum\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n        sum_nums += num\n\n    # Return the sum of the largest and smallest values\n    return sum_nums - max_num - min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # initialize variables\n    smallest = float('inf')\n    largest = float('-inf')\n    sum_of_nums = 0\n    \n    # iterate through the array\n    for num in nums:\n        # update the smallest and largest values\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n        # add the number to the sum\n        sum_of_nums += num\n    \n    # return the sum of the largest and smallest values\n    return sum_of_nums"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check whether the given string is in lower case or not.\n    '''\n    return all(char.islower() for char in string)"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is all lowercase or not.\n    '''\n    for char in string:\n        if char.isupper():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are lowercase, False otherwise.\n    \"\"\"\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check whether the given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define the pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # use the re.sub() function to replace all lowercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings from the given string\n    str1 = re.sub(r'[a-z]+', '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Create a pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n\n    # Find all the matches of the pattern in the string\n    matches = pattern.findall(str1)\n\n    # Remove the matches from the original string\n    for match in matches:\n        str1 = str1.replace(match, '', 1)\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Use regular expressions to remove lowercase substrings\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # use regex to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # use findall() to get all lowercase substrings\n    matches = pattern.findall(str1)\n    # use join() to join the substrings with spaces\n    result =''.join(matches)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n > 0:\n        first_digit = str(n)[0]\n        return first_digit\n    else:\n        return 'Number is negative'"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    # Convert the given number to a string\n    num = str(n)\n\n    # Access the first digit of the string\n    first_digit = num[0]\n\n    # Convert the first digit to an integer and return it\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # Convert the input number to a string\n    num = str(n)\n    # Find the first character of the string\n    first_char = num[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10  \n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Returns the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Get the first digit of the string\n    first_digit = num_str[0]\n    \n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers as input and returns a new list containing only the odd integers from the input list.\n    '''\n    new_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    Takes a list of integers and returns a list of the odd integers only.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns only the odd numbers.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n):\n        sum_cubes = 0\n        for i in range(1, n+1):\n            sum_cubes += i**3\n        return sum_cubes\n    \n    # Function to calculate the sum of the first n natural numbers\n    def sum_of_numbers(n):\n        sum_numbers = 0\n        for i in range(1, n+1):\n            sum_numbers += i\n        return sum_numbers\n    \n    # Calculate the sum of cubes and numbers and store them in variables\n    sum_cubes = sum_of_cubes(n)\n    sum_numbers = sum_of_numbers(n)\n    \n    # Calculate the difference and return it\n    difference = sum_cubes - sum_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # sum of the first n natural numbers\n    sum_natural_numbers = sum(range(1, n+1))\n\n    # difference between the two sums\n    difference = sum_cubes - sum_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # calculating sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        \n    # calculating sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_numbers += i\n        \n    # finding the difference between the two sums\n    difference = sum_of_cubes - sum_of_numbers\n        \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # sum of first n natural numbers\n    sum_nums = sum(range(1, n+1))\n\n    # difference between sum of cubes and sum of natural numbers\n    diff = sum_cubes - sum_nums\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Find sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = sum(i**3 for i in range(1,n+1))\n\n    # Calculate the sum of the first n natural numbers\n    sum_n = sum(range(1,n+1))\n\n    # Find the difference between the two sums\n    difference = abs(cubes - sum_n)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i*i*i for i in range(1, n+1))\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n\n    # Find the difference between the two sums\n    difference = sum_of_cubes - sum_of_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # compute the sum of cubes of the first n natural numbers\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n    # compute the sum of the first n natural numbers\n    natural_sum = sum(range(1, n+1))\n    # compute the difference between the two sums\n    diff = abs(cubes_sum - natural_sum)\n    # return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # sum of cubes of first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    # sum of first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    # difference between sum of cubes and sum of numbers\n    diff = sum_cubes - sum_numbers\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n):\n        return n*(n**2*n + 1) // 6\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_n = sum(range(1, n+1))\n    \n    # Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    diff = sum_of_cubes(n) - sum_of_n\n    \n    return diff"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = sum(A)\n    count = 0\n    \n    for i in range(N):\n        xor_difference = xor_sum - A[i]\n        if xor_difference % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function finds the number of pairs whose xor value is odd in an array A of size N.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N+2):\n            if i!= j:\n                if A[i] ^ A[j] % 2!= 0:\n                    count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor_sum = 0\n        for j in range(i+1,N):\n            xor_sum ^= A[i] ^ A[j]\n        if xor_sum % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Initialize a variable to store the count of odd xor pairs\n    count = 0\n    # Loop through all pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1,N):\n            # Calculate the xor of the current pair\n            xor = A[i] ^ A[j]\n            # If the xor is odd, increment the count\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower(), string))"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_char = char.upper()\n        elif char.isupper():\n            new_char = char.lower()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # create a new string with all the characters toggled\n    new_string = ''\n    for char in string:\n        # toggle the case of the character\n        if char.isupper():\n            new_char = char.lower()\n        else:\n            new_char = char.upper()\n        # add the new character to the new string\n        new_string += new_char\n    # return the new string\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # initialize the sum variable to 0\n    sum_diff = 0\n    # loop through the digits of the two numbers\n    for i in range(len(n1_str)):\n        # subtract the corresponding digits and add the result to the sum variable\n        diff = int(n1_str[i]) - int(n2_str[i])\n        sum_diff += diff\n    # return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n\n    per_digit_diff = sum(abs(int(n1_list[i]) - int(n2_list[i])) for i in range(len(n1_list)))\n\n    return per_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and get the length of each string\n    len1, len2 = len(str(n1)), len(str(n2))\n    # Initialize the sum of differences\n    sum_diff = 0\n    # Loop through the length of each string\n    for i in range(max(len1, len2)):\n        # Get the digit at the current position in both strings\n        d1, d2 = int(str(n1)[i]), int(str(n2)[i])\n        # Calculate the difference between the digits and add to the sum of differences\n        diff = abs(d1 - d2)\n        sum_diff += diff\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    # convert the integers to strings and then use list comprehension to iterate over each digit\n    for digit in str(n1) + str(n2):\n        # calculate the absolute difference between two digits and add it to the sum\n        diff = abs(int(digit) - int(digit.lower()))\n        sum += diff\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # Initialize the sum of the per-digit difference\n    distance_sum = 0\n    \n    # Loop through each character in the two strings\n    for i in range(len(str1)):\n        # Get the digits of the two strings\n        digit1 = int(str1[i])\n        digit2 = int(str2[i])\n        \n        # Calculate the per-digit difference\n        difference = abs(digit1 - digit2)\n        \n        # Add the per-digit difference to the total sum\n        distance_sum += difference\n        \n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits1 = list(map(int, str(n1)))\n    digits2 = list(map(int, str(n2)))\n\n    # Calculate the per-digit difference between the two lists of digits\n    diff_digits = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n\n    # Calculate the sum of the per-digit differences\n    total_diff = sum(diff_digits)\n\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Use the string format method to convert each number to a string of digits\n    num1 = str(n1)\n    num2 = str(n2)\n\n    # Calculate the per-digit difference between the two numbers\n    difference = [int(num1[i]) - int(num2[i]) for i in range(len(num1))]\n\n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(difference)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both numbers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # initialize sum of differences as 0\n    diff_sum = 0\n    \n    # loop through each digit of each number\n    for i in range(len(str1)):\n        # get the current digit of both strings\n        digit1 = int(str1[i])\n        digit2 = int(str2[i])\n        \n        # calculate the difference between the digits and add it to the sum\n        diff_sum += abs(digit1 - digit2)\n    \n    # return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both numbers to lists of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    # find the maximum length of the lists\n    max_len = max(len(n1_list), len(n2_list))\n    # create two empty lists to store the per-digit differences\n    diff_list1 = [0] * max_len\n    diff_list2 = [0] * max_len\n    # loop through the lists and find the differences\n    for i in range(max_len):\n        diff_list1[i] = abs(int(n1_list[i]) - int(n2_list[i]))\n        diff_list2[i] = abs(int(n2_list[i]) - int(n1_list[i]))\n    # find the sum of the differences\n    sum_diff = sum(diff_list1) + sum(diff_list2)\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits1 = list(str(n1))\n    digits2 = list(str(n2))\n    # Calculate the length of the longer list\n    n = max(len(digits1), len(digits2))\n    # Initialize the sum of the differences\n    total_diff = 0\n    # Iterate over the digits of both lists, starting from the rightmost digit\n    for i in range(n-1, -1, -1):\n        # Calculate the absolute difference between the digits\n        diff = abs(int(digits1[i]) - int(digits2[i]))\n        # Add the difference to the total sum\n        total_diff += diff\n    # Return the total sum of differences\n    return total_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') # initialize the maximum sum variable\n    current_sum = 0 # initialize the current sum variable\n\n    # loop through the list, adding the elements to the current sum and keeping track of the maximum sum\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Loop through the list and calculate the sum of the current sublist\n    for i in range(size):\n        curr_sum += a[i]\n\n        # Update the maximum sum if the current sublist is greater than the previous maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sublist sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    Given a list of integers and a number of elements to consider, \n    find the sum of the largest contiguous sublist.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    for i in range(size):\n        curr_sum += arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i - size + 1\n\n    return max_sum, arr[start:start+size]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(arr, size):\n    # create a list to store the maximum subarray sum ending at each index\n    dp = [0] * size\n    \n    # initialize the maximum subarray sum to the first element of the list\n    dp[0] = arr[0]\n    \n    # calculate the maximum subarray sum ending at each index\n    for i in range(1, size):\n        # if the current element is negative, set it to zero\n        if arr[i] < 0:\n            arr[i] = 0\n        \n        # if the current element is greater than the current maximum subarray sum,\n        # update the maximum subarray sum to be the current element\n        dp[i] = max(arr[i], dp[i - 1] + arr[i])\n        \n    # return the maximum subarray sum\n    return dp[size - 1]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(len(a)):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            current_sum -= a[i - size + 1]\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function finds the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size-1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        raise ValueError(\"size must be less than or equal to the length of the input list\")\n    elif size == 1:\n        return max(a)\n    else:\n        max_sum = float('-inf')\n        current_sum = 0\n        start = 0\n        for i in range(size):\n            current_sum += a[i]\n            max_sum = max(max_sum, current_sum)\n            if current_sum < 0:\n                current_sum = 0\n                start = i + 1\n        return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(set(test_tup2))\n    union_list = sorted(list(union_set))\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1 + test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples by concatenating them\n    union_tup = test_tup1 + test_tup2\n\n    # Sort the union of the two tuples and output them\n    union_tup = sorted(set(union_tup))\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two lists using set()\n    union_list = list(set(test_tup1 + test_tup2))\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set for both tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the union of the sets\n    union = set1.union(set2)\n    # Convert the union set to a list and sort it\n    union_list = sorted(list(union))\n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert both tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the union of the two sets\n    union = set1.union(set2)\n    # Convert the union set back to a tuple and sort it in ascending order\n    sorted_union = tuple(sorted(union))\n    # Output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1).union(set(test_tup2))\n    sorted_union = sorted(union)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of unique elements from both tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    # convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # print the union of the two tuples\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # convert the given tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the union of the sets\n    union = set1.union(set2)\n\n    # convert the set back to a tuple and sort it\n    sorted_union = sorted(union)\n\n    # output the sorted union\n    print(\"The union of the elements in the two tuples is:\", sorted_union)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initializing variables\n    maxLength = 1\n    currentLength = 1\n\n    # iterating over the list and updating currentLength\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            currentLength += 1\n        else:\n            maxLength = max(maxLength, currentLength)\n            currentLength = 1\n\n    # updating maxLength with the last sublist length\n    maxLength = max(maxLength, currentLength)\n\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    longest = 0\n    temp = []\n\n    for i in range(len(lst)):\n        temp.append(lst[i])\n        while len(temp) > longest:\n            temp.pop()\n        if len(temp) == longest:\n            break\n        if i == len(lst)-1:\n            if len(temp) > longest:\n                longest = len(temp)\n            temp = []\n\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as an input and returns the length of the longest sublist.\n    '''\n    # Initialize variables to keep track of the longest sublist and its length\n    longest_sublist = []\n    length = 0\n\n    # Iterate through each element in the list\n    for item in lst:\n        # If the item is not already in the longest sublist, append it and update the length of the longest sublist\n        if item not in longest_sublist:\n            longest_sublist.append(item)\n            length += 1\n        # If the item is already in the longest sublist, check if it is longer than the current longest sublist\n        else:\n            if len(longest_sublist) < length:\n                longest_sublist = [item]\n                length = 1\n                # If the current item is longer than the longest sublist, update the longest sublist and its length\n                if item not in longest_sublist:\n                    longest_sublist.append(item)\n                    length += 1\n\n    # Return the length of the longest sublist\n    return length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if i == 0 or lst[i-1]!= lst[i]:\n            max_length = max(max_length, current_length)\n            current_length = 0\n        current_length += 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Find the length of the longest sublist in the list\n    max_length = 0\n    for i in range(len(lst)):\n        # Initialize the current sublist length to 1\n        sublist_length = 1\n        # Iterate over the subsequent elements in the sublist\n        for j in range(i+1, len(lst)):\n            # Check if the current element is part of the sublist\n            if lst[i] in lst[j:]:\n                # If it is, add 1 to the sublist length\n                sublist_length += 1\n            else:\n                # If it's not, break out of the inner loop and update the max length if the current sublist length is greater\n                if sublist_length > max_length:\n                    max_length = sublist_length\n                # Reset the sublist length to 1 and start over with the next sublist\n                sublist_length = 1\n    # Return the max length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n\n    # Loop through the list of sublists\n    for sublist in lst:\n        # Calculate the length of the sublist\n        sublist_length = len(sublist)\n\n        # Check if the current sublist is longer than the max length\n        if sublist_length > max_length:\n            # Update the max length\n            max_length = sublist_length\n\n        # Add the length of the current sublist to the current length\n        current_length += sublist_length\n\n    # Return the max length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        current_length = 1  \n        for j in range(i+1, len(lst)):  \n            current_length += 1  \n            if current_length > max_length:  \n                max_length = current_length  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    tempLength = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            tempLength = j - i + 1\n            if tempLength > maxLength:\n                maxLength = tempLength\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for item in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n        elif current_length == max_length:\n            if item == lst[-1]:\n                max_length += 1\n            else:\n                max_length = 0\n\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_values(text):\n    pattern = r'(?<=\")([^\"]*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")([^\\s\"]+)(\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n\n    # Define the pattern to match values\n    pattern = r'\"([^\\\"]*)\"'\n\n    # Use the re module to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Loop over the matches and extract the values\n    values = []\n    for match in matches:\n        # Remove any leading/trailing whitespace from the value\n        value = match.strip()\n        # Add the value to the list of values\n        values.append(value)\n\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\\").*?(?=\\\"|$)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"(.*?)\"', text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"' # regular expression pattern for extracting values between quotation marks\n    matches = re.findall(pattern, text) # matches all occurrences of the pattern in the text\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = re.compile(r'(?<!\\\\)\"[^\"]*\"')  # find all values between quotation marks\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")(.*?)(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs\n    where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n\n    # Iterate through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1,n):\n            # Check if both elements are not equal\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    pairs_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Convert the string to a list of characters\n    chars = list(word)\n    # Split the list into two lists\n    char_list = [chars[:len(chars)//2], chars[len(chars)//2:]]\n    # Combine the two lists into a single list\n    new_word = ''.join(char_list[0]) + char_list[1][0]\n    return new_word"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n\n    :param word: The string to split.\n    :return: A list of characters in the string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Iterate through each digit of n\n    while n > 0:\n        # Get the last digit of n\n        digit = n % 10\n        \n        # Add the last digit to the sum\n        sum += digit\n        \n        # Remove the last digit from n\n        n = n // 10\n    \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to get its digits\n    digits = str(n)\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each digit in the string\n    for digit in digits:\n        # Add the digit to the sum\n        sum += int(digit)\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # check if the input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    # convert the input integer to a string and then convert each digit to an integer\n    digits = [int(digit) for digit in str(n)]\n\n    # add up all the digits and return the sum\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input number to a string, then convert it back to an integer\n    # to extract its digits\n    digits = int(str(n))\n    # Initialize the sum to zero\n    total = 0\n    # Loop over each digit in the input number\n    for digit in digits:\n        # Convert each digit to an integer and add it to the total\n        total += int(digit)\n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    s = str(n)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each character in the string\n    for c in s:\n        # Convert the character to an integer\n        digit = int(c)\n        # Add the integer to the sum\n        sum += digit\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and checks if it is sorted or not.\n    Returns True if it is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    \n    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of list1 and sort it using the sorted() function\n    for sublist in list1:\n        sublist.sort()\n\n    # Return the sorted list of lists\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    unique_nums = set()\n\n    for num in nums:\n        unique_nums.add(num)\n\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list of lists): A list of lists of integers.\n\n    Returns:\n        list: A list of unique integers.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(set(num_list))\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list with all the unique elements from all the input lists.\n    \"\"\"\n    unique_nums = []\n    for sublist in nums:\n        for num in sublist:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists of numbers and returns a new list of lists where\n    all duplicate numbers have been removed.\n    \"\"\"\n\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Loop through each list in the original list of lists\n    for sublist in nums:\n        # Loop through each number in the current list\n        for num in sublist:\n            # Add the number to the set of unique numbers if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Convert the set back to a list and return the result\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    # Create a set from the first list\n    first_list = set(nums[0])\n    \n    # Iterate over the remaining lists\n    for i in range(1, len(nums)):\n        # Remove duplicates from the current list using the first list\n        current_list = set(nums[i])\n        current_list.difference_update(first_list)\n        \n        # Update the first list with the current list\n        first_list = current_list\n    \n    # Convert the set back to a list and return it\n    return list(first_list)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input, and returns a list of lists that contains only\n    the unique numbers from the input list of lists.\n    '''\n    unique_nums = []\n    for sublist in nums:\n        for num in sublist:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data) # convert the list to a set of unique numbers\n    product = 1 # initialize the product to 1\n    for num in unique_nums: # loop through each unique number\n        product *= num # multiply the current product by the unique number\n    return product # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # convert the list to a set to get only unique elements\n    unique_set = set(list_data)\n    # use the product function from the math module to calculate the product of the unique elements\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    unique_nums = set(list_data)  # Convert the list to a set to get unique numbers\n    product = 1  # Initialize the product to 1\n\n    for num in unique_nums:  # Calculate the product of the unique numbers\n        product *= num\n\n    return product  # Return the product of the unique numbers\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Find the unique numbers in the list\n    unique_nums = list(set(list_data))\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(lst):\n    # Convert the list to a set to get unique elements\n    unique_set = set(lst)\n    # Calculate the product of the unique elements\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Filter out the duplicates from the given list\n    unique_numbers = list(set(list_data))\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    # First, we need to filter out the unique numbers from the list\n    unique_list = list(set(list_data))\n    # Then, we need to calculate the product of these numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    unique_numbers_list = sorted(list(unique_numbers))\n    product = 1\n    \n    for num in unique_numbers_list:\n        product *= num\n        \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*r*r + 2*3.14*r*h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*r*h + 2*3.14159*h**2\n\nr = float(input(\"Enter the radius of the cylinder: \"))\nh = float(input(\"Enter the height of the cylinder: \"))\n\nsurface_area = surfacearea_cylinder(r,h)\nprint(\"The surface area of the cylinder is:\", surface_area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the area of the base\n    base_area = 2 * pi * r * r\n    # calculate the surface area of the cylinder\n    surface_area = pi * r * r + 2 * pi * r * h + 2 * pi * h * h + base_area\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = math.pi * r**2 + 2*math.pi * h * r\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of a cylinder using the formula: \n    # A = pi*(r^2 + h^2)\n    # where pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # pi is a constant value that represents the value of pi\n    pi = 3.14159265359\n    \n    # calculate the surface area of the cylinder\n    area = (2*pi*r**2) + (2*pi*r*h) + (2*pi*h**2)\n    \n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    This function takes two arguments: radius and height of the cylinder.\n    It returns the surface area of the cylinder.\n    '''\n    area = math.pi * r**2 * h\n    return area\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if all elements of list A are also present in list B\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if B is a sublist of A, else False.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if B is a sublist of A\n    for i in range(len(A)):\n        if B in A[i:]:\n            return True\n\n    # If B is not a sublist of A, return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    # Check if the length of A is greater than or equal to the length of B\n    if len(A) >= len(B):\n        # Loop through A and check if B is present in A\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        # If we reach here, it means B is not present in A\n        return False\n    else:\n        # If A is shorter than B, then it cannot be a subarray of B\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B): \n    \"\"\"\n    This function takes two lists A and B as input and checks if B is a sublist of A or not.\n\n    Parameters:\n        A (list): A list to check if it is a sublist of B\n        B (list): A list to check if it is a sublist of A\n\n    Returns:\n        bool: True if B is a sublist of A, else False.\n    \"\"\"\n    A_sorted = sorted(A)\n    B_sorted = sorted(B)\n\n    for i in range(len(A_sorted)):\n        if A_sorted[i]!= B_sorted[0]:\n            return False\n        for j in range(1, len(B_sorted)):\n            if A_sorted[i+j]!= B_sorted[j]:\n                return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not B:\n        return False\n    for i in range(len(A)):\n        if B[0] in A:\n            if i == 0 or B[0]!= A[i-1]:\n                return True\n            else:\n                continue\n        else:\n            return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n\n    for i in range(len(B)): \n        if B[i] not in A: \n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function checks whether a list is a sublist of another list.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)): \n        if A[i] in B: \n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    # calculate factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # get the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to store the factorial\n    factorial = 1\n    # iterate over all the digits of the number n\n    for i in range(len(str(n))):\n        # get the digit at index i\n        digit = int(str(n)[i])\n        # multiply the factorial by the digit raised to the power of the number of digits in the factorial\n        factorial *= digit ** (len(str(n)) - 1 - i)\n    # return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a positive integer as input and returns the last digit of its factorial.\n    '''\n    \n    # initialize the result variable to store the last digit of the factorial\n    result = 0\n    \n    # iterate through all numbers from 1 to n and calculate their factorial\n    for i in range(1, n+1):\n        result += int(str(factorial(i))[-1])\n    \n    # return the result\n    return result\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    # Compute the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # Extract the last digit of the factorial\n    last_digit = fact % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the last digit as 0\n    last_digit = 0\n    # Calculate the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # Calculate the last digit of the factorial\n    last_digit = factorial % 10\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    # convert the input number to a string\n    n = str(n)\n    # extract the last digit of the string\n    last_digit = int(n[-1])\n    # use the last digit as an index to find the corresponding factorial\n    factorial = 1\n    for i in range(10):\n        factorial *= i + 1\n    # multiply the factorial with the last digit to get the result\n    result = last_digit * factorial\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Finding factorial of n \n    factorial = 1\n    for i in range(1, n+1): \n        factorial *= i \n    # Finding last digit of factorial \n    last_digit = int(str(factorial)[-1]) \n    # Returning last digit \n    return last_digit "
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Get the last digit of the string\n    last_digit = int(num_str[-1])\n    # Find the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit + 1):\n        factorial *= i\n    # Return the last digit of the factorial\n    return factorial"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    if i < len(list1):\n        result.extend(list1[i:])\n    if j < len(list2):\n        result.extend(list2[j:])\n    if k < len(list3):\n        result.extend(list3[k:])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Create an empty list to store the final result\n    result = []\n    # Initialize the pointers for each list\n    i, j, k = 0, 0, 0\n    # Loop until all three lists have been used\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        # Add the next element from each list to the result list\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        # Increment the pointers for each list\n        i += 1\n        j += 1\n        k += 1\n    # If there are still elements in the first list, add them to the result list\n    if i < len(list1):\n        result.extend(list1[i:])\n    # If there are still elements in the second list, add them to the result list\n    if j < len(list2):\n        result.extend(list2[j:])\n    # If there are still elements in the third list, add them to the result list\n    if k < len(list3):\n        result.extend(list3[k:])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    # create a new list to store the interleaved list\n    interleaved_list = []\n    # loop through the lists and add their elements to the interleaved list in the correct order\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create an empty list to store the final result\n    result = []\n    # iterate over the lists\n    for i in range(len(list1)):\n        # add the first list element to the result\n        result.append(list1[i])\n        # add the second list element to the result\n        result.append(list2[i])\n        # add the third list element to the result\n        result.append(list3[i])\n    # return the final result\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Ensure that all lists have the same length\n    length = len(list1)\n    if len(list2)!= length or len(list3)!= length:\n        raise ValueError(\"All lists must have the same length.\")\n    \n    # Initialize an empty list to hold the interleaved list\n    result = []\n    \n    # Use two nested loops to iterate over the lists and append elements to the result list\n    for i in range(length):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the final result\n    result = []\n    \n    # loop through each list in turn\n    for i in range(len(list1)):\n        # add the first element of each list to the result list\n        result.append(list1[i])\n        # add the second element of each list to the result list\n        result.append(list2[i])\n        # add the third element of each list to the result list\n        result.append(list3[i])\n    \n    # return the final result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    :param list1: The first list to interleave.\n    :type list1: list\n    :param list2: The second list to interleave.\n    :type list2: list\n    :param list3: The third list to interleave.\n    :type list3: list\n    :return: A flat list of interleaved elements from the input lists.\n    :rtype: list\n    \"\"\"\n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n    # Loop through each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Concatenate the 3 lists into a single list using list concatenation\n    interleaved_list = list1 + list2 + list3\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    dissimilar_elements = []\n\n    # Loop through each element in the tuple\n    for i in range(len(test_tup1)):\n        # If the element is not equal to the corresponding element in the other tuple, add it to the dissimilar_elements list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)  # find common elements in both tuples\n    return test_tup1 - common_elements  # find dissimilar elements in the first tuple that are not in the common elements in the second tuple"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of elements in test_tup1\n    set1 = set(test_tup1)\n\n    # Create a set of elements in test_tup2\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Find the union of the two sets\n    union = set1.union(set2)\n\n    # Find the difference between the union and the intersection\n    difference = union.difference(intersection)\n\n    # Print the result\n    print(\"Dissimilar elements in the given two tuples are:\", difference)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # Check if the element is present in the second tuple\n        if element not in test_tup2:\n            # If the element is not present in the second tuple, add it to the dissimilar list\n            dissimilar_list.append(element)\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of their dissimilar elements.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_elems.append(elem)\n    return dissimilar_elems"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Use set() to remove duplicates\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    # Find the difference between the two sets\n    dissimilar_set = test_set1.symmetric_difference(test_set2)\n    # Convert the set back to a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty set to store the dissimilar elements\n    dissimilar = set()\n\n    # Loop through the elements in the first tuple\n    for element1 in test_tup1:\n        # Loop through the elements in the second tuple\n        for element2 in test_tup2:\n            # If the two elements are not equal, add them to the dissimilar set\n            if element1!= element2:\n                dissimilar.add(element1)\n\n    # Return the dissimilar elements in a list\n    return list(dissimilar)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            result.append(elem)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested mixed tuple as input and a function as argument. \n    It iterates over each element of the tuple and checks if the element is even.\n    If it is even, the element is passed to the `even_fnc` function.\n    If it is odd, the element is not passed to the `even_fnc` function.\n    \n    Returns a new tuple with even elements from the original tuple.\n    '''\n    \n    # Create an empty list to store even elements\n    even_list = []\n    \n    # Iterate over each element of the tuple\n    for element in test_tuple:\n        \n        # Check if the element is even\n        if even_fnc(element):\n            \n            # If the element is even, add it to the even_list\n            even_list.append(element)\n    \n    # Return a new tuple with even elements from the original tuple\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(x) for x in test_tuple if even_fnc(x)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Create an empty list to store the even elements\n    even_list = []\n\n    # Loop through the nested tuple\n    for item in test_tuple:\n        # Check if the element is even\n        if even_fnc(item):\n            # If the element is even, add it to the even_list\n            even_list.append(item)\n\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)): \n        if not even_fnc(test_tuple[i]): \n            test_tuple = test_tuple[:i] + test_tuple[i+1:]\n            i -= 1\n    return test_tuple\n\ndef is_even(num): \n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create a new list to store the even elements\n    even_list = []\n    for item in test_tuple:\n        # Check if the item is a tuple, if it is, recursively call the function\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        # If the item is not a tuple, check if it satisfies the even_fnc condition\n        elif even_fnc(item):\n            even_list.append(item)\n    # Return the even list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def inner_even_fnc(x):\n        return even_fnc(x)\n\n    return [inner_even_fnc(x) for x in test_tuple if inner_even_fnc(x)]"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = (2 * b * s) + (2 * b * s) + (4 * b * b * s)\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of each face of the pyramid using Heron's formula\n    a = b * s / 2  # Base face area\n    b = b * s / 2  # Height face area\n\n    # Calculate the surface area of the pyramid by adding up the areas of each face\n    surface_area = a + b + a * b + b * a  # Overall surface area\n\n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2 * (b + s) * s / 2 + 2 * (s + b) * b / 2 + 4 * (b ** 2 + s ** 2)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area using Heron's formula\n    return (b * s * 2) + ((s * b) * 2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    This function calculates the surface area of a square pyramid with given base edge and height.\n    '''\n    surface_area = (b * s) / 2 #calculating the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b+s)*(s+b+s) + (b+s)**2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    surface = (b*s)/2\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the side of the pyramid\n    side = b * s\n\n    # Calculating the height of the pyramid\n    height = s * s\n\n    # Calculating the total surface area of the pyramid\n    total_surface_area = 6 * b * height\n\n    # Returning the surface area of the pyramid\n    return total_surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n\n    # Calculate the base area\n    base_area = b * s / 2\n\n    # Calculate the total surface area\n    total_area = (base_area * 3) + (b * s * 2) + (b * s * 2)\n\n    return total_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty.\n    \"\"\"\n    if dict1 == {}:\n        print(\"Dictionary is empty.\")\n    else:\n        print(\"Dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty.\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty.\n\n    Parameters:\n    dict1 (dict): A dictionary to be checked.\n\n    Returns:\n    bool: True if the dictionary is empty, False otherwise.\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-1)*num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    catalan = [1]\n    for i in range(1, n+1):\n        catalan.append(sum(catalan[i-1:]))\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number using the formula:\n\n    C(n) = binomial(2n, n) / (1 + binomial(2n, n-1))\n\n    where binomial(x, y) = x! / (y! * (x-y)!)\n    '''\n    def binomial(x, y):\n        return x * (x-1) // 2 * (2**y - 1) // (2**x - 1)\n\n    # Calculate the binomial coefficient\n    factorial = 1\n    for i in range(1, num+1):\n        factorial *= i\n\n    # Calculate the catalan number\n    n_factorial = binomial(2*num, num)\n    n_factorial_minus_1 = binomial(2*num, num-1)\n    catalan_num = n_factorial // n_factorial_minus_1\n\n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the Catalan number list\n    cat_list = [1]\n\n    # Calculate the Catalan numbers\n    for i in range(1, num+1):\n        cat_list.append(4*cat_list[-1]-cat_list[-2])\n\n    # Return the nth Catalan number\n    return cat_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Catalan number cannot be negative.\")\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        cat_num = 0\n        for i in range(num):\n            cat_num += (4*i*(2*num-2*i-1))//(i+1)\n        return cat_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number using the formula:\n    \n    C(n) = binomial(2n, n) * 2^n\n    \n    where binomial(n, k) = (n choose k) / (k! * (n-k)!)\n    \n    For example:\n    C(5) = binomial(2*5, 5) * 2^5\n    C(5) = 39 * 32 = 1435\n    '''\n    \n    # Helper function to calculate binomial coefficients\n    def binomial(n, k):\n        return (n * k) // k\n    \n    # Calculate the Catalan number using the formula above\n    return binomial(2*n, n) * (2**n)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (4*n-2)*(catalan_number(n-1))/(n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, num+1):\n            factorial *= i\n        catalan = (factorial * (factorial-1)) // (num*num)\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    >>> catalan_number(5)\n    105\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    Returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2) + catalan_number(n-1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b(a|an|the|this|that|these|those)\\b(ly)$'\n\n    # Use re.search() function to search for the pattern in the given string\n    match = re.search(pattern, text)\n\n    # If a match is found, return a list of the position of the match and the matched pattern\n    if match:\n        return [match.start(), match.group()]\n    # If no match is found, return an empty list\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Create a pattern to match words ending with \"ly\"\n    pattern = re.compile(r'\\b[a-zA-Z]+ly\\b', re.IGNORECASE)\n    \n    # Find all matches of the pattern in the text\n    matches = pattern.finditer(text)\n    \n    # Initialize an empty list to store the adverb positions\n    positions = []\n    \n    # Loop through each match and store its position in the list\n    for match in matches:\n        positions.append(match.start())\n        \n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Using regular expression to match adverbs ending with \"ly\"\n    pattern = r'\\b(ly)\\b'\n\n    # Using re.search() method to search for the pattern in the given text\n    match = re.search(pattern, text)\n\n    # If there is a match, extract the adverb and its position from the match object\n    if match:\n        adverb = match.group(1)\n        position = match.start()\n        return adverb, position\n    \n    # If there is no match, return None for both the adverb and its position\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[ly]\\b\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for finding adverbs ending with ly\n    pattern = re.compile(r'\\bly\\b', re.IGNORECASE)\n    # Find all non-overlapping matches of the pattern in the text\n    matches = pattern.findall(text)\n    # If there are matches, return a list of tuples, where each tuple contains the adverb and its position in the text\n    if matches:\n        return [(m, text.index(m)) for m in matches]\n    # If there are no matches, return None\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\bly\\b'\n    \n    # Find all the positions where adverbs are present in the string\n    matches = re.finditer(pattern, text)\n    \n    # Create a list of tuples containing the adverb and its positions\n    adverbs = []\n    for match in matches:\n        adverb = match.group()\n        start_position = match.start()\n        end_position = match.end()\n        adverbs.append((adverb, start_position, end_position))\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b([a-z]+)ly\\b'\n    \n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    \n    # Loop through all the matches and return the first adverb ending with 'ly' and its positions\n    for match in matches:\n        return match[0], match.start(0), match.end(0)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define a regular expression to match adverbs ending with ly\n    pattern = r'(?<=[^aeiouAEIOU])ly(?=[^aeiouAEIOU])'\n    # find all non-overlapping matches of the pattern in the given text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    # initialize an empty list to store the adverb and its positions in the given text\n    adverbs = []\n    # loop over the matches and add them to the adverbs list along with their positions\n    for match in matches:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end()\n        # add the adverb and its positions to the adverbs list\n        adverbs.append((adverb, start_pos, end_pos))\n    # return the adverb list\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b([a-zA-Z]+)ly\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    # Loop through the matches and add the adverbs and their positions to the adverbs list\n    for match in matches:\n        start_pos = text.find(match)\n        end_pos = start_pos + len(match)\n        adverbs.append((match, start_pos, end_pos))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern for matching adverbs ending with \"ly\"\n    pattern = re.compile(r\"\\b\\w+(ly)\\b\")\n    # Find all the matches of the pattern in the given string\n    matches = re.findall(pattern, text)\n    # Initialize a list to store the adverb and its positions\n    adverbs = []\n    # Loop through all the matches and add them to the list\n    for match in matches:\n        adverbs.append((match[0], match.start()))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a max heap of size n to store the top n expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n        # if the heap size exceeds n, remove the smallest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # return the top n items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the dataset in descending order of price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, sorted_items.pop())\n    # Return the n most expensive items\n    return [min_heap[0][0] for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function finds the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items in the dataset\n    for item in items:\n        # If the size of the min heap is less than n, add the item to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # Otherwise, if the item is more expensive than the minimum item in the heap,\n        # remove the minimum item from the heap and add the new item to the heap\n        elif item > heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items in the dataset\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and a number n as inputs.\n    It returns a list of the n most expensive items from the given dataset.\n    \"\"\"\n    # Create a min-heap to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        # Add the ith item to the min-heap if it's cheaper than the current min\n        if items[i] < items[0]:\n            heapq.heappush(min_heap, items[i])\n        # If the ith item is not cheaper than the current min, add it to the heap\n        else:\n            # If the size of the min-heap is less than n, add the ith item to the heap\n            if len(min_heap) < n:\n                heapq.heappush(min_heap, items[i])\n            # If the size of the min-heap is greater than or equal to n, \n            # compare the ith item with the current min and add the larger one to the heap\n            else:\n                if items[i] > min_heap[0]:\n                    heapq.heappush(min_heap, items[i])\n                else:\n                    continue\n    \n    # Extract the n most expensive items from the min-heap and return them as a list\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        # If the heap is not full, add the item to the heap\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        # If the heap is full and the item is cheaper than the smallest item in the heap, remove the smallest item from the heap and add the new item to the heap\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # Return the n most expensive items\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items.\n    \"\"\"\n    # Create a min heap with initial capacity n\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # If the heap size exceeds n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the top n items in the min heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the items in descending order of price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    \n    # Extract the top n items from the heap\n    top_n_items = heapq.nlargest(n, sorted_items, key=lambda x: x[1])\n    \n    # Return the top n items\n    return top_n_items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    # Iterate through the items and add them to the min heap\n    for item in items:\n        heapq.heappush(min_heap, -item)\n        # If the size of the heap exceeds n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items in the min heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Returns a list of the n most expensive items in a given dataset.\n\n    Args:\n    items: a list of (item, cost) tuples\n    n: the number of items to return\n\n    Returns:\n    A list of the n most expensive items\n    \"\"\"\n    heap = []\n    for item, cost in items:\n        heapq.heappush(heap, (-cost, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for cost, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return None\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"Error: list length should be greater than or equal to n\")\n        return None\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        result = second_part + first_part\n        return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"List cannot be split at the specified position\")\n        return\n    \n    # Split the list at the nth element\n    arr1, arr2 = l[:n], l[n:]\n    \n    # Add the first part of the list to the end of the second part\n    arr2 += arr1\n    \n    # Return the updated list\n    return arr2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n == 1:\n        return [l[0]] + l[1:]\n    else:\n        mid = n // 2\n        left = split_Arr(l[:mid], n)\n        right = split_Arr(l[mid:], n)\n        return left + [l[n-1]] + right"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l[0], l[1:]\n    else:\n        return l[0], l[n-1:] + split_Arr(l[n:], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        print(\"The given index is greater than or equal to the length of the list. Returning the original list.\")\n        return l\n    \n    arr = l[:n]\n    l = l[n:]\n    arr.append(l)\n    return arr"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"List must have at least {} elements\".format(n)\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    return (l[:n], l[n:])"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    \n    # add part1 to the end of part2 and return the final list\n    return part1 + part2"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    else:\n        min_num = min(nums)\n        max_num = max(nums)\n        diff = max_num - min_num\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 'The list should have at least two elements.'\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    # sort the list in ascending order\n    nums.sort()\n    \n    # find the difference between the largest and smallest values\n    diff = nums[-1] - nums[0]\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty.\"\n    elif len(nums) == 1:\n        return \"The difference between the largest and smallest value is zero.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return \"The difference between the largest and smallest value is: \", max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return 0\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        sqrt_i = int(i ** 0.5)\n        if i == sqrt_i ** 2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store the perfect squares between a and b\n    perfect_squares_list = []\n\n    # Loop through a and b, adding perfect squares to the list\n    for i in range(int(a), int(b) + 1):\n        if i**2 == i:\n            perfect_squares_list.append(i**2)\n\n    # Return the list of perfect squares between a and b\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a**0.5) + 1):\n        for j in range(i, int(b**0.5) + 1):\n            square = i**2 + j**2\n            if square == i**2 and i == 0:\n                continue\n            if square == j**2 and j == 0:\n                continue\n            if square >= a and square <= b:\n                squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    if a > b:\n        a, b = b, a  # swap a and b if a is greater than b\n\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:  # check if square is equal to its own square\n            return i\n    return None  # no perfect squares found"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for num in range(a, b+1):\n        square = num ** 2\n        if square == int(square):\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i*i == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables\n    count = 0\n    num = a\n\n    # Loop until a perfect square is found\n    while num <= b:\n        count += 1\n        num = num**2\n\n    # Return the count of perfect squares\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = a\n    while i <= b:\n        j = i * i\n        while j <= b:\n            squares.append(j)\n            j += i\n        i += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n\n    # create a list to store the perfect squares\n    squares = []\n\n    # iterate from a to b\n    for num in range(a, b+1):\n        # check if num is a perfect square\n        square = num ** 2\n        if square == num:\n            squares.append(square)\n\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): The radius of the polar coordinate.\n    y (float): The angle of the polar coordinate in radians.\n\n    Returns:\n    tuple: The rectangular coordinates (x, y) of the given polar coordinate.\n    \"\"\"\n    # Convert angle to degrees\n    angle = cmath.phase(y) * 180 / cmath.pi\n\n    # Calculate rectangular coordinates\n    x = x * cmath.cos(y)\n    y = x * cmath.sin(y)\n\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    This function takes the polar coordinates (x, y) and returns the rectangular coordinates as a tuple (r, theta).\n    '''\n\n    # Convert the angle from radians to degrees\n    theta = cmath.phase(x + y * 1j) * 180 / cmath.pi\n\n    # Calculate the length of the vector\n    r = cmath.sqrt(x**2 + y**2)\n\n    # Convert the length to float\n    r = float(r)\n\n    return r, theta"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x+0j*y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert radians to degrees\n    theta = cmath.phase(theta) * 180 / cmath.pi\n\n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    # Return the result as a tuple\n    return (x.real, x.imag, y.real, y.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Args:\n    x (float): The radial component of the complex number.\n    y (float): The angular component of the complex number.\n    \n    Returns:\n    (float, float): The rectangular coordinates of the input complex number.\n    \"\"\"\n    return (x*cmath.cos(y), x*cmath.sin(y))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    phi = cmath.phase(x+1j*y)\n    x_rect = r*cmath.cos(phi)\n    y_rect = r*cmath.sin(phi)\n    return x_rect, y_rect"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has only one element\n    if length == 1:\n        return newList\n    \n    # Get the first and last elements\n    first = newList[0]\n    last = newList[length-1]\n    \n    # Remove the last element and add it to the beginning\n    newList = newList[0:length-1] + [first]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0: \n        return newList \n    else: \n        first = newList[0] \n        last = newList[-1] \n        newList[0] = last \n        newList[-1] = first \n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the length of the list is less than or equal to 1\n    if len(newList) <= 1:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # check if the input list is a list\n    if type(newList)!= list:\n        print(\"Input must be a list.\")\n        return\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # print the updated list\n    print(\"Updated list:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # If the list has less than 2 elements, return the list unchanged.\n    if len(newList) < 2:\n        return newList\n\n    # Interchange the first and last elements of the list.\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List is too short to swap.\")\n        return newList\n\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the first term of the sum\n    sum = 1\n    \n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(1,k+1):\n        sum *= n - i + 1\n        \n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(1,n+1):\n        sum += binomial_Coeff(n,i)\n        \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Find the number of combinations\n    C = math.factorial(n) // math.factorial(k) // math.factorial(n-k)\n\n    # Find the sum of the product of consecutive binomial co-efficients\n    sum = C*C*(2*C-1)/2\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through all possible combinations of values for n and k\n    for i in range(k, n + 1):\n        # Calculate the binomial coefficient of n and i\n        coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n - i))\n\n        # Add the product of the binomial coefficient and the k-th term of the sequence to the sum\n        sum += coeff * (k - 1)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum = 0\n    for i in range(k, n + 1):\n        for j in range(1, i + 1):\n            sum += (n - i + j) * (k - j + 1) // j\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): The number of terms in the binomial coefficient.\n    k (int): The number of terms to consider in each consecutive binomial coefficient.\n\n    Returns:\n    float: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        raise ValueError(\"The number of terms in each consecutive binomial coefficient cannot be greater than the number of terms in the binomial coefficient.\")\n\n    if n == 0:\n        return 1\n\n    if k == 0:\n        return 1\n\n    if k == 1:\n        return n\n\n    sum_product = 0\n    i = 0\n    while i <= n - k:\n        sum_product += (n - i) * binomial_Coeff(n - i, k - 1)\n        i += 1\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize variables\n    sum_product = 0\n\n    # calculate the sum of the first k binomial coefficients\n    for i in range(1,k+1):\n        sum_product += (n-i+1)*i/float(i)\n\n    # calculate the sum of the remaining binomial coefficients\n    for i in range(k,n+1):\n        sum_product -= i*(i-1)/float(i-k)\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the table with zeros\n    table = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Calculate the binomial co-efficients up to index n\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if j == 1:\n                table[i][j] = i\n            elif j == k:\n                table[i][j] = 1\n            else:\n                table[i][j] = table[i-1][j-1] + table[i-1][j]\n            \n    # Find the sum of the product of consecutive binomial co-efficients\n    result = 0\n    for i in range(1,n+1):\n        result += table[i][k]\n        \n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_product = 0\n    \n    for i in range(k+1):\n        product = 1\n        for j in range(1,i+1):\n            product *= (n-j+1)\n        sum_product += product\n    \n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a Python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < k:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define regular expression pattern for matching leading zeroes\n    pattern = r'^0+'\n    # Use re.match() method to match pattern in the given ip address\n    match = re.match(pattern, ip)\n    # If pattern matches, return the matched string\n    if match:\n        return match.group()\n    # Otherwise, return the original ip address\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regex pattern for checking valid IPv4 address\n    ipv4_pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n\n    # Check if the given input is a valid IPv4 address\n    if re.match(ipv4_pattern, ip):\n        # Remove leading zeroes from each octet of the IP address\n        ip = re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n        ip = re.sub(r'\\.\\d+\\.0\\.0', '', ip)\n        ip = re.sub(r'\\.\\d+\\.\\d+\\.0', '', ip)\n        ip = re.sub(r'\\.\\d+\\.\\d+\\.\\d+0', '', ip)\n        ip = re.sub(r'\\.\\d+\\.\\d+\\.\\d+', '', ip)\n\n        # If all the octets of the IP address are zero, then the function will return an empty string\n        if ip == '':\n            return ip\n        else:\n            return ip\n    else:\n        return \"Invalid IP address format\""
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    match = re.match(pattern, ip)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from the ip address\n    ip = re.sub('^0+(?=\\d)', '', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b0\\b|\\B)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define regular expression pattern to match IP address with zeroes at the beginning\n    pattern = r'^0+(\\d{1,3})\\.0+(\\d{1,3})\\.0+(\\d{1,3})\\.0+(\\d{1,3})$'\n    \n    # Check if the input matches the pattern\n    if re.match(pattern, ip):\n        # Remove leading zeroes from the IP address\n        ip = ip.replace('0', '')\n    \n    # Return the modified IP address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r\"^([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$\"\n    if re.match(pattern, ip):\n        return re.sub(r\"^0+(?=\\d)\", \"\", ip)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*(\\d+)\\s*$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove any leading zeroes from the octets\n    ip = re.sub(r'^\\d', '', ip)\n    # Remove any leading zeroes from the whole string\n    ip = re.sub(r'^0+', '', ip)\n    # Return the modified ip address\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    '''\n    Function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables for even and odd numbers\n    even = None\n    odd = None\n    # Loop through the list\n    for num in lst:\n        # If the number is even and not yet initialized\n        if num % 2 == 0 and even is None:\n            even = num\n        # If the number is odd and not yet initialized\n        elif num % 2 == 1 and odd is None:\n            odd = num\n        # If the number is neither even nor odd, add it to the list\n        elif even is not None and odd is not None:\n            break\n    # If both even and odd numbers have been found, calculate the difference\n    if even is not None and odd is not None:\n        diff = abs(even - odd)\n        return diff\n    # If only one even number or only one odd number has been found, return None\n    elif even is not None:\n        return even\n    elif odd is not None:\n        return odd\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                first_even = abs(first_even - num)\n        else:\n            if first_odd is None:\n                first_odd = num\n            else:\n                first_odd = abs(first_odd - num)\n    if first_even is None or first_odd is None:\n        return None\n    else:\n        return first_even + first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    if len(list1) < 2:\n        return \"List must contain at least 2 numbers\"\n\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            elif even_num!= num:\n                return \"The first even and first odd numbers are different\"\n        else:\n            if odd_num is None:\n                odd_num = num\n            elif odd_num!= num:\n                return \"The first even and first odd numbers are different\"\n\n    if even_num is None or odd_num is None:\n        return \"The list does not contain any even or odd numbers\"\n    else:\n        return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            return list1[i+1] - list1[0]\n    return \"There is no even number in the list.\"\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list\n    \"\"\"\n    even = lst[0]\n    odd = lst[1]\n    if even % 2 == 0:\n        diff = even - odd\n    else:\n        diff = odd - even\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # First, check if the list has at least two elements.\n    if len(list1) < 2:\n        return \"The list should have at least two elements.\"\n    \n    # Initialize variables for even and odd indices.\n    even_index = -1\n    odd_index = -1\n    \n    # Loop through the list.\n    for i in range(len(list1)):\n        # If the current element is even, update the even index.\n        if list1[i] % 2 == 0:\n            even_index = i\n        \n        # If the current element is odd, update the odd index.\n        if list1[i] % 2 == 1:\n            odd_index = i\n    \n    # Check if both even and odd indices are valid.\n    if even_index == -1 or odd_index == -1:\n        return \"No even or odd indices found in the list.\"\n    \n    # Calculate the difference of the even and odd indices.\n    diff = abs(even_index - odd_index)\n    \n    # Return the difference.\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"The list should contain at least two elements.\"\n    elif list1[0] % 2 == 0 and list1[1] % 2 == 0:\n        return \"The first even and first odd numbers are equal.\"\n    else:\n        return abs(list1[0] - list1[1])"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0][0]\n    odd = [num for num in lst if num % 2!= 0][0]\n    return abs(even - odd)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    # initialize variables\n    n = len(str1)\n    dp = [[0]*(n+1) for _ in range(2)]\n    # initialize first string with all 0s\n    dp[0][0] = 0\n    # fill in the rest of the DP table\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i%2][j] = dp[(i-1)%2][j-1]\n            else:\n                dp[i%2][j] = min(dp[(i-1)%2][j-1], dp[i%2][j-1]) + 1\n    # print the final result\n    return dp[n%2][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    # Find length of both binary numbers\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Check if the length of both binary numbers are same\n    if n1!= n2:\n        return \"Invalid input: Both binary numbers must have same length.\"\n\n    # Initialize two variables to store count of 0's and 1's respectively in binary numbers\n    count0 = 0\n    count1 = 0\n\n    # Traverse both binary numbers and count 0's and 1's respectively\n    for i in range(n1):\n        if str1[i] == '0':\n            count0 += 1\n        elif str1[i] == '1':\n            count1 += 1\n\n    # Check if the length of both binary numbers are same\n    if count0 > count1:\n        return count1 - count0\n    else:\n        return count0 - count1"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function counts the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Get the lengths of the two binary strings\n    len1 = len(str1)\n    len2 = len(str2)\n\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = 0\n\n    # Iterate over the digits of num1 and num2 and swap them if they are different\n    for i in range(len1):\n        if num1 & 1!= num2 & 1:\n            min_swaps += 1\n            temp = num1 & 1\n            num1 = num1 >> 1\n            num2 = (num2 >> 1) | (temp << (len1 - 1 - i))\n\n    # If num1 is still greater than num2 after all swaps, swap the two numbers\n    if num1 > num2:\n        min_swaps += 1\n        temp = num1\n        num1 = num2\n        num2 = temp\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    # Function to count minimum number of swaps required to convert one binary number represented as a string to another\n    def count_swaps(s1,s2):\n        swaps = 0\n        i,j = 0,len(s1)-1\n        while i < j:\n            if s1[i]!= s2[j]:\n                swaps += 1\n                s1[i],s1[j] = s1[j],s1[i]\n                i += 1\n                j -= 1\n            else:\n                i += 1\n                j -= 1\n        return swaps\n    \n    # Convert the binary numbers to binary strings\n    binary1 = bin(int(str1))[2:]\n    binary2 = bin(int(str2))[2:]\n    \n    # Count the number of swaps required to convert binary1 to binary2\n    swaps1_count = count_swaps(binary1,binary2)\n    \n    # Convert binary2 back to decimal\n    binary2_decimal = int(binary2,2)\n    \n    # Count the number of swaps required to convert binary2 to binary1\n    swaps2_count = count_swaps(binary2,binary1)\n    \n    # Return the minimum number of swaps required to convert binary1 to binary2\n    return min(swaps1_count,swaps2_count)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    str1 = str1.strip('0')  #removing the leading zeros from the binary numbers\n    str2 = str2.strip('0') \n\n    #finding the length of the binary numbers\n    len1 = len(str1)\n    len2 = len(str2)\n\n    #initializing a list to store the swaps required for each binary number\n    swaps = [0] * len1\n\n    #initializing a variable to store the maximum swap count\n    max_swaps = 0\n\n    #iterating over all possible binary numbers\n    for i in range(2**len1):\n\n        #converting the current binary number to a string\n        curr_str = bin(i)[2:]\n\n        #finding the difference between the current binary number and the input strings\n        diff = abs(int(curr_str,2)-int(str1))\n\n        #if the difference is greater than or equal to the length of the other binary number, then adding 1 swap is required\n        if diff >= len2:\n            swaps[diff-len2] += 1\n\n        #finding the maximum swap count\n        if swaps[i] > max_swaps:\n            max_swaps = swaps[i]\n\n    #returning the minimum swap count\n    return max_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Initialize variables to store the lengths of the two strings\n    len1, len2 = len(str1), len(str2)\n\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = float('inf')\n\n    # Loop through all possible pairs of swaps\n    for i in range(len1):\n        for j in range(len2):\n            # Check if the two swapped strings are equal\n            if (str1[i] == '1' and str2[j] == '1') or (str1[i] == '0' and str2[j] == '0'):\n                # Compute the number of swaps required to convert the two binary numbers\n                swaps = min(len1 - i - 1, len2 - j - 1)\n                # Update the minimum number of swaps required\n                min_swaps = min(min_swaps, swaps)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    # finding length of both strings\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # creating a dictionary to store the number of swaps required to convert each string to decimal\n    count = {}\n    \n    # converting each string to decimal\n    for i in range(n1):\n        count[int(str1[i],2)] = count.get(int(str1[i],2), 0) + 1\n        \n    for i in range(n2):\n        count[int(str2[i],2)] = count.get(int(str2[i],2), 0) + 1\n        \n    # finding minimum number of swaps required to convert both strings to decimal\n    min_swaps = float('inf')\n    for i in range(2**n1):\n        for j in range(2**n2):\n            temp = int(str(i)[::-1],2)\n            if temp == int(str(j)[::-1],2):\n                count[temp] = count.get(temp, 0) + 1\n            else:\n                count[temp] = count.get(temp, 0) - 1\n                \n            # finding the minimum number of swaps required for current string to decimal\n            if min_swaps > count[temp]:\n                min_swaps = count[temp]\n                \n    # printing the minimum number of swaps required\n    print(\"Minimum number of swaps required:\", min_swaps)\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n\n    # Initialize two variables to keep track of the count of swaps\n    swap_count = 0\n    swapped = False\n\n    # Iterate through the strings in reverse order\n    for i in range(n-1, -1, -1):\n        # If both strings have the same digit at the current index, continue\n        if str1[i] == str2[i]:\n            continue\n        # If the first string has a digit larger than the second string, swap the digits and increment the swap count\n        elif str1[i] > str2[i]:\n            str1[i], str2[i] = str2[i], str1[i]\n            swap_count += 1\n            swapped = True\n        # If the first string has a digit smaller than the second string, decrement the swap count\n        else:\n            swap_count -= 1\n            swapped = True\n\n    # If no swaps were made, return 0\n    if not swapped:\n        return 0\n\n    # Calculate the minimum number of swaps required to convert the two binary numbers\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to store the number of swaps and the maximum value of a swap\n    swaps = 0\n    max_swap = 0\n\n    # Iterate through the binary strings\n    for i in range(len(str1)):\n        # Check if the binary strings have the same bits set\n        if num1 & (1 << i) == num2 & (1 << i):\n            # If the bits are the same, then no swaps are required\n            continue\n        else:\n            # If the bits are different, then we need to swap the bits\n            max_swap = max(max_swap, i + 1)\n            # Increment the number of swaps\n            swaps += 1\n\n        # Swap the bits and continue the iteration\n        num1 = num1 ^ (1 << i)\n        num2 = num2 ^ (1 << i)\n\n    # Return the minimum number of swaps required\n    return swaps, max_swap"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    # create a boolean matrix to store whether the corresponding bits of str1 and str2 are swapped or not\n    dp = [[0] * 2 for _ in range(n+1)]\n\n    # base case: if str1 and str2 are same, no swaps required\n    if str1 == str2:\n        return 0\n\n    # fill the boolean matrix using dynamic programming\n    for i in range(1, n+1):\n        for j in range(2):\n            if j == 0:\n                if str1[i-1] == '1' and str2[i-1] == '0':\n                    dp[i][j] = dp[i-1][1] + 1\n                elif str1[i-1] == '0' and str2[i-1] == '1':\n                    dp[i][j] = dp[i-1][0] + 1\n                else:\n                    dp[i][j] = dp[i-1][j]\n            else:\n                if str1[i-1] == '1' and str2[i-1] == '0':\n                    dp[i][j] = min(dp[i-1][0] + 1, dp[i-1][1])\n                elif str1[i-1] == '0' and str2[i-1] == '1':\n                    dp[i][j] = min(dp[i-1][1] + 1, dp[i-1][0])\n                else:\n                    dp[i][j] = dp[i-1][j]\n\n    # return the minimum number of swaps required\n    return dp[n][1]"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not isinstance(tuple_list, tuple):\n        print(\"Input is not a tuple\")\n        sys.exit(1)\n    size = 0\n    for element in tuple_list:\n        if isinstance(element, (int, float, complex)):\n            size += sys.getsizeof(element)\n        elif isinstance(element, str):\n            size += sys.getsizeof(element) + len(element)\n        else:\n            size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tuple in tuple_list:\n        size += sys.getsizeof(tuple)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        for item in tup:\n            total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): first sorted array\n        arr2 (list): second sorted array\n        k (int): the position of the kth element to find\n\n    Returns:\n        int: the kth element from arr1\n    \"\"\"\n    # compare the first k elements of arr1 and arr2\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    # find the kth element among the remaining elements\n    if i == len(arr1):\n        return arr2[j]\n    elif j == len(arr2):\n        return arr1[i]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and the value of k and returns the kth smallest element.\n    \"\"\"\n\n    # Initialize the index variables for both arrays\n    i = 0\n    j = 0\n\n    # Initialize a counter variable\n    count = 0\n\n    # Iterate through both arrays and count the number of elements in each\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            count += 1\n            i += 1\n            j += 1\n\n    # If there are less elements in arr1 than in arr2, add the remaining elements of arr1 to the count\n    if i == len(arr1):\n        count += len(arr2) - j\n\n    # If there are less elements in arr2 than in arr1, add the remaining elements of arr2 to the count\n    if j == len(arr2):\n        count += len(arr1) - i\n\n    # If k is greater than the count, return None as there is no such element\n    if k > count:\n        return None\n\n    # If k is equal to the count, return the kth smallest element\n    if k == count:\n        return arr1[k - 1]\n\n    # If k is less than the count, return the kth smallest element in arr2\n    return arr2[k - count - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth element from two sorted arrays arr1 and arr2.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The value of k.\n\n    Returns:\n        int: The kth element from the two sorted arrays.\n    \"\"\"\n    # Initialize two pointers to the beginning of the arrays\n    i = j = 0\n\n    # Compare the values at the pointers and move the pointers\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    # If the first array is smaller, return the remaining elements of the array\n    if i == len(arr1):\n        return arr2[j:k]\n    # If the second array is smaller, return the remaining elements of the array\n    else:\n        return arr1[i:k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n        else:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            j += 1\n            k -= 1\n    if k == 1:\n        return arr1[i]\n    elif k == len(arr1) - i:\n        return arr2[j]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays as input and returns the kth smallest element.\n\n    Parameters:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The value of k for which we want to find the kth smallest element.\n\n    Returns:\n    int: The kth smallest element from the two sorted arrays.\n\n    Example:\n    arr1 = [1, 3, 5, 7, 9]\n    arr2 = [2, 4, 6, 8, 10]\n    k = 3\n    Output: 5\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i == len(arr1):\n            return arr2[j-1]\n        elif j == len(arr2):\n            return arr1[i-1]\n\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    n1, n2 = len(arr1), len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        else:\n            if k == n2 - j:\n                return arr2[j]\n            j += 1\n            k -= n2 - j\n\n    return -1 # if k is greater than or equal to n1 + n2"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the shorter array\n    n = len(arr1)\n    if len(arr2) < n:\n        n = len(arr2)\n    \n    # Initialize two pointers for each array\n    i, j = 0, 0\n    \n    # Initialize the sum of elements in the two arrays\n    sum = 0\n    \n    # Iterate until we find k elements in the sorted array\n    while sum < k:\n        # If the element at i position in the first array is smaller, increment i and sum\n        if arr1[i] < arr1[j]:\n            i += 1\n            sum += i\n        # If the element at j position in the second array is smaller, increment j and sum\n        else:\n            j += 1\n            sum += j\n    \n    # Return the kth element if found, otherwise return -1\n    if sum == k:\n        return arr1[i-1]\n    else:\n        return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n\n    # Convert the number to a string\n    num_str = str(number)\n\n    # Calculate the sum of the squares of each digit in the number\n    sum_of_squares = 0\n    for digit in num_str:\n        digit = int(digit)\n        sum_of_squares += digit ** 2\n\n    # Compare the sum of squares to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n    # calculate the sum of the cubes of the digits\n    cube_sum = sum(d**3 for d in digits)\n    # compare the original number with the sum of its cubes\n    return number == cube_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(n):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = n\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if n == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize variables\n    sum_of_squares = 0\n    digit = 0\n    power = len(str(number))\n\n    # Calculate the sum of squares of the digits in the number\n    while number > 0:\n        digit = number % 10\n        sum_of_squares += digit ** power\n        number //= 10\n\n    # Check whether the sum of squares is equal to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    \n    # Convert the number to a string and convert each digit to an integer and multiply it by the power of the digit.\n    for i in str(num):\n        sum += int(i) ** len(str(num))\n    \n    # Check if the sum of cubes of each digit equals to the original number.\n    return sum == num\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Function to check if a given number is Armstrong or not.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    sum_of_pow = 0\n    \n    for i in range(num_len):\n        power = num_len - i\n        digit = int(num_str[i])\n        sum_of_pow += digit**power\n    \n    return sum_of_pow == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(num):\n    num_str = str(num)\n    sum_of_powers = 0\n    power = len(num_str)\n    \n    for i in num_str:\n        sum_of_powers += int(i)**power\n    \n    return sum_of_powers == num\n\nnum = int(input(\"Enter a number to check: \"))\nif is_armstrong(num):\n    print(f\"{num} is an Armstrong number.\")\nelse:\n    print(f\"{num} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    # Get the number of digits in the number\n    num_digits = len(str(number))\n    # Initialize a variable to store the sum of the digits raised to the power of the number of digits\n    sum_of_digits = 0\n    # Loop through each digit and add its value to the sum\n    for digit in str(number):\n        sum_of_digits += int(digit) ** num_digits\n    # Check if the number is equal to the sum of its digits raised to the power of the number of digits\n    return number == sum_of_digits"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    sum_of_squares = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum_of_squares += digit ** 3\n        num //= 10\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    # initialize sum to 0\n    sum = 0\n    # iterate through each digit of the number\n    for digit in num_str:\n        # convert digit to integer and add to sum\n        sum += int(digit)**len(num_str)\n    # check if sum of digits is equal to original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # loop through first n natural numbers and add them to sum\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n\n    # calculate and print the average\n    average = sum / count\n    print(\"Sum of first {} natural numbers is: {}\".format(number, sum))\n    print(\"Average of first {} natural numbers is: {}\".format(number, average))\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1, number + 1):\n        total += i\n        count += 1\n        \n    average = total / count\n    \n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # Initialize variables to store sum and count\n    total = 0\n    count = 0\n    # Iterate through the first n natural numbers\n    for i in range(1, number+1):\n        # Add each natural number to the sum\n        total += i\n        # Increment the count\n        count += 1\n    # Calculate the sum and average\n    average = total/count\n    # Return the sum and average\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n\n    sum = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n\n    average = sum / count\n\n    print(f\"Sum of first {number} natural numbers: {sum}\")\n    print(f\"Average of first {number} natural numbers: {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i + 1\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n): \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    # check if the given number is even or not\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize an empty dictionary to store the count of each character\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Initialize a variable to store the first repeated character\n    first_rep_char = \"\"\n    \n    # Iterate through each character in the dictionary\n    for char, count in char_count.items():\n        # If the character count is greater than 1, update the first repeated character\n        if count > 1:\n            first_rep_char = char\n    \n    # Return the first repeated character\n    return first_rep_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first character with a frequency greater than 1\n    for char, count in freq.items():\n        if count > 1:\n            return char\n    \n    # if no characters have a frequency greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = list(str1)\n    for char in char_list:\n        if char_list.count(char) > 1:\n            return char\n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as an input and returns the first repeated character in the string.\n    \"\"\"\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n\n    # Loop through the dictionary to find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n\n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function finds the first repeated character in a given string.\n    '''\n    # converting string to list of characters\n    lst = list(str1)\n    # initializing an empty dictionary to store the count of each character\n    count_dict = {}\n    # iterating over each character in the list\n    for char in lst:\n        # if the character is already in the dictionary, increment the count by 1\n        if char in count_dict:\n            count_dict[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[char] = 1\n    \n    # initializing the first repeated character\n    first_char = \"\"\n    # iterating over each character in the list again\n    for char in lst:\n        # if the character has a count greater than 1 in the dictionary, update the first_char and break out of the loop\n        if count_dict[char] > 1:\n            first_char = char\n            break\n    \n    # returning the first repeated character\n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while i <= n:\n        if i == 1:\n            lucid.append(i)\n            i += 1\n        else:\n            is_lucid = True\n            j = 2\n            while j < i:\n                if i % j == 0:\n                    is_lucid = False\n                    break\n                j += 1\n            if is_lucid:\n                lucid.append(i)\n                i += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\ndef is_lucid(num):\n    \"\"\"\n    Check if a given number is a lucid number or not. A lucid number is a positive integer that is divisible by its digits in base 10.\n    \"\"\"\n    digits = [int(d) for d in str(num)]\n    return all(d % 10 == 0 for d in digits)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    ludic_numbers = []\n    current_number = 1\n\n    while True:\n        ludic_numbers.append(current_number)\n\n        next_number = current_number + 1\n\n        if next_number > n:\n            break\n\n        current_number = next_number\n\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n    current_number = 1\n\n    while current_number <= n:\n        if current_number <= 2:\n            lucid_numbers.append(1)\n        else:\n            if current_number % 2 == 0:\n                lucid_numbers.append(current_number)\n            else:\n                lucid_numbers.append(3 * current_number + 1)\n\n        current_number += 1\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 2\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    \"\"\"\n    Check if a given number is a lucid number or not.\n    \"\"\"\n    if n <= 2:\n        return False\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= int(n ** 0.5) + 1:\n        if n % i == 0 or n % (n // i) == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n        if i > n:\n            break\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    '''\n    Helper function to check if a given integer is a lucid number.\n    '''\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return sum_of_digits == n\n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a number: \"))\n    lucid_numbers = get_ludic(n)\n    print(lucid_numbers)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [2]\n    for i in range(3, n+1):\n        lucid.append(lucid[-1] + 2)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n            i += 1\n        elif i >= n:\n            break\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a number is a lucid number or not.\n    '''\n    return all(n%i!= 0 for i in range(2, int(n**0.5)+1))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if len(str(i)) == len(str(n)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the words back into a string with spaces\n    reversed_s = \" \".join(words)\n\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Use a for loop to iterate over the words in reverse order\n    for i in range(len(words)-1, -1, -1):\n        # Reverse the order of the characters in the word\n        words[i] = words[i][::-1]\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n\n    for word in words:\n        reversed_words.append(word[::-1])\n\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Split the string into a list of words\n    reversed_words = words[::-1] # Reverse the list using slicing\n    return''.join(reversed_words) # Join the reversed words back together with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    \n    # reverse each word and join them into a string\n    result =''.join([word[::-1] for word in words])\n    \n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = \"\"\n        for i in range(len(word)-1, -1, -1):\n            reversed_word += word[i]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the reversed words back into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, else False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the given number is divisible by any number between 2 and the square root of the given number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    return is_prime(num)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree as input and returns the equivalent in radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start(), match.end()))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        substring = text[start:end]\n        yield substring, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        start_index = 0\n        for i in range(len(result)):\n            start_index += len(result[i])\n        end_index = start_index + len(result[0])\n        return result[0], start_index, end_index\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Search for pattern in text\n    matches = re.findall(pattern, text)\n\n    # Check if any matches were found\n    if matches:\n        # Return the first match and the start and end indices of the match\n        match = matches[0]\n        start = text.find(match)\n        end = start + len(match)\n        return match, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        match = matches[0]\n        start = text.find(match)\n        end = start + len(match)\n        return match, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * bell_Number(n-1) - 1) // n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # First two bell numbers are 1 and 2\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # Calculate the nth bell number using the formula:\n        # (n + 1)^2 / (2n)\n        return int((n + 1)**2 / (2*n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_arr = [1]\n    for i in range(1, n+1):\n        bell_arr.append(bell_arr[i-1] + bell_arr[i-2])\n    return bell_arr[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n and returns the nth Bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L as input.\n    The function returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function removes the kth element from a list.\n\n    :param list1: The list to remove the kth element from.\n    :type list1: list\n    :param k: The index of the element to remove.\n    :type k: int\n    :return: A new list with the same elements as list1, but the kth element removed.\n    :rtype: list\n    \"\"\"\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    if k <= 0 or k > len(list1):\n        return list1\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[:-1]\n    else:\n        return [list1[i] for i in range(L-1)] + [list1[L-1]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Removing the kth element from the list\n    del list1[L-1]\n    # Returning the updated list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Initialize an empty list for the result\n    result = []\n    # Initialize a variable to keep track of the current position in the list\n    i = 0\n    # Loop through the list\n    for x in list1:\n        # If the current position is equal to L-1, remove the k'th element and add it to the result list\n        if i == L-1:\n            result.append(x)\n        # Increment the current position\n        i += 1\n    # Return the result list\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L - 1\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Check if the length of the list is less than the given L value\n    if len(list1) < L:\n        return \"List is not long enough to remove the kth element.\"\n    \n    # Create a new list with the same elements as the original list\n    new_list = list1.copy()\n    \n    # Remove the kth element from the new list\n    del new_list[L-1]\n    \n    # Return the new list without the kth element\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(lst, k):\n    return lst[:-k]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = []\n    for i in range(len(test_list)):\n        max_val.append(max(test_list[i][j] for j in range(N)))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if N-1 < len(row):\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_col = []\n    for row in test_list:\n        max_col.append(max(row[N-1], max_col[-1]))\n    return max_col[-1]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the matrix\n    m = len(test_list)\n    \n    # Check if the N is within the range of the matrix\n    if N < 1 or N > m:\n        return None\n    \n    # Initialize the max value to the minimum value of integer\n    max_val = float('-inf')\n    \n    # Loop through each row of the matrix and check if the Nth column value is greater than max_val\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        if i == N-1:\n            print(max(test_list[i]))\n        else:\n            continue"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the length of the first row of the matrix\n    row_len = len(test_list[0])\n    # create an empty list to store the max values of then'th column\n    max_list = []\n    # loop through the rows of the matrix and find the max values of then'th column\n    for row in test_list:\n        max_val = max(row[N-1:]) # find the max value of then'th column\n        max_list.append(max_val)\n    # return the max list\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of columns in the matrix\n    num_cols = len(test_list[0])\n\n    # Check that the value of N is within the valid range\n    if N < 1 or N > num_cols:\n        raise ValueError(\"N must be between 1 and the number of columns in the matrix\")\n\n    # Initialize the maximum value to be the minimum possible value of a float\n    max_val = float('-inf')\n\n    # Iterate over each row in the matrix and compare then'th column with the current maximum value\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i][N-1], key=test_list[i][N-1].index))\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(matrix)):\n        if matrix[i][N-1] > max_value:\n            max_value = matrix[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # initialize a variable to store the max value found so far\n    max_val = float('-inf')\n\n    # loop through each row of the matrix\n    for row in test_list:\n        # check if the current row has then'th column\n        if N < len(row):\n            # check if the current value in then'th column is greater than the max value found so far\n            if row[N] > max_val:\n                max_val = row[N]\n\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    result = []\n\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        merged.append([first_element, second_element])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for i in lst:\n        merged_lst.append([i[0], i[1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][0]\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            cum_sum = test_list[i]\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], int):\n            cum_sum += test_list[i]\n        else:\n            pass\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n    \n    # Iterate over the list of tuples\n    for i in range(len(test_list)):\n        # Extract the value at the current index\n        value = test_list[i]\n        \n        # Add the value to the cumulative sum\n        cumulative_sum += value\n        \n        # If the current value is 0, increment the cumulative sum to 0 again\n        if value == 0:\n            cumulative_sum = 0\n            \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in range(len(test_list)):\n        cumsum += test_list[i][1]\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumsum = 0\n    for i in range(len(test_list)):\n        cumsum += test_list[i][0]\n    return cumsum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        sum_of_nums = sum(num_tuple)\n        average = sum_of_nums / len(num_tuple)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        if type(num)!= tuple:\n            raise TypeError(\"All elements in the tuple must be tuples\")\n        result.append(sum(num) / len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for num_tuple in nums:\n        total += sum(num_tuple)\n        count += 1\n    avg_list = [num/count for num in total]\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    averages = []\n    \n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of all the values in the tuple\n        total = sum(tup)\n        # Calculate the average of the values in the tuple\n        avg = total / len(tup)\n        # Append the average value to the list of averages\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        avg = sum(i)/len(i)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        tup_sum = sum(tup)\n        tup_len = len(tup)\n        avg = tup_sum / tup_len\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = sum(nums[i])\n        average = total / len(nums[i])\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        averages.append(sum(nums[i]) / len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = 0\n        for num_list in num:\n            total += num_list\n        average = total / len(num_list)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    # Perform element-wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] % test_tup2[i])\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return None\n    \n    # perform element wise modulo\n    modulo_tup = tuple(i % j for i, j in zip(test_tup1, test_tup2))\n    return modulo_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    curr = 0\n    while curr <= steps:\n        if curr == d:\n            return jumps\n        elif curr < d:\n            jumps += 1\n            curr += 1\n        else:\n            curr -= 1\n            jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    curr_x, curr_y = 0, 0\n    num_jumps = 0\n    for i in range(steps):\n        if curr_y == 0:\n            num_jumps += 1\n            curr_y = 0\n            curr_x += 1\n        else:\n            curr_y -= 1\n            curr_x += 1\n        if curr_x >= d:\n            return num_jumps\n\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    :param steps: number of steps to reach a point of form (d, 0) from origin\n    :type steps: int\n    :param d: the jump length\n    :type d: int\n    :return: number of jumps required to reach the point\n    :rtype: int\n    \"\"\"\n    jumps = 0\n    i = 0\n    steps_left = steps\n    while steps_left > 0:\n        if i >= steps:\n            jumps += 1\n            steps_left -= d\n        i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    # Initialize variables to keep track of the current step and the distance remaining\n    curr_step = 0\n    dist_remaining = d\n\n    # Initialize the minimum number of jumps to be reached\n    min_jumps = 0\n\n    # Loop through each step and check if the distance remaining is at least 2\n    while dist_remaining >= 2:\n        # If the distance remaining is at least 1, increment the number of jumps\n        if dist_remaining >= 1:\n            min_jumps += 1\n\n        # Check if the next step is within the range of steps\n        if curr_step + 1 < len(steps):\n            # If it is, move to the next step and update the distance remaining\n            curr_step += 1\n            dist_remaining -= steps[curr_step]\n        else:\n            # If not, the next step is beyond the range of steps, so there is no way to reach the destination point\n            break\n\n    # If there are multiple possible minimum jumps, return the smallest one\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    i = 0\n    j = 0\n    count = 0\n    \n    # Loop through the steps and check if the point at (i, j) is within the desired distance\n    while i < steps and abs(j) < d:\n        count += 1\n        # Move the point to the next position\n        if j == 0:\n            i += 1\n        else:\n            j -= 1\n    \n    # Check if the point is within the desired distance\n    if abs(j) >= d:\n        return -1\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    if steps <= 0 or d <= 0:\n        return -1\n    \n    # Create a 2D array to store the number of steps required to reach each point (x,y)\n    # Start with (0, 0) and set the steps to be equal to the length of steps\n    grid = [[steps]]\n    \n    # Start with (0, d) and initialize the number of jumps to 0\n    current_point = (0, d)\n    jumps = 0\n    \n    # Loop until we reach a point with (d, 0) from origin\n    while current_point[1]!= 0:\n        # If we have reached a point with 0 steps to reach, return the number of jumps we have made\n        if grid[current_point[0]][current_point[1]] == 0:\n            return jumps\n        \n        # If we have reached the destination point, return the number of jumps we have made\n        if current_point == (d, 0):\n            return jumps\n        \n        # If we have not reached the destination point and the number of steps is greater than 0, decrement the number of steps and move to the next point\n        if grid[current_point[0]][current_point[1]] > 0:\n            grid[current_point[0]][current_point[1]] -= 1\n            current_point = (current_point[0], current_point[1] - 1)\n            jumps += 1\n    \n    # We have not reached the destination point, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_position = 0\n    jumps_required = 0\n    \n    while current_position < len(steps):\n        current_position += 1\n        if steps[current_position-1] == d:\n            jumps += 1\n            if current_position == len(steps):\n                jumps_required = jumps\n                break\n        elif current_position == len(steps):\n            break\n    \n    return jumps_required"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps < d:\n        return \"Invalid input\"\n    # creating a 2d array with dimensions (steps+1, steps+1) to store the steps required to reach the desired point\n    arr = [[0]*(steps+1) for _ in range(steps+1)]\n    # initializing the first row and column to 0\n    for i in range(1, steps+1):\n        arr[0][i] = 0\n    # initializing the first element of the second row to 1\n    arr[1][0] = 1\n    # filling the remaining elements of the 2d array using dynamic programming approach\n    for i in range(2, steps+1):\n        for j in range(1, i+1):\n            # if the element in the first row is less than the element in the first column and the difference between elements is less than the given distance\n            if i == 1 and j == 0:\n                arr[i][j] = 1\n            elif i == 1:\n                arr[i][j] = arr[1][0]\n            elif j == 0:\n                arr[i][j] = arr[1][j-1]\n            else:\n                # if the difference between elements is less than the given distance, add the minimum number of jumps required to reach the element in the first row and the element in the first column and the difference between the elements to reach the desired element in the first row\n                arr[i][j] = min(arr[i-1][j-1] + arr[1][j], arr[i][j-1] + arr[1][j-1])\n    # returning the minimum number of jumps required to reach the desired point\n    return arr[steps][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    # Initialize variables for steps and distance to reach (d, 0) from origin\n    steps_to_zero = d\n    remaining_steps = steps\n    \n    # Initialize variable for minimum jumps required\n    min_jumps = 0\n    \n    # Loop until all remaining steps are used\n    while remaining_steps > 0:\n        # If remaining steps are greater than steps to reach zero, take minimum of remaining steps and steps to reach zero\n        remaining_steps = min(remaining_steps, steps_to_zero)\n        \n        # Increment minimum jumps required by 1\n        min_jumps += 1\n        \n        # Update distance to reach (d, 0) from origin\n        steps_to_zero -= remaining_steps\n    \n    # Return minimum jumps required\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    curr_pos = 0\n    end_pos = d\n    count = 0\n\n    while curr_pos < end_pos and count < steps:\n        if end_pos - curr_pos <= d:\n            curr_pos = end_pos\n            count += 1\n            jumps += 1\n            end_pos = 0\n        else:\n            curr_pos += d\n            count += 1\n\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lengths of the two lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"The lists must have the same length.\")\n        return\n\n    # Divide the elements of the two lists element wise\n    div_list = [num1/num2 for num1,num2 in zip(nums1,nums2)]\n    return div_list"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the lengths of the lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length\")\n        return\n\n    # initialize an empty list to store the result\n    result = []\n\n    # iterate over each element of the lists\n    for i in range(len(nums1)):\n        # divide the corresponding elements of the lists\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists should have the same length\"\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            result.append(\"Error: Division by zero\")\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The lists must have the same length.\")\n        return\n    \n    # Create a new list to store the result\n    result = []\n    \n    # Divide each element of the two lists and append the result to the new list\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    # Return the new list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the input lists have equal length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n\n    # Initialize an empty list for the result\n    result = []\n\n    # Perform the element-wise division\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length\")\n        return\n    \n    # Divide each element of the two lists element wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, move it to the end of the string\n        if char.isdigit():\n            # add the character to a new string\n            new_str = test_str[:test_str.find(char)] + char + test_str[test_str.find(char):]\n            # update the string with the new one\n            test_str = new_str\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # If the character is not a number, add it to the end of the string\n        else:\n            num_list.append(char)\n    # Return the string with all the numbers at the end\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    if nums:\n        test_str = ''.join(sorted(nums)) + test_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize an empty string to store numbers\n    num_str = \"\"\n\n    # Loop through each character in the input string\n    for char in test_str:\n\n        # If the character is a number, add it to the num_str\n        if char.isdigit():\n            num_str += char\n\n        # If the character is not a number, add it to the end of the original string\n        else:\n            test_str = test_str[:test_str.index(char)] + num_str + test_str[test_str.index(char)+1:]\n\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    numbers.sort(reverse=True)\n    result = ''.join(numbers) + test_str\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    \n    test_str = ''.join(numbers)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    num_found = False\n    for char in test_str:\n        if char.isdigit():\n            num_found = True\n            break\n    if num_found:\n        return test_str[-test_str[::-1].find(char):] + test_str[::-1].replace(char, '')\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    nums = []\n    non_nums = []\n    num_count = 0\n    \n    # Iterate through the string\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    \n    # Combine the two lists and return the final string\n    return ''.join(non_nums + nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # Find all the numbers in the string\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    # Reverse the list of numbers\n    num_list.reverse()\n    \n    # Join the list of numbers back into a string\n    result = ''.join(num_list)\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    count = 1\n    max_count = 1\n    \n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 1\n    \n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n    n = len(a)  # get the length of the list\n    count = 0  # initialize the count variable to 0\n    \n    # iterate through the list and check if every pair is divisible\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:  # check if a[i] is divisible by a[j]\n                count += 1  # increment the count if it is\n    \n    # return the count of pairs that are divisible\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers in ascending order\n    a.sort()\n\n    # Initialize two pointers, i and j, to the beginning of the list\n    i, j = 0, 0\n\n    # Initialize the maximum size of the subset\n    max_size = 0\n\n    # Iterate over the list of numbers\n    while j < len(a):\n        # If the sum of the numbers in the current subset is divisible by 2, increment the size of the subset\n        if a[j] % 2 == 0:\n            max_size += 1\n\n        # If the sum of the numbers in the current subset is not divisible by 2, move the pointer to the next number\n        else:\n            # If the pointer i is within the range of the list, increment the size of the subset\n            if i < j:\n                max_size += 1\n\n            # Move the pointer to the next number\n            i += 1\n\n        # Move the pointer to the next number\n        j += 1\n\n    # Return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    # Sort the list of numbers in ascending order\n    a.sort()\n\n    # Initialize a counter variable to keep track of the size of the largest subset\n    largest_size = 1\n\n    # Iterate through the list of numbers\n    for i in range(1, len(a)):\n        # If the next number is not divisible by the current number, increase the largest_size counter\n        if a[i] % a[i-1]!= 0:\n            largest_size += 1\n\n    # Return the largest_size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list of numbers in ascending order\n    a.sort()\n\n    # initialize variables for the largest subset size and the current subset size\n    max_subset_size = 0\n    curr_subset_size = 0\n\n    # loop through the list of numbers\n    for i in range(len(a)):\n        # if the current number is even, increment the current subset size\n        if a[i] % 2 == 0:\n            curr_subset_size += 1\n            # if the current subset size is greater than the largest subset size, update the largest subset size\n            if curr_subset_size > max_subset_size:\n                max_subset_size = curr_subset_size\n        # if the current number is odd, decrement the current subset size\n        else:\n            curr_subset_size -= 1\n\n    # return the largest subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    # sort the list in ascending order\n    a.sort()\n    # initialize two pointers, one for left and the other for right\n    left = 0\n    right = len(a) - 1\n    # initialize a variable to store the size of the largest subset\n    largest = 0\n    # initialize a variable to store the current subset size\n    subset_size = 0\n    # loop until both pointers meet\n    while left < right:\n        # if the current element is divisible by the element at the right pointer\n        if a[left] % a[right] == 0:\n            # increment the subset size and move the right pointer\n            subset_size += 1\n            right -= 1\n            # if the current subset size is greater than the largest subset size, update the largest subset size\n            if subset_size > largest:\n                largest = subset_size\n        else:\n            # decrement the left pointer and move the right pointer until the element at the left pointer is divisible by the element at the right pointer\n            while a[left] % a[right]!= 0:\n                left += 1\n            # move the left pointer to the next element\n            left += 1\n    # return the largest subset size\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    a.sort()\n    count = [0] * n\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                count[j] = max(count[j], count[i] + 1)\n\n    return count[-1]"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                return j - i + 1\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    max_size = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                dp[j] = max(dp[j], dp[i] + 1)\n                max_size = max(max_size, dp[j])\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    # Initialize variables to store the largest subset size and the list of numbers in the subset\n    largest_size = 0\n    current_size = 1\n    subset = [a[0]]\n    # Loop through the list\n    for i in range(1, len(a)):\n        # If the current number is divisible by the next number, add it to the subset and increase the current size\n        if a[i] % subset[current_size-1] == 0:\n            subset.append(a[i])\n            current_size += 1\n        # If the current number is not divisible by the next number, reset the current size and check if it's the largest subset so far\n        else:\n            largest_size = max(largest_size, current_size)\n            current_size = 1\n            if current_size == i:\n                subset = [a[i]]\n            elif current_size == i-1:\n                subset = [a[i-1], a[i]]\n            else:\n                subset = [a[i-1]]\n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i == n:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n    \n    # find the median index\n    mid1 = n // 2\n    mid2 = (n + 1) // 2\n    \n    # find the median\n    if n % 2 == 0:\n        # even number of elements\n        median = (arr1[mid1-1] + arr1[mid1] + arr2[mid2-1] + arr2[mid2]) / 4\n    else:\n        # odd number of elements\n        median = (arr1[mid1] + arr2[mid2]) / 2\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    combined = arr1 + arr2\n    \n    # Sort the combined list\n    combined.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        median = (combined[n//2 - 1] + combined[n//2]) / 2\n    else:\n        median = combined[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[n-1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n    \"\"\"\n    arr1.extend(arr2)\n    arr1.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > n:\n        arr1 = arr1[:n]\n    elif len(arr1) < n:\n        arr1 += [0] * (n - len(arr1))\n\n    if len(arr2) > n:\n        arr2 = arr2[:n]\n    elif len(arr2) < n:\n        arr2 += [0] * (n - len(arr2))\n\n    arr1.sort()\n    arr2.sort()\n\n    if len(arr1) == len(arr2):\n        mid = n // 2\n        if len(arr1) % 2 == 0:\n            return (arr1[mid-1] + arr1[mid]) / 2\n        else:\n            return arr1[mid]\n    elif len(arr1) > len(arr2):\n        return get_median(arr2, arr1, n)\n    else:\n        return get_median(arr1, arr2, n)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists of size n and returns the median of the two sorted lists.\n    '''\n    arr1.sort()\n    arr2.sort()\n    \n    mid1 = n // 2\n    mid2 = n // 2\n    \n    if n % 2 == 0:\n        return (arr1[mid1] + arr1[mid1-1]) / 2\n    else:\n        return arr1[mid1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate both arrays\n    arr = arr1 + arr2\n\n    # Sort the concatenated array\n    arr.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Merging two sorted lists into a single sorted list\n    merged_arr = arr1 + arr2\n\n    # Finding the middle index of the merged list\n    mid = n // 2\n\n    # If the length of the merged list is odd, the median is the middle element\n    if n % 2!= 0:\n        median = merged_arr[mid]\n    else:\n        # Finding the two middle elements of the merged list\n        left_middle = merged_arr[mid - 1]\n        right_middle = merged_arr[mid]\n\n        # Comparing the two middle elements and returning the median\n        if left_middle > right_middle:\n            median = left_middle\n        else:\n            median = right_middle\n\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # merge the two arrays into one and sort it\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    \n    # get the median index based on the number of elements in the array\n    median_index = n // 2\n    \n    # return the median element\n    return merged_arr[median_index]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # To interchange the first and last element, we simply need to swap their index positions.\n    # We can use the slicing syntax to get the last element of the list and then assign it to the first element.\n    # Here's the code:\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Take the length of the list\n        length = len(newList)\n        # Take the last element of the list\n        last_element = newList[length-1]\n        # Remove the last element from the list\n        newList.pop()\n        # Add the last element to the first position of the list\n        newList.insert(0, last_element)\n        # Return the modified list\n        return newList\n    else:\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list is not empty\n    if not newList:\n        print(\"The list is empty!\")\n        return\n\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the length is greater than 1\n    if length <= 1:\n        print(\"The length of the list should be greater than 1!\")\n        return\n\n    # Get the first and last elements of the list\n    first = newList[0]\n    last = newList[length-1]\n\n    # Interchange the first and last elements of the list\n    newList[0] = last\n    newList[length-1] = first\n\n    # Print the list after interchanging the elements\n    print(\"The new list after interchanging the elements is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: # If the list has less than 2 elements, return the same list\n        return newList\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #check if the list is empty\n    if len(newList) == 0: \n        return newList\n    \n    #get the first and last element of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    #create a new list by interchanging the first and last element\n    newList = [last] + newList[:-1] + [first]\n    \n    #return the new list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements.\")\n        return\n\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Print the modified list\n    print(\"New list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the length is less than or equal to 2\n    if length <= 2:\n        print(\"List should have at least 3 elements to perform the swap.\")\n        return\n\n    # Get the first and last element of the list\n    first = newList[0]\n    last = newList[length-1]\n\n    # Swap the first and last element\n    newList[0] = last\n    newList[length-1] = first\n\n    # Print the modified list\n    print(\"Modified List:\", newList)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    pi = 3.14159265359\n    a = r - (r**2)/((pi/2)*(2*r))\n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # the formula for area of a triangle with sides a, b, and c is:\n    # area = sqrt(s*(s-a)*(s-b)*(s-c))\n    # where s = (a+b+c)/2\n\n    # the formula for area of a semicircle with radius r and center in (x,y) is:\n    # area = 2 * pi * r * (r^2 - (x^2 + y^2))\n\n    # the maximum possible area of a triangle that can be inscribed in a semicircle with radius r is:\n    # area = 2 * pi * r^2 * (r^2 - 1)\n    # where r^2 = x^2 + y^2\n\n    # we can find the maximum possible radius for which the triangle area is less than or equal to the given radius:\n    # r = sqrt(2 * area / pi)\n\n    # we can find the area of the largest triangle that can be inscribed in a semicircle with the maximum possible radius:\n    # area = 2 * pi * r^2 * (r^2 - 1)\n    # area = 2 * pi * (r^2 - 1)\n    # area = pi * r^2 - 1\n    # area = 2 * pi * r^2 - 2 * pi * r^2 + 1\n    # area = 2 * pi * r^2 * (3/2) + 1\n    # area = 2 * pi * r^2 * (3/2)\n    # area = 2 * pi * r^2 * (1/2)\n    # area = 2 * pi * r^2 / 2\n    # area = 2 * pi * r^2\n    # area = 2 * pi * (r^2)^(1/2)\n    # area = pi * r^2^(1/2)\n    # area = r^(1/2) * (pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * (pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (2 * pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (2 * pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (2 * pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (2 * pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (2 * pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (2 * pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (2 * pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (2 * pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (2 * pi * r^2)^(1/2)\n    # area = r^(1/2) * (2 * pi)^(1/2) * r^(1/2) * (2 * pi * r^2)^(1/2)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 2 * r * math.sin(math.pi / 3)\n    return math.sqrt(s * (s - r) * (s - 2 * r))"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "Area = \u221a((\u221a(3/4) * (\u221a(3/4) * s\u00b2 - 1) + \u221a(1/4) * (\u221a(1/4) * s\u00b2 - 1) + \u221a(1/4) * (\u221a(1/4) * s\u00b2 - 1)) + (\u221a(3/4) * (\u221a(3/4) * s - 1) + \u221a(1/4) * (\u221a(1/4) * s - 1) + \u221a(1/4) * (\u221a(1/4) * s"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(3):\n        a = i + 1\n        b = 3 - i\n        c = 4\n        s = (a**2 + b**2 - c**2)/(2*a*b)\n        area = max(area, (r*r*(s*s - 1))/((a*a + b*b + c*c)**2))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Constants\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (2 * r ** 2) / 3"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    area = pi * r**2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n\n    # find the semi-perimeter of a circle\n    semicircle_perimeter = 2 * math.pi * r\n\n    # find the area of a triangle using Heron's formula\n    s = (3 * r * r * semicircle_perimeter) ** 0.5\n    area = math.sqrt(s * (s - r) * (s - 2 * r) * (s - semicircle_perimeter))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    area = pi * r * r\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            continue\n        elif array[i] > i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the first missing number.\n    \"\"\"\n    # Check if the input array is sorted\n    if all(array[i] < array[i+1] for i in range(len(array)-1)):\n        # Initialize the first missing number to the first element in the array\n        first_missing = array[0]\n        # Loop through the array starting from the first missing number\n        for i in range(start, end+1):\n            # Check if the current number is missing\n            if i+1 not in array:\n                # Update the first missing number\n                first_missing = i+1\n                # Exit the loop\n                break\n        # Return the first missing number\n        return first_missing\n    else:\n        # If the array is not sorted, return None\n        return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number in the list.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if end < start:\n        return -1\n    if array[start] > array[end]:\n        array[start], array[end] = array[end], array[start]\n        start += 1\n        end -= 1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return end + 1 + array[end+1]"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if i+1!= array[i]:\n            return i+1\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    if start == 0:\n        if array[0] == 1:\n            start = 1\n        else:\n            start = 2\n    \n    for i in range(start,end+1):\n        if array[i] == i:\n            continue\n        else:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            return i\n\n    return end + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    \n    for i in range(start,end+1):\n        if array[i] == i:\n            continue\n        else:\n            return i\n            \n    return end+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a new list containing only even numbers from the original list.\n    '''\n    even_numbers = [] # create an empty list to store even numbers\n    for num in list:\n        if num % 2 == 0: # check if the number is even\n            even_numbers.append(num) # append it to the even_numbers list\n    return even_numbers # return the even_numbers list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []  # empty list to store even numbers\n\n    for num in list:  # loop through each number in the list\n        if num % 2 == 0:  # check if number is even\n            even_list.append(num)  # append even number to the list\n\n    return even_list  # return the list of even numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list with only the even numbers in the input list.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as an input and returns a new list of even numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract the x and y coordinates from the input tuple\n    x, y = ele\n\n    # Iterate over all possible adjacent x and y coordinates\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if (dx!= 0 or dy!= 0) and (x + dx, y + dy) not in sub:\n                sub.append((x + dx, y + dy))\n\n    # Return the list of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if sub is None:\n        sub = []\n    if isinstance(ele, tuple):\n        for adj in [(ele[0] + 1, ele[1]), (ele[0], ele[1] + 1), (ele[0] - 1, ele[1]), (ele[0], ele[1] - 1)]:\n            if adj not in sub:\n                sub.append(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    if x > 0:\n        adjacent.append((x-1, y))\n    if x < 9:\n        adjacent.append((x+1, y))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if y < 9:\n        adjacent.append((x, y+1))\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    if x - 1 >= 0 and y - 1 >= 0:\n        sub.append((x - 1, y - 1))\n    if x + 1 < len(grid) and y - 1 >= 0:\n        sub.append((x + 1, y - 1))\n    if x - 1 >= 0 and y + 1 < len(grid[0]):\n        sub.append((x - 1, y + 1))\n    if x + 1 < len(grid) and y + 1 < len(grid[0]):\n        sub.append((x + 1, y + 1))\n    if x - 1 >= 0:\n        sub.append((x - 1, y))\n    if x + 1 < len(grid):\n        sub.append((x + 1, y))\n    if y - 1 >= 0:\n        sub.append((x, y - 1))\n    if y + 1 < len(grid[0]):\n        sub.append((x, y + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x-1 >= 0:\n        sub.append((x-1, y))\n    if x+1 < 5:\n        sub.append((x+1, y))\n    if y-1 >= 0:\n        sub.append((x, y-1))\n    if y+1 < 5:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    if x > 0:\n        adjacent.append((x-1, y))\n    if x < n-1:\n        adjacent.append((x+1, y))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if y < m-1:\n        adjacent.append((x, y+1))\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0 and y > 0:\n        sub.append((x-1, y-1))\n    if x < len(grid)-1 and y > 0:\n        sub.append((x+1, y-1))\n    if x > 0:\n        sub.append((x-1, y))\n    if x < len(grid)-1:\n        sub.append((x+1, y))\n    if x > 0 and y < len(grid[0])-1:\n        sub.append((x-1, y+1))\n    if x < len(grid)-1 and y < len(grid[0])-1:\n        sub.append((x+1, y+1))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < len(grid[0])-1:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=()):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+dx, y+dy) for dx, dy in sub]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append(tuple(x - 1, y))\n    sub.append(tuple(x + 1, y))\n    sub.append(tuple(x, y - 1))\n    sub.append(tuple(x, y + 1))\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n    return text\n\ntext = 'This is a test string with spaces'\nnew_text = replace_spaces(text)\nprint(new_text)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Split the string into words\n    words = text.split()\n    # Loop through each word and replace spaces with underscores\n    for i in range(len(words)):\n        if words[i].isspace():\n            words[i] = \"_\"\n        elif words[i].isupper():\n            words[i] = \"_\" + words[i]\n        else:\n            words[i] = words[i] + \"_\"\n    # Join the words back into a string\n    result = \" \".join(words)\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    This function takes a string as input and replaces all the spaces with an underscore and vice versa.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_indices = []\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_indices.append(index)\n    for index in reversed(zero_indices):\n        del num_list[index]\n        del zero_indices[zero_indices.index(index)]\n    return num_list + zero_indices"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            # Move zero to end of list\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            # Shrink list by one\n            num_list.pop()\n        else:\n            # Move non-zero element to next index\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            num_list = num_list[:len(num_list)-1]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Initialize two pointers, one for the beginning of the list and one for the end\n    i = 0\n    j = len(num_list) - 1\n\n    # Loop through the list until the two pointers meet\n    while i < j:\n        # If the element at the beginning of the list is zero, swap it with the element at the end\n        if num_list[i] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            j -= 1\n        else:\n            i += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    for i in range(len(new_list), len(num_list)):\n        new_list.append(0)\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    for j in range(len(num_list)-1, zero_index, -1):\n        num_list[j+1] = num_list[j]\n    for k in range(zero_index, len(num_list)):\n        num_list[k] = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers, one for the current index and the other for the last non-zero index\n    current = 0\n    last_nonzero = 0\n\n    # loop through the list\n    for i in range(len(num_list)):\n        # if the current index is not equal to the last non-zero index and the current number is not zero, increment the last non-zero index\n        if i!= last_nonzero and num_list[i]!= 0:\n            last_nonzero += 1\n            # move the non-zero number to the current index\n            num_list[current], num_list[i] = num_list[i], num_list[current]\n        else:\n            # if the current number is zero, increment the current index\n            current += 1\n\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a list to store non-zero numbers\n    non_zero_list = []\n    # Iterate through the input list\n    for num in num_list:\n        # If the number is non-zero, append it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n    # Iterate through the non-zero list and move all zeroes to the end\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    # Return the modified list with zeroes moved to the end\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            break\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            for j in range(i-zero_count, -1, -1):\n                num_list[j+1] = num_list[j]\n            num_list[0] = 0\n        else:\n            break\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store the non-zero values\n    non_zero_list = []\n    \n    # iterate through the given list\n    for num in num_list:\n        # if the number is not zero, append it to the new list\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # insert the zeros at the end of the non-zero list\n    for i in range(len(non_zero_list)):\n        if non_zero_list[i] == 0:\n            non_zero_list.insert(i, 0)\n    \n    # return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    \n    for i in range(n):\n        xor_sum ^= arr[i]\n        xor_sum ^= arr[i+1]\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements in the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    # XOR of all pairs of elements in the list\n    pair_xor = 0\n    for i in range(n - 1):\n        pair_xor ^= arr[i] ^ arr[i+1]\n\n    return xor_sum + pair_xor"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list.\n    lst = list(iterable)\n\n    # Build a max heap.\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, i, len(lst))\n\n    # Extract elements from the heap.\n    for i in range(len(lst) - 1, 0, -1):\n        # Swap the root with the last element.\n        lst[i], lst[0] = lst[0], lst[i]\n        # Decrease the size of the heap.\n        heapify(lst, 0, i)\n\n    return lst\n\ndef heapify(lst, index, size):\n    '''\n    Helper function for building a max heap.\n    '''\n    left = 2 * index + 1\n    right = 2 * index + 2\n    max_index = index\n\n    # If the left child is greater, select that as the new maximum.\n    if left < size and lst[left] > lst[max_index]:\n        max_index = left\n\n    # If the right child is greater, select that as the new maximum.\n    if right < size and lst[right] > lst[max_index]:\n        max_index = right\n\n    # If the maximum index is not the current index, swap them.\n    if max_index!= index:\n        lst[index], lst[max_index] = lst[max_index], lst[index]\n        heapify(lst, max_index, size)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a given list using the heap sort algorithm.\n    '''\n    # Create a max heap from the input iterable\n    hq.heapify(iterable)\n\n    # Sort the heap using heap sort\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heappop(iterable)\n        hq.heappush(iterable, iterable[i])\n\n    # Return the sorted list\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    arr = list(iterable)\n    heap_size = len(arr)\n    for i in range(heap_size//2 - 1, -1, -1):\n        hq.heapify(arr, i, heap_size)\n\n    for i in range(heap_size-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        hq.heapify(arr, 0, i)\n\n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the Heap Sort algorithm.\n    '''\n    # Create a max heap from the iterable\n    hq.heapify(iterable)\n    # Build the max heap from the iterable\n    while len(iterable) > 1:\n        iterable.pop()\n        hq.heappush(iterable, max(iterable))\n    # Return the sorted list\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a heap\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    \n    # Sort the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    # Build the max heap\n    hq.heapify(lst)\n    # Extract and return elements from the max heap\n    while lst:\n        yield lst.pop()"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap from the list\n    hq.heapify(iterable)\n    # extract elements from the heap and add them to a new list\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    # Convert the input list into a heap data structure\n    heap = [0] * len(iterable)\n    for i, value in enumerate(iterable):\n        heap[i] = value\n        hq.heapify(heap)\n\n    # Extract the elements in sorted order\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # check for profit and loss\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit of\", profit, \"and a loss of\", loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    if actual_cost < sale_amount:\n        print(\"The given amount does not have any profit and no loss\")\n    elif actual_cost == sale_amount:\n        print(\"The given amount has a profit of zero and a loss of zero\")\n    else:\n        profit = sale_amount - actual_cost\n        loss = actual_cost\n        print(\"The given amount has a profit of\", profit, \"and a loss of\", loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check whether profit and loss are zero or not\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit >= 0 and sale_amount > 0:\n        return False\n    elif profit < 0 and sale_amount >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check whether the profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    elif actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n    actual_cost (float): actual cost of the sale\n    sale_amount (float): amount to be sold\n\n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return 'No profit and no loss'\n    elif actual_cost == sale_amount:\n        return 'No profit'\n    else:\n        return 'No loss'\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    if t < 0 or v < 0:\n        return None\n    \n    # Calculate the formula for wind chill index\n    wind_chill_formula = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v)\n\n    # Round the wind chill index to the next integer\n    wind_chill_rounded = math.ceil(wind_chill_formula)\n\n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): the wind velocity in km/h\n    t (float): the temperature in celsius\n\n    Returns:\n    int: the wind chill index rounded to the next integer\n    \"\"\"\n\n    # convert temperature to Fahrenheit\n    t = (t * 1.8) + 32\n\n    # calculate the heat capacity ratio\n    cp = 1004.6  # J/kg/K\n\n    # calculate the Cp at the given temperature\n    Cp = cp * (t - 273.15)\n\n    # calculate the Cp at 2m\n    Cp_2m = cp * (t - 273.15) * (2 / 3)\n\n    # calculate the specific humidity\n    q = v / 10  # convert km/h to m/s\n\n    # calculate the Cp at the given wind speed\n    Cp_wind = Cp / math.pow(q, 0.6)\n\n    # calculate the wind chill index\n    wc = 35.74 + (0.6215 * Cp_2m) - (35.75 * Cp_wind) + (0.4275 * Cp_wind ** 2)\n\n    # round the wind chill index to the nearest integer\n    wc = int(wc + 0.5)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0 or t <= 0:\n        return None\n    fc = 1.8 * math.log10(t) + 32.17\n    if v < 2:\n        return fc\n    return round(max(fc - ((2.5 * v * 1.15) / (237.7 + v)), 0))\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v >= 10:\n        wci = 50\n    elif v < 10 and v >= 5:\n        wci = (v * 1.11) + (0.83 * t)\n    elif v < 5 and v >= 3:\n        wci = (v * 1.11) + (0.83 * t) + 21.67\n    else:\n        wci = (v * 1.11) + (0.83 * t) + 21.67 + (0.094 * t * t)\n\n    wci = math.ceil(wci)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    T = t - 273.15  # Convert Celsius to Kelvin\n    T_min = -11.37 * T**2 + 0.3965 * T**3  # Calculate minimum temperature\n    T_max = 13.12 - 0.6215 * T + 11.37 * T**2 - 0.3965 * T**3  # Calculate maximum temperature\n    w = v * math.sin(math.radians(31.8))  # Calculate the direction of the wind (assuming the wind is coming from a 31.8 degree N-W wind)\n    WCI = 13.12 + 0.6215 * T - 11.37 * T**2 + 0.3965 * T**3  # Calculate the WCI\n    if w > 0:\n        if T_min < 22.5:\n            return round(WCI)\n        else:\n            return round(T_min)\n    else:\n        if T_max > -22.5:\n            return round(WCI)\n        else:\n            return round(T_max)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the temperature from Celsius to Fahrenheit\n    t = (t * 9/5) + 32\n    # Calculate the dew point temperature\n    dp = (t - 45.0) * (1 + 0.0065 * (t - 45.0))\n    # Calculate the heat index\n    hi = t - 0.0001 * (dp - t) - 0.0000001 * (dp - t)**2\n    # Calculate the wind chill index\n    wci = (13.12 + 0.6215 * hi) * (1 - 0.14 * math.exp(-(hi - 32) / 11.38))\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # Calculate the temperature in Kelvin\n    k = t + 273.15\n    # Calculate the dew point temperature in Kelvin\n    dp = math.fsum([0.6219716 - (0.00002375 * k) + (0.00075516 * k**2) + (0.00173006 * k**3) - (0.0000000082 * k**4) - (0.00000248 * k**5), 0.611111111111111 - 0.000333333333333333 * k + 0.00001388888888889 * k**2 + 0.0000001984126984127 * k**3 - 0.0000000000000004 * k**4])\n    # Calculate the actual dew point temperature in Kelvin\n    a = k - dp\n    # Calculate the wind chill index\n    wc = int(math.ceil(math.sqrt(10.1 * v**2 * math.log(a / k) / (35.75 + 0.6219716 * a / k + 173.124 * v**2))))\n    # Return the wind chill index rounded to the next integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v * 1.60934 # convert km/h to m/s\n    # calculate the dew point temperature\n    dp = 243.04 * (math.exp((17.625 * t) / (t + 243.04)) - math.exp((17.625 * t) / (t + 237.3)))\n    # calculate the wind chill index\n    wc = 35.74 + (0.6215 * w) - (35.75 * (dp - t)) + (0.4275 * t * (dp - t))\n    # round the wind chill index to the nearest integer\n    wc = round(wc)\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature from celsius to fahrenheit\n    t = (t * 9/5) + 32\n    \n    # calculate the wind chill index using the formula\n    wc = 35.74 + 0.6215 * v + (0.4275 * t) - 35.75 * math.log(v) + 0.4 * t\n    \n    # round the wind chill index to the nearest integer\n    wc = math.ceil(wc)\n    \n    # return the wind chill index\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the absolute temperature difference\n    temp_diff = t - 273.15\n\n    # Calculate the heat index\n    heat_index = 8 * (v ** 0.16) + 131.1 * math.log(temp_diff) - 16.2 * temp_diff\n\n    # Calculate the wind chill index\n    w_chill = round(heat_index - 273.15)\n\n    return w_chill"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    lowercase_names = [name for name in sample_names if name[0].isupper()]\n    lengths = [len(name) for name in lowercase_names]\n    return sum(lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # remove names that start with a lowercase letter\n    sample_names = [name for name in sample_names if not name[0].islower()]\n    # sum the length of the remaining names\n    sum_length = sum([len(name) for name in sample_names])\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    \n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_names = [name for name in sample_names if name[0].isupper()]\n    total_length = sum(len(name) for name in lowercase_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper(): # check if the first letter of the name is uppercase\n            total_length += len(name) # add the length of the name to the total\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of lengths of names\n    length_sum = 0\n\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip the name and continue to the next iteration\n            continue\n        # otherwise, add the length of the name to the sum of lengths\n        else:\n            length_sum += len(name)\n\n    # return the sum of lengths of all names that do not start with a lowercase letter\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def is_lowercase(char):\n        '''\n        Helper function to check if a character is a lowercase letter.\n        '''\n        return char.islower()\n    \n    def remove_lowercase(name):\n        '''\n        Helper function to remove the first character of a name if it is a lowercase letter.\n        '''\n        if is_lowercase(name[0]):\n            return name[1:]\n        else:\n            return name\n    \n    def sum_lengths(names):\n        '''\n        Helper function to sum the length of all names in a list.\n        '''\n        return sum([len(remove_lowercase(name)) for name in names])\n    \n    return sum_lengths(sample_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    def remove_lower_case(name):\n        return name.isupper() and name[0].islower()\n\n    sum_length = 0\n    for name in sample_names:\n        if not remove_lower_case(name):\n            sum_length += len(name)\n\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile('\\((.*?)\\)')\n    match = pattern.search(items)\n    if match:\n        items = match.group(1)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^\\)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis from the string\n    items = re.sub(r'\\([^()]+\\)', '', items)\n    \n    # Return the string with parenthesis removed\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    result = re.findall(pattern, items)\n    return [x.strip() for x in result[0].split(',') if x.strip()]"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # define a pattern to match all the parenthesis and what is inbetween them\n    pattern = re.compile(r'\\(.*?\\)')\n\n    # split the string into words\n    words = items.split()\n\n    # iterate over each word and replace the matched pattern with an empty string\n    for i in range(len(words)):\n        words[i] = pattern.sub('', words[i])\n\n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Remove all parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the number of squares in the nth right triangle\n    squares = n * (n + 1) // 2\n    # Calculate the number of right triangles with n sides\n    triangles = n * (n - 1) // 2\n    # Calculate the number of right triangles with n+1 sides\n    triangles += n\n    # Calculate the number of nonagonal numbers\n    nonagonal = squares - triangles\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the sum variable\n    sum_nonagonal = 0\n    # Loop through the numbers from 1 to n\n    for i in range(1, n + 1):\n        # Calculate the sum of the squares of the numbers from 1 to i\n        sum_squares = sum(i ** 2 for j in range(1, i + 1))\n        # Add the sum of squares to the sum_nonagonal variable\n        sum_nonagonal += sum_squares\n    # Return the sum_nonagonal variable\n    return sum_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0: \n        return None \n    elif n == 1: \n        return 1 \n    else: \n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Define the limit for the loop\n    limit = n*(n+1) // 2\n    \n    # Initialize the sum variable\n    nonagonal_sum = 0\n    \n    # Loop through the even numbers up to the limit\n    for i in range(2, limit+1, 2):\n        nonagonal_sum += i\n        \n    return nonagonal_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Calculate the sum of the first n squares\n    sum_squares = sum([i ** 2 for i in range(1, n + 1)])\n\n    # Calculate the sum of the first n Catalan numbers\n    sum_catalan = sum([(-1) ** i / (2 * i - 1) for i in range(1, n + 1)])\n\n    # Calculate the difference between the two sums\n    return sum_squares - sum_catalan"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 0:\n        return None\n    \n    # Calculate the first nonagonal number\n    first_nonagonal = (1 + 8**(n+1)) // 2\n    \n    # Calculate the nth nonagonal number\n    nth_nonagonal = (1 + 8**(2*n)) // 2\n    \n    return nth_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 2:\n        return False\n    else:\n        return (n * (n - 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return 2*n - is_nonagonal(n-1)\n\nn = 7\nprint(\"The\", n, \"nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    prev_term = 1\n    term = 2\n    count = 0\n    \n    # Loop until we reach the nth nonagonal number\n    while count < n:\n        # Update the count and previous term\n        count += 1\n        prev_term = term\n        \n        # Calculate the next term\n        term = (prev_term ** 2) + 1\n    \n    # Return the previous term as the nth nonagonal number\n    return prev_term"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # calculate the sum of the squares of the first n natural numbers\n    squares = [i**2 for i in range(1, n+1)]\n    sum_squares = sum(squares)\n\n    # calculate the nth nonagonal number using the formula for nonagonal numbers\n    nonagonal = (n**2 - sum_squares + n) // 2\n\n    return nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Define regular expression pattern for wordz middle check\n    pattern = r\"(?<!\\w)(z)(?!\\w)\"\n\n    # Use re.search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # Return True if pattern is found, False otherwise\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[a-z]{1}[A-Za-z]+[a-z]{1}[A-Za-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b[zZ]\\w+[zZ]\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'\\b(?<![a-zA-Z])z(?![a-zA-Z])\\b'\n    return bool(re.search(regex, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove any non-alphabetic characters\n    cleaned_text = re.sub(r'[^a-zA-Z]+', '', text)\n    \n    # Find all the words in the cleaned text\n    words = cleaned_text.split()\n    \n    # Initialize a variable to store the middle word\n    middle_word = None\n    \n    # Iterate through the words and check if there's a 'z' in the middle\n    for i in range(len(words)):\n        if 'z' in words[i]:\n            # If there's a 'z' in the middle, set the middle_word variable to that word\n            middle_word = words[i]\n            \n            # Stop iterating through the words\n            break\n    \n    # Return the middle word, or an empty string if there's no middle word\n    return middle_word if middle_word else ''"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Remove all non-word characters from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Split the text into words\n    words = text.split()\n    # Initialize a boolean flag to keep track of whether 'z' is found at the start and end of the word\n    start_found = False\n    end_found = False\n    # Iterate through the words\n    for word in words:\n        # Check if 'z' is at the start of the word\n        if word.startswith('z'):\n            start_found = True\n        # Check if 'z' is at the end of the word\n        if word.endswith('z'):\n            end_found = True\n        # If 'z' is found at both the start and end of the word, return True\n        if start_found and end_found:\n            return True\n    # If 'z' is not found at either the start or end of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\w)z(?=\\w)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input) \n    if k > n: \n        print(\"Invalid position\") \n        return \n    left = 0 \n    right = k - 1 \n    while left < right: \n        input[left], input[right] = input[right], input[left] \n        left += 1 \n        right -= 1 \n    print(\"Array after reversing upto position\", k, \":\", input) "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    n = len(input)\n    for i in range(n-1, k-1, -1):\n        input[i], input[n-i-1] = input[n-i-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # checking if the input is an array\n    if type(input)!= list:\n        print(\"Input must be a list\")\n        return None\n\n    # checking if the position is a positive integer\n    if type(k)!= int or k < 0:\n        print(\"Position must be a positive integer\")\n        return None\n\n    # checking if the position is less than or equal to the length of the array\n    if k > len(input):\n        print(\"Position cannot be greater than the length of the array\")\n        return None\n\n    # reversing the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n\n    # returning the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the array \n    n = len(input) \n    # Swap the first and last k elements \n    for i in range(k): \n        input[i], input[n-1-i] = input[n-1-i], input[i] \n    # Reverse the remaining elements \n    for i in range(k, n): \n        input[i], input[n-1-i] = input[n-1-i], input[i] \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    n = len(input)\n    for i in range(k-1, -1, -1):\n        if i < k-1:\n            temp = input[i]\n            input[i] = input[k-1]\n            input[k-1] = temp\n        else:\n            break\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array 'input' and a position 'k'. The function reverses the array up to the given position and returns the reversed array.\n    '''\n    # Get the length of the array\n    n = len(input)\n    \n    # Check if the position is valid\n    if k > n or k < 0:\n        return \"Invalid position\"\n    \n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n-k+1):\n        left = i\n        right = i+k-1\n        while left < right:\n            temp = input[left]\n            input[left] = input[right]\n            input[right] = temp\n            left += 1\n            right -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 1 or k > len(input): \n        return \"Invalid position\"\n    else:\n        arr = input[0:k]\n        for i in range(k-1, len(input)-1, -1):\n            arr.append(input[i])\n        return arr"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k>n:\n        k=n\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = tuple(test_tup)\n    for key in test_dict:\n        new_tup = new_tup + (test_dict[key],)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += tuple(test_dict.items())\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup = (test_tup + (key, test_dict[key]),)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict}\n    new_tup = (*test_tup, new_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list\n    test_dict_list = list(test_dict.items())\n\n    # Create a new tuple by concatenating the original tuple and the dictionary as a list\n    new_tuple = test_tup + test_dict_list\n\n    return tuple(new_tuple)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0], test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a tuple and append it to the tuple\n    new_tup = test_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup + [test_dict])"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n\n    def helper(i, j, visited):\n        if i == N - 1 and j == N - 1:\n            return 0\n        if (i, j) in visited:\n            return visited[(i, j)]\n        visited[(i, j)] = 0\n\n        if i < N - 1:\n            visited[(i, j)] = max(visited[(i, j)], cost[i][j] + helper(i + 1, j, visited))\n        if j < N - 1:\n            visited[(i, j)] = max(visited[(i, j)], cost[i][j] + helper(i, j + 1, visited))\n\n        return visited[(i, j)]\n\n    return helper(0, 0, {})\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    \n    for i in range(N-1):\n        for j in range(N-1):\n            # Check for possible path\n            for k in range(2):\n                if k == 0:\n                    row, col = i, j+1\n                else:\n                    row, col = i+1, j\n                # Check if current cell is reachable\n                if 0 <= row < N and 0 <= col < N and cost[row][col] < cost[i][j]:\n                    # If yes, add current cost to path and calculate average\n                    total_cost = cost[i][j] + cost[row][col]\n                    avg = total_cost / (j-i+1)\n                    if avg > max_avg:\n                        max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Calculate the number of rows and columns in the matrix\n    n = len(cost)\n    \n    # Initialize variables to keep track of the maximum average and the cell that has the maximum average\n    max_avg = 0\n    max_cell = (0, 0)\n    \n    # Loop through each cell in the matrix\n    for i in range(n):\n        for j in range(n):\n            \n            # Calculate the total cost of the path starting from the current cell\n            total_cost = cost[i][j]\n            \n            # Loop through the neighboring cells to find the maximum average\n            for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                ni, nj = i + di, j + dj\n                \n                # Check if the neighbor is within the boundaries of the matrix\n                if 0 <= ni < n and 0 <= nj < n:\n                    \n                    # If the neighbor is the same as the current cell, skip it\n                    if ni == i and nj == j:\n                        continue\n                    \n                    # Calculate the average of the cost of the path starting from the neighbor and ending at the current cell\n                    neighbor_cost = cost[ni][nj] + total_cost\n                    neighbor_avg = neighbor_cost / (ni-i+1)\n                    \n                    # Update the maximum average if the neighbor has a higher average\n                    if neighbor_avg > max_avg:\n                        max_avg = neighbor_avg\n                        max_cell = (ni, nj)\n    \n    # Return the cell with the maximum average\n    return max_cell"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                avg = cost[i][j]\n            elif i == N-1:\n                avg = (cost[i][j] + cost[i][j-1]) / 2.0\n            elif j == N-1:\n                avg = (cost[i][j] + cost[i-1][j]) / 2.0\n            else:\n                avg = (cost[i][j] + cost[i-1][j] + cost[i][j-1] + cost[i-1][j-1]) / 4.0\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n\n    # Initialize variables for max average and current path\n    max_average = 0\n    current_path = 0\n    current_sum = 0\n    num_cells_visited = 0\n\n    # Iterate over all cells and compute the sum of the cost of the path\n    for i in range(N):\n        for j in range(N):\n            num_cells_visited += 1\n            if i == N-1 and j == N-1:\n                current_sum += cost[i][j]\n            else:\n                current_sum += cost[i][j] + min(cost[i+1][j], cost[i][j+1])\n\n            # Check if we have found a better path\n            if i == N-1 and j == N-1:\n                if current_sum > max_average:\n                    max_average = current_sum\n            elif current_sum > max_average:\n                current_path = num_cells_visited - 1\n                max_average = current_sum\n\n    # Return the maximum average\n    return max_average / current_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def findMaxAvg(matrix, current_row, current_col, visited, total_cost):\n        if current_row == len(matrix) - 1 and current_col == len(matrix[0]) - 1:\n            if total_cost > max_cost:\n                max_cost = total_cost\n            return\n        if current_row < len(matrix) and current_col < len(matrix[0]) and matrix[current_row][current_col] == 0:\n            matrix[current_row][current_col] = visited\n            total_cost += visited\n            findMaxAvg(matrix, current_row + 1, current_col, visited + 1, total_cost)\n            findMaxAvg(matrix, current_row, current_col + 1, visited + 1, total_cost)\n            matrix[current_row][current_col] = 0\n            total_cost -= visited\n\n    matrix = []\n    for i in range(len(cost)):\n        row = []\n        for j in range(len(cost[0])):\n            row.append(cost[i][j])\n        matrix.append(row)\n    max_cost = 0\n    for visited in range(1, 100001):\n        findMaxAvg(matrix, 0, 0, visited, 0)\n    return max_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n\n    # Initialize first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n\n    # Fill rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    # Find maximum average path\n    max_avg = max(dp[N-1])\n    for i in range(N-1, -1, -1):\n        for j in range(N-1, -1, -1):\n            if dp[i][j] == max_avg:\n                avg_path = []\n                while i!= -1 and j!= -1:\n                    avg_path.append((i, j))\n                    i -= 1\n                    j -= 1\n                return sum(cost[x[0]][x[1]] for x in avg_path) / len(avg_path)\n\n    # If no path with maximum average is found, return 0\n    return 0"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    visited = [[False]*N for _ in range(N)]\n    path = [[0,0]]\n    \n    for i in range(1,N):\n        for j in range(1,N):\n            if not visited[i-1][j] and not visited[i][j-1]:\n                visited[i][j] = True\n                visited[i-1][j] = visited[i][j-1] = True\n                cost_sum = cost[i][j] + cost[i-1][j] + cost[i][j-1]\n                visited[i][j] = visited[i-1][j] = visited[i][j-1] = False\n                path.append([i,j])\n                avg = cost_sum / 3\n                if avg > max_avg:\n                    max_avg = avg\n                visited[i][j] = visited[i-1][j] = visited[i][j-1] = False\n                path.pop()\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = 0\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = 0\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i-1][j] > cost[i][j-1]:\n                dp[i][j] = dp[i-1][j] + cost[i][j] - cost[i-1][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i-1][j] - cost[i][j-1]\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    return max_avg / (N * N)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            result[name] = info\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    Counts the indices of elements in nums1 that are equal to the corresponding element in nums2.\n\n    Args:\n    nums1 (list): a list of numbers\n    nums2 (list): a list of numbers of the same length as nums1\n\n    Returns:\n    (int, int): a tuple of two integers representing the indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    This function will count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit)\n        sum += base_sum ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum_of_digits = 0\n    for i in range(1, power+1):\n        sum_of_digits += int(base) % 10 ** i\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        if power % 10 == 0:\n            result += base\n        power //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(1, power+1):\n        digit = base % 10\n        total += digit\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    num = base\n    while power > 0:\n        total += num % 10\n        power -= 1\n        num //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    total_sum = 0\n    for digit in base_str:\n        total_sum += int(digit) ** power\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and split it into a list of digits\n    digits = list(str(base))\n    \n    # initialize the sum of digits to 0\n    sum_of_digits = 0\n    \n    # loop through each digit of the base\n    for digit in digits:\n        # convert the digit to an integer and add it to the sum of digits\n        sum_of_digits += int(digit) ** power\n    \n    # return the sum of digits raised to the specified power\n    return sum_of_digits ** (1/power)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string and get list of digits\n    digits = list(str(base))\n    # calculate sum of digits to the power\n    result = sum(int(digit)**power for digit in digits)\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string\n    base_str = str(base)\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert digit to int\n        digit_int = int(digit)\n\n        # calculate the sum of digits to the power\n        sum += digit_int ** power\n\n    # return the final sum\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts the values between quotation marks \" \" of the string.\n    '''\n    quotation = re.findall(r'\"([^\"]*)\"', text1)\n    return quotation"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define regex pattern to match quotation marks\n    pattern = r'(?<!\\\\)\"[^\"]*\"'\n\n    # Use regex to find all occurrences of pattern in text1\n    matches = re.findall(pattern, text1)\n\n    # Return the values between quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Remove any leading/trailing spaces from the string\n    text1 = text1.strip()\n    \n    # Use regular expression to extract values between quotation marks\n    result = re.findall(r'(?<=\\\")(.*?)(?=\\\")', text1)\n    \n    # Return the list of extracted values\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    # define a regular expression pattern to extract values between quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n    # find all the occurrences of the pattern in the given string\n    matches = pattern.findall(text1)\n    # iterate through the matches and extract the values between quotation marks\n    extracted_values = []\n    for match in matches:\n        # remove any leading and trailing whitespace\n        value = match.strip()\n        # if the value is not empty, add it to the extracted_values list\n        if value:\n            extracted_values.append(value)\n    # return the extracted_values list\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Define the regular expression pattern for matching quotation marks\n    pattern = r'\"(.*?)\"'\n\n    # Use re.findall() function to extract all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regular expression to extract the values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    # return the extracted values as a list\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n\n    Parameters:\n    text1 (str): String from which the quotation marks need to be extracted.\n\n    Returns:\n    list: List of strings that are extracted from the text1.\n\n    \"\"\"\n    pattern = r'\"[^\"]*\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = tuple()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    #initialize an empty list to store the result\n    result = []\n    \n    #iterate over the tuple, starting from index 1 (because the first element is already multiplied)\n    for i in range(1, len(test_tup)):\n        #multiply the current element with the next element and append the result to the result list\n        result.append(test_tup[i] * test_tup[i+1])\n    \n    #return the result tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # create a new empty tuple to hold the result\n    result = ()\n    # iterate over the input tuple\n    for i in range(len(test_tup)-1):\n        # add the product of the current element and the next element to the result tuple\n        result += (test_tup[i] * test_tup[i+1],)\n    # add the last element to the result tuple\n    result += (test_tup[-1],)\n    # return the final result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([t_i*t_i for t_i in test_tup])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * test_tup[i+1] for i, x in enumerate(test_tup)])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0],) * N\n    for i in range(1, N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Initialize a variable to hold the result list\n    result = []\n    # Loop through the two input lists and add their elements together\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Initialize the sum list with the first list\n    sum_lst = lst1\n    # Loop through the second list\n    for num in lst2:\n        # Add the current number to the sum list\n        sum_lst.append(num)\n    return sum_lst"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Combine the two lists into a single list\n    combined_list = lst1 + lst2\n    # Return the sum of the elements in the combined list\n    return combined_list"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the sum\n    result = []\n    # Loop through the first list\n    for i in range(len(lst1)):\n        # Add the value of the first list element and the value of the corresponding element in the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def consecutive_duplicates(nums):\n    # Group the list of numbers by their corresponding value\n    grouped = groupby(sorted(nums))\n\n    # Iterate over the grouped numbers and remove consecutive duplicates\n    for key, group in grouped:\n        # If the key is the same as the previous group, check the next element\n        if key == nums[key-1]:\n            group.pop(0)\n\n    # Return the new list of unique numbers\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(enumerate(nums)):\n        if key > 0 and group[0][1] == group[1][1]:\n            result.extend([group[0][0] - 1])\n        else:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    for item, group in groupby(nums):\n        if not (item == group[-1]).any():\n            yield item"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Group the list into tuples with consecutive numbers\n    grouped = groupby(nums)\n\n    # Initialize a new list to store the non-consecutive duplicates\n    result = []\n\n    # Iterate through the grouped tuples and add the first element of each group to the result list\n    for key, group in grouped:\n        result.extend(group)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for _, group in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Group the list by consecutive numbers\n    group = groupby(nums)\n\n    # Remove the consecutive duplicates by creating a new list\n    return list(map(list, group))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Convert the list to a set to get only unique elements\n    unique_nums = set(nums)\n\n    # Create a new list to store the consecutive duplicates\n    consecutive_duplicates = []\n\n    # Iterate through the set of unique elements\n    for num, group in groupby(unique_nums):\n        # Check if the next element in the group is the same\n        if next(group, None) == num:\n            # If so, add the current element to the consecutive duplicates list\n            consecutive_duplicates.append(num)\n\n    # Return the list of consecutive duplicates\n    return consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [next(g) for k, g in groupby(sorted(nums))]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone using radius and height\n    s = math.pi * r**2 * h / 3\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    # Find the volume of the cone\n    V = math.pi * (r ** 2)\n    # Find the surface area of a cone\n    A = math.pi * r ** 2\n    # Calculate the lateral surface area of the cone\n    LSA = 2 * h * A / V\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (2*math.pi*r*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Compute the lateral surface area of the cone using the formula:\n    #    S = pi * r^2 * h\n    S = math.pi * r**2 * h\n    \n    return S"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius r and height h of a cone, and returns the lateral surface area of the cone.\n    '''\n\n    # Calculate the lateral surface area of the cone using the formula:\n    #   lateral surface area = pi * r^2 * h / 3\n    lateral_surface_area = math.pi * r**2 * h / 3\n\n    # Return the lateral surface area of the cone:\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #calculate the lateral surface area of a cone\n    surface_area = math.pi * r * (h**2)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the volume of the cone\n    V = math.pi * (r**2) * (h/3)\n\n    # Calculate the lateral surface area of the cone\n    A = 2 * (V * h) / 3\n\n    # Return the lateral surface area of the cone\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi * r**2 * h) / 3\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,.]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern\n    pattern = re.compile(r'([,.])')\n    # Use the pattern to replace all occurrences of spaces, commas, or dots with a colon\n    result = pattern.sub(':', text)\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'([,\\.])'\n    text = re.sub(pattern, r':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    new_pattern = r':'\n    text = re.sub(pattern, new_pattern, text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regex to replace spaces and commas with a colon\n    text = re.sub(r'\\s+|[,.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regular expression pattern\n    pattern = r'\\s+|,|\\.'\n    # replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'\\s', ':', text) # replace all spaces with colons\n    text = re.sub(r'[^\\w\\s]', '', text) # remove all special characters except letters, numbers, and spaces\n    text = re.sub(r'\\d+', '', text) # remove all numbers\n    text = re.sub(r'\\s+','', text) # replace multiple spaces with single spaces\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[^a-zA-Z0-9\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match spaces, commas, or dots\n    pattern = re.compile(r'[\\s.,]')\n\n    # Replace all occurrences of the pattern with a colon\n    text = pattern.sub(':', text)\n\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # binary search to find first occurrence\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # check if x is at the left or right of mid\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Loop through the array and find the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n\n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first occurrence of x in A using binary search\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If x was not found in A, return -1\n    return index if index!= -1 else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the left and right pointers to the first and last indices of the array, respectively.\n    left = 0\n    right = len(A) - 1\n\n    # Perform binary search to find the index of the first occurrence of x.\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            return mid\n\n        elif A[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    # If x is not found, return -1.\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x as input, and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n\n    while i < n and A[i] < x:\n        i += 1\n\n    if i == n:\n        return -1\n    elif A[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # Found the first occurrence\n            left = mid + 1\n        elif A[mid] < x:\n            # Search in the right half\n            left = mid + 1\n        else:\n            # Search in the left half\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n+1)\n\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + arr[i-1]\n\n    result = 0\n    for i in range(n):\n        if i == 0 or i == n-1:\n            result += dp[i+1]\n        else:\n            result += dp[i+1] - dp[i]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum of products of all subarrays to zero\n    sum_products = 0\n    # Initialize the product of the first element of the list to 1\n    product_prev = 1\n    # Initialize the list of products of subarrays to 1\n    products = [1]*n\n    # Loop through all possible sublists of the given list\n    for i in range(n):\n        # Loop through all possible starting indices of the sublist\n        for j in range(i, n):\n            # Calculate the product of the sublist and add it to the sum of products\n            sum_products += products[j]*product_prev\n            # Update the product of the previous element to be the product of the current element\n            product_prev = products[j]\n            # Update the product of the current element to be the product of the previous element times the current element\n            products[j] = product_prev*arr[j]\n    # Return the sum of products of all sublists\n    return sum_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize a dictionary to store the products of subarrays\n    subarray_products = {}\n    # Initialize the sum of products of subarrays to 0\n    subarray_product_sum = 0\n    # Initialize an empty list to store the sum of products of subarrays\n    subarray_product_sum_list = []\n    # Initialize the maximum value of the sum of products of subarrays to 0\n    max_subarray_product_sum = 0\n    # Loop through each element in the list\n    for i in range(n):\n        # Initialize a variable to store the current subarray sum\n        subarray_sum = 0\n        # Loop through each element in the list\n        for j in range(i, n):\n            # Add the current element to the subarray sum\n            subarray_sum += arr[j]\n            # Check if the current subarray sum is already in the dictionary\n            if subarray_sum in subarray_products:\n                # If it is, add the current subarray product to the sum of products of subarrays\n                subarray_product_sum += subarray_products[subarray_sum]\n                # If the sum of products of subarrays is greater than the maximum value, update the maximum value\n                if subarray_product_sum > max_subarray_product_sum:\n                    max_subarray_product_sum = subarray_product_sum\n            else:\n                # If it is not, add the current subarray product to the dictionary and the sum of products of subarrays\n                subarray_products[subarray_sum] = arr[j]\n                subarray_product_sum += arr[j]\n        # Add the current sum of products of subarrays to the list\n        subarray_product_sum_list.append(subarray_product_sum)\n    # Return the maximum value of the sum of products of subarrays\n    return max_subarray_product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_len = max(1, n // 3)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    max_prod = float('-inf')\n    for length in range(1, max_len + 1):\n        for start in range(n - length + 1):\n            end = start + length\n            if end == n:\n                continue\n            subarray_sum = prefix_sum[end] - prefix_sum[start]\n            subarray_prod = 1\n            for i in range(start, end):\n                subarray_prod *= arr[i]\n            if subarray_sum >= 0:\n                max_prod = max(max_prod, subarray_prod)\n    return max_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    # Calculate the sum of all elements in the list\n    total_sum = sum(arr)\n    # Initialize a list to store products of sublists\n    subarray_products = []\n    # Initialize two variables to keep track of the starting and ending index of the subarray\n    start = 0\n    end = 0\n    # Iterate through the list and calculate the product of the subarray between start and end\n    for i in range(len(arr)):\n        # Calculate the product of the current subarray and add it to the subarray_products list\n        subarray_products.append(total_sum - (end * arr[i]))\n        # Update the starting and ending index of the subarray for the next iteration\n        start = end\n        end = i\n        # If the current index is the last index in the list, calculate the product of the remaining subarray\n        if i == len(arr) - 1:\n            subarray_products.append(total_sum - (end * arr[i]))\n    # Return the sum of all products in the subarray_products list\n    return sum(subarray_products)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    MOD = 10**9 + 7\n    \n    dp = [[0]*(n+1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[0][i] = 1\n    for i in range(1,n+1):\n        for j in range(i,n+1):\n            if j-i+1 > 2:\n                dp[i][j] = (dp[i][j] + dp[i][j-1])%MOD\n            for k in range(i,j):\n                dp[i][j] = (dp[i][j] + (arr[i-1]*arr[k]*arr[j])%MOD*dp[k+1][j])%MOD\n                \n    return sum(dp[1][n])"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod_arr = [1] * n\n    for i in range(1, n):\n        prod_arr[i] = prod_arr[i-1] * arr[i-1]\n\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += prod_arr[j] * prod_arr[n-1-j]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    product = 1\n    max_product = 1\n\n    # Calculate maximum product subarray\n    for i in range(n):\n        product *= arr[i]\n        if product > max_product:\n            max_product = product\n\n    # Calculate sum of products of subarrays\n    subarray_sum = 0\n    for i in range(n):\n        subarray_sum += arr[i] * max_product\n\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + arr[i-1] * dp[i-2]\n\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            total_sum += arr[j-1] * dp[j]\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n        result += prod\n        if i > 0:\n            prod *= arr[i-1]\n        result -= prod\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = (n & 1) << 31\n    last_bit = (n & (1 << 31)) >> 31\n    n = (n & (1 << 30)) | (n & (1 << 29))\n    n = (n & (1 << 28)) | (n & (1 << 27))\n    n = (n & (1 << 26)) | (n & (1 << 25))\n    n = (n & (1 << 24)) | (n & (1 << 23))\n    n = (n & (1 << 22)) | (n & (1 << 21))\n    n = (n & (1 << 20)) | (n & (1 << 19))\n    n = (n & (1 << 18)) | (n & (1 << 17))\n    n = (n & (1 << 16)) | (n & (1 << 15))\n    n = (n & (1 << 14)) | (n & (1 << 13))\n    n = (n & (1 << 12)) | (n & (1 << 11))\n    n = (n & (1 << 10)) | (n & (1 << 9))\n    n = (n & (1 << 8)) | (n & (1 << 7))\n    n = (n & (1 << 6)) | (n & (1 << 5))\n    n = (n & (1 << 4)) | (n & (1 << 3))\n    n = (n & (1 << 2)) | (n & (1 << 1))\n    n = (n & (1 << 0)) | (n & (1 << 29))\n    n = (n & (1 << 30)) | (n & (1 << 31))\n    n = (n & (1 << 30)) | (n & (1 << 31))\n    return (n & (1 << 29)) | (n & (1 << 30)) | first_bit | last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # create an empty binary string for storing the middle bits\n    middle_bits = \"\"\n    \n    # iterate through the bits of the number\n    for i in range(len(bin(n)) - 2):\n        # if the current bit is 1, toggle it to 0 and add it to the middle_bits string\n        if bin(n)[i] == \"1\":\n            middle_bits += \"0\"\n        else:\n            middle_bits += \"1\"\n    \n    # convert the middle_bits string to an integer and return it\n    return int(middle_bits, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (2**32-1) >> 31\n    \n    # Toggle the middle bits of the number\n    middle_bits = (n & ~(1 | (2**32-1))) & ~(1 | first_bit | last_bit)\n    \n    # Set the first and last bits of the middle bits\n    middle_bits |= (first_bit << 31) | (last_bit >> 1)\n    \n    # Return the middle bits of the number\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Extract first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (2**n-1)\n\n    # Toggle middle bits\n    middle_bits = 0\n    for i in range(n-2):\n        middle_bits |= 1 << i\n\n    # Combine middle bits with first and last bits\n    result = first_bit ^ middle_bits ^ last_bit\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # Convert the number to a string\n    s = str(n)\n\n    # Extract the first and last bits and convert them to integers\n    first = int(s[0], 2)\n    last = int(s[-1], 2)\n\n    # Toggle the middle bits (excluding the first and last bits)\n    middle_bits = 0\n    for i in range(len(s) - 2):\n        if s[i] == '1':\n            middle_bits |= 1 << (len(s) - 2 - i)\n\n    # Combine the first and last bits with the middle bits\n    result = first | middle_bits | last\n\n    # Convert the result back to a number and return it\n    return int(result, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    This function toggles bits of the number except the first and the last bit. \n    '''\n    mask = 0b11111110  # bit mask to exclude the first and last bits\n\n    # XOR the bits of the number with the mask to exclude the first and last bits\n    n = n ^ mask\n\n    # XOR the result with the bits of the number again to toggle the bits\n    n = n ^ n\n\n    # XOR the result with the mask again to toggle the first and last bits\n    n = n ^ mask\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes a number as input and returns a new number with middle bits toggled.\n    \"\"\"\n    # get the binary representation of the input number\n    binary = bin(n)[2:]\n    # get the length of the binary representation of the input number\n    length = len(binary)\n    # get the middle position of the binary representation\n    middle = length // 2\n    # extract the first and last bits of the binary representation\n    first_bit = binary[0]\n    last_bit = binary[length-1]\n    # create a string with the first and last bits as '0' and the rest as '1'\n    binary_string = first_bit + '0' * middle + last_bit\n    # convert the binary string to an integer\n    binary_integer = int(binary_string, 2)\n    # return the new number with middle bits toggled\n    return binary_integer"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    This function takes an integer n as input and returns the integer with middle bits toggled.\n    \"\"\"\n    first_bit = (n & 1) ^ 1\n    last_bit = (n & (2 ** 31)) ^ 2 ** 31\n    middle_bits = n ^ first_bit ^ last_bit\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Find the index of the last set bit\n    last_set_bit = n.bit_length() - 1\n    \n    # Find the index of the first set bit\n    first_set_bit = n.bit_length() - 1 - n.bit_length().bit_count()\n    \n    # Toggle the bits except the first and last bit\n    n = (n ^ ((1 << last_set_bit) - 1)) ^ ((1 << first_set_bit) - 1)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # First bit should be set to 0 and last bit should be set to 0\n    n = n & 0b111111111111111111111111111111111111110 \n    \n    # 1's Complement of the number\n    n = (~n) + 1\n    \n    # Left shift by 1 and subtract the number from itself \n    n = n << 1 - n\n    \n    # Add 1 to the result to set the middle bit to 1\n    n = n + 1\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = left + (right - left) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return index\n    elif a[index-1] < x:\n        return index\n    else:\n        return bisect.bisect_left(a[:index], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i-1]!= x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    # Use regular expression to match the string against the given pattern\n    match = re.match(regex, string)\n\n    # If the match is not None, the string starts with a vowel\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(pattern, string)\n    \n    if match:\n        print(\"The string is starting with a vowel.\")\n    else:\n        print(\"The string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match: \n        return True \n    else: \n        return False "
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (1 / n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # base case\n    if n == 1:\n        return 1\n\n    # recursive case\n    return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 1\n    else:\n        # calculate the geometric sum of n-1\n        result = 1 / geometric_sum(n - 1)\n        return result"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n\n    elif n > 1:\n        return (n * geometric_sum(n-1))\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n\n    def triangular_number(n):\n        '''\n        This function returns the n-th triangular number using dynamic programming.\n        '''\n        if n == 1:\n            return 1\n        else:\n            return triangular_number(n-1) + n - 1\n\n    def triangular_digits(n):\n        '''\n        This function returns the number of digits in the nth triangular number using dynamic programming.\n        '''\n        if n == 1:\n            return 1\n        else:\n            return triangular_digits(n-1) + 1\n\n    # Find the first triangular number with n digits\n    first_triangular = triangular_number(n)\n    first_triangular_digits = triangular_digits(n)\n\n    # Find the last triangular number with n digits\n    last_triangular = triangular_number(n)\n    last_triangular_digits = triangular_digits(n)\n    while True:\n        last_triangular += n - 1\n        last_triangular_digits = triangular_digits(last_triangular)\n        if last_triangular_digits == n:\n            break\n\n    # Find the index of the smallest triangular number with n digits\n    index = math.floor((last_triangular - first_triangular) / (n - 1))\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize variables\n    max_num = 10 ** (n - 1)\n    index = 0\n    triangular_num = 0\n    \n    # loop through numbers from 1 to max_num\n    while triangular_num <= max_num:\n        index += 1\n        triangular_num = int(str(triangular_num) + str(triangular_num))\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function finds the index of smallest triangular number with n digits.\n    '''\n    # initialize the sum of digits of the smallest triangular number with n digits\n    count = 0\n    # initialize the sum of digits of the largest triangular number with n digits\n    max_count = 0\n    # loop through all the possible triangular numbers with n digits\n    for i in range(1, n + 1):\n        # initialize the current triangular number with i digits\n        current_num = 0\n        # loop through all the digits of the current triangular number\n        for j in range(i):\n            # add the next digit to the current triangular number\n            current_num += j + 1\n        # add the sum of digits of the current triangular number to the count\n        count += current_num\n        # check if the sum of digits of the current triangular number is greater than max_count\n        if count > max_count:\n            # update max_count\n            max_count = count\n    # return the index of the smallest triangular number with n digits\n    return max_count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize the smallest triangular number with n digits to 0\n    smallest = 0\n\n    # calculate the smallest triangular number with n digits\n    for i in range(1, n+1):\n        smallest = smallest + int(math.pow(5, i-1))\n\n    # find the index of the smallest triangular number with n digits\n    index = 0\n    while int(math.pow(5, index)) <= smallest:\n        index = index + 1\n\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Function to check if a number is a triangular number \n    def is_triangular(num): \n        return math.sqrt(5*num+1) == math.floor(math.sqrt(5*num+1))\n\n    # Function to find the smallest triangular number with n digits \n    def find_smallest_triangular(n): \n        triangular_numbers = []\n        for i in range(1, 10**n): \n            triangular_numbers.append(i**2)\n\n        smallest = 10**(n-1)\n        smallest_index = 0\n        for i in range(len(triangular_numbers)): \n            if triangular_numbers[i] < smallest and is_triangular(triangular_numbers[i]): \n                smallest = triangular_numbers[i] \n                smallest_index = i\n\n        return smallest_index\n\n    # Find the smallest triangular number with n digits \n    n = 4\n    print(\"Index of the smallest triangular number with\", n, \"digits is:\", find_smallest_triangular(n))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    t = int(math.factorial(5*n))\n    tri_no = 1\n    count = 1\n    while tri_no < t:\n        tri_no = tri_no*10 + count\n        count += 1\n    return count - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Initialize variables \n    min_triangular = math.pow(10, n-1) \n    triangular_index = 1\n    \n    while True: \n        triangular_num = triangular_index * (triangular_index + 1) // 2 \n        triangular_digits = len(str(triangular_num)) \n        if triangular_digits == n: \n            if triangular_num < min_triangular: \n                min_triangular = triangular_num \n            triangular_index += 1\n        else: \n            break\n    \n    return triangular_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n and returns the index of the smallest triangular number with n digits.\n\n    \"\"\"\n    # finding the smallest triangular number with n digits\n    smallest_triangular = int(math.ceil(math.pow(10, n-1)) * math.log(math.pow(10, n))/math.log(math.log(10)))\n\n    # finding the smallest triangular number with n digits by using recursion\n    def smallest_triangular_recursive(n):\n        if n == 1:\n            return 10\n        else:\n            return smallest_triangular_recursive(n-1) + smallest_triangular_recursive(n-1)\n\n    index = smallest_triangular - smallest_triangular_recursive(n-1)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find number of digits in n\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    \n    # base case for when n = 0\n    if n == 0:\n        return 0\n    \n    # find smallest triangular number with n digits\n    i = 1\n    while True:\n        if count == n:\n            return i\n        \n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n\n    # Compute the sum of 2^(n-1)\n    sum_2_n_minus_1 = 2**n - 1\n\n    # Compute the sum of n^3/2\n    sum_n_3_2 = n*n*n / 2\n\n    # Compute the sum of the digits of sum_2_n_minus_1\n    sum_digits = sum(int(digit) for digit in str(sum_2_n_minus_1))\n\n    # Compute the index of the smallest triangular number with n digits\n    index = math.ceil(sum_n_3_2 / sum_digits)\n\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(len(test_tup)):\n        result[i] = test_tup[i]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input should be a tuple\")\n\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    my_dict = {}\n    # Loop through the tuple\n    for i in range(len(test_tup)-1):\n        # Add the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dictionary = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dictionary[key] = value\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"Tuple should have an even number of elements\")\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_tup = {}\n    for i in range(0, len(test_tup)-1, 2):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(len(test_tup) // 2):\n        dict_obj[test_tup[2 * i]] = test_tup[2 * i + 1]\n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Find the first character of the string\n    first_char = s[0]\n    # Loop through the rest of the string\n    for char in s[1:]:\n        # If the character is not the same as the first character, return False\n        if char!= first_char:\n            return False\n    # If all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    # Check if the string is empty or not\n    if len(s) == 0:\n        return True\n    # Check if all the characters in the string are same or not\n    for i in range(1, len(s)):\n        if s[0]!= s[i]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # Convert the string to a list of characters\n    chars = list(s)\n\n    # Check if all the characters in the list are same or not\n    if chars == chars[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # check if the length of the string is greater than 1\n    if len(s) <= 1:\n        return True\n\n    # get the first character of the string\n    first_char = s[0]\n\n    # iterate through the rest of the string\n    for i in range(1, len(s)):\n\n        # if the current character is not the same as the first character, return False\n        if s[i]!= first_char:\n            return False\n\n    # if all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # converting the input string to a list\n    s = list(s)\n    # if the length of the list is 1, then all the characters are same\n    if len(s) == 1:\n        return True\n    # if the length of the list is greater than 1, then the first character of the list is the same as all the other characters\n    elif len(s) > 1:\n        if s[0] == s[1]:\n            # if the first character is same for all characters, then we can call the function recursively to check whether all other characters are same or not\n            return all_Characters_Same(s[2:])\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if string is empty\n    if len(s) == 0:\n        return True\n    # get first character\n    first_char = s[0]\n    # loop through the rest of the characters in the string\n    for i in range(1, len(s)):\n        # if the current character is not equal to the first character, return False\n        if s[i]!= first_char:\n            return False\n    # if we reach this point, all characters are equal, so return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if the length of the string is 1\n    if len(s) == 1:\n        # if the length is 1, then all the characters are the same\n        return True\n    else:\n        # if the length is greater than 1, then check if all the characters are the same\n        for i in range(len(s)-1):\n            if s[i]!= s[i+1]:\n                # if the characters are not same, then return False\n                return False\n        # if the loop completes without returning False, then all the characters are the same\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in count:\n        if count[char] > 1:\n            return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side/3\n    area = (s*(s-math.sqrt(10*s**2 + 12*side**2)))/6\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (2*side + math.sqrt(2*(side**2 + 2*side + 5)))/3\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = (1/6) * semi_perimeter * (semi_perimeter - side) * (semi_perimeter - 2*side) * (semi_perimeter - 3*side)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) * (math.sqrt(2) + math.sqrt(2) + math.sqrt(3)) / 6\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/3 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Formula to calculate the area of a tetrahedron\n    area = (1/6) * side ** 2\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n\n    return (1/6) * math.sqrt(s * (s-side) * (s-side) * (s-side))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) * (2 * math.sqrt(3)) / 3\n    return s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron using Heron's formula.\n    \"\"\"\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.5\n    area = (1/5) * s * (s - side) * (s - side - side) * (s - side - side + side)\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # get the length of the list\n    n = len(list)\n\n    # check if the number of items to be rotated is greater than the length of the list\n    if m > n:\n        m = m % n\n\n    # iterate through the list and swap the elements to the right of the m-th element with the elements to the left of it\n    for i in range(m):\n        list[i], list[n-1-i] = list[n-1-i], list[i]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and a number m as input and rotates the list to the right by m items.\n    \"\"\"\n    n = len(lst)\n    # If m is greater than n, return the original list\n    if m > n:\n        return lst\n    # If m is less than or equal to 0, return the original list\n    elif m <= 0:\n        return lst\n    # If m is equal to n, reverse the entire list\n    elif m == n:\n        lst = lst[::-1]\n    else:\n        # Reverse the first m items of the list\n        lst[:m] = lst[:m][::-1]\n        # Reverse the remaining items of the list\n        lst[m:] = lst[m:][::-1]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and a number m as input and rotates the list by m items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m == 0 or m >= n:\n        return list\n    \n    # Reverse the first m elements of the list\n    list[:m] = list[:m][::-1]\n    \n    # Reverse the remaining elements of the list\n    list[m:] = list[m:][::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by n items to the right direction.\n    \"\"\"\n    if n == 0:\n        return lst\n    \n    n %= len(lst)\n    \n    # Shift the elements to the right by n positions\n    lst = lst[-n:] + lst[:-n]\n    \n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n    # Check if m is greater than or equal to n\n    if m >= n:\n        return list\n    # Initialize the index of the first element to be rotated\n    start_index = m % n\n    # Rotate the list by swapping the elements from start_index to n-1 and then from 0 to start_index-1\n    for i in range(start_index, n):\n        list[i], list[n-1-i] = list[n-1-i], list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0 or m == len(list):\n        return list\n    n = len(list)\n    m = m % n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[:m] = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m >= n:\n        return list\n    elif m == 0:\n        return list\n    else:\n        start = m % n\n        end = n - 1\n        mid = (start + end) // 2\n        temp = list[mid]\n        list[mid] = list[end]\n        list[end] = temp\n        for i in range(start - 1, -1, -1):\n            temp = list[i]\n            list[i] = list[start + i]\n            list[start + i] = temp\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n items.\n    \"\"\"\n    # If n is greater than the length of the list, simply return the list.\n    if n > len(lst):\n        return lst\n    \n    # Calculate the starting index of the slice that needs to be rotated.\n    start = n % len(lst)\n    \n    # Slice the original list to the desired starting index and reverse it.\n    rotated = lst[start:] + lst[:start]\n    \n    # Return the reversed rotated list.\n    return rotated"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(value is None for value in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_exists = False\n    for element in test_tup:\n        if element is None:\n            none_exists = True\n            break\n    return none_exists"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for elem in test_tup:\n        if elem is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(num):\n        '''\n        Check if a given number is divisible by every digit it contains.\n        '''\n        digit_count = 0\n        for digit in str(num):\n            digit_count += 1\n        return digit_count == 1\n\n    # Using a list comprehension to filter out numbers that are not divisible by every digit\n    filtered_numbers = [num for num in range(startnum, endnum+1) if is_divisible(num)]\n\n    # Print the filtered numbers\n    print(\"Filtered numbers:\", filtered_numbers)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = str(num)\n        for digit in digits:\n            if int(digit) % 2!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda num: all(int(digit) % num == 0 for digit in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n        return True\n    \n    numbers = range(startnum, endnum+1)\n    divisible_numbers = [num for num in numbers if is_divisible_by_digits(num)]\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    Parameters:\n        startnum (int): starting number of range\n        endnum (int): ending number of range\n\n    Returns:\n        A list of numbers within the given range that are divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a digit\n    is_divisible = lambda x, y: x % y == 0\n    \n    # Define a lambda function to check if a number is divisible by every digit in the given range\n    is_divisible_by_every_digit = lambda x: all(map(lambda y: is_divisible(x, y), range(10)))\n    \n    # Filter the numbers within the given range that are divisible by every digit in the given range\n    result = list(filter(is_divisible_by_every_digit, range(startnum, endnum + 1)))\n    \n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # lambda function to check if a number is divisible by a digit\n    check_divisibility = lambda num: all(num % i == 0 for i in range(10))\n    \n    # loop through the numbers from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        # check if the number is divisible by every digit in its string representation\n        if check_divisibility(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num)]\n        return all(d % digit == 0 for digit in digits)\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r*r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    a = a * math.pi/180\n    \n    # Calculate area using the formula A = \u03c0r\u00b2sin(a/2)\n    A = math.pi*r**2*math.sin(a/2)\n    \n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate the area using the formula\n    area = math.pi * r * r * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    return math.pi * (r**2) * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Convert angle to radians\n    angle_rad = math.radians(a)\n\n    # Check if angle is larger than 360 degrees\n    if angle_rad > math.pi:\n        return None\n\n    # Calculate area of sector\n    area = math.pi * r ** 2 * angle_rad\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r*r*math.sin(math.radians(a/2))*2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi*(r**2)*math.sin(math.radians(a/2))\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Error: Angle should be less than or equal to 360 degrees\")\n        return None\n    else:\n        return math.pi * r * r * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function takes three string sequences as input and returns the longest common subsequence\n    for these sequences. The function is based on dynamic programming.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    L = [[[0] * (p+1) for j in range(p+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1] or Y[j-1] == Z[k-1]:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k])\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    i, j, k = m, n, p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i, j, k = i-1, j-1, k-1\n        elif X[i-1] == Y[j-1] or Y[j-1] == Z[k-1]:\n            i, j, k = i-1, j, k\n        else:\n            i, j, k = i, j-1, k\n\n    return ''.join(reversed(lcs))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Create a function to compute the length of the longest common subsequence of three strings\n    def lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n        dp = [[0] * (o+1) for _ in range(m+1)]\n\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                for k in range(1, o+1):\n                    if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                        dp[i][j] = dp[i-1][j-1] + 1\n                    else:\n                        dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        return dp[m][n]\n\n    # Step 2: Compute the length of the longest common subsequence for all three strings\n    len1 = lcs(X, Y, Z)\n    len2 = lcs(Y, X, Z)\n    len3 = lcs(Z, Y, X)\n\n    # Step 3: Compute the longest common subsequence by taking the maximum length\n    len_max = max(len1, len2, len3)\n\n    # Step 4: Initialize the matrix with zeros\n    dp = [[0] * len_max for _ in range(len_max)]\n\n    # Step 5: Fill the matrix using dynamic programming\n    for i in range(len_max):\n        for j in range(len_max):\n            if i == 0 or j == 0:\n                dp[i][j] = i\n            elif X[i-1] == Y[j-1] and Y[j-1] == Z[len_max-i]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n\n    # Step 6: Convert the matrix to a list of strings\n    lcs_list = []\n    i = len_max - 1\n    j = len_max - 1\n    while i > 0 and j > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        elif dp[i][j] == dp[i][j-1]:\n            j -= 1\n        else:\n            lcs_list.append(X[i-1])\n            i -= 1\n            j -= 1\n\n    # Step 7: Reverse the list to get the LCS\n    lcs_list = lcs_list[::-1]\n\n    return lcs_list"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # creating a 2D table to store length of longest common subsequence for all prefixes of X, Y, Z\n    dp = [[[0]*(p+1) for j in range(m+1)] for i in range(n+1)]\n\n    # filling the table in bottom up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i==0 or j==0 or k==0:\n                    dp[i][j][k] = 0\n                elif X[j-1]==Y[i-1]==Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # finding the length of longest common subsequence for all prefixes of X, Y, Z\n    max_len = max(dp[n][m][p], dp[n-1][m][p], dp[n][m-1][p], dp[n][m][p-1])\n\n    # backtracking to find the common subsequence\n    lcs = \"\"\n    i = n\n    j = m\n    k = p\n    while max_len!= 0:\n        if X[j-1]==Y[i-1]==Z[k-1]:\n            lcs = X[j-1] + lcs\n            j -= 1\n            i -= 1\n            k -= 1\n            max_len -= 1\n        elif dp[i-1][j][k] == dp[i-1][j][k] + 1:\n            i -= 1\n        elif dp[i][j-1][k] == dp[i][j-1][k] + 1:\n            j -= 1\n        elif dp[i][j][k-1] == dp[i][j][k-1] + 1:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    L = [[0]*(n+1) for j in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1])\n\n    return L\n\nX = input(\"Enter the first string: \").split()\nY = input(\"Enter the second string: \").split()\nZ = input(\"Enter the third string: \").split()\n\nprint(\"The longest common subsequence of the given three string sequence is: \")\nprint(\" \".join(X[i] for i in reversed(lcs_of_three(X, Y, Z))))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    #creating a 2D matrix to store lengths of LCS for subproblems\n    LCS = [[0 for j in range(p+1)] for i in range(m+1)]\n    \n    #filling the matrix LCS in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i==0 or j==0 or k==0:\n                    LCS[i][j] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j] = LCS[i-1][j-1] + 1\n                else:\n                    LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1], LCS[i-1][k])\n    \n    #finding the length of LCS and building the actual LCS\n    len_LCS = LCS[m][n]\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i>0 and j>0 and k>0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j] > LCS[i][j-1] and LCS[i-1][j] > LCS[i][k]:\n            i -= 1\n        elif LCS[i][j-1] > LCS[i-1][j] and LCS[i][j-1] > LCS[i][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    #reversing the LCS and returning it\n    return ''.join(reversed(lcs)), len_LCS"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Build LCS table in bottom-up manner\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    # Find the LCS by tracing back the LCS table\n    i = n\n    j = m\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS and return it\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # function to find the longest common subsequence of three sequences\n    def lcs(X, Y, Z):\n        M = len(X)\n        N = len(Y)\n        O = len(Z)\n        \n        dp = [[[0]*(O+1) for j in range(M+1)] for i in range(N+1)]\n        \n        # initialization\n        for i in range(N+1):\n            dp[i][0][0] = 0\n        \n        for j in range(M+1):\n            dp[0][j][0] = 0\n        \n        for k in range(O+1):\n            dp[0][0][k] = 0\n            \n        # filling in the dynamic programming table\n        for i in range(1, N+1):\n            for j in range(1, M+1):\n                for k in range(1, O+1):\n                    if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                    else:\n                        dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i-1][j-1][k-1])\n                        \n        return dp[N][M][O]\n    \n    # calling the function to find the longest common subsequence\n    lcs_val = lcs(X, Y, Z)\n    return lcs_val"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    dp = [[0] * (p + 1) for i in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][k - 1])\n\n    LCS = \"\"\n    i = m\n    j = n\n    k = p\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            LCS = X[i - 1] + LCS\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return LCS\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Step 1: Find lengths of all possible subsequences of X, Y and Z\n    m, n, p = len(X), len(Y), len(Z)\n    # Step 2: Initialize a table to store lengths of LCS for all prefixes of X, Y and Z\n    L = [[[0]*(p+1) for j in range(m+1)] for i in range(n+1)]\n    # Step 3: Fill the table in bottom-up manner using L[i][j][k] = length of LCS of X[0:i], Y[0:j], and Z[0:k]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k])\n    # Step 4: Backtrack to find the LCS\n    i, j, k = m, n, p\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i-1][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    # Step 5: Return the LCS\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a 2D table to store the length of longest common subsequence for all prefixes of X, Y and Z\n    dp = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill in the dp table using dynamic programming approach\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Backtrack to find the LCS of X, Y and Z\n    i = len(X)\n    j = len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS\n    lcs.reverse()\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, r'\\1 ', string)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words\n    words = str1.split()\n    # Initializing an empty list to store the words with spaces\n    words_with_spaces = []\n    \n    # Looping through each word in the list\n    for word in words:\n        # Checking if the first character of the word is capital letter\n        if word[0].isupper():\n            # Appending the word with space to the list\n            words_with_spaces.append(word)\n    \n    # Joining the words with spaces into a string\n    str2 =''.join(words_with_spaces)\n    \n    # Returning the modified string\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    This function takes a string as input and returns the same string with spaces between words starting with capital letters.\n    '''\n\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n\n    # Loop through each word and add spaces before capital letters\n    for i, word in enumerate(words):\n        if word.isupper() and i!= 0:\n            words[i] ='' + words[i]\n\n    # Join the words back into a string with spaces between them\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall('\\b\\w+\\b', str1)\n\n    # Loop through each word and capitalize the first letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i][0].upper() + words[i][1:]\n\n    # Join the words back into a string with spaces in between\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', string)\n\n    # Join the words with spaces and return\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = r'([A-Z]+)'\n    # Use the pattern to find all words starting with capital letters in the input string\n    words = re.findall(pattern, str1)\n    # Use a loop to iterate over the words and insert spaces between them\n    result = ''\n    for i in range(len(words)):\n        if i == 0 or words[i-1][0].islower():\n            result += words[i] +''\n    # Return the modified string with spaces between words\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n\n    # Capitalize the first letter of each word and join them back together with spaces\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters and convert to lowercase\n    str1 = re.sub(r'[^a-zA-Z0-9]+','', str1).lower()\n    # Split the string into a list of words\n    words = str1.split()\n    # Iterate over the list of words\n    for i in range(len(words)):\n        # Check if the word starts with a capital letter\n        if words[i][0].isupper():\n            # If it does, add a space before it\n            words[i] ='' + words[i]\n    # Join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z]\\w*\\b', str1)\n    \n    # Convert the words to title case\n    words = [word.title() for word in words]\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    \"\"\"\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert the strings to lists of numeric values\n    nums = [float(n) for n in nums_str]\n\n    # Sort the numeric values in ascending order\n    nums.sort()\n\n    # Convert the sorted numeric values back to strings and return the sorted list\n    return [str(n) for n in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_list = [int(num) for num in nums_str]\n    nums_list.sort()\n    return nums_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings to float and sort them numerically\n    nums = sorted(float(x) for x in nums_str)\n    # Convert all the floats back to strings and return the sorted list of strings\n    return sorted([str(num) for num in nums])"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the strings to integers\n    nums = [int(num) for num in nums_str]\n    # sort the integers\n    nums.sort()\n    # convert the sorted integers back to strings\n    sorted_nums = [str(num) for num in nums]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Function to convert string to integer\n    def str_to_int(s):\n        try:\n            return int(s)\n        except ValueError:\n            return float('inf')\n\n    # Convert list of strings to list of integers\n    nums = [str_to_int(s) for s in nums_str]\n\n    # Sort the list using the sort() method\n    nums.sort()\n\n    # Convert list of integers back to list of strings\n    result = [str(n) for n in nums]\n\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    # remove spaces from the list of strings\n    nums_str = [num.replace(\" \", \"\") for num in nums_str]\n    # convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # sort the list of integers in ascending order\n    nums_int.sort()\n    # convert the list of integers back to a list of strings\n    nums_str = [str(num) for num in nums_int]\n    # add spaces between the numbers in the list\n    nums_str = [num.zfill(len(max(nums_str, key=len))) for num in nums_str]\n    # return the sorted list of strings of numbers\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert all string numbers to integers and sort them numerically\n    nums_int = sorted(map(int, nums_str))\n    return nums_int"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if isinstance(item, tuple):\n            if all(i in item for i in test_tup):\n                test_list.append(test_tup)\n                print(f\"{test_tup} added to {test_list}\")\n                break"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the tuple with the list\n    test_list.extend(test_tup)\n    # Return the concatenated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the left child exists and is smaller than the current element\n    if i*2+1 < len(arr) and arr[i*2+1] < arr[i]:\n        return False\n    \n    # Check if the right child exists and is smaller than the current element\n    if i*2+2 < len(arr) and arr[i*2+2] < arr[i]:\n        return False\n    \n    # If both conditions are satisfied, then the array represents a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n    # check if the array is already a min heap\n    if arr[0] < arr[1]:\n        return True\n    # check if the array is a min heap using helper function\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:  # Base case\n        return True\n    if i % 2 == 0:  # If parent is even\n        if arr[i//2] > arr[i]:\n            return False\n    else:  # If parent is odd\n        if arr[i//2] < arr[i]:\n            return False\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    \n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2 == 0:\n        return check_min_heap_helper(arr, len(arr) // 2 - 1)\n    else:\n        return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n\n    # If the left child is greater than the root, then it's not a min heap\n    if arr[i] > arr[2*i]:\n        return False\n\n    # Check the left child recursively\n    if not check_min_heap_helper(arr, 2*i):\n        return False\n\n    # Check the right child recursively\n    if i < len(arr) - 1 and not check_min_heap_helper(arr, 2*i+1):\n        return False\n\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Call the helper function with the index of the last element in the array\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n\n    if i == 0:\n        if arr[i] < arr[i+1]:\n            return False\n        else:\n            return True\n\n    if arr[i] < arr[i//2] and arr[i] < arr[i-1]:\n        return True\n    else:\n        return False\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    for i in range(n-1, 0, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    if arr[i] < arr[parent]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0:\n        return True\n    elif i == 0:\n        return arr[0] > arr[1]\n    elif i == len(arr) - 1:\n        return arr[i] < arr[i - 1]\n    else:\n        return (arr[i] > arr[i - 1] and arr[i] > arr[i + 1]) or (arr[i] < arr[i - 1] and arr[i] < arr[i + 1])\n\n\ndef check_min_heap(arr):\n    for i in range(1, len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= 0 and arr[i] < arr[(i - 1) // 2]:\n        return False\n    return True\n\ndef is_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[int((i - 1) / 2)]:\n        return False\n    else:\n        return check_min_heap_helper(arr, int((i - 1) / 2))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first three jacobsthal numbers\n    j0 = 0\n    j1 = 1\n    j2 = 1\n    \n    # Initialize the first 25 jacobsthal numbers\n    jacobsthal_numbers = [j0, j1, j2]\n    \n    # Generate the remaining jacobsthal numbers\n    for i in range(3, n+1):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2])\n        \n    return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = 0\n        lucas_num = 1\n        for i in range(1, n+1):\n            jacob_num = (jacob_num + lucas_num) % 1000\n            lucas_num = (lucas_num + jacob_num) % 1000\n        return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 4 * jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n\n    jacobsthal = [0, 1]\n\n    for i in range(2, n):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n\n    return jacobsthal[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    while j < n:\n        j += 1\n        jacobsthal = 1\n        for i in range(2, j + 1):\n            jacobsthal = (4 * jacobsthal * i) % (2 * i - 1)\n        print(jacobsthal)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        if i % 2 == 0:\n            a, b = b, a + b\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth Jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        j = 1\n        while j < n:\n            j = (4 * j + 3) // 2\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Initialize variables\n        j = 0\n        l = 1\n        i = 1\n        \n        # Calculate the nth jacobsthal number\n        while i < n:\n            j += 1\n            l = (2*j - 1) * l\n            i += 1\n        \n        return l"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the length of each tuple\n    sorted_list = sorted(test_list, key=lambda x: len(x), reverse=True)\n    \n    # Initialize minimum count and minimum record\n    min_count = len(test_list)\n    min_record = test_list[0]\n    \n    # Traverse through the sorted list\n    for record in sorted_list:\n        # Decrement the count by one\n        count = len([1 for x in test_list if x == record])\n        # If the count is less than K, update the minimum count and record\n        if count < K:\n            min_count = count\n            min_record = record\n    \n    # Return the minimum count and record\n    return min_count, min_record"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sorting the list of tuples in ascending order of second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize a variable to store the minimum k records\n    min_k_records = []\n\n    # Traverse through the sorted list of tuples\n    for i in range(K):\n        # If we have found the minimum k records, return the list of minimum k records\n        if i == len(test_list) - K:\n            return min_k_records\n\n        # If we have not found the minimum k records, add the current element to the list of minimum k records\n        min_k_records.append(test_list[i])\n\n    # If we have reached this point, it means that we have found the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples by the second element\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize variables for minimum and maximum indices\n    min_idx = 0\n    max_idx = len(test_list) - 1\n\n    # Iterate over the list of tuples\n    for i in range(K):\n        # If the current minimum index is greater than the current index, update the minimum index\n        if test_list[min_idx][1] > test_list[i][1]:\n            min_idx = i\n\n        # If the current maximum index is less than the current index, update the maximum index\n        if test_list[max_idx][1] < test_list[i][1]:\n            max_idx = i\n\n        # If the minimum index has been updated, update the minimum element in the list\n        if min_idx!= i:\n            test_list[min_idx], test_list[i] = test_list[i], test_list[min_idx]\n\n    # Return the sorted list of tuples\n    return test_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n\n    # Sort the list based on second element (which is the first element in each tuple)\n    test_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize the minimum record list\n    min_records = []\n\n    # Initialize the count of the minimum records\n    count = 0\n\n    # Iterate through the sorted list\n    for i in range(len(test_list)):\n\n        # If the count of minimum records is equal to K, add the current element to the minimum record list and increment the count\n        if count == K:\n            min_records.append(test_list[i])\n            count += 1\n\n        # If the count of minimum records is less than K, add the current element to the minimum record list and increment the count\n        elif count < K:\n            min_records.append(test_list[i])\n            count += 1\n\n        # If the count of minimum records is greater than K, add the element to the minimum record list and decrement the count\n        else:\n            min_records.append(test_list[i])\n            count -= 1\n\n    # Return the minimum record list\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    min_records = []\n    count = 0\n    for i in range(len(test_list)):\n        if count < K:\n            min_records.append(test_list[i])\n            count += 1\n        else:\n            if test_list[i][1] < min_records[0][1]:\n                min_records[0] = test_list[i]\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the test_list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize minimum k variable and minimum k index variable\n    minimum_k = float('inf')\n    min_k_index = -1\n    \n    # Iterate through the sorted test_list and update minimum k and min k index\n    for index, record in enumerate(test_list):\n        if index >= K:\n            break\n        \n        if record[1] < minimum_k:\n            minimum_k = record[1]\n            min_k_index = index\n    \n    # Return the minimum k and min k index\n    return minimum_k, min_k_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples by second element in ascending order\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize variables to store minimum k records and their indices\n    min_k_records = []\n    min_k_indices = []\n\n    # Iterate through the sorted list of tuples, keeping track of the minimum k records and their indices\n    for i in range(len(test_list)):\n        if len(min_k_records) < K:\n            min_k_records.append(test_list[i])\n            min_k_indices.append(i)\n        elif min_k_records[0][1] > test_list[i][1]:\n            min_k_records.pop(0)\n            min_k_records.append(test_list[i])\n            min_k_indices.pop(0)\n            min_k_indices.append(i)\n\n    # Return the minimum k records and their indices\n    return min_k_records, min_k_indices"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    min_dict = {}\n\n    for item in test_list:\n        if item[1] in min_dict:\n            min_dict[item[1]] += 1\n        else:\n            min_dict[item[1]] = 1\n\n    min_items = sorted(min_dict.items(), key=lambda x: x[1])\n\n    result = [item[0] for item in min_items[:K]]\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function finds the minimum K records from the given test_list.\n    \"\"\"\n    test_list.sort(key=lambda x: x[1])  # sort the list by the second element (i.e., score)\n\n    for i in range(len(test_list) - K):\n        del test_list[i]  # remove the minimum K records from the list\n\n    if len(test_list) == 0:\n        return None\n\n    return test_list  # return the remaining records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list and a K value and returns the minimum K records from the list.\n    '''\n    if K > len(test_list):\n        return None\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if test_list[i] < min_list[0]:\n                min_list.pop(0)\n                min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Create a dictionary to store the common elements\n    common_dict = {}\n\n    # Loop through each index in each list\n    for i in range(len(l1)):\n        # If the index exists in both lists\n        if i in l2 and i in l3:\n            # Add the element to the dictionary\n            common_dict[l1[i]] = (l1[i], l2[i], l3[i])\n\n    # Convert the dictionary to a list\n    common_list = list(common_dict.keys())\n\n    # Return the list of common elements\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common_set = set()\n\n    # Iterate through each index in l1 and l2\n    for i in range(len(l1)):\n        # Check if the element at that index is in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, add it to the common set\n            common_set.add(l1[i])\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty dictionary to store common elements\n    common_elements = {}\n\n    # Iterate over all elements in l1\n    for i in range(len(l1)):\n        # Check if the element exists in all three lists\n        if l1[i] in l2 and l1[i] in l3:\n            # If the element exists in all three lists, add it to the common_elements dictionary\n            common_elements[l1[i]] = True\n\n    # Return the common elements dictionary as a list\n    return common_elements.keys()"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element in l1, l2, and l3\n    freq = {}\n    for i in range(len(l1)):\n        freq[l1[i]] = freq.get(l1[i], 0) + 1\n        freq[l2[i]] = freq.get(l2[i], 0) + 1\n        freq[l3[i]] = freq.get(l3[i], 0) + 1\n    \n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Iterate through the dictionary and check if each element is common for all three lists\n    for i in range(len(freq)):\n        if freq[i] == 3:\n            common.append(i)\n    \n    # Return the list of common elements\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l1[i] in common:\n                continue\n            common.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3:\n            if l2[i] in common:\n                continue\n            common.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2:\n            if l3[i] in common:\n                continue\n            common.append(l3[i])\n    return common"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Return the second smallest number\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort()  # sort the list in ascending order\n    return numbers[1]  # return the second smallest number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least two numbers.\"\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        print(f\"Match found at index {result.start():2}: {result.group()}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    # Define the regular expression pattern\n    pattern = r'a[^b]*b'\n    # Use the re.search() function to search for a match in the text\n    match = re.search(pattern, text)\n    # If a match is found, return the substring between the 'a' and 'b' characters\n    if match:\n        return text[match.start():match.end()]\n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(b)*\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        print('Match found:', match.group())\n    else:\n        print('No match found')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+a'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    # Initialize variables for count of reverse pairs and index of current pair\n    count = 0\n    i = 0\n    j = 1\n\n    # Iterate through the list of strings\n    while j < len(test_list):\n        # If the current string is a reverse of the next string, increment the count and move to the next pair\n        if test_list[j] == test_list[i][::-1]:\n            count += 1\n            i += 1\n            j += 1\n\n        # If the current string is not a reverse of the next string, move to the next pair\n        else:\n            j += 1\n\n    # Return the count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] or test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                reverse_count += 1\n    return reverse_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    count = 0\n    for string in test_list:\n        if string[::-1] in reverse_dict:\n            count += reverse_dict[string[::-1]]\n        reverse_dict[string] = reverse_dict.get(string, 0) + 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    # iterate over each list in the original list\n    for sublist in list1:\n        # convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n        # if the tuple is already in the dictionary, increment its count\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[sublist_tuple] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the counts\n    counts = {}\n    # loop over the original list\n    for sublist in list1:\n        # convert the sublist to a tuple and use it as a key in the dictionary\n        key = tuple(sublist)\n        # increment the count for the key if it exists already, otherwise create a new key with a count of 1\n        counts[key] = counts.get(key, 0) + 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    count = {}\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    count_dict = {}\n\n    # iterate over each list in the input list\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n\n        # check if the tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            # if it is, increment the count by 1\n            count_dict[sublist_tuple] += 1\n        else:\n            # if it's not, add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in list1:\n        if i not in count_dict:\n            count_dict[i] = [1]\n        else:\n            count_dict[i].append(1)\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n            \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique tuples\n    counts = {}\n    # Iterate through the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the counts dictionary\n        counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Initialize an empty dictionary\n    counts = {}\n    # Loop over each element of the list\n    for elem in list1:\n        # Convert the element to a tuple and check if it is already in the dictionary\n        if tuple(elem) in counts:\n            # Increment the count by 1\n            counts[tuple(elem)] += 1\n        else:\n            # Otherwise, add the tuple and its count to the dictionary\n            counts[tuple(elem)] = 1\n    # Return the dictionary\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary\n    sublist_count = {}\n    # loop through each list in the input list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in sublist_count:\n            # if it is, increment its value by 1\n            sublist_count[tuple(sublist)] += 1\n        else:\n            # if not, add it to the dictionary with a value of 1\n            sublist_count[tuple(sublist)] = 1\n    # return the dictionary\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of unique tuples\n    count_dict = {}\n    # loop through each list in the list1\n    for sublist in list1:\n        # convert each sublist to a tuple and check if it is already in the count_dict\n        key = tuple(sublist)\n        if key in count_dict:\n            # increment the count of the tuple in the count_dict\n            count_dict[key] += 1\n        else:\n            # otherwise, add the tuple to the count_dict with a count of 1\n            count_dict[key] = 1\n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    # Remove all spaces and dots from the input string\n    num = num.replace(\" \", \"\").replace(\".\", \"\")\n\n    # Check if the string has only one digit\n    if len(num)!= 1:\n        return False\n\n    # Check if the first digit is a 0\n    if int(num) == 0:\n        return False\n\n    # Check if the remaining digits are decimal numbers\n    for i in range(1, len(num)):\n        if num[i]!= \"0\" and int(num[i]) > 7:\n            return False\n\n    # If all checks pass, the string is a valid decimal number with precision 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num == round(num, 2):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return num.split('.')[-1] == '00'\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    try:\n        # convert the string to float with 2 decimal places precision\n        float_num = float(num)\n        # check whether the float has more than 2 decimal places\n        if len(str(float_num).split('.')[-1]) > 2:\n            return False\n        else:\n            return True\n    except ValueError:\n        # if the string cannot be converted to a float, it is not a decimal number with 2 decimal places precision\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            num_list = num.split('.')\n            if len(num_list) == 2 and num_list[1].isdigit():\n                return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    # Remove any leading/trailing whitespaces and convert to lowercase\n    num = num.strip().lower()\n    # Split the string into digits and decimal parts\n    digits, decimal_part = num.split('.')\n    # Check if the number of digits is less than 2 or more than 15\n    if len(digits) < 2 or len(digits) > 15:\n        return False\n    # Check if the number of decimal digits is less than 0 or more than 2\n    if len(decimal_part) < 0 or len(decimal_part) > 2:\n        return False\n    # Convert the decimal part to a float and check if it is an integer\n    decimal_part = float(decimal_part)\n    if not decimal_part.is_integer():\n        return False\n    # Check if the decimal part has a precision of 2\n    if len(str(decimal_part).split('.')[1])!= 2:\n        return False\n    # If all the checks pass, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        if len(num.split('.')[1]) > 2:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the input has at most 1 decimal point\n    if '.' not in num and num.find('.')!= -1:\n        return False\n    \n    # Check if the input only contains digits, periods, and minus signs\n    for char in num:\n        if char not in ['-', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return False\n    \n    # Check if the input has a precision of 2\n    if '.' in num and len(num.split('.')[1]) > 2:\n        return False\n    \n    # If all the checks pass, the input is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        if arr[0] == arr[1]:\n            return False\n        else:\n            for i in range(2, len(arr)):\n                if arr[i] == arr[i-1]:\n                    return False\n            return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element and False otherwise.\n    '''\n    # creating a set to store the unique elements of the list\n    unique_set = set(arr)\n    # checking if the length of the unique_set is 1, which means the list contains only one distinct element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    distinct_elements = set()\n    for elem in arr:\n        if elem in distinct_elements:\n            return False\n        distinct_elements.add(elem)\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_count = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            unique_count += 1\n    if unique_count == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return len(arr) == len(count) and all(count.values() == [1])"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct = set(arr)\n    return len(distinct) == 1"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"This month has 30 days.\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"This month has 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2: # February\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11: # April, June, September, November\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2 and is_leap_year(year):\n        days_in_month[1] = 29\n    return days_in_month[monthnum3-1]\n\ndef is_leap_year(year):\n    '''\n    Function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    if monthnum in days_in_month:\n        if days_in_month[monthnum] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"The given month number contains 30 days.\")\n    else:\n        print(\"The given month number does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    # check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Invalid month number.\")\n        return None\n    \n    # check if the month number has 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        print(monthnum3, \"has 30 days.\")\n    else:\n        print(monthnum3, \"does not have 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return monthnum3 in [4, 6, 9, 11] and (2000 % 4 == 0 and (2000 % 100!= 0 or 2000 % 400 == 0))\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Initialize min_diff as infinity\n    min_diff = float('inf')\n    \n    # Traverse through the array and for each element, find the difference between it and the rest of the elements in the array\n    for i in range(n):\n        diff = arr[i] - min(arr[j] for j in range(i+1,n))\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length n as input and returns the minimum difference between any two elements in the array.\n    \n    Args:\n    arr: a list of integers\n    n: the length of the array\n    \n    Returns:\n    minimum_diff: the minimum difference between any two elements in the array\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n    \n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array of integers and returns the minimum difference between any two elements in the array. \n    '''\n    min_diff = abs(arr[0] - arr[1])\n    for i in range(2, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Traverse the sorted array and find the minimum difference between any two elements\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return \"Array should have at least 2 elements\"\n\n    min_diff = float('inf')  # initialize minimum difference to infinity\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # find the minimum element in the array\n    min_element = min(arr)\n\n    # create a list of tuples containing the element and its index\n    sorted_arr = [(arr[i], i) for i in range(n)]\n\n    # sort the list of tuples in ascending order based on the element\n    sorted_arr.sort()\n\n    # initialize a variable to store the minimum difference found so far\n    min_diff = float('inf')\n\n    # iterate over the sorted list and find the minimum difference between any two elements\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = sorted_arr[i][0] - sorted_arr[j][0]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Initialize two variables to store minimum difference and current element\n    min_diff = abs(arr[1] - arr[0])\n    current_element = arr[1]\n\n    # Traverse through the array from index 2 to n-1\n    for i in range(2, n):\n        # Calculate the difference between the current element and the next element\n        diff = abs(arr[i] - current_element)\n\n        # Update minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n            current_element = arr[i]\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')  # initialize minimum difference as infinity\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize variables to store the minimum difference and the minimum element\n    min_diff = float('inf')\n    min_element = arr[0]\n\n    # Loop through the array\n    for i in range(1, n):\n        # Find the difference between the current element and the previous element\n        diff = arr[i] - arr[i - 1]\n        # Check if the difference is less than the minimum difference found so far\n        if diff < min_diff:\n            # Update the minimum difference and the minimum element\n            min_diff = diff\n            min_element = arr[i]\n\n    # Return the minimum difference and the minimum element\n    return min_diff, min_element"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"Array should have at least two elements\"\n\n    min_diff = float('inf')\n    min_pair = None\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (arr[i], arr[j])\n\n    return min_pair"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # initialize count variable to 0\n    count = 0\n    \n    # loop through each character in the string\n    for char in str:\n        # if the character is a digit, increment count\n        if char.isdigit():\n            count += 1\n    \n    # return the final count\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [1, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000, 2000000, 5000000, 10000000, 20000000, 50000000, 100000000, 200000000, 500000000, 1000000000, 2000000000, 5000000000, 10000000000, 20000000000, 50000000000, 100000000000, 200000000000, 500000000000, 1000000000000, 2000000000000, 5000000000000, 10000000000000, 20000000000000, 50000000000000, 100000000000000, 200000000000000, 500000000000000, 1000000000000000, 2000000000000000, 5000000000000000, 10000000000000000, 20000000000000000, 50000000000000000, 100000000000000000, 200000000000000000, 500000000000000000, 1000000000000000000, 2000000000000000000, 5000000000000000000, 10000000000000000000, 20000000000000000000, 50000000000000000000, 100000000000000000000, 200000000000000000000, 500000000000000000000, 1000000000000000000000, 2000000000000000000000, 5000000000000000000000, 10000000000000000000000, 20000000000000000000000, 50000000000000000"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def find_nth_polite_number(n):\n        \"\"\"\n        Recursive function to find the nth polite number.\n        \"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 3\n        else:\n            return 2 * find_nth_polite_number(n-1) + 1\n\n    return find_nth_polite_number(n)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the value of n: \"))\n    print(\"The\", n, \"th polite number is\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        x = 2\n        y = 1\n        for _ in range(3, n+1):\n            x = x**2 + y\n            y = x - y\n        return x"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number using a formula.\n    \"\"\"\n\n    if n == 1:\n        return \"1st\"\n    elif n == 2:\n        return \"2nd\"\n    else:\n        return str(n) + \"th\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    p = 0\n    count = 0\n    while count < n:\n        if is_prime(p):\n            count += 1\n        p += 1\n    return p\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize a variable for polite number\n    polite_number = 0\n    \n    # loop from 1 to n\n    for i in range(1, n+1):\n        # check if the current number is a polite number\n        if i%2 == 1:\n            # check if the remainder of the current number divided by 3 is 0\n            if i%3 == 0:\n                # if the condition is True, then the current number is a polite number\n                polite_number = i\n    \n    # return the polite number\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the nth polite number.\n\n    Args:\n    n (int): The nth polite number to find.\n\n    Returns:\n    int: The nth polite number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    polite_number = 0\n    num = 0\n    i = 0\n\n    while i < n:\n        if num % 3 == 0:\n            polite_number += 1\n        num += 1\n        i += 1\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n\n    For example, if n = 1, then the function should return 1st polite number (1).\n\n    Note: the first polite number is 2.\n    \"\"\"\n\n    polite_numbers = [2]\n    index = 0\n\n    while index < n - 1:\n        if math.gcd(polite_numbers[index], polite_numbers[index + 1]) == 1:\n            polite_numbers.append(polite_numbers[index] + 1)\n            index += 1\n        else:\n            index += 1\n\n    return polite_numbers[-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    def nth_prime_number(n):\n        count = 0\n        number = 2\n        while count < n:\n            count += 1\n            for i in range(2, int(math.sqrt(number))+1):\n                if number % i == 0:\n                    number += 1\n                    break\n            else:\n                return number\n\n    def nth_polite_number(n, count=0):\n        count += 1\n        prime_number = nth_prime_number(count)\n        if count == n:\n            return prime_number\n        else:\n            return nth_polite_number(n, count)\n\n    return nth_polite_number(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_polite(n): \n    if n % 5 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # initialize the output list\n    output = []\n    # loop through the list\n    for i in range(len(l1)-1):\n        # add the current item and the next item to the output list\n        output.append((l1[i], l1[i+1]))\n    # return the output list\n    return output"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i], l1[i+1] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as arguments, li1 and li2, and returns a new list that contains the elements in li1 that are not in li2.\n    '''\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a list containing the elements of list 1 that are not in list 2.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff_list = []\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes in two lists and returns the elements that are present in the first list but not the second list.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_odd_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_odd_fourth_powers += i**4\n    return sum_odd_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    This function finds the sum of the fourth power of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(n):\n        sum_of_powers += (i + 1)**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2**n):\n        if i % 2 == 1:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # calculate the fourth power of the number and add it to the sum\n            sum += i**4\n    \n    # return the sum of the fourth powers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            last = stack.pop()\n            if char == ')' and last!= '(':\n                return False\n            elif char == ']' and last!= '[':\n                return False\n            elif char == '}' and last!= '{':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n\n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            if closing_brackets[char]!= stack[-1]:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if not stack:\n                return False\n            if stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', '{', '[']:\n                if char == top:\n                    continue\n                else:\n                    return False\n            elif char in [')', '}', ']']:\n                if char == top:\n                    continue\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    brackets = {'(': ')', '[': ']', '{': '}'}\n\n    for i in range(len(exp)):\n        if exp[i] in brackets:\n            stack.append(exp[i])\n        elif exp[i] == brackets[stack.pop()]:\n            continue\n        else:\n            return False\n\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char == ')' and top_char!= '(':\n                return False\n            elif char == '}' and top_char!= '{':\n                return False\n            elif char == ']' and top_char!= '[':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            opening_char = stack.pop()\n            if (char == ')' and opening_char!= '(') or (char == '}' and opening_char!= '{') or (char == ']' and opening_char!= '['):\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word)!= K]\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Remove all words with k length in the given string.\n    \"\"\"\n    import re\n    words = re.findall(r'\\b\\w+\\b', test_str) # find all words in the string\n    words_with_k = [word for word in words if len(word)!= K] # filter out words with k length\n    new_str =''.join(words_with_k) # join the words back into a new string with spaces\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the remaining words\n    remaining_words = []\n    \n    # Iterate through the words\n    for word in words:\n        # Check if the length of the current word is not equal to K\n        if len(word)!= K:\n            # Add the current word to the remaining words list\n            remaining_words.append(word)\n            \n    # Join the remaining words back into a string and return it\n    return''.join(remaining_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the final string\n    final_str = \"\"\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is less than or equal to K\n        if len(word) <= K:\n            # If it is, add it to the final string\n            final_str += word + \" \"\n    # Return the final string without any extra spaces\n    return final_str.strip()"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Create an empty list to store the words with k length\n    k_length_words = []\n    # Loop through each word in the words list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Append the word to the k_length_words list\n            k_length_words.append(word)\n    # Join the words with space and return the result\n    return''.join(k_length_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into words\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words without length K\n    result = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If it's not, add it to the result list\n            result.append(word)\n            \n    # Join the words in the result list into a single string\n    result_str =''.join(result)\n    \n    # Return the result string\n    return result_str"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. \n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expression to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # If no matches are found, return None\n    if len(matches) == 0:\n        return None\n    # Loop through all matches and print the position and occurrence\n    for i, match in enumerate(matches):\n        print(f\"Match {i+1}: {match} found at position {text.find(match)}\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not re.search(pattern, text):\n        return None\n    else:\n        matches = re.findall(pattern, text)\n        for match in matches:\n            position = text.find(match)\n            if position!= -1:\n                return (match, position)\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expressions to find all the occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Iterate over all the matches and extract the position and the substring\n    result = []\n    for match in matches:\n        # Extract the position of the match from the match object\n        position = match.start()\n\n        # Extract the substring of the text that matches the pattern\n        substring = text[match.start():match.end()]\n\n        # Add the result to the list of results\n        result.append((position, substring))\n\n    # Return the list of results or None if there are no matches\n    return result if result else None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n\n    :param nums: A list of integers.\n    :return: True if all the odd indexes contain odd numbers, False otherwise.\n    \"\"\"\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len([x for x in nums[i:] if x % 2 == 1]) > 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if len([num for num in nums if num % 2 == 1 and i % 2!= 0]) == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    for i in range(0, len(nums), 2):\n        if sum([int(x) for x in str(nums[i])]) % 2 == 0:\n            print(False)\n            return\n\n    print(True)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of integers and returns True if every odd index contains odd numbers, and False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        elif nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len(set(nums[i])) % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if sum([int(j) for j in str(nums[i])]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if len(set(str(nums[i]))) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:  # If the index is odd\n            if sum(nums[i:i+2]) % 2!= 0:  # If the sum of the odd numbers starting at the index is odd\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(len(test_str)):\n            if i!= j and test_str[i] in vowels and test_str[j] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if (i == 0 or i == len(test_str)-1) or (test_str[i-1] in vowels) or (test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_counts = {}\n    \n    for char in test_str:\n        if char in vowels:\n            # If the character is a vowel, add it to its neighbor count if it exists\n            if char.lower() + '2' in vowel_counts:\n                vowel_counts[char.lower() + '2'] += 1\n            else:\n                vowel_counts[char.lower() + '2'] = 1\n    \n    return vowel_counts"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # create an empty list to store the unique elements\n    unique_list = []\n\n    # iterate through the count dictionary and add the elements to the unique list if their count is 1\n    for num in count_dict:\n        if count_dict[num] == 1:\n            unique_list.append(num)\n\n    # return the sum of the unique elements\n    return sum(unique_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_of_unique = sum(unique_elements)\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all the non-repeated elements in the list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the sum of non-repeated elements in the dictionary\n    sum_non_repeated = 0\n    for key, value in freq.items():\n        if value == 1:\n            sum_non_repeated += int(key)\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    # create a dictionary to keep track of the count of each element in the list\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # sum up all non-zero counts\n    total = 0\n    for count in counts.values():\n        if count > 0:\n            total += count\n\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store the elements of the array\n    unique_elements = set(arr)\n    \n    # calculate the sum of the unique elements\n    sum_of_unique = sum(unique_elements)\n    \n    # return the sum of the unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # convert the list into a set to remove duplicates\n    unique_set = set(arr)\n    # convert the set back into a list and sum it up\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_elements = set(arr)\n    \n    # calculate the sum of unique elements\n    sum_unique = sum(unique_elements)\n    \n    # return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arr)\n    \n    # Initialize a variable to store the sum of unique elements\n    sum_of_unique = 0\n    \n    # Loop through each element in the set and add it to the sum\n    for num in unique_set:\n        sum_of_unique += num\n    \n    # Return the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create an empty set to store non-repeated elements\n    unique_set = set()\n\n    # Traverse through the list and add non-repeated elements to the set\n    for num in arr:\n        if num not in unique_set:\n            unique_set.add(num)\n\n    # Calculate the sum of non-repeated elements\n    sum_non_repeat = sum(unique_set)\n\n    return sum_non_repeat"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # calculate the sum of non-repeated elements\n    sum_non_repeated = 0\n    for num in arr:\n        if freq[num] == 1:\n            sum_non_repeated += num\n\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    packed_list = []\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            packed_list.extend([list(group)]*2)\n        else:\n            packed_list.extend([list(group)])\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    def consecutive_duplicates(lst):\n        \"\"\"\n        Returns a generator that yields consecutive duplicates of elements in the list.\n        \"\"\"\n        for key, group in groupby(lst):\n            if key:\n                yield group\n\n    sublists = []\n    for group in consecutive_duplicates(list1):\n        sublists.append(list(group))\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    prev = None\n    for item in list1:\n        if item == prev:\n            prev = item\n            continue\n        else:\n            result.append([item])\n            prev = item\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by consecutive duplicates\n    grouped = groupby(list1)\n    # iterate over the grouped items and pack consecutive duplicates into sublists\n    result = []\n    for key, group in grouped:\n        if key:\n            sublist = list(group)\n            result.append(sublist)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list, return a list of sublists where all elements are consecutive duplicates of the original list.\n    \"\"\"\n    # Use the groupby function to group the consecutive duplicates of the list\n    grouped_list = groupby(lst)\n    # Use a list comprehension to create a new list containing sublists with consecutive duplicates\n    new_list = [list(sub_list) for sub_list in grouped_list]\n    return new_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_duplicates(iterable):\n        key = 0\n        for key, group in groupby(iterable, lambda x: x):\n            yield group\n            if key == 0:\n                break\n            if not key == key - 1:\n                group = list(group)\n                group.append(group[0])\n                yield group\n\n    return list(pack_duplicates(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    prev = None\n    for item in list1:\n        if item!= prev:\n            if prev is not None:\n                result.append(list(groupby(list1, key=lambda x: (x[0] - prev[0]) // (x[1] - prev[1]))))\n            result.append([item])\n            prev = item\n        else:\n            result[-1][-1] = item\n    if prev is not None:\n        result.append(list(groupby(list1, key=lambda x: (x[0] - prev[0]) // (x[1] - prev[1]))))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the input list to a set to remove duplicates and then back to a list for counting occurrences\n    unique_lists = list(set([tuple(sorted(x)) for x in list1]))\n\n    # Create a dictionary to store the count of each unique list\n    counts = {}\n\n    # Loop through each unique list and increment its count in the dictionary\n    for list_ in unique_lists:\n        if list_ not in counts:\n            counts[list_] = 1\n        else:\n            counts[list_] += 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert all lists to tuples\n    list1 = tuple(list1)\n    # Initialize an empty dictionary\n    count = {}\n    # Loop through the list of tuples\n    for t in list1:\n        # If the tuple is already in the dictionary, increment its value\n        if t in count:\n            count[t] += 1\n        # Otherwise, add the tuple to the dictionary with a value of 1\n        else:\n            count[t] = 1\n    # Return the dictionary\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the count of unique tuples\n    count_dict = {}\n\n    # Iterate through each element in the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple\n            tuple_element = tuple(element)\n            # Check if the tuple already exists in the dictionary\n            if tuple_element in count_dict:\n                # Increment the count for the tuple\n                count_dict[tuple_element] += 1\n            else:\n                # Add the tuple to the dictionary with a count of 1\n                count_dict[tuple_element] = 1\n\n    # Return the dictionary of unique tuples with their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        if i == 0:\n            sublists[tuple(list1[i])] = 1\n        else:\n            sublists[tuple(list1[i])] = sublists.get(tuple(list1[i]), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for i in list1:\n        if isinstance(i, list):\n            tuple_i = tuple(i)\n            if tuple_i not in list2:\n                list2.append(tuple_i)\n    count_dict = {}\n    for i in list2:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the unique sublists and their count\n    unique_dict = {}\n    \n    # iterate over each list in the input list\n    for lst in list1:\n        # convert the list to a tuple\n        lst_tuple = tuple(lst)\n        \n        # check if the tuple is already in the dictionary\n        if lst_tuple in unique_dict:\n            # increment the count of the existing tuple\n            unique_dict[lst_tuple] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            unique_dict[lst_tuple] = 1\n    \n    # return the dictionary of unique sublists and their count\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n\n    # create an empty dictionary to store the counts\n    counts = {}\n\n    # loop through each list in the input list\n    for item in list1:\n        # check if the item is already in the dictionary\n        if item in counts:\n            # increment the count for that item\n            counts[item] += 1\n        else:\n            # add the item to the dictionary with a count of 1\n            counts[item] = 1\n\n    # convert the dictionary to a list of tuples with the counts\n    result = list(counts.items())\n\n    # return the list of tuples\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublist_dict = {}\n    for lst in list1:\n        if tuple(lst) in sublist_dict:\n            sublist_dict[tuple(lst)] += 1\n        else:\n            sublist_dict[tuple(lst)] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_tuples = tuple(tuple(x) for x in list1)\n    sublist_counts = {}\n    for sublist in list_tuples:\n        if sublist in sublist_counts:\n            sublist_counts[sublist] += 1\n        else:\n            sublist_counts[sublist] = 1\n    return sublist_counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Convert the tuple list into a list of tuples\n    tuples_list = [tuple(x) for x in test_list]\n\n    # Find all possible combinations of tuples\n    combinations_list = list(combinations(tuples_list, len(tuples_list[0])))\n\n    # Find the combinations that have a sum of zero\n    combinations_with_zero_sum = [x for x in combinations_list if sum(x) == 0]\n\n    # Print the combinations with zero sum\n    print(combinations_with_zero_sum)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns a list of all the combinations of sums with tuples in the input list.\n    '''\n    # sort the input list in ascending order of the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # create an empty list to store the combinations\n    combinations_list = []\n    \n    # loop through all possible combinations of tuples\n    for i in range(1, len(test_list)+1):\n        for combination in combinations(test_list, i):\n            combinations_list.append(combination)\n            \n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combination_list = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            combination_list.append(tuple(combo))\n    return combination_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Find the combinations of sums with tuples in the given tuple list.\n    '''\n\n    # Create a list of tuples containing the combinations of sums\n    comb_list = []\n\n    # Loop through all pairs of tuples in the test list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb = tuple(sorted([test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]]))\n            comb_list.append(comb)\n\n    # Return the list of combinations\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    # initialize an empty list to store the combinations\n    result = []\n\n    # loop through the tuples in the list\n    for i in range(len(test_list)):\n        # create a list of tuples with the current tuple and all possible sums\n        comb = [(x, y) for x in test_list[i] for y in range(sum(test_list[:i]) - sum(test_list[:i][:i]))]\n        # add the combinations to the result list\n        result.extend(comb)\n\n    # return the result list\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def is_valid(combination, target):\n        '''\n        Function to check if the given combination sums up to the target sum.\n        '''\n        sum_combination = sum(combination)\n        return sum_combination == target\n    \n    # Find all the possible combinations of tuples with at least 2 elements\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combinations_list.append((test_list[i], test_list[j]))\n    \n    # Find all the possible combinations of sums with tuples\n    combination_sums_list = []\n    for combination in combinations_list:\n        combination_sums_list.append(sum(combination))\n    \n    # Filter the combinations with only 2 elements\n    combinations_with_sum_2 = [combination for combination in combinations_list if len(combination) == 2]\n    \n    # Filter the combinations with only 3 elements\n    combinations_with_sum_3 = [combination for combination in combinations_list if len(combination) == 3]\n    \n    # Find all the possible combinations of sums with tuples and filter them with 2 elements\n    combinations_with_sum_2_list = []\n    for combination in combination_sums_list:\n        if combination in combinations_with_sum_2:\n            combinations_with_sum_2_list.append(combination)\n    \n    # Find all the possible combinations of sums with tuples and filter them with 3 elements\n    combinations_with_sum_3_list = []\n    for combination in combination_sums_list:\n        if combination in combinations_with_sum_3:\n            combinations_with_sum_3_list.append(combination)\n    \n    # Find all the possible combinations of sums with tuples and filter them with 4 elements\n    combinations_with_sum_4_list = []\n    for combination in combination_sums_list:\n        if combination in combinations_with_sum_2 + combinations_with_sum_3:\n            combinations_with_sum_4_list.append(combination)\n    \n    # Filter the combinations with only 4 elements\n    combinations_with_sum_4 = [combination for combination in combination_sums_list if len(combination) == 4]\n    \n    # Find all the combinations of sums with tuples and filter them with 4 elements\n    combinations_with_sum_4_list = [combination for combination in combinations_with_sum_4_list if is_valid(combination, target=4)]\n    \n    # Return the final list of combinations with 4 elements\n    return combinations_with_sum_4_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Function to check if a given sum can be formed with the given list of tuples\n    def can_form_sum(sum, tup_list):\n        for tup in tup_list:\n            if sum < tup:\n                return False\n            sum -= tup\n        return sum == 0\n\n    # Helper function to generate all possible combinations of the given list of tuples\n    def generate_combinations(tup_list):\n        comb = []\n        for i in range(1, len(tup_list)+1):\n            comb.extend(combinations(tup_list, i))\n        return comb\n\n    # Main function to find the combinations of sums with tuples in the given list\n    def find_combinations_with_tuples(sum, tup_list):\n        combinations_list = []\n        for comb in generate_combinations(tup_list):\n            if can_form_sum(sum, comb):\n                combinations_list.append(comb)\n        return combinations_list\n\n    # Example usage\n    tup_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\n    sum = 15\n    print(find_combinations_with_tuples(sum, tup_list))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the list of tuples\n    test_list.sort()\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n    # Initialize two pointers at the beginning of the list\n    i, j = 0, len(test_list) - 1\n    # Iterate until i is less than j\n    while i < j:\n        # Calculate the sum of the current combination\n        current_sum = test_list[i][0] + test_list[j][0]\n        # If the current sum is equal to the target sum, append the current combination to the list\n        if current_sum == target_sum:\n            combinations_list.append((test_list[i], test_list[j]))\n            # Increment i and decrement j to try finding a different combination\n            i += 1\n            j -= 1\n        # If the current sum is greater than the target sum, decrement j\n        elif current_sum > target_sum:\n            j -= 1\n        # If the current sum is less than the target sum, increment i\n        else:\n            i += 1\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # create a set of tuples to remove duplicates\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    # sort the tuples in ascending order\n    sorted_tuples = sorted(unique_tuples)\n    # use itertools to find all combinations of sums with tuples in sorted_tuples\n    combinations_list = list(combinations(sorted_tuples, len(test_list)))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # function to calculate the sum of a tuple\n    def sum_tuple(t):\n        return sum(t)\n    \n    # function to find the combinations of sums with tuples in the given tuple list\n    def find_combinations_sums(lst):\n        # initialize an empty list to store the combinations\n        result = []\n        \n        # sort the input list\n        lst.sort()\n        \n        # find the combinations of sums with tuples in the list\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                # check if the sum of the two tuples is equal to the target sum\n                if sum_tuple((lst[i], lst[j])) == target_sum:\n                    # create a tuple from the two tuples and append it to the result list\n                    result.append((lst[i], lst[j]))\n        \n        return result\n    \n    # take the target sum as input from the user\n    target_sum = int(input(\"Enter the target sum: \"))\n    \n    # find the combinations of sums with tuples in the input list\n    combinations_sums = find_combinations_sums(test_list)\n    \n    # print the combinations of sums with tuples in the input list\n    print(\"Combinations of sums with tuples in the input list:\", combinations_sums)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        print(\"The number of divisors is even.\")\n    else:\n        print(\"The number of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes a number as input and returns the count of its divisors.\n    '''\n    divisors_count = 0\n    \n    # iterate from 1 to n-1\n    for i in range(1, n+1):\n        # check if n is divisible by i\n        if n % i == 0:\n            # if yes, add 1 to the count\n            divisors_count += 1\n            \n    return divisors_count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    divisors_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_count += 1\n    if divisors_count % 2 == 0:\n        print(n, \"has even number of divisors.\")\n    else:\n        print(n, \"has odd number of divisors.\")\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        divisors = [i for i in range(2, int(math.sqrt(n))+1) if n % i == 0]\n        if len(divisors) == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    def count_divisors_helper(num):\n        if num == 1:\n            return 1\n        elif num % 2 == 0:\n            return 1 + count_divisors_helper(num // 2)\n        else:\n            return 1 + count_divisors_helper((num * 3) + 1)\n\n    num_divisors = count_divisors_helper(n)\n    even_divisors = 0\n    for i in range(1, num_divisors + 1):\n        if num_divisors % i == 0:\n            even_divisors += 1\n\n    if even_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the square of the number to find its square root\n    square = math.sqrt(n)\n\n    # Count the number of divisors by iterating through the range from 1 to the square root\n    count = 0\n    for i in range(1, square + 1):\n        if n % i == 0:\n            count += 1\n\n    # Check if the count of divisors is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the number of divisors\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors += 1\n            if i!= n//i: \n                divisors += 1\n    if n > int(math.sqrt(n)): \n        if n % int(math.sqrt(n)) == 0: \n            divisors += 1\n\n    # Check if the count of divisors is even or odd\n    if divisors % 2 == 0: \n        print(\"The count of divisors is even.\") \n    else: \n        print(\"The count of divisors is odd.\") "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n            if i!= n//i: \n                count += 1 \n    if n > 1: \n        count += 1 \n    if count % 2 == 0: \n        return True \n    else: \n        return False \n\nprint(count_divisors(12)) # Output: True\nprint(count_divisors(20)) # Output: False\nprint(count_divisors(7)) # Output: True\nprint(count_divisors(13)) # Output: False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function returns the count of divisors of a given number n.\n    \"\"\"\n    # Calculate the number of divisors\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    sum = 0\n    for i in range(1, n - 1):\n        if i % 2!= 0:\n            sum += prefix_sum[i + 1] - prefix_sum[i]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    n = len(arr)\n    for i in range(1, n-1):\n        if i % 2!= 0:\n            if i + 2 <= n:\n                total_sum += sum(arr[i:i+2])\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                sum_ = sum(arr[i:j+1])\n                if sum_ % 2 == 1:\n                    result += sum_\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum_odd_subarrays = 0\n    max_length = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += arr[j]\n            if j - i + 1 % 2 == 1:\n                sum_odd_subarrays += current_sum\n                if j - i + 1 > max_length:\n                    max_length = j - i + 1\n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n-2):\n        for j in range(i+3, n):\n            sub_array = arr[i:j+1]\n            if len(sub_array) % 2!= 0:\n                sub_array.sort()\n                total_sum += sum(sub_array)\n    \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Finding the minimum length of an odd subarray\n    min_odd_len = 2\n    while min_odd_len <= n:\n        # Initializing the sum of odd length subarrays\n        odd_sum = 0\n        # Looping through all possible starting indices of the subarrays\n        for i in range(n - min_odd_len + 1):\n            # Summing the odd length subarrays\n            odd_sum += sum(arr[i:i+min_odd_len])\n            # Updating the minimum length of an odd subarray\n            min_odd_len += 2\n        # Checking if the sum of odd length subarrays is less than the current maximum odd sum\n        if odd_sum < max_odd_sum:\n            max_odd_sum = odd_sum\n        else:\n            # If the sum of odd length subarrays is greater than the current maximum odd sum,\n            # resetting the minimum length of an odd subarray\n            min_odd_len = 2\n    return max_odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    \n    for i in range(n-1):\n        sum_odd += sum(arr[i:i+3])\n    \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum to 0\n    sum_odd = 0\n    \n    # Loop through all the possible starting points\n    for i in range(n):\n        # Initialize the current sum to 0\n        current_sum = 0\n        # Initialize the current length to 0\n        current_length = 1\n        # Initialize a boolean flag to check if the current number is odd or even\n        current_even = True\n        # Loop through all the numbers after the starting point\n        for j in range(i+1, n):\n            # If the current number is odd, add it to the current sum and increment the length\n            if arr[j] % 2!= 0:\n                current_sum += arr[j]\n                current_length += 1\n                # If the current number is even, check if it's the only even number in the subarray\n                if arr[j] % 2 == 0 and current_even:\n                    current_even = False\n                    sum_odd += current_sum\n                # If the current number is even but it's the only even number in the subarray, update the sum_odd\n                if arr[j] % 2 == 0 and current_even and current_sum!= 0:\n                    sum_odd += current_sum\n            # If the current number is even, check if it's the only even number in the subarray\n            elif arr[j] % 2 == 0 and current_even:\n                current_even = False\n                sum_odd += current_sum\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2!= 0:  # check if the length of the subarray is odd\n                sub_arr = arr[i:j+1]  # extract the subarray\n                sum += sum(sub_arr)  # add the subarray's sum to the overall sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    n = len(arr)\n    total_sum = 0\n\n    # Traverse through all possible odd length subarrays\n    for i in range(1, n):\n        # Sum of current odd length subarray\n        odd_sum = sum(arr[i-1:i+1:2])\n        total_sum += odd_sum\n\n    return total_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h, s, v = 0, 0, max_val\n    \n    if max_val == min_val:\n        h = 0\n    else:\n        delta = max_val - min_val\n        s = delta / max_val\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n            \n        h = h / 6\n    \n    if s == 0:\n        v = 0\n    else:\n        delta = max_val - min_val\n        v = max_val\n        \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Normalize the input values to be between 0 and 255\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # Calculate the minimum and maximum values of each color component\n    min_value = min(r, g, b)\n    max_value = max(r, g, b)\n    \n    # Calculate the delta between the maximum and minimum values\n    delta = max_value - min_value\n    \n    # Calculate the hue and saturation based on the maximum value\n    if max_value == r:\n        hue = (g - b) / delta\n    elif max_value == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    if delta == 0:\n        # If the maximum value is equal to the minimum value, the hue is undefined.\n        saturation = 0\n    else:\n        # Calculate the saturation based on the delta and the maximum value\n        saturation = delta / max_value\n    \n    # Convert the hue from degrees to radians\n    hue = hue * 60.0\n    \n    # If the hue is less than 0, add 360 degrees\n    if hue < 0:\n        hue = hue + 360.0\n    \n    # Normalize the hue and saturation to be between 0 and 1\n    hue = hue / 360.0\n    saturation = saturation / max_value\n    \n    # Return the hsv values as a tuple\n    return (hue, saturation, max_value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    \n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    if max_val == min_val:\n        h = s = v = 0\n    else:\n        d = max_val - min_val\n        s = d / max_val\n        if max_val == r:\n            h = (g - b) / d\n        elif max_val == g:\n            h = 2 + (b - r) / d\n        else:\n            h = 4 + (r - g) / d\n        \n        h = h * 60 if h < 0 else h\n        if h < 0:\n            h += 360\n    \n    hsv = (h, s, v)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \n    Parameters:\n    r (int): red value of the color (0-255)\n    g (int): green value of the color (0-255)\n    b (int): blue value of the color (0-255)\n    \n    Returns:\n    h (float): hue value of the color (0-360)\n    s (float): saturation value of the color (0-1)\n    v (float): value of the color (0-1)\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_c\n    delta = max_c - min_c\n    \n    if delta == 0:\n        h = 0\n    elif max_c == r:\n        h = ((g - b) / delta) % 6\n    elif max_c == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    s = delta / (1 - abs(2 * h - 1))\n    v = max_c\n    \n    return h*360, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert r, g, and b from 0-255 to 0-1\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Get max and min value of r, g, and b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate h, s, and v\n    if max_val == min_val:\n        h = 0\n        s = 0\n        v = max_val\n    else:\n        delta = max_val - min_val\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        elif max_val == b:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n\n        if h < 0:\n            h = h + 1\n\n        s = delta / max_val\n\n        if s == 0:\n            v = max_val\n        else:\n            if max_val == r:\n                v = (g - b) / delta + min_val\n            elif max_val == g:\n                v = (b - r) / delta + min_val\n            elif max_val == b:\n                v = (r - g) / delta + min_val\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts RGB color to HSV color space.\n    \"\"\"\n\n    # Normalize RGB values to range [0, 1]\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n\n    # Convert RGB values to HSV values\n    max_val = max(r_norm, g_norm, b_norm)\n    min_val = min(r_norm, g_norm, b_norm)\n    delta = max_val - min_val\n    h = 0\n    s = 0\n    v = max_val\n\n    if max_val == min_val:\n        # If the maximum and minimum values are equal,\n        # then the color is gray or black.\n        s = 0\n    else:\n        # If the color is not gray or black,\n        # then calculate the saturation value.\n        s = delta / max_val\n\n    if max_val == r_norm:\n        h = (g_norm - b_norm) / delta\n    elif max_val == g_norm:\n        h = 2 + (b_norm - r_norm) / delta\n    else:\n        h = 4 + (r_norm - g_norm) / delta\n\n    if h < 0:\n        h += 6\n\n    # Normalize hue value to range [0, 1]\n    h /= 6\n\n    # Convert HSV values to HSV color space\n    hsv_color = (h, s, v)\n\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n\n    # Convert to floats to avoid integer division\n    r, g, b = float(r)/255.0, float(g)/255.0, float(b)/255.0\n\n    # Find maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # Find hue\n    if diff == 0:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / diff)\n    elif max_val == g:\n        hue = 60 * ((b - r) / diff) + 120\n    else:\n        hue = 60 * ((r - g) / diff) + 240\n\n    # Find saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n\n    # Find value\n    value = max_val\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to float values between 0 and 1\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Find the maximum value among r, g, and b\n    max_value = max(r, g, b)\n    \n    # Calculate the delta value\n    delta = max_value - min(r, g, b)\n    \n    # Calculate the hue\n    if max_value == r:\n        hue = (g - b) / delta\n    elif max_value == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    # If delta is zero, hue is not defined\n    if delta == 0:\n        hue = 0\n    \n    # Calculate the saturation\n    if max_value!= 0:\n        saturation = delta / max_value\n    else:\n        saturation = 0\n    \n    # Calculate the value\n    value = max_value\n    \n    # Convert hue, saturation, and value to hsv values\n    hsv_value = [(hue * 60), (saturation * 100), (value * 100)]\n    \n    # Convert hsv values to decimal values and return them\n    return tuple(map(lambda x: int(x), hsv_value))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to float\n    r, g, b = map(float, [r, g, b])\n    # Calculate maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    # Calculate sum of values\n    sum_val = max_val + min_val\n    # Calculate difference between maximum and minimum values\n    diff_val = max_val - min_val\n    # Calculate value of Hue\n    if max_val == min_val:\n        hue = 0\n    else:\n        if r == max_val:\n            hue = (g - b) / diff_val\n        elif g == max_val:\n            hue = 2 + (b - r) / diff_val\n        else:\n            hue = 4 + (r - g) / diff_val\n        hue = hue % 6\n    # Calculate value of Saturation\n    if sum_val == 0:\n        saturation = 0\n    else:\n        saturation = diff_val / sum_val\n    # Calculate value of Value\n    value = max_val\n    # Return hsv values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h / 6\n\n    if h < 0:\n        h += 1\n\n    s = delta / (1 - abs(2 * cmax - 1))\n\n    if s == 0:\n        v = 0\n    else:\n        v = (cmax / 255)\n\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 2:\n                product *= num\n        else:\n            odd_count += 1\n            if odd_count == 2:\n                product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    if even_num == 0:\n        return odd_num\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    Find the product of the first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n            even_count = 0\n            odd_count = 0\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            product *= num\n            break\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    if even_sum > 0 and odd_sum > 0:\n        return even_sum * odd_sum\n    else:\n        return 0"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # create a tuple of strings\n    test_tuple = tuple(test_str)\n    # create an empty list to store integers\n    int_list = []\n    # iterate through the tuple and convert each string to an integer and append it to the list\n    for item in test_tuple:\n        try:\n            int_list.append(int(item))\n        except ValueError:\n            continue\n    # convert the list to an integer tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Initialize empty list to store integers\n    int_list = []\n    # Split string by ',' to get individual elements of tuple string\n    tuple_str = test_str.split(',')\n    # Loop through each element of tuple string\n    for i in range(len(tuple_str)):\n        # Check if element is an integer\n        try:\n            # Convert element to integer and append to list\n            int_list.append(int(tuple_str[i]))\n        except ValueError:\n            # If element is not an integer, raise error\n            raise ValueError('Tuple string contains non-integer elements.')\n    # Return integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to list of strings\n    str_list = [str(char) for char in test_str]\n    # Convert list of strings to list of integers\n    int_list = [int(num) for num in str_list]\n    # Convert list of integers to tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Define a list of tuples that contains strings and integers\n    test_list = [('hello', 123), ('world', 456), ('!', 789)]\n\n    # Create a list to hold the converted tuples\n    converted_list = []\n\n    # Loop through each tuple in the test list\n    for tup in test_list:\n        # Convert the string in the tuple to an integer\n        int_tup = (tup[0], int(tup[1]))\n        # Add the converted tuple to the converted list\n        converted_list.append(int_tup)\n\n    # Return the converted list of tuples\n    return converted_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list\n    lst = list(test_str)\n    # Initialize a new list to store the integers\n    int_lst = []\n    # Loop through the list\n    for i in lst:\n        # If the element is a digit, append it to the integer list\n        if i.isdigit():\n            int_lst.append(int(i))\n    # Return the integer list as a tuple\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # convert string to tuple\n        test_tuple = tuple(test_str.split(','))\n        # convert tuple to integer tuple\n        int_tuple = tuple(int(i) for i in test_tuple)\n        return int_tuple\n    except ValueError:\n        # if conversion fails, raise ValueError\n        raise ValueError(\"Could not convert the string to integer tuple.\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = tuple(map(int, test_str.split(',')))\n    return new_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into individual elements\n    elements = test_str.split(',')\n\n    # Convert each element to an integer\n    int_elements = [int(e) for e in elements]\n\n    # Convert the list of integers into a tuple\n    int_tuple = tuple(int_elements)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into individual elements\n    str_elements = test_str.split(',')\n\n    # Convert each element to integer and append to new tuple\n    int_tuple = tuple([int(str_element.strip()) for str_element in str_elements])\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list of tuples\n    test_list = [tuple(i) for i in test_str]\n    # Convert the list of tuples back to a tuple\n    test_tuple = tuple([int(j) for j in test_list])\n    return test_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        i -= 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Locate the insertion point using bisect.bisect_right function\n    insertion_point = bisect.bisect_right(a, x)\n    # If the insertion point is 0, then the value is greater than all the values in the list\n    if insertion_point == 0:\n        return -1\n    # If the insertion point is the length of the list, then the value is smaller than all the values in the list\n    elif insertion_point == len(a):\n        return len(a)\n    # If the insertion point is greater than 0, then the value is between two values in the list\n    else:\n        return insertion_point"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find the index of the first element greater than or equal to x\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        # if the value x is greater than all elements in the list, i will be equal to len(a), so append at the end\n        a.append(x)\n    elif a[i]!= x:\n        # if the value x is not equal to the value at the i-th index, it means the value x should be inserted to the right of i-th index\n        a.insert(i+1, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list `a` and a value `x`. It uses binary search to locate the index of the right insertion point for `x` in `a`.\n\n    Args:\n        a (list): A sorted list of values.\n        x (int): The value we want to locate the right insertion point for.\n\n    Returns:\n        int: The index of the right insertion point for `x` in `a`.\n\n    \"\"\"\n    # Use binary search to find the index of the right insertion point\n    index = bisect.bisect_right(a, x)\n    \n    # Return the index of the right insertion point\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect.bisect_right returns the index where x should be inserted in a\n    # to achieve this, we need to find the index of the last element in a\n    # that is smaller than or equal to x\n    last_smaller = bisect.bisect_right(a, x)\n    # if the index of the last smaller element is the length of the list,\n    # then x must be the last element in the list\n    if last_smaller == len(a):\n        return len(a)\n    # return the index of the last smaller element plus one\n    return last_smaller + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[ab]{1}[b]{3}'\n    return re.findall(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b{3}\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb{2}\\ba'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\w{3}b'\n    return re.search(pattern, text)\n\ntext = 'This is a series of words that have abbbbbbbbbbbbbb'\nresult = text_match_three(text)\n\nif result:\n    print(\"The pattern was found.\")\nelse:\n    print(\"The pattern was not found.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{2})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[^b]*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\w{3}b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'\\ba\\bb{3}\\b')\n    return pattern.search(text)\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nresult = text_match_three(text)\nif result:\n    print(\"Match found at index\", result.start())\nelse:\n    print(\"Match not found\")"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string into a single string using the + operator\n    new_str = ''.join(test_list) + test_str\n    # Convert the concatenated string into a list of characters using the list() function\n    new_list = list(new_str)\n    # Convert the list of characters into a tuple using the tuple() function\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists into one\n    combined_list = test_list + [test_str]\n    # Convert the list to a tuple\n    new_tuple = tuple(combined_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create a list of tuples with the given string and list as elements\n    tup_list = [(test_str, item) for item in test_list]\n    # convert the list of tuples to a new tuple\n    new_tup = tuple(tup_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, *test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert list to tuple\n    new_list = tuple(test_list)\n    \n    # Convert string to list\n    new_str = list(test_str)\n    \n    # Combine the two lists into a new tuple\n    new_tuple = new_list + new_str\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple\n    new_tuple = tuple(test_list)\n    # Convert the string to a list\n    new_list = list(test_str)\n    # Append the second list to the first tuple\n    new_tuple += new_list\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    :param test_list: list of values to include in the new tuple\n    :type test_list: list\n    :param test_str: string to include in the new tuple\n    :type test_str: str\n    :return: new tuple created from the input parameters\n    :rtype: tuple\n    \"\"\"\n    return (test_str, *test_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += 1\n            if even_count > 1:\n                return False\n        else:\n            even_count = 0\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if not any(nums[j] % 2 == 0 for j in range(i+1, len(nums), 2)):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n    return count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for num in nums[i:]:\n                if num % 2 == 0:\n                    count += 1\n                if count > 1:\n                    return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if not any(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # empty list to store the non-tuple elements\n    non_tuples = []\n    # iterate through the tuple elements\n    for element in test_tup:\n        # if the element is a tuple, add it to the non_tuples list\n        if isinstance(element, tuple):\n            non_tuples.extend(remove_nested(element))\n        # if the element is not a tuple, add it to the non_tuples list\n        else:\n            non_tuples.append(element)\n    # return the non_tuples list\n    return non_tuples"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Check if the input is a tuple\n    if isinstance(test_tup, tuple):\n        # Recursively iterate through the tuple\n        for item in test_tup:\n            if isinstance(item, tuple):\n                # Call the function recursively\n                remove_nested(item)\n            else:\n                # If the item is not a tuple, append it to a new list\n                new_list = remove_nested(item)\n                test_tup.extend(new_list)\n    # If the input is not a tuple, return an empty list\n    else:\n        return []\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while test_tup:\n        if isinstance(test_tup[0], tuple):\n            test_tup = test_tup[0]\n        else:\n            break\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result += remove_nested(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the non-nested tuples\n    non_nested_list = []\n    # Loop through each element in the input tuple\n    for elem in test_tup:\n        # If the element is not a tuple, append it to the non_nested_list\n        if not isinstance(elem, tuple):\n            non_nested_list.append(elem)\n        # If the element is a tuple, recursively call the function on it and append the result to non_nested_list\n        else:\n            # Recursively call the function on the element and append the result to the non_nested_list\n            non_nested_list.extend(remove_nested(elem))\n    # Return the non_nested_list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            flat_tup.append(item)\n    return tuple(flat_tup)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right if arr[right] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # Element not found"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two parameters - an array and an element x.\n    It returns the last position of the element x in the array.\n    If x is not present in the array, it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Find the index of the first occurrence of x in the array\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Return the index of the last occurrence of x in the array\n    return right + 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #find the leftmost index of x in arr\n    left=0\n    right=len(arr)-1\n    while(left<=right):\n        mid=left+(right-left)//2\n        if arr[mid]==x:\n            right=mid-1\n        elif arr[mid]<x:\n            left=mid+1\n        else:\n            right=mid-1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    This function takes two parameters:\n    arr: the sorted array to search in\n    x: the element to find the last occurrence of\n    \n    This function returns the last position of the element x in the sorted array arr, or -1 if it doesn't exist.\n    '''\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[a-zA-Z0-9]+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog. It is a beautiful day.\"\nmatches = text_starta_endb(text)\nprint(matches)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(?=.*b)$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_value = 0\n    for item in dict.values():\n        sum_value += item\n    return sum_value"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_ = 0\n    for key, value in dict.items():\n        sum_ += value\n    return sum_"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0 \n    for i in range(n): \n        if i % 2!= 0: \n            s += i \n    return s "
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum variable to zero\n    total = 0\n    # loop through each odd natural number from 1 to n\n    for i in range(1, n+1, 2):\n        # add the odd natural number to the total\n        total += i\n    # return the total sum of odd natural numbers\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # take input from user\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # initialize the sum to zero\n    sum_of_odds = 0\n\n    # iterate through the range and add the odd numbers to the sum\n    for num in range(l, r+1, 2):\n        sum_of_odds += num\n\n    # print the sum of odd numbers within the range\n    print(\"The sum of odd numbers within the range is:\", sum_of_odds)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    s = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            s += i\n    print(\"The sum of odd natural numbers within the range\", l, \"and\", r, \"is\", s)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    result = 0\n    while l <= r:\n        if l % 2!= 0:\n            result += l\n        l += 1\n    return result"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n        \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes a natural number n as input and returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the odd number to the sum\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n\n    # Get the input range as integers\n    l, r = map(int, input(\"Enter the range (l, r): \").split())\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through all the odd numbers between l and r\n    for i in range(l, r+1, 2):\n        # Add the current odd number to the sum\n        sum += i\n\n    # Return the sum of all odd numbers in the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two parameters, l and r, which represent the lower and upper limits of the range.\n    It finds the sum of all odd natural numbers within the range and returns it.\n    '''\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    total = 0\n    while l <= r:\n        if l % 2!= 0:\n            total += l\n        l += 1\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for num in arr:  \n        total += num  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of its elements.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_array(arr):\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    result = 0\n    for num in arr:\n        result += num\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize a variable to store the sum\n    total = 0\n\n    # Loop through each element in the array\n    for num in arr:\n        # Add the element to the sum\n        total += num\n\n    # Return the final sum\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    for i in range(d):\n        n = (n << 1) & mask\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    n = n & mask\n    d = d & 0x1f\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    num_binary = bin(n)[2:]\n    \n    # Calculate the number of bits to rotate by\n    num_bits = len(num_binary)\n    rotate_bits = num_bits - d\n    \n    # Check if the number of bits to rotate by is greater than the number of bits in the number\n    if rotate_bits > num_bits:\n        # If it is, rotate by the number of bits in the number\n        rotate_bits = num_bits\n    \n    # Calculate the number of rotations to perform\n    num_rotations = rotate_bits // 32\n    \n    # Calculate the number of bits to rotate each time\n    rotate_bits_per_rotation = rotate_bits % 32\n    \n    # Initialize the rotated bits to zero\n    rotated_bits = [0] * rotate_bits\n    \n    # Iterate over the rotations and rotate the bits\n    for i in range(num_rotations):\n        # Calculate the index of the first bit to rotate\n        index = 32 * i + rotate_bits_per_rotation - 1\n        \n        # Calculate the value to rotate by\n        value = int(num_binary[index:index+32], 2)\n        \n        # Rotate the bits\n        for j in range(32):\n            rotated_bits[j] = (value >> (31-j)) | (value << j)\n            \n        # Shift the bits to the left\n        num_binary = num_binary[rotate_bits_per_rotation:] + num_binary[:rotate_bits_per_rotation]\n        \n    # Return the rotated number\n    return int(num_binary, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    # If d is greater than the number of bits in the number, rotate d-bit-per-word times\n    d = d % 32\n    if d > 0:\n        d_per_word = 32 - d\n        for i in range(d_per_word):\n            n = (n << 1) | (n >> (32-1))\n        n = (n << d) | (n >> (32-d))\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the given number to binary and take the last d bits\n    last_d_bits = (n & ((1 << d) - 1)) << (32 - d)\n\n    # Shift the given number to the left by d bits\n    shifted_n = n >> d\n\n    # Combine the shifted and last d bits\n    result = shifted_n | last_d_bits\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & 0xFFFFFFFF # mask to ensure that the number is 32 bits\n    d = d % 32 # wrap around to 0 to 31\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF # rotate left and mask to ensure that the result is 32 bits"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define a regular expression pattern to match all whitespaces\n    pattern = re.compile(r'\\s+')\n    # Replace all occurrences of whitespaces with an empty string\n    return pattern.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    # Remove all spaces using regular expression\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expressions to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    # return the cleaned string\n    return text"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count\n\nprint(test_three_equal(1, 2, 3)) # Output: 1\nprint(test_three_equal(1, 2, 4)) # Output: 0\nprint(test_three_equal(2, 2, 4)) # Output: 0"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            for k in range(z, i+1):\n                if i == j == k:\n                    count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # Traverse the array for n-1 times\n    for i in range(n-1):\n        # If the element at the current index is greater than the next element\n        if arr[i] > arr[i+1]:\n            # Find the minimum element in the remaining unsorted array\n            min_val = arr[i+1]\n            for j in range(i+2, n):\n                if arr[j] < min_val:\n                    min_val = arr[j]\n            # Swap the minimum element with the element at the current index\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            # Increment the count\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Find the smallest and largest element in the array\n    min_elem = min(arr)\n    max_elem = max(arr)\n\n    # Find the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(1, n):\n        # If the i-th element is less than the (i-1)-th element\n        if arr[i-1] > arr[i]:\n            # If the (i-1)-th element is greater than or equal to the min_elem, rotate the array\n            if arr[i-1] >= min_elem:\n                count += 1\n                # Reverse the array from i to n-1\n                arr = arr[i:n]\n                arr = arr[::-1]\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Check if array is sorted in increasing order\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return 0\n\n    # Count number of rotations\n    count = 0\n    for i in range(n):\n        j = i + 1\n        while j < n:\n            if arr[j] > arr[i]:\n                count += 1\n            j += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if the array is already sorted\n    if is_sorted(arr):\n        return 0\n    # find the pivot element\n    pivot = find_pivot(arr)\n    # partition the array around the pivot\n    left, right = partition(arr, pivot)\n    # count the number of rotations required to generate the sorted array\n    rotations = count_rotations(left, pivot, right)\n    return rotations\n\ndef find_pivot(arr):\n    # assume the array is already sorted\n    first = arr[0]\n    last = arr[n-1]\n    # find the median element\n    mid = (first + last) // 2\n    if arr[mid] > arr[0]:\n        return arr[mid]\n    elif arr[mid] < arr[n-1]:\n        return arr[mid]\n    else:\n        return arr[0]\n\ndef partition(arr, pivot):\n    i = 0\n    j = n-1\n    while i <= j:\n        while arr[i] < pivot:\n            i += 1\n        while arr[j] > pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return i, j\n\ndef count_rotations(left, pivot, right):\n    if left == right:\n        return 0\n    rotations = 0\n    # find the largest element on the left of the pivot\n    pivot_index = left\n    while pivot_index < right and arr[pivot_index] == arr[right]:\n        pivot_index += 1\n    max_index = left + pivot_index - right\n    # find the smallest element on the right of the pivot\n    min_index = right - pivot_index\n    while pivot_index > left and arr[pivot_index] == arr[left]:\n        pivot_index -= 1\n    min_index = min(min_index, left + pivot_index - right)\n    # calculate the number of rotations required to generate the sorted array\n    if max_index < min_index:\n        rotations += (min_index - max_index - 1) // 2\n    else:\n        rotations += min_index - max_index - 1\n    return rotations\n\ndef is_sorted(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Check if array is already sorted or not\n    if arr == sorted(arr):\n        return 0\n\n    # Find the pivot index\n    pivot = arr[0]\n    for i in range(1, n):\n        if arr[i] < pivot:\n            pivot = arr[i]\n\n    # Count rotations\n    left, right = 0, n - 1\n    count = 0\n    while left < right:\n        if arr[left] > pivot:\n            left += 1\n        elif arr[right] < pivot:\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n        count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if the array is sorted or not\n    if arr[0] <= arr[1] and arr[n-2] >= arr[n-1]:\n        return 0\n    else:\n        # find the minimum element of the array\n        min_element = arr[0]\n        for i in range(1, n):\n            if arr[i] < min_element:\n                min_element = arr[i]\n        # rotate the array to the right by the minimum element\n        temp = min_element\n        i = 0\n        j = 0\n        while i < n:\n            arr[j] = arr[i]\n            i += 1\n            j += 1\n        arr[j] = temp\n        # count the number of rotations required to generate a sorted array\n        count = 0\n        for i in range(n-2):\n            if arr[i] > arr[i+1]:\n                count += 1\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. \n    '''\n    n = len(arr)\n    count = 0\n    i = 0\n    j = n - 1\n    \n    while i < j:\n        if arr[i] > arr[j]:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] < arr[j]:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n and arr[j] >= arr[i]:\n            j += 1\n        count += j - i - 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i < n - 1:\n            if arr[i] > arr[i + 1]:\n                count += 1\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Calculate the square root of n\n    root = n ** 0.5\n\n    # Check if the square root is an integer\n    if not isinstance(root, int) or root ** 2!= n:\n        return False\n\n    # The number is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if the number is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # check if the number is a perfect square\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = n ** 0.5\n    return int(root) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n <= 1:\n        return False\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    left, right = 0, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0 and i ** 2 == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # We can check if the number is a perfect square by squaring it and then checking if the result is equal to the original number\n    square = n * n\n    if square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = n ** 0.5\n    return root == int(root)"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    if len(arr) < 2:\n        return \"List should have at least 2 elements\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"Product is even\"\n    else:\n        return \"Product is odd\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    # Initialize variables to store even and odd products\n    even_product = 1\n    odd_product = 1\n    \n    # Loop through each number in the list\n    for num in arr: \n        # Check if the product is even or odd\n        if num % 2 == 0: \n            even_product *= num\n        else: \n            odd_product *= num\n            \n    # Check if the even and odd products are the same\n    if even_product == odd_product: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if not arr:\n        return 'The list is empty.'\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return 'The product of the numbers in the list is even.'\n    else:\n        return 'The product of the numbers in the list is odd.'"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for i in arr:\n        product *= i\n        \n    if product % 2 == 0:\n        return \"The product of the numbers in the list is even.\"\n    else:\n        return \"The product of the numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize max_sum to be the first sum of the first element in the first list\n    max_sum = sum(lists[0][0])\n\n    # iterate through each sublist in the lists\n    for sublist in lists:\n        # calculate the sum of the sublist elements\n        sublist_sum = sum(sublist)\n        # check if the sublist sum is greater than the current max_sum\n        if sublist_sum > max_sum:\n            # update max_sum to be the sublist sum\n            max_sum = sublist_sum\n\n    # return the list whose sum is the highest\n    return lists[max_sum_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            total = 0\n            for k in range(len(lists[i][j])):\n                total += lists[i][j][k]\n            if total > max_sum:\n                max_sum = total\n                max_list = lists[i][j]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n    max_sum = max([sum(i) for i in lists])\n    return [lst for lst in lists if sum(lst) == max_sum]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        for j in i:\n            if j > max_sum:\n                max_sum = j\n                max_list = [j]\n            elif j == max_sum:\n                max_list.append(j)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n\n    # Find the sum of all elements in each list\n    list_sums = [sum(lst) for lst in lists]\n\n    # Find the maximum sum\n    max_sum = max(list_sums)\n\n    # Find the lists whose sum is the maximum\n    max_lists = [lst for lst in lists if sum(lst) == max_sum]\n\n    # Return the maximum list\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        temp_sum = sum(lists[i])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_list = []\n    max_sum = 0\n\n    # loop through each sublist\n    for sublist in lists:\n        # calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # update the maximum sum if necessary\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    # return the maximum sum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables to keep track of maximum sum and its list\n    max_sum = float('-inf')\n    max_list = None\n    # loop through each list in the input list of lists\n    for lst in lists:\n        # calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n        # check if the sum is greater than the current maximum sum\n        if sum_lst > max_sum:\n            # if it is, update the maximum sum and its list\n            max_sum = sum_lst\n            max_list = lst\n    # return the maximum sum and its list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    max_list = None\n\n    # iterate over all lists in the input list\n    for list in lists:\n        # calculate the sum of the elements in the current list\n        current_sum = sum(list)\n\n        # check if the current sum is greater than the maximum sum so far\n        if current_sum > max_sum:\n            # update the maximum sum and list\n            max_sum = current_sum\n            max_list = list\n\n    # return the maximum list\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    prev_char = \"\"\n\n    for char in test_str:\n        if char.isupper() and prev_char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 1\n        prev_char = char\n\n    max_run = max(max_run, current_run)\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # convert all characters to lowercase\n    test_str = test_str.lower()\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    # iterate over the string\n    for i in range(len(test_str)):\n        # if the character is uppercase, increment the current run\n        if test_str[i] >= 'a' and test_str[i] <= 'z':\n            current_run += 1\n        # if the current run is longer than the maximum run, update the maximum run\n        elif current_run > max_run:\n            max_run = current_run\n        # if the character is not uppercase, reset the current run to 0\n        else:\n            current_run = 0\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            count += 1\n            current_run += 1\n        else:\n            count = 0\n            current_run = 0\n\n        if count == 0:\n            continue\n\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    n = len(test_str)\n    max_run = 0\n    max_run_start = 0\n    current_run = 0\n    for i in range(n):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                max_run_start = i - max_run + 1\n            current_run = 0\n    return test_str[max_run_start:max_run_start + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    uppercase_found = False\n    for char in test_str:\n        if char.isupper():\n            uppercase_found = True\n        else:\n            if uppercase_found:\n                current_run += 1\n            else:\n                continue\n        if current_run > max_run:\n            max_run = current_run\n        uppercase_found = False\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables to keep track of current run and max run\n    current_run = 0\n    max_run = 0\n    \n    # loop through each character in the string\n    for i in range(len(test_str)):\n        # if the current character is uppercase and its a start of a new run, update current_run and max_run\n        if test_str[i].isupper() and i == 0:\n            current_run = 1\n            max_run = 1\n        # if the current character is uppercase and its part of a run, increment current_run and update max_run if necessary\n        elif test_str[i].isupper() and i > 0 and test_str[i-1].isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        # if the current character is not uppercase, reset current_run\n        else:\n            current_run = 0\n    \n    # return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    start = 0\n    # Loop through the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase and the next one is not, increase the run count\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            max_run += 1\n        else:\n            # If the run count is greater than the current maximum, update the start and maximum\n            if max_run > start:\n                start = 0\n            max_run = 0\n    # Return the maximum run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    start = 0\n    max_run = 0\n    count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_run:\n                max_run = count\n                start = i - count + 1\n            count = 0\n    if count > max_run:\n        max_run = count\n        start = len(test_str) - count + 1\n    return test_str[start:start + max_run]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to store the start and end indices of the maximum run of uppercase characters\n    start_index = 0\n    end_index = 0\n    \n    # Initialize variables to store the length of the current run of uppercase characters\n    run_length = 0\n    max_run_length = 0\n    \n    # Iterate over the characters in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, update the run_length and check if it's longer than max_run_length\n        if test_str[i].isupper():\n            run_length += 1\n            if run_length > max_run_length:\n                max_run_length = run_length\n                start_index = i - run_length + 1\n                end_index = i\n        # If the current character is not uppercase, reset the run_length\n        else:\n            run_length = 0\n    \n    # Return the maximum run of uppercase characters found in the string\n    return test_str[start_index:end_index+1]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    # If no odd number is found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # if no odd number is found in the list"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == len(test_tup) and K in set(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for num in test_tup:\n        if num == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for tup in test_tup:\n        if len(tup) < K:\n            return False\n        for elem in tup:\n            if elem not in K:\n                return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if test_tup[i] not in test_tup[:K]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples are not of the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # loop through the tuples\n    for i in range(len(test_tup1)):\n        # compare the elements and return False if there's a smaller element\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    # if we get to here, all elements in the second tuple are smaller than or equal to their corresponding element in the first tuple\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # compare the elements of the first tuple and second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return True\n        elif test_tup1[i] > test_tup2[i]:\n            return False\n    # if all the elements of the first tuple are smaller than or equal to the second tuple, then the second tuple is smaller\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    }
]