[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    shared_list = []\n\n    for num1 in test_tup1:\n        for num2 in test_tup2:\n            if num1 == num2:\n                shared_list.append(num1)\n\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Find the common elements\n    common_elements = [x for x in test_tup1 if x in test_tup2]\n\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert both tuples to lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n    \n    # Remove duplicates from each list and concatenate them into one list\n    combined_list = list(set(tup1_list + tup2_list))\n    \n    # Iterate over the combined list and return the shared elements\n    shared_elements = []\n    for element in combined_list:\n        if element in tup1_list and element in tup2_list:\n            shared_elements.append(element)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input, and returns a list of all the elements that appear in both tuples.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets for each list and find the intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    \n    # Convert set to list and return\n    shared_list = list(shared_set)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Loop through each element in the first tuple and check if it exists in the second tuple\n    for elem in test_tup1:\n        if elem in test_tup2:\n            # If the element exists, return the element\n            return elem\n    # If no shared elements are found, return None\n    return None"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2 or n == 3:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return True\n            i += 6\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n <= 1 or n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and returns the n largest integers in descending order.\n    '''\n    # Use a max-heap to store the n largest numbers\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                hq.heappop(max_heap)\n                hq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    while n > 0:\n        largest.append(hq.heappop(nums))\n        n -= 1\n    return largest[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap with the first n elements of the list\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # compare the first n elements of the list with the remaining elements of the list and insert the larger elements in the heap\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, nums[i])\n\n    # return the n largest elements in descending order\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Converting the list to a min heap\n    min_heap = []\n    for num in nums:\n        hq.heappush(min_heap, -num)\n    # Extracting the n largest numbers from the heap\n    largest_nums = []\n    for _ in range(n):\n        largest_nums.append(-hq.heappop(min_heap))\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list to min heap\n    hq.heapify(nums)\n\n    # extract the largest n elements from the heap\n    largest = [hq.heappop(nums) for _ in range(n)]\n\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = nums\n    hq.heapify(heap)\n    for i in range(n):\n        hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = []\n    heapq.heapify(largest)\n    \n    # add the first n elements to the heap\n    for num in nums[:n]:\n        heapq.heappush(largest, num)\n    \n    # add the remaining elements to the heap\n    for num in nums[n:]:\n        if num > largest[0]:\n            # update the heap\n            heapq.heapreplace(largest, num)\n        else:\n            # remove the smallest element if the new element is smaller\n            heapq.heappop(largest)\n            heapq.heappush(largest, num)\n    \n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > max(heap):\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # check if x is even\n    if x & 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if the input is a positive integer\n    if type(x)!= int or x <= 0:\n        return False\n\n    # Convert the input to binary and split it into two parts\n    binary_str = bin(x)[2:]\n    part1 = binary_str[:len(binary_str)//2]\n    part2 = binary_str[len(binary_str)//2:]\n\n    # Check if the two parts differ at only one bit position\n    if len(part1)!= len(part2):\n        return False\n\n    # Check if the two parts differ only at one bit position\n    for i in range(len(part1)):\n        if part1[i]!= part2[i]:\n            if part1[i] == '1' and part2[i] == '0':\n                return False\n            else:\n                return False\n\n    # If the two parts differ only at one bit position, return True\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = 0\n    while x!= 1:\n        if x & 1:\n            diff += 1\n        x >>= 1\n    return diff"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(n):\n    # Check if n is a power of 2\n    if (n & (n - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x < 2:\n        return False\n    \n    while x > 1:\n        x = x // 2\n        \n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of two or not\n    while (x & (x-1))!= 0:\n        x &= (x-1)\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    if x > 0:\n        for i in range(1, 32):\n            if ((x & (1 << i))!= (x & (1 << (i-1)))):\n                return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Take input for two numbers\n    num1 = int(input(\"Enter first number: \"))\n    num2 = int(input(\"Enter second number: \"))\n\n    # Get the binary representation of both numbers\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n\n    # Check if the length of the binary representation is equal\n    if len(bin1)!= len(bin2):\n        return False\n\n    # Compare the binary representations\n    for i in range(len(bin1)):\n        if bin1[i]!= bin2[i]:\n            return True\n\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x!= 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = 3 * x + 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Check if the number is 1\n    if x == 1:\n        return True\n    \n    # Find the rightmost set bit in the binary representation of x\n    rightmost_set_bit = 0\n    while x & 1 == 0:\n        x >>= 1\n        rightmost_set_bit += 1\n    \n    # Check if the two numbers differ at only one bit position\n    return (x!= (x >> rightmost_set_bit)) & (x!= (x << rightmost_set_bit))"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into a list of words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b' # find all words that are at least 4 characters long\n    matches = re.findall(pattern, text) # use regular expressions to find all matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b')\n    words = re.findall(pattern, text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\w+', text) # split the text into words using regular expressions\n    long_words = [word for word in words if len(word) >= 4] # filter words that are at least 4 characters long\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into words\n    words = text.split()\n    # initialize an empty list to store the words that are at least 4 characters long\n    long_words = []\n    # loop through each word in the list of words\n    for word in words:\n        # check if the length of the word is at least 4 characters long\n        if len(word) >= 4:\n            # add the word to the list of long words if it is long enough\n            long_words.append(word)\n    # return the list of long words\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_num = num * num\n        squared_nums.append(squared_num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # length of the string\n    n = len(str)\n\n    # all possible rotations of the string\n    rotations = [str[::-1]]\n\n    # loop over all possible rotations\n    for i in range(n):\n        # create a new rotation by inserting the character at position i\n        rotation = str[:i] + str[i] + str[i+1:]\n        # add the new rotation to the list of rotations\n        rotations.append(rotation)\n\n    # find the minimum number of rotations required to get the same string\n    min_rotations = n\n    for rotation in rotations:\n        if rotation == str:\n            min_rotations = min(min_rotations, n-1)\n\n    # return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    n = len(str) # length of the string\n\n    # for each character in the string, we need to check if there is a valid rotation\n    # that can be made using that character.\n    # for each character, we are looking for the two characters that have the same value.\n    # for example, if the character is 'a', then we need to look for 'a' and 'b'\n    # for each such pair, we check if they form a palindrome\n    # if they do form a palindrome, then we can make a rotation by swapping their positions.\n    # if there are more than one such pair, we need to choose the one that appears earlier in the string.\n\n    # initialize a list to store the valid rotations for each character\n    validRotations = {}\n\n    # loop through each character in the string\n    for i in range(n):\n        # get the value of the current character\n        char = str[i]\n        # get all the characters with the same value as the current character\n        pairs = [j for j in range(n) if str[j] == char]\n        # loop through all pairs of characters with the same value\n        for p in pairs:\n            # get the two characters in the pair\n            pair = str[p:p+2]\n            # check if they form a palindrome\n            if pair == pair[::-1]:\n                # if they form a palindrome, add the valid rotation to the list for the current character\n                if char in validRotations:\n                    validRotations[char].append(p)\n                else:\n                    validRotations[char] = [p]\n\n    # initialize a dictionary to store the minimum number of rotations for each character\n    minRotations = {}\n\n    # loop through each valid rotation for each character\n    for char in validRotations:\n        # get the valid rotations for the current character\n        rotations = validRotations[char]\n        # loop through all the valid rotations for the current character\n        for r in rotations:\n            # get the rotation index for the current rotation\n            rotationIndex = r // 2 # r is the index of the middle character of the rotation, which is also the index of the first character of the rotation\n            # if the current rotation has a smaller index than the current minimum rotation for the current character, update the minimum rotation\n            if rotationIndex < minRotations[char]:\n                minRotations[char] = rotationIndex\n\n    # loop through each character in the string and find the minimum number of rotations required to get the same string\n    result = []\n    for i in range(n):\n        char = str[i]\n        # find the minimum number of rotations required to get the same string for the current character\n        minRotation = minRotations[char]\n        # if the minimum number of rotations required to get the same string for the current character is greater than 0, add it to the result list\n        if minRotation > 0:\n            result.append(minRotation)\n        else:\n            # if the minimum number of rotations required to get the same string for the current character is 0, then there is no valid rotation to make, so add a dummy value to the result list\n            result.append(0)\n\n    # return the result list, which contains the minimum number of rotations required to get the same string for each character in the input string\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Initialize the minimum number of rotations to be the length of the string\n    min_rotations = len(str)\n    \n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        # Initialize a counter for the current rotation\n        current_count = 0\n        \n        # Iterate through the string from the current index\n        for j in range(i, len(str)):\n            # Check if the current character is present in the char_count dictionary\n            if str[j] in char_count:\n                # Increment the counter\n                current_count += char_count[str[j]]\n            \n            # If the counter is greater than the previous one, update the minimum number of rotations\n            if current_count > min_rotations:\n                min_rotations = current_count\n    \n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    length = len(str)\n    for i in range(length):\n        for j in range(i+1, length):\n            rotated_str = str[j:] + str[:j]\n            if len(rotated_str) == length:\n                return 0\n            if len(rotated_str) < length:\n                return j - i + 1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    max_length = 0\n    for i in range(n):\n        if str[i] == str[(i+n) % n]:\n            count += 1\n        else:\n            max_length = max(max_length, count)\n            count = 1\n    if count > 0:\n        max_length = max(max_length, count)\n    return max_length + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    for i in range(n):\n        j = i + 1\n        while j < n and str[i] == str[j]:\n            j += 1\n        if j - i > 1:\n            rotations += 1\n            i = j - 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # Find the maximum frequency\n    max_freq = max(freq.values())\n    \n    # Create a set to store the characters that can be rotated\n    rotate_set = set()\n    for char in str:\n        if freq[char] < max_freq:\n            rotate_set.add(char)\n    \n    # Find the minimum number of rotations required\n    min_rotations = float('inf')\n    for char in rotate_set:\n        if freq[char] == max_freq:\n            min_rotations = 1\n            break\n        elif freq[char] < max_freq:\n            min_rotations += 1\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Initialize a dictionary to store the counts of each character\n    char_counts = {}\n    for char in str:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    # Calculate the minimum rotations required\n    min_rotations = 0\n    for value in char_counts.values():\n        if value > 1:\n            min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    m = n // 2\n    for i in range(m, 0, -1):\n        if str[i]!= str[(i - 1) % n]:\n            return i - 1 + 1 - m\n    return m + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i:j+1] == str[j:i+1]:\n                return j-i+1\n    return n-1"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of ch\n    i = s.find(ch)\n    while i!= -1:\n        s = s[:i] + s[i+1:]\n        i = s.find(ch)\n    # remove last occurrence of ch\n    i = s.rfind(ch)\n    while i!= -1:\n        s = s[:i] + s[i+1:]\n        i = s.rfind(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the string contains the character\n    if ch in s:\n        # remove the first occurrence of the character\n        if s.count(ch) > 1:\n            s = s.replace(ch, '', 1)\n        # remove the last occurrence of the character\n        else:\n            s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Check if the given character is present in the string\n    if ch in s:\n        # Split the string into list of characters\n        lst = list(s)\n        # Find the index of the first occurrence of the given character\n        i = lst.index(ch)\n        # Remove the first occurrence of the character from the list\n        lst.pop(i)\n        # Find the index of the last occurrence of the given character\n        j = lst.rindex(ch)\n        # Remove the last occurrence of the character from the list\n        lst.pop(j)\n        # Convert the list back to a string and return the result\n        return ''.join(lst)\n    else:\n        # If the given character is not present in the string, return the original string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence\n    s = s.replace(ch, '')\n    # Remove last occurrence\n    s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove the first occurrence of the character\n    while s.startswith(ch):\n        s = s[len(ch):]\n    # Remove the last occurrence of the character\n    while s.endswith(ch):\n        s = s[:-len(ch)]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    if len(s) >= 1:\n        return s[1:-1]\n    else:\n        return ''"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        s = s.replace(ch, '', 1)\n    if ch in s:\n        s = s.replace(ch, '', 1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return s\n    if s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return ch + remove_Occ(s[1:-1], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find the index of the first occurrence of the character\n    first_occurrence_index = s.find(ch)\n    # If the character is not found, return the original string\n    if first_occurrence_index == -1:\n        return s\n    # Find the index of the last occurrence of the character\n    last_occurrence_index = s.rfind(ch)\n    # If the last occurrence is before the first occurrence, return the original string\n    if last_occurrence_index < first_occurrence_index:\n        return s\n    # Remove the first and last occurrences of the character\n    return s[:first_occurrence_index] + s[last_occurrence_index+1:]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # sort the matrix by row sums in ascending order\n    sorted_M = sorted(M, key=lambda row: row_sums.index(sum(row)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row in the matrix\n    for i in range(len(M)):\n        # Find the sum of the current row\n        row_sum = sum(M[i])\n        # Sort the current row in ascending order\n        M[i].sort()\n        # Reverse the sorted row in descending order to maintain the order of the row sum\n        M[i] = list(reversed(M[i]))\n        # Calculate the sum of the sorted row\n        sorted_row_sum = sum(M[i])\n        # If the current row sum is less than the sorted row sum, swap the two rows\n        if row_sum < sorted_row_sum:\n            M[i], M[i+1] = M[i+1], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    This function takes a 2D matrix as input and sorts it in ascending order based on the sum of its rows.\n    \"\"\"\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # create a new matrix to store the sorted matrix\n    sorted_M = [[0 for j in range(len(M))] for i in range(len(M))]\n\n    # loop through each row of the matrix and find the sum of its elements\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        # loop through each column of the matrix and compare its elements with the row sum\n        for j in range(len(M[i])):\n            if M[i][j] < row_sum:\n                sorted_M[i][j] = M[i][j]\n            else:\n                sorted_M[i][j] = row_sum - M[i][j]\n\n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = sum(M[i])\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the sum of the row i\n        row_sum = sum(M[i])\n        # Find the minimum element in the row i\n        min_elem_index = M[i].index(min(M[i]))\n        # Swap the minimum element with the element at index i\n        M[i][min_elem_index], M[i][i] = M[i][i], M[i][min_elem_index]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows in ascending order based on their sums\n    sorted_rows = sorted(M, key=lambda x: x[row_sums.index(sum(x))])\n\n    # Replace the original matrix with the sorted rows\n    M = sorted_rows\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Create a list to store the sorted matrix\n    sorted_matrix = []\n\n    # Sort the matrix in ascending order by row sums\n    for i in range(len(M)):\n        sorted_matrix.append(sorted(M[i], reverse=True))\n\n    # Create a new list to store the sorted rows\n    sorted_rows = []\n\n    # Sort the rows in ascending order by column sums\n    for row in sorted_matrix:\n        sorted_rows.append(sorted(row, reverse=True))\n\n    # Return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the maximum element in the current row\n        max_idx = i\n        for j in range(i+1, n):\n            if M[j][i] > M[max_idx][i]:\n                max_idx = j\n        # Swap the maximum element with the current element\n        M[i], M[max_idx] = M[max_idx], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # sort the row sums in ascending order\n    row_sums.sort()\n    \n    # sort the rows in descending order based on the sorted row sums\n    sorted_rows = [M[i] for i in range(len(M)) if row_sums[i] == row_sums[i+1]]\n    \n    # return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l*b*h\n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = 1/3 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 0.5 * l * b * h\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h #Volume of the triangle\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the prism\n    area = 0.5 * l * b\n\n    # Calculate the volume of the prism\n    volume = area * h\n\n    # Return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    area = l*b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3  # Calculate the volume using the formula for the volume of a triangular prism.\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is: \", volume)\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'\\b[a-z][a-z0-9]*_[a-z0-9]*\\b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r\"([a-z])([a-z]+)(_)\"\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+_[a-z]+$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?i)[a-z]+_[a-z]+|[a-z]+\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z](?:_[a-z])*_[a-z]'\n    \n    # Use the re.search() function to search for matches in the input string\n    match = re.search(pattern, text)\n    \n    # Return True if a match was found, False otherwise\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'(?<=\\b[a-z])[a-z](?=\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<![A-Z])(?=[a-z])')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z_]+'\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(side):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    perimeter = 4 * side\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if string.count(chr(i)) > 0:\n            string = string.replace(chr(i), '')\n    return string\n\nif __name__ == '__main__':\n    string = input(\"Enter a string: \")\n    string_to_remove = input(\"Enter a string to remove: \")\n    result = str_to_list(string)\n    result = result.replace(string_to_remove, '')\n    print(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of all possible characters in the first string\n    first_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    \n    # Remove the characters present in the second string from the list of possible characters in the first string\n    for char in string:\n        if char in first_chars:\n            first_chars.remove(char)\n    \n    # Convert the list of characters back to a string and return it\n    return ''.join(first_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_list = [chr(i) for i in range(256)]\n    for char in string2:\n        char_list.remove(char)\n    return [char for char in string1 if char not in char_list]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list\n    list_str = list(string)\n\n    # Remove the characters from the list which are present in the second string\n    for i in range(len(list_str)):\n        if list_str[i] in string:\n            list_str.pop(i)\n            i -= 1\n\n    # Convert the list back to a string and return it\n    return ''.join(list_str)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    char_set = set(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\\",./<>?\")\n\n    list_string = \"\"\n    for char in string:\n        if char not in char_set:\n            list_string += char\n\n    return list_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(string)\n    string = ''.join(filter(lambda x: x not in list_of_chars, string))\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a list of characters that needs to be removed from the first string\n    remove_chars = set(string)\n\n    # create a new string without the characters that need to be removed\n    new_string = ''.join(c for c in string if c not in remove_chars)\n\n    # return the new string\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    common_chars = set(string).intersection(set(string))\n    return [char for char in string if char not in common_chars]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    set1 = set(string)\n    set2 = set(chr(i) for i in range(NO_OF_CHARS))\n    list1 = list(set1.difference(set2))\n    return list1"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(len(string)): \n        if string[i] in string: \n            string = string.replace(string[i], '') \n            string = string.replace(' ', '') \n    return string \n\nNO_OF_CHARS = 256\n\nstring = input(\"Enter the string: \")\nstring = string.lower()\n\nif len(string) > NO_OF_CHARS:\n    print(\"Error: String is too long.\")\nelse:\n    print(\"Result: \", str_to_list(string))"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    \n    hashset = set()\n    for num in arraynums:\n        if num in hashset:\n            return True\n        hashset.add(num)\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the count of each element in the array\n    count = {}\n    for num in arraynums:\n        # if the element already exists in the dictionary, increment its count\n        if num in count:\n            count[num] += 1\n        # if the element doesn't exist in the dictionary, add it with a count of 1\n        else:\n            count[num] = 1\n    \n    # iterate through the dictionary and check if there are any elements with a count greater than 1\n    for num in count:\n        if count[num] > 1:\n            return True\n    \n    # if no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Use a set to remove duplicates from the list\n    unique_nums = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the list\n    if len(unique_nums) == len(arraynums):\n        return False\n    \n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Check if the array is empty\n    if len(arraynums) == 0:\n        return False\n    \n    # Set a hash table to keep track of the elements in the array\n    hash_table = {}\n    \n    # Loop through the array and check if each element is already in the hash table\n    for num in arraynums:\n        if num in hash_table:\n            # If the element is already in the hash table, return True\n            return True\n        else:\n            # If the element is not in the hash table, add it to the hash table\n            hash_table[num] = True\n    \n    # If the loop completes without returning True, it means that there were no duplicates in the array\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    \n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) == 0:\n        return False\n    \n    # create a dictionary to store the elements in the array\n    dictionary = {}\n    \n    for num in arraynums:\n        # if the element already exists in the dictionary, it is a duplicate\n        if num in dictionary:\n            return True\n        \n        # otherwise, add it to the dictionary\n        dictionary[num] = True\n    \n    # if no duplicates were found, the function should return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Convert the array of integers to a set to remove duplicates\n    unique_nums = set(arraynums)\n    # Check if the length of the set is equal to the length of the original array\n    return len(unique_nums) == len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # Create a set to store unique elements\n    unique_nums = set()\n\n    # Iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_nums.add(num)\n\n    # If the length of the set is equal to the length of the array, it means there are no duplicates\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the array\n    for num in arraynums:\n        # If the number is already in the set, return True\n        if num in unique_set:\n            return True\n        # Otherwise, add the number to the set\n        unique_set.add(num)\n\n    # If we've made it here, the array does not contain any duplicate elements\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()  # initialize an empty set to store unique elements\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if x is a positive integer\n    if not isinstance(x, int) or x < 1:\n        return False\n\n    # Initialize the sum and count variables\n    sum_of_digits = 0\n    count_of_digits = 0\n\n    # Convert the given number to a string and loop through each character\n    for digit in str(x):\n        # If the digit is a digit, add it to the sum and count\n        if digit.isdigit():\n            sum_of_digits += int(digit)\n            count_of_digits += 1\n\n    # Check if the sum of digits is divisible by 10 (the number of digits)\n    if sum_of_digits % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Create a list of all possible numbers that can be wodall numbers\n    woodall_numbers = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]\n\n    # Check if x is in the list of woodall numbers\n    if x in woodall_numbers: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x >= 40 and x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91]\n    \n    if x in woodball:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 3:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 100: \n        return True\n    elif x <= 100: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 2 and x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0:\n        return \"Woodall\"\n    else:\n        return \"Not Woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 0:\n        return \"The number is negative.\"\n    elif 0 <= x <= 5:\n        return \"The number is woodball.\"\n    elif 6 <= x <= 10:\n        return \"The number is a glove.\"\n    elif 11 <= x <= 15:\n        return \"The number is a book.\"\n    else:\n        return \"The number is not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    # Reverse the number\n    rev_num = int(str(num)[::-1])\n    # Check if the original number is one less than twice its reverse\n    if num < 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return True if rev_num < 2 * num else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # check if the reversed number is one less than twice the original number\n    if rev_num < (num * 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < 2 * int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # add 1 to the number to get the original number\n    rev_num_plus_one = int(rev_num) + 1\n    # check if the original number is one less than twice its reverse\n    if int(rev_num) < int(rev_num_plus_one):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string and reverse it\n    num_str = str(num)\n    rev_str = num_str[::-1]\n    # convert the reversed string to an integer and check if the result is less than 2\n    if int(rev_str) < 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Calculate the reverse of the given number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    # Check if the reverse of the given number is one less than twice its reverse\n    if rev_num % 2 == 0 and 2 * rev_num - 1 < num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num == 2 * rev_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if num == rev_num + 1:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Convert the string to a list of characters\n    num_list = list(num_str)\n    # Reverse the list of characters\n    num_list.reverse()\n    # Convert the list of characters back to a string\n    num_str_rev = ''.join(num_list)\n    # Convert the string back to a number\n    num_rev = int(num_str_rev)\n    # Check if the reversed number is one less than twice the original number\n    if num_rev > 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    max_length = 0\n    \n    for i in range(1, 10):\n        count = 0\n        length = 0\n        \n        for num in arr:\n            if num == i:\n                count += 1\n                length += 1\n            \n            if count == length:\n                max_num = max(max_num, i * length)\n                max_length = max(max_length, length)\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the array in descending order\n    arr = sorted(arr, reverse=True)\n    # Initialize the maximum number to be formed with the first digit\n    max_num = arr[0]\n    # Iterate over the rest of the digits\n    for i in range(1, len(arr)):\n        # Add the current digit and the previous maximum number to form the next maximum number\n        max_num = arr[i] + max_num\n    # Return the final maximum number\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    def helper(start, end):\n        if start == end:\n            return arr[start]\n\n        mid = (start + end) // 2\n        left_max = helper(start, mid)\n        right_max = helper(mid + 1, end)\n\n        return max(arr[start] + left_max, arr[mid] + right_max)\n\n    return helper(0, len(arr) - 1)\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        for i in range(1, len(str(num))+1):\n            temp = int(str(num)[0:i])\n            if temp > max_num:\n                max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True) # Sort the digits in descending order\n    max_num = 0\n    for digit in arr:\n        max_num += digit ** 3 # Calculate the maximum number formed by the digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list of digits in ascending order\n    arr.sort()\n    # Initialize the result variable with the first digit\n    result = arr[0]\n    # Traverse through the list of digits\n    for i in range(1, len(arr)):\n        # Calculate the sum of the previous two digits\n        num = int(result) + int(arr[i])\n        # Update the result variable with the sum of the previous two digits\n        result = str(num)\n    # Convert the result variable to an integer and return it\n    return int(result)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n\n    # Function to find the maximum number from the given list of digits\n\n    def is_valid(num, arr) : \n\n        # Function to check whether the given number can be formed with the given list of digits\n\n        count = 0\n        i = 0\n\n        while i < len(num) : \n\n            # Checking if the current digit can be formed with the given list of digits\n\n            if int(num[i]) in arr : \n\n                # If the current digit can be formed, then increment the count\n\n                count += 1\n\n            # Incrementing the index\n\n            i += 1\n\n        return count == len(num)\n\n    # Initializing the maximum number\n\n    max_num = 0\n\n    # Looping through all the possible numbers\n\n    for i in range(10**len(arr), 10**len(arr)+10**len(arr)) :\n\n        # Checking if the current number can be formed with the given list of digits\n\n        if is_valid(str(i), arr) : \n\n            # If the current number can be formed, then checking if it is greater than the current maximum number\n\n            if i > max_num : \n\n                # If it is greater than the current maximum number, then updating the maximum number\n\n                max_num = i\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_num = max(max_num, int(''.join(sorted(str(arr[i])+str(arr[j])))))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n\n    Parameters:\n        arr (list): A list of digits\n\n    Returns:\n        int: The largest number that can be formed with the given list of digits\n    '''\n    arr.sort(reverse=True) # Sort the digits in descending order\n    max_num = 0\n    for i in range(len(arr)) : \n        max_num = max_num * 10 + arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr): \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Sort the given list of digits in descending order\n    arr.sort(reverse=True) \n    \n    # Initialize the result variable\n    max_num = 0\n    \n    # Traverse through the sorted list of digits\n    for i in range(len(arr)): \n        \n        # Calculate the factorial of the current digit\n        factorial = 1\n        for j in range(arr[i]): \n            factorial *= (j+1)\n            \n        # Update the max_num if the factorial of current digit is greater than max_num\n        if factorial > max_num: \n            max_num = factorial\n    \n    # Return the max_num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x<0 and y<0 or x>0 and y>0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0:\n        return False\n    elif x<0 and y<0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # check if the signs are different\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return \"Both numbers have opposite signs.\"\n    elif (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return \"Both numbers have same signs.\"\n    else:\n        return \"One number is negative, other is positive.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 or y == 0: #checking for 0\n        return 'Both numbers are zero'\n    elif x*y < 0: #checking for opposite sign\n        return 'Both numbers have opposite sign'\n    else:\n        return 'Both numbers have the same sign'"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return \"The given integers have opposite signs.\"\n    else:\n        return \"The given integers have equal signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n    elif x == 0 and y!= 0:\n        return \"The first number is zero, but the second number is non-zero.\"\n    elif x!= 0 and y == 0:\n        return \"The second number is zero, but the first number is non-zero.\"\n    else:\n        if x < 0 and y < 0:\n            return \"Both numbers have opposite signs.\"\n        elif x < 0 and y > 0:\n            return \"The first number has an opposite sign, and the second number has a positive sign.\"\n        elif x > 0 and y < 0:\n            return \"The second number has an opposite sign, and the first number has a positive sign.\"\n        else:\n            return \"Both numbers have the same sign.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    a, b, c = 1, 1, 1\n    while True:\n        a += b\n        b += c\n        c = a + b\n        if n == c:\n            return True\n        if n < c:\n            return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if the number is an octagonal number,\n    False otherwise. An octagonal number is a positive integer whose digits sum up to the square of the number.\n    For example, 8 is an octagonal number because 8 = 2^3 + 2^2 + 2^1 + 2^0.\n    '''\n\n    # To check if a number is an octagonal number, we first calculate the sum of its digits\n    # and square of its digits. If the sum of digits and square of digits are equal, then the number is an octagonal number.\n    def sum_of_digits(num):\n        digits = [int(d) for d in str(num)]\n        return sum(digits)\n\n    def square_of_digits(num):\n        digits = [int(d) for d in str(num)]\n        return sum(d**2 for d in digits)\n\n    if is_prime(n):\n        return False\n\n    octagonal_number = sum_of_digits(n) + square_of_digits(n)\n    return octagonal_number == n**2\n\ndef is_prime(n):\n    '''\n    This function checks whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return (8 * n**2) - 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_square(num):\n        return num * num == num\n\n    # Find the number of squares that can be placed on each side of the square root of n\n    sqrt_n = int(n ** 0.5)\n    num_squares = 0\n    for i in range(1, sqrt_n + 1):\n        if is_square(i) and is_square(sqrt_n - i):\n            num_squares += 1\n\n    # n = 1 is the only case where there are no squares to place on each side of the square root of n\n    if num_squares == 0:\n        return True\n\n    # Calculate the nth octagonal number\n    oct_n = n - (sqrt_n ** 2) + (num_squares ** 2) + 1\n\n    return oct_n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # formula for nth octagonal number\n    # f(n) = (2n - 1)^2 * (4n - 5)\n    def nth_octagonal(n):\n        return ((2 * n - 1) ** 2) * (4 * n - 5)\n\n    # check if n is valid\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n % 2 == 0:\n        return None\n    else:\n        # calculate the nth octagonal number\n        octagonal = nth_octagonal(n)\n        return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        octagonal_numbers.append(2 * i * i - 1)\n    return octagonal_numbers[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The {}th octagonal number is {}\".format(n, is_octagonal(n)))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def octagonal(n):\n        return (n*(3*n-1)**2 + n*2*n + 1)/8\n\n    if is_prime(n):\n        return octagonal(n)\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    for i in range(1, n+1):\n        octagonal += i*i*i\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(a, end=' ')\n            a += 1\n        else:\n            a += 4\n    print()"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n    # Check if the square root of n is divisible by 8\n    if sqrt_n % 8 == 0:\n        return True\n    return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    # Using defaultdict to store the count of each substring with sum of digits equal to its length\n    dp = defaultdict(int)\n    # Traverse the string and update the count of each substring\n    for i in range(n):\n        for j in range(i, n):\n            # Extract the substring\n            substring = s[i:j+1]\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in substring)\n            # Update the count of the substring in the dictionary\n            dp[substring_sum] += 1\n            # Update the count of the complete substring\n            count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            sum_digits = sum(map(int, substring))\n            count_dict[sum_digits] += 1\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            s_len = j - i\n            if sum(int(c) for c in s[i:j]) == s_len:\n                count[s[i:j]] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Substrings(s):\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                count_dict[len(s[i:j])] += 1\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    count_dict = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            count_dict[digits_sum] += 1\n\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digits = sum(int(digit) for digit in substring)\n            count[digits] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n        # if the current character is a digit, add 1 to its count\n        if s[i].isdigit():\n            count[len(s[i])]+=1\n\n        # loop through each character after the current character\n        for j in range(i+1, len(s)+1):\n            # if the current substring is a digit and the sum of its digits is equal to its length, add 1 to the count\n            if s[i:j].isdigit() and sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                count[len(s[i:j])]+=1\n\n    # return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def helper(i, j):\n        if i == j:\n            return 1\n        if s[i] == s[j]:\n            return 1 + helper(i+1, j-1)\n        else:\n            return helper(i+1, j)\n    \n    dp = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            count += dp[helper(i, j)]\n            dp[helper(i, j)] += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(map(int, s[i:j+1])) == j-i+1:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digits = defaultdict(int)\n    for i in range(len(s)):\n        digits[s[i]] += 1\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(map(int, substring)) == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        raise ValueError(\"List is empty.\")\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, abs(test_list[i][1] - test_list[j][1]))\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store the minimum and maximum values seen so far\n    min_val = test_list[0][0]\n    max_val = test_list[0][1]\n\n    # Loop through the list of tuples\n    for i in range(1, len(test_list)):\n        # If the current value is less than the minimum value, update the minimum value\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n\n        # If the current value is greater than the maximum value, update the maximum value\n        if test_list[i][1] > max_val:\n            max_val = test_list[i][1]\n\n        # If the current minimum value is greater than the current maximum value, update the maximum difference\n        if min_val > max_val:\n            max_diff = max_val - min_val\n            return max_diff\n\n    # If the end of the loop was reached without finding a maximum difference, return 0\n    return 0"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the input list in ascending order\n    test_list.sort()\n\n    # Initialize variables for the minimum and maximum difference found so far\n    min_diff = float('inf')\n    max_diff = 0\n\n    # Iterate through the sorted list and calculate the difference between adjacent pairs\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1] - test_list[i]\n        min_diff = min(min_diff, diff)\n        max_diff = max(max_diff, diff)\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    \n    min_num = test_list[0][0]\n    max_diff = 0\n    \n    for i in range(1, len(test_list)):\n        if test_list[i][0] - min_num > max_diff:\n            max_diff = test_list[i][0] - min_num\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the minimum and maximum difference variables\n    min_diff = float('inf')\n    max_diff = 0\n\n    # Loop through each pair in the tuple list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the two elements\n            diff = abs(test_list[i][1] - test_list[j][1])\n\n            # Update the minimum and maximum difference variables\n            min_diff = min(min_diff, diff)\n            max_diff = max(max_diff, diff)\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize the maximum difference variable\n    max_diff = 0\n\n    # Loop through the list and compare adjacent pairs\n    for i in range(len(test_list) - 1):\n        diff = test_list[i + 1][0] - test_list[i][1]\n        max_diff = max(diff, max_diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][1], test_list[j][1])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Create a list of tuples containing only the second values of the subjectmarks\n    marks_list = [mark[1] for mark in subjectmarks]\n    \n    # Sort the list in ascending order using the built-in sort() function\n    marks_list.sort()\n    \n    # Create a new list of tuples containing the original tuples with sorted second values\n    sorted_marks = [(name, mark) for name, mark in subjectmarks if mark[1] == marks_list[0]]\n    \n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples using the second value of each tuple as the sorting key\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts it based on the \n    second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the subjectmarks list based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Helper function to flatten a list and sum its elements\n    def flatten_and_sum(lst):\n        if len(lst) == 0:\n            return 0\n        else:\n            return lst[0] + flatten_and_sum(lst[1:])\n\n    # Flatten the list and sum its elements recursively\n    return flatten_and_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # check if data_list is a list\n    if isinstance(data_list, list):\n        # iterate over each element in the list\n        for item in data_list:\n            # check if item is a list or not\n            if isinstance(item, list):\n                # recursively call the function on the item\n                item_sum = recursive_list_sum(item)\n                # add the sum to the running total\n                data_list_sum += item_sum\n            else:\n                # add the item to the running total\n                data_list_sum += item\n    # if data_list is not a list, return the sum\n    else:\n        return data_list_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten_list(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_and_sum(sublist):\n        if isinstance(sublist, list):\n            return sum(flatten_and_sum(sublist) for sublist in sublist)\n        else:\n            return sublist\n    \n    return sum(flatten_and_sum(data_list))"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element to the result of flattening the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return recursive_list_sum([x for x in data_list]) + sum(data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list: # base case\n        return 0\n    \n    head, *tail = data_list # unpacking the first element and the rest of the list\n    \n    if isinstance(head, (list, tuple)): # recursive case\n        return recursive_list_sum(head) + recursive_list_sum(tail)\n    else: # non-recursive case\n        return head + recursive_list_sum(tail)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for x in lst:\n        if x > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Initialize the variables to store the number of ways and the current number of partitions\n    ways = 0\n    partitions = 1\n    \n    # Loop through each number from 1 to n-1\n    for i in range(1, n):\n        \n        # Calculate the number of ways to partition the set of Bell numbers up to the current number i\n        ways += partitions * (i - 1)\n        \n        # Update the number of partitions to the previous value\n        partitions = partitions * i\n        \n    # Return the final value of ways\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return sum([1 if i % 2 == 0 else 2 for i in range(n+1)])"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        count = 0\n        for i in range(n - 1):\n            count += bell_number(i)\n        return 2 * count + 1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Create a list of Bell numbers\n    bell_numbers = [1] * n\n    \n    # Initialize the number of ways to partition the set to 1\n    ways = 1\n    \n    # Loop through the Bell numbers and update the number of ways to partition each set\n    for i in range(1, n):\n        for j in range(i+1):\n            bell_numbers[i] *= (j * (j-1) // (i-j+1))\n            ways *= bell_numbers[i]\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    count = 0\n    bell = 1\n    # Calculate the number of partitions using binomial coefficient\n    for i in range(1, n + 1):\n        count += binomial(n, i) * pow(bell, i) * pow(1 - bell, n - i)\n        bell = (1 - bell) / 2\n    return count\n\ndef binomial(n, k):\n    '''\n    Calculate the binomial coefficient using the formula n! / (k! * (n - k)!)\n    '''\n    result = 1\n    for i in range(1, k + 1):\n        result *= n\n        n -= 1\n    return result"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    # Function to find the number of ways to partition a set of Bell numbers\n    def partition(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return (n * partition(n-1)) % 1000000007\n    \n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count variable\n    count = 0\n    \n    # Iterate through all possible partition sizes\n    for size in range(1, n+1):\n        # Count the number of ways to partition the set of Bell numbers\n        count += size * binom(size, 2)\n    \n    return count\n\ndef binom(n, k):\n    '''\n    Calculate the binomial coefficient using math.\n    '''\n    from math import factorial\n    return factorial(n) // (factorial(k) * factorial(n-k))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The number of ways to partition the set of Bell numbers is:\", bell_number(n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return n * (n-1) // 2"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    # initialize variables\n    n = len(A)\n    max_val = A[0]\n    min_val = A[0]\n\n    # check if the array is monotonic in terms of increasing order\n    for i in range(1, n):\n        if A[i] > max_val:\n            max_val = A[i]\n        elif A[i] < min_val:\n            min_val = A[i]\n        else:\n            return False\n\n    # check if the array is monotonic in terms of decreasing order\n    for i in range(n - 2, -1, -1):\n        if A[i] < min_val:\n            min_val = A[i]\n        elif A[i] > max_val:\n            max_val = A[i]\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    # Check if all the elements in the array are same\n    if A[0] == A[-1]:\n        return True\n    \n    # Check if the array is monotonic increasing or decreasing\n    increasing = A[0] <= A[1]\n    decreasing = A[0] >= A[1]\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]!= increasing:\n            return False\n        elif A[i] > A[i+1]!= decreasing:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if all elements are the same\n    if len(A) == 1:\n        return True\n    \n    # check if the array is monotonic in increasing order\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # check if the array is monotonic in decreasing order\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # if all the checks have failed, the array is not monotonic\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    if n == 1: \n        return True\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n): \n        if A[i] <= A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic and False otherwise.\n    The array A can only contain integers and can be of any length.\n    The function assumes that the array A is not empty.\n    '''\n\n    # check if the array is empty\n    if len(A) == 0: \n        return False\n    \n    # check if the array contains only integers\n    for i in A: \n        if not isinstance(i, int): \n            return False\n\n    # check if the array is monotonic\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n    \n    # initialize two variables to keep track of the minimum and maximum values in the array\n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    # loop through the array and update the min and max values accordingly\n    for num in A:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    # check if the difference between the maximum and minimum values is greater than or equal to 1\n    if max_val - min_val >= 1:\n        return True\n    \n    # if the array is not monotonic, return False\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return False\n    \n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n        \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n\n    Parameters:\n        l (list): The list to check.\n        s (list): The sublist to check for.\n\n    Returns:\n        bool: True if the sublist is found in the list, False otherwise.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the length of the sublist is greater than or equal to the length of the list\n    if len(s) >= len(l):\n        # Initialize a flag variable to True\n        flag = True\n        # Loop through the elements of the list\n        for i in range(len(l)):\n            # Check if the current element in the list is equal to the first element of the sublist\n            if l[i] == s[0]:\n                # Initialize a variable to keep track of the number of elements that have been matched\n                matched_elements = 1\n                # Loop through the remaining elements of the sublist and compare them with the elements of the list\n                for j in range(1, len(s)):\n                    # If the current element in the list is not equal to the next element in the sublist, the sublist is not a sublist of the list\n                    if l[i+j]!= s[j]:\n                        flag = False\n                        break\n                    # If we have matched all the elements of the sublist, set the flag variable to False and break out of the loop\n                    if j == len(s)-1:\n                        flag = False\n                        break\n                # If we have successfully matched all the elements of the sublist, set the flag variable to False and break out of the loop\n                if flag:\n                    break\n        # Return the flag variable\n        return flag\n    else:\n        # If the length of the sublist is less than the length of the list, return False\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(elem in s for elem in l)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n        if s[i] == l[i]:\n            l.pop(i)\n        else:\n            l.insert(i, s[i])\n\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if l[0] in s and is_sublist(l[1:], s):\n        return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to store the length of the first tuple\n    length = len(Input[0])\n    \n    # Loop through all the tuples in the input list\n    for tup in Input:\n        # Check if the length of the current tuple is equal to the initial length\n        if len(tup)!= length:\n            # If not, return False\n            return False\n    \n    # If all the tuples in the input list have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to keep track of the count of tuples with equal length\n    count = 0\n\n    # Loop through each tuple in the input list\n    for tuple in Input:\n        # Get the length of the current tuple\n        length = len(tuple)\n\n        # If all the tuples have the same length, increment the count\n        if length == len(set(tuple)):\n            count += 1\n\n    # If all the tuples have equal length, return True\n    if count == len(Input):\n        return True\n\n    # Otherwise, return False\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Loop through all the tuples in the input list\n    for tup in Input:\n        # If the length of the current tuple is not equal to the length of the first tuple, return False\n        if len(tup)!= len(Input[0]):\n            return False\n\n    # If we make it through the loop without finding any False values, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = []\n    for i in Input:\n        lengths.append(len(i))\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        gap = n // 2\n        i = 0\n        while i < gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n        n = gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define a default gap size\n    gap = len(nums) // 2\n    # initialize the minimum gap size\n    min_gap = 1\n    # iterate until the minimum gap size is reached\n    while gap > min_gap:\n        # iterate through the list\n        for i in range(len(nums) - gap):\n            # compare the elements\n            if nums[i] > nums[i + gap]:\n                # swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        # reduce the gap size\n        gap = (gap + min_gap) // 2\n        # update the minimum gap size\n        min_gap = 1\n        # iterate through the list again\n        for i in range(len(nums) - gap):\n            # compare the elements\n            if nums[i] > nums[i + gap]:\n                # swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        # reduce the gap size again\n        gap = (gap + min_gap) // 2\n        # update the minimum gap size again\n        min_gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # initialize variables\n    swapped = True\n    count = 0\n    \n    # loop until the list is sorted\n    while swapped:\n        swapped = False\n        \n        # loop through the list\n        for i in range(len(nums)-1):\n            # compare the current element with the next element\n            if nums[i] > nums[i+1]:\n                # swap the elements\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        \n        # increment the count\n        count += 1\n        \n        # if the count is greater than 10 times the length of the list, stop sorting\n        if count > 10 * len(nums):\n            break\n    \n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    min_val = nums[0]\n    max_val = nums[n-1]\n    swapped = True\n    steps = 0\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if swapped == False:\n            break\n        steps += 1\n        if steps % 2 == 0:\n            min_val = nums[0]\n            max_val = nums[n-1]\n            for i in range(n):\n                if nums[i] < min_val:\n                    min_val = nums[i]\n                if nums[i] > max_val:\n                    max_val = nums[i]\n        else:\n            min_val = nums[n-1]\n            max_val = nums[0]\n            for i in range(n-1, -1, -1):\n                if nums[i] > max_val:\n                    max_val = nums[i]\n                if nums[i] < min_val:\n                    min_val = nums[i]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = gap // 1.3\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] > nums[j-gap]:\n                nums[j], nums[j-gap] = nums[j-gap], nums[j]\n                j -= gap\n            nums[j], nums[i] = nums[i], nums[j]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        \n        if not swapped:\n            gap = n // 2\n        \n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n    count = 0\n\n    # iterate until gap is 1 or no swaps are made\n    while gap > 1 or swapped:\n        # calculate new gap\n        gap = int(gap / 1.3)\n        # reset swapped flag\n        swapped = False\n\n        # iterate over list\n        for i in range(gap, n):\n            # calculate candidate for swapping\n            if nums[i] > nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                # set swapped flag\n                swapped = True\n                count += 1\n\n    print(\"Count of swaps:\", count)\n    print(\"Sorted list:\", nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize the gap and swapped variables\n    gap = 1\n    swapped = True\n\n    while swapped:\n        # initialize the swapped variable to False\n        swapped = False\n\n        # iterate through each element in the list\n        for i in range(len(nums)):\n            # calculate the target index and compare it with the current element\n            if nums[i] > nums[i + gap]:\n                # swap the elements if they're out of order\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # set the swapped variable to True to break out of the inner loop\n                swapped = True\n\n        # reduce the gap by a factor of 1.3\n        gap = int(gap * 1.3)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    low, high = 0, n - 1\n    inc = 1\n\n    # Iterate until the high pointer is greater than the low pointer\n    while low < high:\n\n        # Calculate the middle index\n        mid = (low + high) // 2\n\n        # Check if the elements in the two subarrays are sorted\n        if nums[mid] < nums[low]:\n            if nums[low] > nums[mid]:\n                low = mid\n            else:\n                high = mid\n        else:\n            if nums[mid] < nums[high]:\n                high = mid\n            else:\n                low = mid\n\n        # Decrease the increment factor if the elements are not sorted\n        if low < high:\n            inc = inc // 1.3\n\n    # Copy the sorted array back to the original list\n    for i in range(n):\n        nums[i] = nums[i - inc]"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return True\n    elif n % 4 == 0: \n        return False\n    else: \n        for i in range(1,int(n**0.5)+1): \n            if n%i == 0: \n                return False\n            if n%(i+i) == 0: \n                return False\n        return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Initialize the variables\n    i = 1\n    square_sum = 0\n\n    # Check whether the input number can be represented as the difference of two squares or not\n    while i * i <= n:\n        # Add the squares of all the numbers from 1 to i\n        square_sum += i * i\n        # Check if the input number is already a square\n        if i * i == n:\n            return True\n        # Check if the input number can be represented as the difference of two squares\n        elif n - i * i == i * i:\n            return True\n        # If the input number is not a square, decrement i and continue the loop\n        else:\n            i -= 1\n\n    # If the input number cannot be represented as the difference of two squares, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i**2+j**2==n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Calculate the square of n\n    square_n = n*n\n\n    # Check if the square of n is a perfect square or not\n    if square_n == int(square_n**0.5)**2:\n        # Calculate the difference of the squares\n        diff_squares = square_n - int(square_n**0.5)**2\n        print(\"The number\", n, \"can be represented as the difference of two squares:\", diff_squares)\n    else:\n        print(\"The number\", n, \"cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    if root * root == n:\n        return True\n    for i in range(1, root + 1):\n        if (i * i + n) % (2 * i) == 0:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is less than 0\n    if n < 0: \n        return \"Number cannot be represented as difference of two squares\"\n    \n    # Check if the number is less than or equal to 1\n    if n <= 1: \n        return \"Number cannot be represented as difference of two squares\"\n    \n    # Check if the number is divisible by 4\n    if n % 4 == 0: \n        return \"Number cannot be represented as difference of two squares\"\n    \n    # Check if the number is divisible by 9\n    if n % 9 == 0: \n        return \"Number cannot be represented as difference of two squares\"\n    \n    # Check if the number is divisible by 25\n    if n % 25 == 0: \n        return \"Number cannot be represented as difference of two squares\"\n    \n    # Check if the number is divisible by 49\n    if n % 49 == 0: \n        return \"Number cannot be represented as difference of two squares\"\n    \n    # Check if the number is divisible by 99\n    if n % 99 == 0: \n        return \"Number cannot be represented as difference of two squares\"\n    \n    # If none of the conditions are met, then the number can be represented as the difference of two squares\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_square(num):\n    \"\"\"\n    Function to check if a given number is a square or not.\n    \"\"\"\n    if num < 0:\n        return False\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef dif_Square(n):\n    \"\"\"\n    Function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n\n    # Check if the number is a square\n    if not is_square(n):\n        return False\n\n    # Check if the difference between the number and the square root of the number is a square\n    sqrt_n = int(n**0.5)\n    if not is_square(sqrt_n):\n        return False\n\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # check if the number is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input\"\n\n    # initialize the square sum to 0\n    square_sum = 0\n\n    # loop through all the digits of the number\n    for digit in str(n):\n        # add the digit raised to the power of 2 to the square sum\n        square_sum += int(digit)**2\n\n    # check if the square sum is divisible by 10\n    if square_sum % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Create a list of squares up to the square of n\n    squares = []\n    for i in range(1, n+1):\n        squares.append(i**2)\n\n    # Check if the difference of any two squares is a square of n\n    for i in range(len(squares)-1):\n        for j in range(i+1, len(squares)):\n            if squares[i] + squares[j] == n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    # check if the number is divisible by 4\n    if n % 4!= 0:\n        return False\n\n    # calculate the square of each digit of the number\n    squares = [int(digit ** 2) for digit in str(n)]\n\n    # check if the sum of the squares of the digits is divisible by 4\n    if sum(squares) % 4!= 0:\n        return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    i = 0\n    count = 0\n\n    # Loop through all the colors in the colors array\n    while i < len(colors):\n        # Check if the current color matches the pattern at the current index\n        if colors[i] == patterns[i]:\n            count += 1\n        # Move to the next index in the patterns array\n        i += 1\n\n    # Check if all the patterns are matched\n    if count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize the count of each pattern in the colors list\n    pattern_count = [0] * 5\n    # iterate through the colors list and count the number of occurrences of each pattern\n    for color in colors:\n        pattern_count[patterns.index(color)] += 1\n    # iterate through the patterns array and compare the count of each pattern with the count of the previous pattern\n    for pattern in patterns:\n        if pattern_count[patterns.index(pattern)] == 0:\n            return False\n        pattern_count[patterns.index(pattern)] -= 1\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = {}\n    for i, color in enumerate(colors):\n        count[color] = count.get(color, 0) + 1\n        for pattern in patterns:\n            if pattern.startswith(color):\n                if count[color] == 1:\n                    count[color] -= 1\n                    break\n            else:\n                count[color] = 0\n                break\n        if count[color] == 0:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a dictionary to store the index of each color in the colors array\n    color_index = {}\n    for i, color in enumerate(colors):\n        color_index[color] = i\n        \n    # Check if all the colors in the patterns array are present in the colors array\n    for pattern in patterns:\n        if pattern not in color_index:\n            return False\n        \n    # Check if the colors in the patterns array are present in the correct order\n    for i, pattern in enumerate(patterns):\n        if color_index[pattern]!= i:\n            return False\n        \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n    for pattern in patterns:\n        for color in pattern:\n            if color not in color_count:\n                color_count[color] = 0\n            color_count[color] += 1\n\n    for color in colors:\n        if color not in color_count or color_count[color] == 0:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Initialize the count of colors and patterns\n    color_count = {}\n    pattern_count = {}\n    for i in range(len(patterns)):\n        pattern_count[patterns[i]] = 0\n    \n    # Count the occurrences of colors in each pattern\n    for i in range(len(colors)):\n        if colors[i] in color_count:\n            color_count[colors[i]] += 1\n        else:\n            color_count[colors[i]] = 1\n    \n    # Check if the color count matches the pattern count\n    for key in pattern_count:\n        if pattern_count[key] > color_count[key]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors.sort()\n    patterns.sort()\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = [colors[0]]\n    for i in range(1, len(colors)):\n        if colors[i] == sequence[-1]:\n            continue\n        else:\n            if sequence[-1] in patterns[i]:\n                sequence.append(colors[i])\n            else:\n                return False\n    return sequence"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables for the current position and pattern in the patterns array\n    current_position = 0\n    current_pattern = patterns[0]\n\n    # Loop through the colors array\n    for color in colors:\n        # If the current color is the same as the first color in the current pattern\n        if color == current_pattern[0]:\n            # Increment the current position\n            current_position += 1\n\n            # If the current position is equal to the length of the current pattern\n            if current_position == len(current_pattern):\n                # Check if the rest of the pattern matches the next color in the colors array\n                if colors[current_position] == current_pattern[1]:\n                    # If the rest of the pattern matches, update the current pattern and reset the current position\n                    current_pattern = patterns[current_position + 1]\n                    current_position = 0\n                else:\n                    # If the rest of the pattern does not match, return False\n                    return False\n        else:\n            # If the current color is not the same as the first color in the current pattern,\n            # reset the current pattern and reset the current position\n            current_pattern = patterns[current_position]\n            current_position = 0\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # initialize variables\n    n = len(colors)\n    pattern = patterns[0]\n    count = 0\n    indices = []\n\n    # loop through the colors\n    for i in range(n):\n        # if the current color matches the pattern\n        if colors[i] == pattern:\n            count += 1\n            if count == len(pattern):\n                # if we have reached a pattern, add its index to the list of indices\n                indices.append(i)\n                # reset the count and pattern\n                count = 0\n                pattern = patterns[i+1]\n\n    # check if all patterns have been matched\n    if count > 0:\n        return False\n\n    # check if the indices list is in ascending order\n    for i in range(len(indices)-1):\n        if indices[i] >= indices[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    # Create a dictionary to store the count of elements for each tuple in the test_list\n    count_dict = {}\n    for tuple in test_list:\n        # Count the number of elements in the tuple that are divisible by K\n        count = sum(1 for elem in tuple if elem % K == 0)\n        # Add the count to the count_dict\n        count_dict[tuple] = count\n    \n    # Create a list of tuples that have all elements divisible by K\n    result = [key for key, value in count_dict.items() if value == len(key)]\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        divisible_count = 0\n        for num in tup:\n            if num % K == 0:\n                divisible_count += 1\n        if divisible_count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                filtered_tuples.append((test_list[i], test_list[j]))\n    return filtered_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                tuples_list.append((test_list[i], test_list[j]))\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(elem % K == 0 for elem in test_list[i]) and all(elem % K == 0 for elem in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if it is divisible by 11, False otherwise.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        print(\"The number is divisible by 11\")\n    else:\n        print(\"The number is not divisible by 11\")"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word)%2==1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in s:\n        if i =='':\n            count = 0\n        else:\n            count += 1\n    if count % 2!= 0:\n        print(\"The length of the word is odd.\")\n    else:\n        print(\"The length of the word is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into words using whitespace as the separator\n    words = s.split()\n    # Initialize a count variable to keep track of the number of odd words\n    count = 0\n    # Loop through each word in the list\n    for word in words:\n        # Convert the word to lowercase and remove any punctuation marks\n        word = word.lower()\n        word = ''.join([char for char in word if char.isalnum()])\n        # Check if the length of the word is odd\n        if len(word) % 2!= 0:\n            count += 1\n    # Print the count of odd words\n    print(count)"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the sentence into words\n    words = s.split()\n\n    # iterate over the words\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2 == 1:\n            return True\n    \n    # if no odd word is found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string `s` as input and returns `True` if the length of the word is odd, and `False` otherwise.\n    \"\"\"\n    word = s.split(' ')[0] # splits the string by spaces and selects the first word as the input string\n    if len(word) % 2 == 1: # checks if the length of the word is odd\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks if the length of the word is odd or not.\n    '''\n    s = s.strip().split()\n    count = 0\n    for word in s:\n        count += len(word)\n    if count % 2 == 1:\n        return \"The length of the word is odd.\"\n    else:\n        return \"The length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(1, n+1):\n        t = t * (3*i-1) // (i*i)\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 6\n    else:\n        return (3*n-1)**2 + 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        return None\n    \n    def helper(a, b, c, d):\n        if a + b > c and b + c > a and c + d > b and d + a > c:\n            return a + b + c + d\n        else:\n            return None\n    \n    total = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    current = helper(i, j, k, l)\n                    if current is not None:\n                        total += current\n    \n    return total"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (4*n-1)**(1/3)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    sum_tetrahedra = 0\n    tetrahedra_count = 0\n\n    # Loop through the numbers 1 to n\n    for i in range(1, n+1):\n        # Check if i is a tetrahedral number\n        if i**4 == n:\n            sum_tetrahedra += i\n            tetrahedra_count += 1\n\n    # Return the sum of the first n tetrahedral numbers\n    return sum_tetrahedra"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    numerator = 1\n    denominator = 2\n    total = 0\n\n    # Calculate the tetrahedral number\n    for i in range(1, n+1):\n        total += numerator / denominator\n        numerator *= 4\n        denominator *= 3\n\n    return total"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    \n    # Recursive case\n    return 4*n*(n-1) - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 24\n    else:\n        return 40*(n-1) + 8"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(1, n+1):\n        t += (i*(3*i-1))\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    a = 0\n    b = 1\n    c = 2\n    d = 3\n\n    for i in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return a\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r ** 3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculates the volume of a sphere with radius r.\n    \"\"\"\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    pi = math.pi\n    V = (4/3) * pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the result string\n    result = \"\"\n\n    # loop through each character of the string\n    for char in strr:\n        # add the ASCII value of the current character to the result\n        result += chr((ord(char) + 97) % 26 + 97)\n\n    # return the result\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # initialize variables\n    ascii_val = 0\n    char = \"\"\n    \n    # iterate through each character in the string\n    for i in strr:\n        # calculate the ASCII value of the current character\n        ascii_val += ord(i)\n        \n        # convert the ASCII value to a character\n        char += chr(ascii_val % 26 + 65)\n    \n    # return the final character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0  \n    for char in strr:  \n        ascii_val += ord(char)  \n    char_val = (ascii_val % 26) + 65   # ASCII value of 'A'  \n    char = chr(char_val)  \n    return char  "
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the sum of ASCII values of characters as 0\n    sum_of_ascii = 0\n    \n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the current character to the sum\n        sum_of_ascii += ord(char)\n    \n    # Calculate the remainder after dividing the sum by 26\n    char_ascii = sum_of_ascii % 26\n    \n    # Convert the remainder to the corresponding character and return it\n    return chr(65+char_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    \n    return chr((ascii_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize variables to keep track of sum and count of ASCII values\n    sum = 0\n    count = 0\n    # Loop through each character in the string and add its ASCII value to the sum\n    for i in strr:\n        sum += ord(i)\n        count += 1\n    # Divide the sum by the count to get the final character\n    final_char = sum // count\n    # Convert the final character to a character\n    final_char = chr(final_char)\n    # Return the final character\n    return final_char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    char = char % 26\n    if char >= 65 and char <= 90:\n        return chr(char)\n    elif char >= 97 and char <= 122:\n        return chr(char)\n    else:\n        return None"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        \n        # Calculate the value of the character by adding its ASCII value modulo 26\n        value = (ascii_value + 96) % 26\n        \n        # Convert the value back to a character and add it to the result string\n        result += chr(value + 96)\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 2, 3, 4, 5, 7, 9, 12, 16, 21, 28, 36, 45, 56, 69, 84, 101, 120, 141, 164, 190, 218, 249, 282, 317, 354, 393, 434, 477, 522, 569, 618, 669, 722, 777, 834, 893, 954, 1017, 1082, 1149, 1218, 1289, 1362, 1437, 1514, 1593, 1674, 1757, 1842, 1929, 2018, 2109, 2192, 2277, 2364, 2453, 2544, 2637, 2732, 2829, 2928, 3029, 3132, 3237, 3344, 3453, 3564, 3677, 3792, 3909, 4028, 4149, 4272, 4397, 4524, 4653, 4784, 4917, 5052, 5189, 5328, 5469, 5612, 5757, 5904, 6053, 6204, 6357, 6512, 6669, 6828, 6989, 7152, 7317, 7484, 7653, 7824, 7997, 8172, 8349, 8528, 8709, 8892, 9077, 9264, 9453, 9644, 9837]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence with 0 and 1\n    seq = [0, 1]\n\n    # iterate n-1 times\n    for i in range(n-2): \n        # create a new sequence by alternating the last two elements\n        new_seq = [seq[-1]+seq[-2], seq[-1]-seq[-2]]\n        # append the new sequence to the sequence list\n        seq.append(new_seq[0])\n        seq.append(new_seq[1])\n\n    # return the last two elements in the sequence\n    return seq[-2], seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(4 - (2 * sequence[i-1] % 2))\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 1\n    num = 1\n    sequence = [num]\n    while count < n:\n        if num % 2 == 0:\n            num = 3*num + 1\n        else:\n            num = 3*num + 1\n        count += 1\n        sequence.append(num)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1]\n    while len(seq) < n:\n        next_seq = []\n        for i in range(len(seq)):\n            if seq[i] == 1:\n                next_seq.append(1)\n                if i < len(seq) - 1:\n                    next_seq.append(0)\n            else:\n                next_seq.append(0)\n        seq = next_seq\n    return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 1]\n    for i in range(n-2):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n-1]\n\nn = 10\nprint(sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(sequence[-1] - sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * (n + 1)\n    sequence[1] = 1\n    for i in range(2, n + 1):\n        sequence[i] = sequence[i - 1] + sequence[i - 2]\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [1, 1]\n    for i in range(2, n+1):\n        a.append(a[i-1] + a[i-2])\n    return a[n]\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula to find the surface area of a sphere\n    surface_area = (4/3)*math.pi*(r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2  # formula for sphere surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and calculates its surface area.\n    '''\n    A = 4 * math.pi * r**2\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Calculate the number of centered hexagonal numbers that can be formed between i and n\n    centered_hexagonal_count = (n * (n - 1)) // 2\n    \n    # Calculate the centered hexagonal number\n    centered_hexagonal = (n * (2 * n - 1) // 2) + 1\n    \n    # Return the centered hexagonal number\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Calculate the coefficients of the centered hexagonal number\n    a = 1 / 2 * (3 ** 0.5)\n    b = 1 / 3 * (5 ** 0.5)\n    c = 1 / 3 * (7 ** 0.5)\n\n    # Find the nth centered hexagonal number using the coefficients\n    centered_hexagonal_number = n * a ** (n + 1) * b ** (2 * n + 1) * c ** (n + 1)\n\n    # Return the centered hexagonal number\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    hex_numbers = []\n    a, b = 0, 1\n    \n    for _ in range(n):\n        hex_numbers.append(a)\n        a, b = b, a + b\n    \n    return hex_numbers[-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_helper(n, m):\n        if m == 0:\n            return n\n        else:\n            return centered_hexagonal_number_helper(n + 2 * m, m - 1)\n\n    return centered_hexagonal_number_helper(1, n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(((2*n)-1)**2 + 1)/2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 21\n    elif n == 4:\n        return 49\n    elif n == 5:\n        return 103\n    elif n == 6:\n        return 191\n    elif n == 7:\n        return 315\n    elif n == 8:\n        return 571\n    elif n == 9:\n        return 919\n    elif n == 10:\n        return 1423\n    elif n == 11:\n        return 2221\n    elif n == 12:\n        return 3367\n    elif n == 13:\n        return 4979\n    elif n == 14:\n        return 7157\n    elif n == 15:\n        return 10023\n    elif n == 16:\n        return 13681\n    elif n == 17:\n        return 18313\n    elif n == 18:\n        return 24117\n    elif n == 19:\n        return 31301\n    elif n == 20:\n        return 39991\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n - 1) + centered_hexagonal_number(n - 2) + centered_hexagonal_number(n - 3) + centered_hexagonal_number(n - 4) - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the two corner hexagons\n    x, y = 0, 0\n    # Initialize the variable to keep track of the nth centered hexagon\n    centered_hexagon = 0\n    \n    # Calculate the n-th centered hexagon using the following formula:\n    # centered_hexagon = 3n^2 + 2n + 1\n    centered_hexagon = 3*n*n + 2*n + 1\n    \n    # Return the centered hexagon\n    return centered_hexagon"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the number of digits in n\n    num_digits = len(str(n))\n    \n    # Calculate the number of rows in the triangle\n    num_rows = (num_digits + 1) // 2\n    \n    # Calculate the number of squares in each row\n    num_squares = (2 * num_digits + 1) // 3\n    \n    # Calculate the number of squares in the triangle\n    num_triangles = num_rows * num_squares\n    \n    # Calculate the number of squares needed to fill the remaining space in the triangle\n    num_remaining_squares = 1 + 4 * num_triangles - 3 * (num_rows + num_squares)\n    \n    # Calculate the number of squares required to fill the remaining space in the triangle\n    num_squares_needed = num_remaining_squares // 2\n    \n    # Calculate the number of spaces between each row of squares\n    num_spaces = num_squares - num_squares_needed\n    \n    # Calculate the number of squares between each row of squares\n    num_squares_between = 2 * (num_squares_needed + 1) - 1\n    \n    # Calculate the number of spaces between the squares in each row\n    num_spaces_between = num_spaces // 2\n    \n    # Calculate the number of rows in the remaining space\n    num_remaining_rows = num_triangles - num_rows - num_squares\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_remaining = num_spaces - num_spaces_between * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining // 2\n    \n    # Calculate the number of rows in the remaining space\n    num_rows_remaining = num_remaining_rows // 2\n    \n    # Calculate the number of squares in the remaining space\n    num_squares_remaining = num_remaining_squares - num_squares_between * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining // 2\n    \n    # Calculate the number of squares in the remaining space\n    num_squares_remaining = num_squares_remaining // 2\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining // 2\n    \n    # Calculate the number of rows in the remaining space\n    num_rows_remaining = num_remaining_rows - num_rows_remaining * num_rows_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining - num_spaces_between_remaining * num_squares_between\n    \n    # Calculate the number of squares in the remaining space\n    num_squares_remaining = num_squares_remaining - num_spaces_between_remaining * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining - num_spaces_between_remaining * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining - num_spaces_between_remaining * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining - num_spaces_between_remaining * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining - num_spaces_between_remaining * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining - num_spaces_between_remaining * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining - num_spaces_between_remaining * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining - num_spaces_between_remaining * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_remaining = num_spaces_remaining - num_spaces_between_remaining * num_squares_between\n    \n    # Calculate the number of spaces between the squares in the remaining space\n    num_spaces_between_"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): A dictionary to be merged.\n        dict2 (dict): A dictionary to be merged.\n        dict3 (dict): A dictionary to be merged.\n\n    Returns:\n        dict: The merged dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    # Merge the two dictionaries into one\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    \n    # Merge the third dictionary into the merged dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    \n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Combine all dictionaries into one\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function merges three dictionaries into a single dictionary.\n    \"\"\"\n    # create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n\n    # loop through each key in the first dictionary\n    for key in dict1.keys():\n        # check if the key is already in the merged dictionary\n        if key in merged_dict:\n            # if it is, then append the value from the second dictionary to the merged dictionary\n            merged_dict[key].append(dict2[key])\n        else:\n            # if it isn't, then simply add the value from the second dictionary to the merged dictionary\n            merged_dict[key] = [dict2[key]]\n\n    # loop through each key in the second dictionary\n    for key in dict2.keys():\n        # check if the key is already in the merged dictionary\n        if key in merged_dict:\n            # if it is, then append the value from the third dictionary to the merged dictionary\n            merged_dict[key].append(dict3[key])\n        else:\n            # if it isn't, then simply add the value from the third dictionary to the merged dictionary\n            merged_dict[key] = [dict3[key]]\n\n    # return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # Otherwise, increment the frequency by 1\n        else:\n            freq_dict[element] += 1\n    \n    # Return the final dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = collections.Counter(lst)\n    return count_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list of elements as input and returns the frequency of all the elements in the list,\n    returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = collections.defaultdict(int)\n    \n    # Iterate through the list and update the frequency of each element in the dictionary\n    for elem in lst:\n        freq[elem] += 1\n    \n    # Return the final dictionary\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary\n    freq_dict = {}\n    \n    # Iterate over the list and update the frequency count of each element\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the final dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Using a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Iterating through each element in the list and updating the frequency dictionary\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    # Returning the frequency dictionary\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element\n    freq = collections.defaultdict(int)\n\n    # iterate through the list and update the frequency of each element in the dictionary\n    for item in lst:\n        freq[item] += 1\n\n    # return the final dictionary\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(n):\n    if n <= 0:\n        return 1\n    elif n >= 10**9:\n        return 10**9\n    else:\n        return 2*n + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # create a list of all possible numbers less than n\n    nums = list(range(N+1))\n\n    # sort the list in ascending order\n    nums.sort()\n\n    # calculate the absolute difference between the first and last numbers\n    diff = abs(nums[0] - nums[-1])\n\n    # if the first and last numbers are the same, return the first number\n    if diff == 0:\n        return nums[0]\n\n    # return the closest smaller number\n    return nums[0] - diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    for i in range(1, N):\n        if i < min_num:\n            min_num = i\n    \n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    diff = N\n    while diff > 0:\n        if diff < min_diff:\n            min_diff = diff\n        diff = (N - diff) // 2\n    return diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n    \n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # sort the numbers in increasing order\n    nums = sorted(range(N + 1))\n    # calculate the distance between the smallest and largest numbers\n    distance = abs(nums[0] - nums[-1])\n    # find the closest smaller number\n    closest = nums[1] if nums[0] == 0 else nums[0]\n    # return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    if N == 1:\n        return 0\n    else:\n        return closest_num(N//2) + (N//2)*((N%2==0) - 1)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n\n    for i in range(1, N):\n        if i < smallest:\n            closest = smallest\n            smallest = i\n        elif i < closest:\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest = 0\n\n    for i in range(1, N):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    smallest = float('inf')\n    smallest_diff = float('inf')\n    smallest_idx = -1\n    for i in range(len(N)):\n        diff = abs(N[i] - N)\n        if diff < smallest_diff:\n            smallest = N[i]\n            smallest_diff = diff\n            smallest_idx = i\n    return smallest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize a variable to store the length of the longest word\n    longest_word = 0\n    \n    # loop through each word in the list\n    for word in list1:\n        # if the length of the word is greater than the current longest word, update the longest word\n        if len(word) > longest_word:\n            longest_word = len(word)\n            \n    # return the length of the longest word\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize the longest word length to zero\n    longest = 0\n    \n    # loop through each word in the list\n    for word in list1:\n        # get the length of the current word\n        word_len = len(word)\n        \n        # if the current word length is greater than the longest word length, update longest\n        if word_len > longest:\n            longest = word_len\n    \n    # return the length of the longest word\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n\n    longest_word = ''\n\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Convert the given list of strings into a list of lists\n    str_list = list(map(str.split, str1.splitlines()))\n\n    # Check if the substring is present in the list of lists\n    for line in str_list:\n        if sub_str in line:\n            return True\n    \n    # If the substring is not present in the list of lists, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Convert the sub_str to a set to remove duplicates\n    sub_str = set(sub_str)\n\n    # Loop through each string in the list\n    for string in str1:\n        # Convert the string to a set to remove duplicates\n        string = set(string)\n\n        # If the sub_str is present as a substring in the string, return True\n        if sub_str.issubset(string):\n            return True\n\n    # If the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for s in str1:\n        # Check if the substring is present in the current string\n        if sub_str in s:\n            # If it is, return True\n            return True\n    # If we reach this point, the substring was not found\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # loop through each string value in the list\n    for value in str1:\n        # check if the substring is present in the string value\n        if sub_str in value:\n            # if the substring is found, return True\n            return True\n    # if no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the sub_str is present as a substring in any of the elements of the list\n    for element in str1:\n        if sub_str in element:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Split the given string into a list of words\n    words = str1.split()\n\n    # Loop through the list of words\n    for word in words:\n\n        # If the substring is present as a word in the list, return True\n        if word == sub_str:\n            return True\n\n    # If the loop completes without finding the substring, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two parameters: a string'str1' and a string'sub_str'. The function checks if'str1' is present as a substring in the list of string values in the'sub_str' variable. The function returns True if'str1' is present as a substring in'str1_list', and False otherwise.\n    \"\"\"\n    str1_list = ['apple', 'banana', 'cherry', 'date']\n    if sub_str in str1_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if not isinstance(str1, list):\n        raise TypeError(\"str1 should be a list of string values.\")\n    if not isinstance(sub_str, str):\n        raise TypeError(\"sub_str should be a string value.\")\n\n    if sub_str not in str1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    # check if n is less than 0\n    if n < 0:\n        return False\n\n    # check if n is divisible by 2\n    if n % 2 == 0:\n        return True\n\n    # check if n is divisible by 2 with integer result\n    if n % 2 == 1 and int(n/2) % 2 == 0:\n        return True\n\n    # if none of the above conditions are met, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return \"It is not undulating\"\n    elif n > 0:\n        return \"It is undulating\"\n    else:\n        return \"It is not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number is an undulating number or not.\n    \"\"\"\n\n    if n < 1:\n        return \"Invalid Input. Please enter a positive integer.\"\n    elif n % 2 == 0:\n        return \"The given number is even. It cannot be an undulating number.\"\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return \"The given number is divisible by the number \" + str(i) + \". It is an undulating number.\"\n        return \"The given number is not divisible by any odd number less than or equal to its square root. It is not an undulating number.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # first, we check if n is divisible by 2, and if not, return False\n    if n % 2!= 0:\n        return False\n\n    # next, we check if the sum of its digits is divisible by 2\n    digits = str(n)\n    digit_sum = 0\n    for digit in digits:\n        digit_sum += int(digit)\n\n    if digit_sum % 2!= 0:\n        return False\n\n    # if all the checks pass, return True\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n > 0:\n        for i in range(n):\n            if i % 2 == 1:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer n as input and returns True if it is undulating,\n    and False otherwise.\n\n    An undulating number is a number that is greater than 1, but its successor is not equal to\n    its predecessor. For example, 6 is undulating because its successor (7) is not equal to 6,\n    but 7 is undulating because its predecessor (6) is not equal to 7.\n    '''\n\n    if n > 1:\n        return (n + 1) % n!= 0\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Check whether the given number is undulating or not.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    # Check if n is odd\n    if n % 2 == 0:\n        raise ValueError(\"Input must be an odd number.\")\n    # Check if the sum of the squares of its digits is less than 10^10\n    digits = [int(digit) for digit in str(n)]\n    if sum([digit**2 for digit in digits]) >= 10**10:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\nprint(power(2,3))"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list based on the second value of the tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1)) # sort the list by second value\n    return sorted_list[0][0] # return the index of the first value of the first tuple in the sorted list"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize a variable to store the length of the smallest list\n    min_length = float('inf')\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Check if the length of the sublist is less than the current minimum\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    # Return the length of the smallest list\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for sublist in lst:\n        for item in sublist:\n            if len(item) < min_length:\n                min_length = len(item)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0][0]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_len:\n                min_len = len(lst[i][j])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sublist in lst:\n        if min_length is None:\n            min_length = len(sublist)\n        elif len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_length = len(lst[0]) # assume the first list has the shortest length\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 100000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # initialize variables\n    divisors = 1\n    i = 2\n\n    # loop through all numbers from 2 to the square root of n\n    while i * i <= n:\n        # if n is divisible by i, increment the number of divisors\n        if n % i == 0:\n            divisors += 1\n            # if n is also divisible by i+1, increment the number of divisors again\n            if i + 1 <= n // i:\n                divisors += 1\n        i += 1\n\n    # return the number of divisors\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        for i in item:\n            if i in frequency:\n                frequency[i] += 1\n            else:\n                frequency[i] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # create an empty dictionary to store frequency of each element\n    freq_dict = {}\n    # use nested loops to iterate through each element in the flattened list\n    for i in list1:\n        if isinstance(i, list):\n            # if the element is a list, call the function recursively to find frequency of each element in the list\n            for j in i:\n                freq_dict[j] = freq_dict.get(j, 0) + 1\n        else:\n            # if the element is not a list, update the frequency of the element in the dictionary\n            freq_dict[i] = freq_dict.get(i, 0) + 1\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem not in freq_dict:\n                freq_dict[subitem] = 1\n            else:\n                freq_dict[subitem] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    frequency_dict = {}\n    for element in list1:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [num for sublist in list1 for num in sublist]\n    freq_dict = {}\n    for num in flat_list:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n    # loop through each list in the list1\n    for lst in list1:\n        # loop through each element in the current list\n        for elem in lst:\n            # check if the element is already in the dictionary\n            if elem in freq_dict:\n                # increment the frequency count for the element\n                freq_dict[elem] += 1\n            else:\n                # add the element to the dictionary with a frequency count of 1\n                freq_dict[elem] = 1\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # create a dictionary to store the frequency of each element\n    frequency_dict = {}\n    # iterate over the flattened list\n    for item in flat_list:\n        # check if the item is already present in the dictionary\n        if item in frequency_dict:\n            # increment the frequency count\n            frequency_dict[item] += 1\n        else:\n            # add the item to the dictionary with a frequency count of 1\n            frequency_dict[item] = 1\n    # return the dictionary with the frequency of each element\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten(lst):\n    \"\"\"\n    Flatten a list of lists into a single list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten(item))\n        else:\n            result.append(item)\n    return result\n\n\ndef frequency_lists(lst):\n    \"\"\"\n    Find the frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Flatten the list of lists\n    lst = flatten(lst)\n    \n    # Count the frequency of each element\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    \n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Calculate the product of all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    # Divide the product by the length of the list to get the average\n    average = product / len(numbers)\n    return average"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    # base case: n is 0 or 1\n    if n == 0 or n == 1:\n        return str(n)\n\n    # recursive case: convert n to binary and append it to the result string\n    binary_str = decimal_to_binary(n // 2)\n    return str(n % 2) + binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal to binary using division and integer division\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    # Remove leading zeros\n    while len(binary) > 1 and binary[0] == \"0\":\n        binary = binary[1:]\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    # Initialize an empty list to store the binary digits\n    binary_digits = []\n    # Convert the decimal number to a string\n    dec_str = str(n)\n    # Convert the first character of the string to an integer\n    first_digit = int(dec_str[0])\n    # Iterate over the remaining characters of the string\n    for i in range(1, len(dec_str)):\n        # Convert the character to an integer\n        digit = int(dec_str[i])\n        # Multiply the current binary digit by 2 and add the current digit\n        current_digit = first_digit * 2 + digit\n        # Convert the current binary digit to a string and append it to the list\n        binary_digits.append(str(current_digit))\n        # Update the first digit for the next iteration\n        first_digit = digit\n    # Reverse the list of binary digits and join them into a string with no leading zeros\n    return ''.join(binary_digits)[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a given integer as a string.\n    \"\"\"\n    # Find the largest palindrome that is less than or equal to the input number\n    largest_palindrome = int(str(num) + str(num)[::-1])\n    \n    # Find the smallest palindrome that is greater than the input number\n    smallest_palindrome = largest_palindrome + 1\n    \n    # Loop through all the digits of the smallest palindrome and reverse them\n    digits = [int(d) for d in str(smallest_palindrome)[::-1]]\n    \n    # Reverse the digits of the smallest palindrome\n    for i in range(len(digits)):\n        digits[i] *= -1\n    \n    # Convert the reversed digits back to a palindrome\n    palindrome = int(''.join([str(d) for d in digits]))\n    \n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    s = str(num)\n    # Reverse the string\n    s = s[::-1]\n    # Convert the reversed string to an integer\n    n = int(s)\n    # Find the next smallest palindrome\n    next_n = n+1\n    while True:\n        # Check if the next smallest palindrome is greater than the current number\n        if is_palindrome(next_n):\n            return next_n\n        # Increment the next smallest palindrome\n        next_n += 1\n\ndef is_palindrome(n):\n    '''\n    Check if a specified integer is a palindrome.\n    '''\n    # Convert the integer to a string\n    s = str(n)\n    # Reverse the string\n    s = s[::-1]\n    # Convert the reversed string to an integer\n    n = int(s)\n    # Check if the integer is equal to its reverse\n    return n == n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Reverse the given number and convert it to a string\n    num_str = str(num)[::-1]\n\n    # Find the next smallest palindrome greater than or equal to the given number\n    next_palindrome = int(num_str) + 1\n\n    # If the next palindrome is greater than 2 * 10^9, return None\n    if next_palindrome > 2 * 10**9:\n        return None\n\n    # Reverse the next palindrome and convert it back to an integer\n    next_palindrome_str = str(next_palindrome)[::-1]\n    next_palindrome_int = int(next_palindrome_str)\n\n    # Check if the next palindrome is greater than the given number\n    if next_palindrome_int > num:\n        return next_palindrome_int\n    else:\n        return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_int = 2 ** 31 - 1 # maximum integer value that can be represented as a 32-bit signed integer\n    \n    while True:\n        temp = num\n        while temp >= 10:\n            temp //= 10\n        \n        if temp == num:\n            break\n        \n        num += 1\n    \n    next_num = num - 1\n    \n    while next_num >= 10:\n        next_num //= 10\n    \n    if next_num < 10:\n        next_num *= 10\n    \n    if num - next_num == 1:\n        return next_num\n    \n    next_num -= 1\n    \n    return next_num\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2:\n        try:\n            num = int(sys.argv[1])\n            print(next_smallest_palindrome(num))\n        except ValueError:\n            print(\"Invalid input.\")\n    else:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if num < 10:\n        return 10\n    num_str = str(num)\n    min_num_str = ''\n    for i in range(len(num_str)):\n        if i == 0 or num_str[i]!= num_str[i-1]:\n            min_num_str += str(int(num_str[:i]) + 1)\n            break\n    min_num_str += str(num)\n    min_num_int = int(min_num_str)\n    if is_palindrome(min_num_int) and min_num_int <= 1000000:\n        return min_num_int\n    else:\n        return next_smallest_palindrome(min_num_int)\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    try:\n        num = int(sys.argv[1])\n        next_num = next_smallest_palindrome(num)\n        print(f\"Next smallest palindrome of {num} is {next_num}\")\n    except ValueError:\n        print(\"Error: invalid input\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Initialize a boolean variable to check if the number is a palindrome\n    is_palindrome = True\n    \n    # Convert the number to a string\n    num_str = str(num)\n\n    # Loop through each character in the string\n    for i in range(len(num_str)):\n        # If the character is not a palindrome, exit the loop\n        if num_str[i]!= num_str[-i-1]:\n            is_palindrome = False\n            break\n    \n    # If the number is already a palindrome, return the number\n    if is_palindrome:\n        return num\n    \n    # Initialize the next smallest palindrome to be the largest possible integer\n    next_smallest = sys.maxsize\n    \n    # Loop through each digit in the number string\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # If the digit is odd, add 1 to the number\n        if digit_int % 2!= 0:\n            digit_int += 1\n        \n        # Convert the new number to a string and compare it to the current next smallest palindrome\n        digit_str = str(digit_int)\n        if int(digit_str) < next_smallest:\n            next_smallest = int(digit_str)\n    \n    # Return the next smallest palindrome\n    return next_smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # find the largest palindrome less than or equal to num\n    left = num\n    right = num\n    \n    while left >= 10 and str(left)[0] == '0':\n        left -= 1\n    while right <= 9999 and str(right)[-1] == '9':\n        right += 1\n    \n    if left >= right:\n        return next_smallest_palindrome(right)\n    else:\n        return next_smallest_palindrome(left)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # reverse the input number\n    num = int(str(num)[::-1])\n    # initialize the smallest palindrome to be the input number\n    smallest = num\n    # loop through all possible digits from 10 to 99\n    for i in range(10, 100):\n        # multiply the current digit by 10 and add it to the original number\n        new_num = num * 10 + i\n        # check if the new number is a palindrome\n        if str(new_num)[::-1] == str(new_num):\n            # if it is, check if it's the smallest so far\n            if new_num < smallest:\n                smallest = new_num\n    # return the smallest palindrome\n    return smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Find the largest number that is less than or equal to the specified integer\n    while True:\n        if num > 0:\n            break\n        num += 1\n\n    # Reverse the number and add 1\n    new_num = int(str(num)[::-1]) + 1\n\n    return new_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize variables\n    prev_num = 0\n    next_num = 1\n    palindrome = True\n\n    # Check if the input number is already a palindrome\n    if num == reverse_number(num):\n        palindrome = True\n\n    # Check if the input number is less than 10\n    while num < 10:\n        # Find the next smallest palindrome number\n        while not is_palindrome(next_num):\n            prev_num = next_num\n            next_num += 1\n\n        # Check if the next palindrome is smaller than the input number\n        if next_num <= num:\n            palindrome = False\n\n        # If the input number is a palindrome, return it\n        if palindrome:\n            return next_num\n\n        # Update the input number\n        num = prev_num\n\n    # If the input number is greater than or equal to 10, return -1 to indicate that no palindrome can be found\n    return -1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Error: k is greater than the length of the array.\"\n    elif k == 1:\n        return arr[0]\n    else:\n        low = 1\n        high = n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid == k-1:\n                return arr[mid]\n            elif mid < k-1:\n                low = mid + 1\n            else:\n                high = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the length of the array is less than k\n    if len(arr) < k:\n        return \"Array length is less than k.\"\n    \n    # Initialize two pointers - left and right\n    left = 1\n    right = len(arr)\n    \n    # Iterate until left pointer is less than k\n    while left < k:\n        left = left * 2\n        \n    # Initialize variable for kth element\n    kth_element = None\n    \n    # Iterate over array from left pointer to right until kth element is found\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if kth element is found\n        if arr[mid] == k:\n            kth_element = k\n            right = mid - 1\n            \n        # Check if kth element is in the right half of the array\n        elif arr[mid] < k:\n            left = mid + 1\n            \n        # Check if kth element is in the left half of the array\n        else:\n            right = mid - 1\n            \n    # Check if kth element is found\n    if kth_element is None:\n        return \"Element not found in the array.\"\n    else:\n        return kth_element"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        i = 0\n        j = n - 1\n        while i < j:\n            pivot = (i + j) // 2\n            if k == pivot + 1:\n                return arr[pivot]\n            elif k < pivot + 1:\n                j = pivot - 1\n            else:\n                i = pivot + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    # check if the array is empty or not\n    if len(arr) == 0:\n        return None\n    \n    # find the middle index of the array\n    mid = len(arr) // 2\n    \n    # check if k is smaller than the length of the array\n    if k < len(arr):\n        # check if the kth element is at the beginning or the end of the array\n        if k == 1:\n            return arr[0]\n        elif k == len(arr):\n            return arr[-1]\n        else:\n            # recursively call the function with the left half of the array\n            left_result = kth_element(arr[:mid], k)\n            \n            # recursively call the function with the right half of the array\n            right_result = kth_element(arr[mid:], k - mid)\n            \n            # if the kth element is at the left half, return it\n            if left_result is not None:\n                return left_result\n            \n            # if the kth element is at the right half, return it\n            if right_result is not None:\n                return right_result\n            \n            # if kth element is neither at the left nor right half, return None\n            return None\n    else:\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n    \n    # Find the middle index of the array\n    middle = len(arr) // 2\n    \n    # If k is less than or equal to the middle index, search in the left half of the array\n    if k <= middle:\n        return kth_element(arr[:middle], k)\n    \n    # If k is greater than the middle index, search in the right half of the array\n    else:\n        return kth_element(arr[middle+1:], k-middle-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        raise IndexError(\"Array is empty\")\n    \n    # Calculate the length of the array\n    n = len(arr)\n    \n    # Check if k is valid\n    if k > n or k < 1:\n        raise ValueError(\"k is not a valid index\")\n    \n    # If k is greater than the length of the array, return the last element\n    if k > n/2:\n        return arr[n-1]\n    \n    # Initialize two pointers, one starting from the left and one starting from the right\n    left = 0\n    right = n-1\n    \n    # Iterate until the left pointer reaches k-1\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If k is at the left half of the array, move the right pointer to mid\n        if k == mid+1:\n            right = mid-1\n        # If k is at the right half of the array, move the left pointer to mid+1\n        elif k == mid:\n            left = mid+1\n        # If k is in the middle, return the element at mid\n        else:\n            return arr[mid-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if array has length 0\n    if len(arr) == 0:\n        raise ValueError(\"Array is empty.\")\n    \n    # check if k is valid\n    if k < 1 or k > len(arr):\n        raise ValueError(\"Invalid value of k.\")\n    \n    # find the kth element using binary search\n    left, right = 1, len(arr)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid-1] == k:\n            return k\n        elif arr[mid-1] < k:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    capitalize_next = True\n    for letter in word:\n        if letter.isupper():\n            camel_case += letter.lower()\n        elif letter.islower():\n            if capitalize_next:\n                camel_case += letter.upper()\n                capitalize_next = False\n            else:\n                camel_case += letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[:i] + word[i].upper() + word[i+1:] for i in range(len(word)) if word[i] == '_'])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words using underscore as a separator\n    words = word.split('_')\n    # Convert the first word to uppercase and the rest of the words to lowercase\n    camel_case_word = words[0].upper() + ''.join([word.lower() for word in words[1:]])\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = []\n    for i in range(len(word)):\n        if i > 0 and word[i-1].isupper() and word[i].islower():\n            result.append('_')\n        result.append(word[i].lower())\n    return ''.join(result)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert each word to camel case\n    camel_case = ''.join(word.title() for word in words)\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Initialize the camel case string\n    camel_case = ''\n    # Convert each word in the snake case string to camel case\n    for word_part in word.split('_'):\n        # Capitalize the first letter of each word part\n        camel_case += word_part.capitalize()\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    parts = word.split('_')\n    result = ''\n    for part in parts:\n        result += part.capitalize()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into individual words\n    words = word.split(\"_\")\n\n    # Convert each word to camel case\n    camel_case = [word.capitalize() for word in words]\n\n    # Join the camel case words back into a string\n    result = \"\".join(camel_case)\n\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function finds the Eulerian number a(n, m).\n    \"\"\"\n\n    if n < m:\n        n, m = m, n\n\n    a_n_1 = 0\n    a_n_m = 0\n\n    # Initialize first row\n    a_n_1 = 1\n\n    # Initialize first column\n    a_n_m = 1\n\n    # Calculate rest of the matrix\n    for j in range(2, m + 1):\n        a_n_m = a_n_m * (n - j + 1) / j\n        a_n_m = int(a_n_m + 0.5)\n\n    # Calculate a(n, m)\n    a_n_m = a_n_m * (n - m + 1) / (m + 1)\n    a_n_m = int(a_n_m + 0.5)\n\n    return a_n_m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 1/4 * (n**2 - m**2)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % m == 0: \n        return n\n    else: \n        return eulerian_num(m, n % m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    # Find the number of squares in a grid of size (n+1) x (m+1)\n    num_squares = n * m\n    \n    # If n <= m, then there are only n squares in each row.\n    if n <= m:\n        num_squares = n * (n + 1) // 2\n    \n    # Calculate the number of ways to arrange the squares on a line of length n\n    ways_to_arrange = (n + 1) * (n + 2) // 2\n    \n    # Return the product of the two values\n    return ways_to_arrange * num_squares"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number to 0\n    a = 0\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Compute the number of factors of i that are less than or equal to m\n        count = sum(1 for j in range(1, m+1) if i % j == 0)\n\n        # If the count is equal to n, then i is an Eulerian number\n        if count == n:\n            a += i\n\n    # Return the value of the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the list of Eulerian numbers a(n, m)\n    a_list = [0] * (n+1)\n\n    # Define a recursive function to calculate a(n, m)\n    def eulerian_recursive(i):\n        if i == n+1:\n            return a_list[i]\n\n        # Calculate the value of a(n, m) for each value of i\n        a_list[i] = a_list[i-1] + eulerian_recursive(i+1)\n\n        return a_list[i]\n\n    # Calculate the first value of a(n, m)\n    a_list[1] = 1\n\n    # Call the recursive function to calculate a(n, m) for each value of i from 1 to n\n    for i in range(2, n+1):\n        a_list[i] = eulerian_recursive(i)\n\n    # Return the last value of a(n, m)\n    return a_list[n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a = (a*i) % m\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    # find the number of edges for each vertex\n    edges = [0] * (n + 1)\n    for i in range(m):\n        x, y = map(int, input().split())\n        edges[x] += 1\n        edges[y] += 1\n\n    # count the number of odd-length cycles\n    odd_length_cycles = 0\n    for i in range(1, n + 1):\n        if edges[i] == 2:\n            odd_length_cycles += 1\n\n    # calculate the Eulerian number\n    a = n * (odd_length_cycles // 2) + (n - odd_length_cycles // 2)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of even and odd numbers between 1 and n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    # Calculate the number of even and odd numbers between 1 and m\n    even_count_m = 0\n    odd_count_m = 0\n    for i in range(1, m+1):\n        if i % 2 == 0:\n            even_count_m += 1\n        else:\n            odd_count_m += 1\n            \n    # Calculate the Eulerian number\n    if even_count_m > odd_count and odd_count > even_count:\n        return (even_count + odd_count) // 2\n    elif even_count_m > odd_count and odd_count < even_count:\n        return (even_count + odd_count) // 2\n    else:\n        return (even_count + odd_count) // 2 - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n\n    # Iterate through all possible pairs (a, b) in the range [1, n]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i + j == n:\n                a = i\n                b = j\n            elif i + j == m:\n                c = i\n                d = j\n\n    # Calculate the Eulerian number\n    a = (a * b) // gcd(a, b)\n    c = (c * d) // gcd(c, d)\n    euler_num = (a * c) // gcd(a, c)\n\n    return euler_num"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n\ninput_list = [[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"bird\"], [\"fish\", \"turtle\", \"shark\"]]\nsort_sublists(input_list)\nprint(input_list)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop over each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in `sorted` function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # Use the sorted() function to sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for i in range(len(input_list)):\n        input_list[i].sort()\n\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    This function takes a list as input and returns the number of true booleans in it.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i is True:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i == True:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup) # Convert the tuple to a list\n    test_list.extend(test_tup) # Append the list to the tuple\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup = test_tup + (test_list[i],)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert lists to tuples\n    test_tup = tuple(test_list)\n    # append the list to the tuple\n    test_tup += (test_list,)\n    # convert the tuple back to a list\n    result_list = list(test_tup)\n    return result_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert lists to sets to remove duplicates\n    num1 = list(set(num1))\n    num2 = list(set(num2))\n    num3 = list(set(num3))\n    \n    # merge the three lists\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    merged = []\n    while heap:\n        merged.append(heapq.heappop(heap))\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    \n    while i < len(num1) and j < len(num2):\n        if num1[i] <= num2[j]:\n            result.append(num1[i])\n            i += 1\n        else:\n            result.append(num2[j])\n            j += 1\n    \n    while i < len(num1) and k < len(num3):\n        if num1[i] <= num3[k]:\n            result.append(num1[i])\n            i += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    \n    while j < len(num2) and k < len(num3):\n        if num2[j] <= num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Create a min heap of the three lists\n    heap1 = [heapq.heappop(num1) for i in range(len(num1))]\n    heap2 = [heapq.heappop(num2) for i in range(len(num2))]\n    heap3 = [heapq.heappop(num3) for i in range(len(num3))]\n    \n    # Combine the min heaps into a single sorted list\n    merged_list = []\n    while heap1 and heap2 and heap3:\n        if heap1[0] < heap2[0]:\n            if heap1[0] < heap3[0]:\n                merged_list.append(heapq.heappop(heap1))\n            else:\n                merged_list.append(heapq.heappop(heap3))\n        elif heap2[0] < heap3[0]:\n            merged_list.append(heapq.heappop(heap2))\n        else:\n            merged_list.append(heapq.heappop(heap3))\n    \n    # Combine the remaining elements\n    if heap1:\n        merged_list += heap1\n    if heap2:\n        merged_list += heap2\n    if heap3:\n        merged_list += heap3\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge num1 and num2 into a single list\n    merged_list = num1 + num2\n    \n    # Merge the merged list and num3 into a single list\n    sorted_list = heapq.merge(merged_list, num3)\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    index1, index2, index3 = 0, 0, 0\n\n    # Iterate through each list and merge them into a single list\n    while index1 < len(num1) and index2 < len(num2) and index3 < len(num3):\n        if num1[index1] < num2[index2] and num1[index1] < num3[index3]:\n            merged_list.append(num1[index1])\n            index1 += 1\n        elif num2[index2] < num1[index1] and num2[index2] < num3[index3]:\n            merged_list.append(num2[index2])\n            index2 += 1\n        else:\n            merged_list.append(num3[index3])\n            index3 += 1\n\n    # Append any remaining elements from the three lists to the merged list\n    merged_list.extend(num1[index1:])\n    merged_list.extend(num2[index2:])\n    merged_list.extend(num3[index3:])\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three lists into one list and sort it\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge three sorted lists into a single sorted list\n    # Using heapq.merge() function from heapq module\n    # Return the merged sorted list\n    return heapq.merge(num1, num2, num3)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Concatenate the three lists into one\n    merged = num1 + num2 + num3\n    # Use heapq to sort the merged list in ascending order\n    return sorted(heapq.merge(heapq.merge(heapq.merge([1],num1),num2),num3))"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        num1: List of integers.\n        num2: List of integers.\n        num3: List of integers.\n\n    Returns:\n        List of integers. The merged list of the three input lists.\n    \"\"\"\n    # Merge num1 and num2 into a single list\n    merged_list = num1 + num2\n\n    # Merge num3 and merged_list into a single list\n    merged_list += num3\n\n    # Sort the merged list\n    heapq.heapify(merged_list)\n    merged_list.sort()\n\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    s = s.zfill(len(s)) # Pad the binary string with leading zeros if necessary\n    for i in range(n):\n        rot = s[-1] + s[-2] + s[-3]\n        s = s[:-3] + rot # Rotate the binary string\n    for i in range(len(s)):\n        if int(s[i])%2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    # Convert the binary string s to a list of digits\n    digits = [int(digit) for digit in s]\n\n    # Rotate the list of digits by n positions\n    for _ in range(n):\n        digits.append(digits.pop(0))\n\n    # Count the number of odd digits\n    count = 0\n    for digit in digits:\n        if digit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    # convert binary string to list of integers\n    binary = [int(bit) for bit in s]\n\n    # rotate the binary string n times\n    for i in range(n):\n        carry = 0\n        for j in range(len(binary)-1, -1, -1):\n            bit = binary[j] + carry\n            binary[j] = bit % 2\n            carry = bit // 2\n        binary.insert(0, carry)\n\n    # count the number of odd values in the rotated binary string\n    odd_count = 0\n    for bit in binary:\n        if bit % 2!= 0:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n): \n    # Count the number of odd numbers in the binary string\n    count = sum([int(i) for i in s])\n    # Rotate the binary string n times\n    s = s[::-1] + s[0:len(s)-1]\n    # Count the number of odd numbers in the rotated binary string\n    odd_count = sum([int(i) for i in s])\n    # Calculate the difference between the two counts\n    return odd_count - count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_s = bin(int(s, 10))[2:]  # converting decimal string to binary string\n    if n > len(binary_s):  # if n is greater than the length of binary string\n        return 0\n    rotated_binary_s = binary_s[-n:] + binary_s[:-n]  # rotating the binary string\n    odd_count = 0\n    for i in rotated_binary_s:\n        if int(i) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables for odd count and odd binary string\n    odd_count = 0\n    odd_str = \"\"\n\n    # Convert binary string to a list of characters\n    binary_list = list(s)\n\n    # Rotate the binary string n times\n    for _ in range(n):\n        # Convert the rotated binary string back to a list of characters\n        rotated_list = list(binary_list[::-1])\n\n        # Count the number of odd characters in the rotated binary string\n        for char in rotated_list:\n            if char == \"1\":\n                odd_count += 1\n\n        # Add the rotated binary string to the odd binary string\n        odd_str += \"\".join(rotated_list)\n\n    return odd_count, odd_str"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert binary string to list\n    lst = list(s)\n    # Initialize count to 0\n    count = 0\n    # Find the length of the binary string\n    length = len(s)\n    # Loop n times\n    for i in range(n):\n        # Find the middle index of the binary string\n        mid = length//2\n        # Reverse the list from left to right\n        lst = lst[mid:] + lst[:mid]\n        # Revert the list to its original position\n        lst = lst[::-1]\n        # Find the number of odd values in the rotated binary string\n        for j in lst:\n            if j % 2!= 0:\n                count += 1\n    # Return the count of odd values after rotating the binary string n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    # Initialize count variable\n    count = 0\n    \n    # Convert binary string to list of binary digits\n    binary_list = [int(i) for i in s]\n    \n    # Loop through the given number of times\n    for i in range(n):\n        \n        # Reverse the binary list\n        binary_list = binary_list[::-1]\n        \n        # Count the odd values in the reversed list\n        count += sum([1 for x in binary_list if x % 2!= 0])\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n):\n    odd = 0\n    for i in range(n):\n        if s[0] == '1':\n            odd += 1\n        s = s[1:] + s[0]\n    return odd"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = (n // 2) + 1\n\n    count = 0\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            count += 1\n            if count == n:\n                break\n\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Iterate through each element in the nested list\n    for element in nestedlist:\n        # Check if the element is also in the common elements list\n        if element in common_elements:\n            # If it is, add it to the common elements list only if it is not already there\n            if element not in common_elements:\n                common_elements.append(element)\n\n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in common:\n                common.append(item)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Check if the given list is empty\n    if not nestedlist:\n        return []\n    \n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through each nested list\n    for lst in nestedlist:\n        # Check if the list is not empty\n        if not lst:\n            continue\n        \n        # Iterate through each element of the list\n        for elem in lst:\n            # Check if the element is not already in the common_elements list\n            if elem not in common_elements:\n                common_elements.append(elem)\n    \n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty set to store common elements\n    common_elements = set()\n\n    # Loop through each nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Check if the element is in the common_elements set\n            if element in common_elements:\n                # If it is, add it to the result set\n                result.add(element)\n            # Otherwise, add it to the common_elements set\n            else:\n                common_elements.add(element)\n\n    # Return the result set containing the common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item in common:\n                common.remove(item)\n            else:\n                common.append(item)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Remove duplicates from the nested list\n    unique_list = list(set(nestedlist))\n\n    # Create an empty dictionary to store the count of each element in the unique list\n    count_dict = {}\n\n    # Iterate through the unique list\n    for item in unique_list:\n        # Initialize count to 0 for each element\n        count_dict[item] = 0\n\n    # Iterate through each item in the nested list and increment the count for each common element\n    for item in nestedlist:\n        if item in count_dict:\n            count_dict[item] += 1\n\n    # Create an empty list to store the common elements\n    common_elements = []\n\n    # Iterate through the count dictionary and add items to the common elements list if their count is equal to 1\n    for item in count_dict:\n        if count_dict[item] == 1:\n            common_elements.append(item)\n\n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for item in nestedlist:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    \n    # create a set to store the common elements\n    common = set()\n    for key in freq:\n        if freq[key] == len(nestedlist):\n            common.add(key)\n    \n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            common.add(element)\n    return list(common)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # initialize variables to keep track of whether we have found a valid integer\n    has_minus = False\n    has_dot = False\n    has_digit = False\n\n    # iterate over each character in the input string\n    for char in text:\n        # check if the character is a digit\n        if char.isdigit():\n            has_digit = True\n        # check if the character is a minus sign\n        elif char == '-':\n            has_minus = True\n        # check if the character is a dot\n        elif char == '.':\n            has_dot = True\n        # if we have found a valid integer, break out of the loop\n        if has_digit and has_minus and has_dot:\n            break\n\n    # return a boolean indicating whether the input string represents an integer\n    return has_digit"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for d in list1:\n        if len(d)!= 0:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list and then to a string\n    num_str = \"\".join(str(num) for num in nums)\n    # Convert the string to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the integers in the tuple\n    result = 0\n    \n    # Iterate through the tuple of integers\n    for num in nums:\n        # Convert the integer to a string, then convert the string to an integer and add it to the result\n        result += int(str(num))\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple to a list\n    nums_list = list(nums)\n    # initialize an empty list to store the integers\n    integers = []\n    # loop through the list of numbers\n    for num in nums_list:\n        # check if the number is a positive integer\n        if isinstance(num, int) and num > 0:\n            # if it is, add it to the list of integers\n            integers.append(num)\n    # check if there were any integers in the list\n    if len(integers) == 0:\n        # if there were no integers, return 0\n        return 0\n    # return the sum of the integers in the list\n    return sum(integers)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple to a list\n    nums_list = list(nums)\n    # initialize the variable to store the result\n    result = 0\n    # iterate over the list of integers and add each integer to the result variable\n    for num in nums_list:\n        result += num\n    # return the final result\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                element = float(element)\n            except ValueError:\n                continue\n            else:\n                row.remove(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass  # skip non-convertible elements\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, item in enumerate(row):\n            try:\n                test_list[i][j] = float(item)\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sub_list in test_list:\n        for element in sub_list:\n            if isinstance(element, (int, float, complex)):\n                float_list.append(float(element))\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Define a list to store the converted values\n    float_list = []\n    \n    # Iterate over each element in the list\n    for item in test_list:\n        # Convert the element to a float if possible\n        try:\n            float_list.append(float(item))\n        except ValueError:\n            # If the element cannot be converted to a float, ignore it\n            pass\n    \n    # Return the converted list of floats\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    # Create a list of lists that contains all possible convertible elements in the input list of lists\n    possible_list = [elem for sublist in test_list for elem in sublist if isinstance(elem, str)]\n\n    # Convert all possible convertible elements in the list of lists to floats and append them to a new list\n    float_list = [float(elem) if isinstance(elem, (int, float)) else None for elem in possible_list]\n\n    # Remove None values from the float list and return it\n    return [elem for elem in float_list if elem is not None]"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == n-1:\n            return arr[i]\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    count = 0\n    for num in arr:\n        if count == 0 and num!= unique_element:\n            unique_element = num\n            count += 1\n        elif count > 0 and num == unique_element:\n            count += 1\n        elif count > 0 and num!= unique_element:\n            count = 0\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    for num in count:\n        if count[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Loop through the array\n    for num in arr:\n        # If the element is not already in the set, add it\n        if num not in unique_set:\n            unique_set.add(num)\n\n    # Loop through the set again to find the element that appears only once\n    for num in arr:\n        # If the element is not already in the unique set, return the element\n        if num not in unique_set:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Find the element that appears only once in the array\n    for num in arr:\n        if freq_dict[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a set to store the elements that appear only once\n    only_once = set()\n\n    # Iterate through the array\n    for num in arr:\n        # If the element is not in the only_once set, add it and add the index of the element to the set\n        if num not in only_once:\n            only_once.add(num)\n            only_once.add(arr.index(num))\n\n    # Return the only element in the only_once set\n    return list(only_once)[0]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Traverse through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Traverse through the dictionary and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        raise ValueError(\"The array must not contain duplicates\")\n\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize count as 0\n    count = 0\n    \n    # iterate over the array\n    for i in range(len(arr)):\n        # check if the current element is equal to the next element\n        if arr[i] == arr[i+1]:\n            # increment the count\n            count += 1\n            \n    # if count is 1, return the element at index 0\n    if count == 1:\n        return arr[0]\n    # else, return None\n    else:\n        return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            pair_product = abs(list1[i] * list1[j])\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize variables for maximum absolute product and current absolute product\n    max_product = float('-inf')\n    current_product = float('-inf')\n\n    # iterate over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate absolute product of current pair of tuples\n            current_product = abs(list1[i][0] * list1[j][1])\n\n            # update maximum absolute product if current product is greater\n            if current_product > max_product:\n                max_product = current_product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            prod = lst[i][0] * lst[j][1]\n            if abs(prod) > max_product:\n                max_product = abs(prod)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the maximum absolute product and the maximum product for each pair of tuples\n    max_abs_prod = float('-inf')\n    max_prod = [float('-inf') for i in range(len(list1)-1)]\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute difference between the numbers in the pair of tuples\n            diff = abs(list1[i][0] - list1[j][0]) + abs(list1[i][1] - list1[j][1])\n\n            # Update the maximum absolute product and maximum product for this pair of tuples\n            max_abs_prod = max(max_abs_prod, diff)\n            max_prod[i] = max(max_prod[i], diff)\n            max_prod[j] = max(max_prod[j], diff)\n\n    # Return the maximum absolute product\n    return max_abs_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function finds the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    max_product = -10**10\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp = abs(list1[i][0]*list1[j][1] - list1[j][0]*list1[i][1])\n            if temp > max_product:\n                max_product = temp\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = 0\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    max_pair = (-float('inf'), -float('inf'))\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i] * lst[j]\n            abs_product = abs(product)\n            if abs_product > max_product:\n                max_product = abs_product\n                max_pair = (product, lst[i], lst[j])\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    temp = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp = max(temp, abs(list1[i][0]*list1[j][1]))\n            max_product = max(max_product, temp)\n            \n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(2, limit+1):\n        if i!= 1:\n            a = sum([j for j in range(2, i) if i % j == 0])\n            if a == i:\n                amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    sum = 0\n    for num in range(1, limit):\n        if is_prime(num) and is_prime(limit - num):\n            sum += num + (limit - num)\n    return sum\n\nprint(sum_amicable_numbers(2000000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum_of_proper_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(n):\n    '''\n    Write a function to find the sum of proper divisors of a number.\n    '''\n    sum_of_proper_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_proper_divisors += i\n    return sum_of_proper_divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        if i!= 1 and is_amicable(i):\n            sum += i\n\n    return sum\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    for i in range(1, num):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit + 1):\n        if i!= 1:\n            if i % 2 == 0:\n                j = 2\n                while j <= i // 2:\n                    if i % j == 0:\n                        break\n                    j += 2\n                else:\n                    sum_amicable += i\n            else:\n                j = 3\n                while j <= i // 3:\n                    if i % j == 0:\n                        break\n                    j += 2\n                else:\n                    sum_amicable += i\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    count = 0\n    num = 1\n    \n    while num <= limit:\n        if num == sum_of_amicable_numbers(num):\n            count += 1\n            sum_of_amicable_numbers += num\n        num += 1\n    \n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        if num == sum_of_proper_divisors(num):\n            amicable_sum += num\n    return amicable_sum\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to calculate the sum of proper divisors of a number.\n    '''\n    sum_of_proper = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_of_proper += i\n    return sum_of_proper"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total_sum = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            total_sum += num\n    return total_sum\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    # create a list of all numbers from 1 to the limit\n    numbers = [i for i in range(1, limit+1)]\n\n    # create a dictionary to store the sum of two numbers and their common factors\n    factors = {}\n\n    # loop through the numbers and check if they are amicable\n    for i in numbers:\n        for j in numbers:\n            # check if the number is not equal to itself and is divisible by i or j\n            if i!= j and i % j == 0:\n                # if i is a factor of j, add i and j to the dictionary\n                if j not in factors:\n                    factors[j] = [i]\n                else:\n                    factors[j].append(i)\n\n    # loop through the dictionary and add up all the factors of each number\n    sum = 0\n    for i in factors:\n        sum += sum(factors[i])\n\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_proper_divisors(n):\n    \"\"\"\n    Returns the sum of proper divisors of n, which are the positive integers less than or equal to its square root.\n    \"\"\"\n    sum_of_proper_divisors = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and is_prime(i):\n            sum_of_proper_divisors += i\n    return sum_of_proper_divisors\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the specified number.\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_prime(i) and i!= 1:\n            div1 = sum_of_proper_divisors(i)\n            div2 = sum_of_proper_divisors(div1)\n            if div1 == div2 and div1!= i:\n                sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Calculate the complex conjugate of a and b\n    conjugate_ab = a + a.conjugate()\n    \n    # Calculate the angle using the arg() function\n    angle = cmath.phase(conjugate_ab)\n    \n    # Return the angle as a float\n    return float(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle,3)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    angle_rad = angle.imag/180*cmath.pi\n    return angle_rad"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = a + b * 1j\n    angle_rad = cmath.phase(complex_number)\n    angle_deg = angle_rad * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            diff += 1\n        else:\n            diff = 0\n\n        if i == n - 1 or string[i]!= string[i + 1]:\n            max_diff = max(diff, max_diff)\n            diff = 0\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, update count0\n        if char == '0':\n            count0 += 1\n        # If the character is a 1, update count1 and check if there's a difference between the two counts\n        elif char == '1':\n            count1 += 1\n            if count1 - count0 > max_diff:\n                max_diff = count1 - count0\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to keep track of the number of 0s and 1s in the binary string\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    \n    # Loop through each character in the binary string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count0 += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1':\n            count1 += 1\n        # If the character is neither 0 nor 1, it is a separator and we need to update the maximum difference\n        else:\n            # Calculate the difference between the current count of 0s and 1s\n            diff = abs(count0 - count1)\n            # Update the maximum difference if the current difference is greater than the current maximum difference\n            max_diff = max(max_diff, diff)\n            \n            # Reset the count of 0s and 1s to 0 for the next sub-string\n            count0 = 0\n            count1 = 0\n    \n    # Return the maximum difference between the current count of 0s and 1s\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        # Find the number of 0s and 1s in the current sub-string\n        count_0s = string.count('0', i, i + 1)\n        count_1s = string.count('1', i, i + 1)\n        # Calculate the maximum difference between the number of 0s and 1s\n        diff = abs(count_0s - count_1s)\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    max_diff = 0\n    max_len = 0\n    count_zero = 0\n    count_one = 0\n\n    # Iterate through the string\n    for i in range(len(string)):\n        # Increment count of 0s and 1s\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        \n        # Find length of current sub-string\n        curr_len = i - count_zero + count_one\n        \n        # Update maximum difference and maximum length\n        max_diff = max(max_diff, count_zero - count_one)\n        max_len = max(max_len, curr_len)\n\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    # Create an empty dictionary to store the count of 0s and 1s for each substring\n    count_dict = {}\n    max_diff = 0\n    \n    # Loop through each substring of the binary string\n    for i in range(len(string) + 1):\n        # Extract the substring\n        sub_string = string[i:i+8]\n        \n        # Update the count of 0s and 1s in the substring\n        count_dict[sub_string] = count_dict.get(sub_string, 0) + sum(sub_string == '0') - sum(sub_string == '1')\n        \n        # Calculate the maximum difference between the count of 0s and 1s\n        sub_diff = max(0, 8 - count_dict[sub_string])\n        \n        # Update the maximum difference if necessary\n        max_diff = max(max_diff, sub_diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n-1):\n        diff = string.count('0') - string.count('1')\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count = 0\n            for j in range(i, len(string)):\n                if string[j] == '0':\n                    count += 1\n                elif string[j] == '1':\n                    break\n            else:\n                max_diff = max(max_diff, count)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # initialize variables for the number of 0s and 1s\n    zeros = 0\n    ones = 0\n\n    # loop through the string and count the number of 0s and 1s\n    for char in string:\n        if char == '0':\n            zeros += 1\n        elif char == '1':\n            ones += 1\n\n    # initialize variables for the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n\n    # loop through all possible substrings of the string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            # calculate the difference between the number of 0s and 1s in the current substring\n            diff = zeros - ones\n\n            # update the maximum difference and the current difference if the current substring is longer than the current maximum\n            if j - i > max_diff:\n                max_diff = j - i\n                curr_diff = diff\n\n    # return the maximum difference between the number of 0s and 1s in any sub-string of the string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kmp(pat, txt):\n    m = len(pat)\n    n = len(txt)\n    next = [0] * m\n    j = 0\n    for i in range(1, m):\n        while j > 0 and pat[i]!= pat[j]:\n            j = next[j - 1]\n        if pat[i] == pat[j]:\n            j += 1\n        next[i] = j\n    i = 0\n    j = 0\n    max_diff = 0\n    while i < n:\n        while j > 0 and txt[i]!= pat[j]:\n            j = next[j - 1]\n        if j == m:\n            max_diff = max(max_diff, m - j)\n            i += 1\n            j = next[j - 1]\n        else:\n            j += 1\n    return max_diff\n\ndef find_length(binary_string):\n    # Convert binary string to list of characters\n    binary_list = list(binary_string)\n    # Define pattern to match\n    pattern = [0] * len(binary_list)\n    pattern[0] = 1\n    # Find longest common prefix using KMP algorithm\n    m = kmp(pattern, binary_list)\n    # Calculate maximum difference\n    max_diff = 0\n    for i in range(len(binary_list) - m):\n        count_0 = binary_list[i:i + m].count('0')\n        count_1 = binary_list[i:i + m].count('1')\n        max_diff = max(max_diff, count_0 - count_1)\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n    # Find the list of divisors of the first number\n    divisors_list_a = [i for i in range(1, a+1) if a % i == 0]\n\n    # Find the list of divisors of the second number\n    divisors_list_b = [i for i in range(1, b+1) if b % i == 0]\n\n    # Find the intersection of two lists of divisors\n    common_divisors = list(set(divisors_list_a) & set(divisors_list_b))\n\n    # Calculate the sum of common divisors\n    sum_of_common = sum(common_divisors)\n\n    return sum_of_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to find common divisors\n    def common_divisors(num):\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # find common divisors of a and b\n    a_divisors = common_divisors(a)\n    b_divisors = common_divisors(b)\n\n    # find the intersection of the two sets\n    common_divisors = list(set(a_divisors) & set(b_divisors))\n\n    # calculate the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    # return the sum\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    # Finding the set of common divisors of a and b\n    divisors_set = set(set(a).intersection(set(b)))\n\n    # Finding the sum of common divisors\n    sum_of_common_divisors = sum(divisors_set)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = set()\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n\n    # Finding all common divisors of a and b\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Calculating the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # find all common divisors of a and b\n    divisors = set()\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n\n    # return the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Returns the greatest common divisor of two given numbers.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    common_divisor = gcd(a, b)\n    return common_divisor * (a // common_divisor + b // common_divisor)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Calculate the sum of common divisors of a and b\n    common_divisors = sum_common_divisors(a, b)\n    # Return the sum of common divisors\n    return common_divisors\n\ndef sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Initialize a variable to store the sum of common divisors\n    sum_cd = 0\n    # Calculate the sum of common divisors\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum_cd += i\n    # Return the sum of common divisors\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if the smaller number is a divisor of the current number\n        if a % i == 0 and b % i == 0:\n            # If it is, add the current number to the sum\n            if i > a:\n                return sum(i, a) + sum(i, b)\n            else:\n                return sum(a, i) + sum(b, i)\n    # If no common divisors are found, return None\n    return None"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(1, y+1):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(max(x, y)+1):\n        result += x // i * y // i\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the string to a list of words\n    words = str.split()\n    # Initialize an empty list to store the long words\n    long_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is longer than n\n        if len(word) > n:\n            # If the word is longer than n, add it to the long_words list\n            long_words.append(word)\n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    # split the string into a list of words\n    words = str.split()\n\n    # create an empty list to store the long words\n    long_words_list = []\n\n    # iterate through each word in the list\n    for word in words:\n\n        # check if the word is longer than n characters\n        if len(word) > n:\n\n            # add the word to the list\n            long_words_list.append(word)\n\n    # return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Calculate the sum of the remaining elements\n    remaining_sum = sum(sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix))) - diagonal_sum\n\n    # Compare the sum of the remaining elements with the diagonal sum\n    return remaining_sum == diagonal_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    # Initialize a variable to store the sum of the row and column sums\n    row_sum = 0\n    col_sum = 0\n\n    # Check if all the rows have the same sum\n    for row in my_matrix:\n        row_sum += sum(row)\n\n    # Check if all the columns have the same sum\n    for i in range(len(my_matrix[0])):\n        col_sum += sum([row[i] for row in my_matrix])\n\n    # Check if the first row, first column, last row, and last column have the same sum\n    if row_sum == col_sum == my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[0][2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    n = len(my_matrix)\n    \n    # Check if the matrix has n rows and n columns\n    if n!= len(my_matrix[0]):\n        return \"Matrix has different dimensions than magic square.\"\n    \n    # Initialize a list to store the sums of the rows and columns\n    row_sum = [0] * n\n    col_sum = [0] * n\n    \n    # Calculate the sum of the matrix\n    for i in range(n):\n        for j in range(n):\n            row_sum[i] += my_matrix[i][j]\n            col_sum[j] += my_matrix[i][j]\n    \n    # Check if the sum of the rows and columns are equal to the total sum of the matrix\n    if row_sum == col_sum:\n        return \"Matrix is a magic square.\"\n    else:\n        return \"Matrix is not a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check that the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check that all rows and columns have the same length\n    for row in my_matrix:\n        if len(row)!= 3:\n            return False\n    \n    # Calculate the sum of the elements in the matrix\n    total = sum(sum(row) for row in my_matrix)\n    \n    # Check whether the sum is 0 or 15\n    if total == 0 or total == 15:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= col_sum:\n            return False\n    for i in range(n):\n        diagonal_sum = my_matrix[i][i] + my_matrix[i][n-i-1]\n        if diagonal_sum!= n**2:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the rows, columns, and diagonals\n    row_sum = sum(sum(row) for row in my_matrix)\n    col_sum = sum(sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix)))\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Check if the sums match\n    return row_sum == col_sum == diag_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has the correct dimensions\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix has the required sum\n    total_sum = sum(sum(row) for row in my_matrix)\n    if total_sum!= 15:\n        return False\n    \n    # Check if the matrix has unique values\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Determine if a given matrix is a magic square.\n\n    :param my_matrix: The matrix to be tested\n    :type my_matrix: list[list[int]]\n    :return: True if the matrix is a magic square, False otherwise\n    :rtype: bool\n    \"\"\"\n    # Calculate the sum of the rows and columns\n    row_sum = sum(sum(row) for row in my_matrix)\n    col_sum = sum(sum(row[i] for row in my_matrix) for i in range(len(my_matrix[0])))\n\n    # Check if the sum of the rows and columns is equal to the total of the matrix\n    if row_sum == col_sum == sum(sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n\n    # Check that the matrix is a square\n    if n!= len(set(my_matrix)):\n        return False\n\n    # Check that all elements in the matrix are different\n    if len(set(map(sum, my_matrix)))!= n:\n        return False\n\n    # Check that the sum of each row is the same\n    for i in range(n):\n        if sum(my_matrix[i])!= sum(my_matrix[:i] + my_matrix[i+1:]):\n            return False\n\n    # Check that the sum of each column is the same\n    for j in range(n):\n        if sum(row[j] for row in my_matrix)!= sum(my_matrix[i][j] for i in range(n)):\n            return False\n\n    # Check that the sum of the diagonals is the same\n    diag1 = sum(my_matrix[i][i] for i in range(n))\n    diag2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1!= diag2:\n        return False\n\n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if each row and column contains the same values\n    for i in range(len(my_matrix)):\n        row_vals = set(my_matrix[i])\n        col_vals = set([row[i] for row in my_matrix])\n        if row_vals!= col_vals:\n            return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row = my_matrix[i]\n        for j in range(len(row)):\n            if not (i - j) % 2:\n                row[j] += 1\n            else:\n                row[j] -= 1\n            if row[j] in col_vals:\n                col_vals.remove(row[j])\n            elif row[j] in row_vals:\n                row_vals.remove(row[j])\n            else:\n                return False\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n\n    max_freq = 0\n    max_item = None\n    for item, freq in frequency.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_item = None\n    max_count = 0\n\n    for num, count in freq.items():\n        if count > max_count:\n            max_item = num\n            max_count = count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = max(freq.values())\n    result = None\n    for num, count in freq.items():\n        if count == max_freq:\n            result = num\n            break\n    \n    return result"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list and update the frequency of each item in the defaultdict\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_num = max(freq_dict, key=freq_dict.get)\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        count[num] += 1\n        \n        if count[num] > max_freq:\n            max_freq = count[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of numbers and returns the item with maximum frequency in the list.\n    '''\n    # Create a dictionary to store the frequency of each number\n    freq_dict = defaultdict(int)\n\n    # Loop through the list and increment the frequency of each number in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the highest frequency\n    max_item = max(freq_dict, key=lambda x: freq_dict[x])\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_count = 0\n    max_num = None\n    for num, count in freq_dict.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # iterate over the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with maximum frequency and return it\n    return max(freq, key=freq.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate through the given list and update the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the maximum frequency and the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_reverse = \"\"\n    for char in str1:\n        if char in vowels:\n            vowel_reverse += char\n    return vowel_reverse[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    # Initialize an empty string to store the reversed vowels\n    rev_vowels = \"\"\n    # Loop through each character in the input string\n    for i in range(len(str1)-1, -1, -1):\n        # If the character is a vowel, append it to the rev_vowels string\n        if str1[i] in vowels:\n            rev_vowels += str1[i]\n    # Return the reversed vowels string\n    return rev_vowels"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'AEIOUaeiou'\n    str1 = list(str1)\n    reverse_str = []\n    for char in str1:\n        if char not in vowels:\n            reverse_str.append(char)\n    reverse_str = ''.join(reverse_str)\n    return reverse_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    vowel_indices.sort(reverse=True)\n    for i in vowel_indices:\n        str1 = str1[:i] + str1[i+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    vowel_indices.sort(reverse=True)\n    new_str = \"\"\n    for i in vowel_indices:\n        new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    vowel_indices.sort(reverse=True)\n    result = []\n    for index in vowel_indices:\n        result.append(str1[index])\n    return \"\".join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str_vowels = [char for char in str1 if char in vowels]\n    str_vowels.reverse()\n    return ''.join(str_vowels)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert tuple to list\n    lst = list(tup1)\n    # Join the elements of the list with commas\n    s = \", \".join(lst)\n    # Return the string\n    return s"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n\n    Parameters:\n    tup1 (tuple): A tuple to be converted to a string.\n\n    Returns:\n    str: A string representation of the input tuple.\n\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    string_tup = str(tup1)\n    \n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string = \" \".join(str(x) for x in tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return \" \".join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            neg_sum += num\n    \n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativesum = 0\n    for num in nums:\n        if num < 0:\n            negativesum += num\n    return negativesum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hexagon(n):\n        if n == 1:\n            return 1\n        else:\n            return 3 * (n - 1) + 1\n\n    def num_hexagons(n):\n        if n == 1:\n            return 1\n        else:\n            return 6 * (n - 1) + 2\n\n    return hexagon(num_hexagons(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case: if n is zero, return 0\n    if n == 0:\n        return 0\n    # Base case: if n is one, return 1\n    elif n == 1:\n        return 1\n    # Recursive case: return 2 * (n - 1) + 1\n    else:\n        return 2 * (n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n)**0.5 - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(n):\n        hex_num += (2*i + 1)**2\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return 2*n + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return 2 * n - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize a variable to keep track of the sum of the first n hexagonal numbers\n    hex_sum = 0\n    # Initialize the first hexagonal number to 1\n    hex_num = 1\n    \n    # Loop through the first n hexagonal numbers\n    for i in range(n):\n        # Calculate the sum of the previous two hexagonal numbers\n        hex_sum = (i * 3) - 1\n        # Increment the hexagonal number by 1\n        hex_num += 1\n        # Add the sum to the running sum\n        hex_sum += hex_num\n    \n    # Return the nth hexagonal number\n    return hex_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 1\n    for i in range(1, n + 1):\n        hex_num = 6 * hex_num + 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # initialize two empty arrays to store the count of zeroes and non-zeroes\n    zero_count = array('i', [0, 0])\n    # loop through each element in the array\n    for num in nums:\n        # if the element is zero, increment the count of zeroes\n        if num == 0:\n            zero_count[0] += 1\n        # otherwise, increment the count of non-zeroes\n        else:\n            zero_count[1] += 1\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count[0] / zero_count[1]\n    # return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to an array of type 'b' to represent bytes\n    byte_array = array('b', [int(num) for num in nums])\n\n    # Count the number of zeroes and non-zeroes in the array\n    zero_count = byte_array.count(0)\n    non_zero_count = len(byte_array) - zero_count\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count if non_zero_count > 0 else 0\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    zero_ratio = zeros / non_zeros\n    print(f\"Ratio of zeroes to non-zeroes: {zero_ratio}\")"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    \n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n            \n    ratio = zeros / non_zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array of zeros to store the non-zeroes\n    zero_arr = array('i', [0] * len(nums))\n\n    # Iterate through the input array\n    for num in nums:\n        # If the number is zero, increment the corresponding index in the zero array\n        if num == 0:\n            zero_arr[zero_arr.index(0)] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = sum(zero_arr) / (len(nums) - sum(zero_arr))\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0 for i in range(len(nums))])  # create an array of zeros\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] = 1  # increment the index of the corresponding non-zero element in the array\n    non_zeros = len(nums) - sum(zeros)  # count the number of non-zero elements\n    if non_zeros == 0:\n        return 0  # return 0 if all elements are zeros\n    return zeros[0] / non_zeros  # return the ratio of zeroes to non-zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_ones = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_ones += 1\n    ratio = count_zeros / count_ones if count_ones!= 0 else 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = num_nonzeros = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_nonzeros += 1\n    return num_zeros / num_nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    arr = array('i', nums)\n    non_zero_count = 0\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    zero_ratio = 0\n    if non_zero_count > 0:\n        zero_ratio = zero_count / non_zero_count\n    return zero_ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    for i in range(1, n+1):\n        if n % i == 0:\n            power = 0\n            while n % i == 0:\n                power += 1\n                n //= i\n            if power > 0:\n                return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 0\n    while i*i <= n:\n        if n == 2**i + 2**i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if n is divisible by 2^i for i in range(0, 32)\n    for i in range(0, 32):\n        if (n & (1 << i))!= 0:\n            return False\n\n    # check if n can be represented as 2^k * 2^j\n    k = 0\n    while (n & (1 << k)) == 0:\n        k += 1\n\n    for j in range(k + 1):\n        if (n & (1 << j)) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: \n        return False\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i * i!= n:\n                count += 1\n            if count >= 2:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # initialize two variables to keep track of current power of 2 and remaining number\n    power = 0\n    remaining_num = n\n    \n    # loop until remaining number is zero\n    while remaining_num!= 0:\n        \n        # check if current power of 2 is even or odd\n        if remaining_num % 2 == 0:\n            \n            # if it is even, add it to current power of 2\n            power += remaining_num // 2\n            \n            # remove the power of 2 from remaining number\n            remaining_num = remaining_num // 2\n            \n        else:\n            \n            # if it is odd, add (current power of 2 + 1) to current power of 2\n            power += remaining_num // 2 + 1\n            \n            # remove the power of 2 and (current power of 2 + 1) from remaining number\n            remaining_num = remaining_num // 2 + 1\n            \n    # if power is even, then it can be represented as sum of non-zero powers of 2\n    if power % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Find the sum of powers of 2 in n\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n\n    # Check if sum is non-zero\n    return count > 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if n is even or odd\n    if n % 2 == 0:\n        return \"The given number can be represented as sum of non-zero powers of 2.\"\n    else:\n        return \"The given number can not be represented as sum of non-zero powers of 2.\"\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: \n        return False\n    \n    # Check if the given number can be represented as sum of powers of 2\n    two_powers = 1\n    while two_powers < n: \n        if n % two_powers == 0: \n            return False\n        two_powers <<= 1\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the number is divisible by 2 \n    if n % 2 == 0: \n        return False \n\n    # Initialize a variable to store the result \n    result = 0 \n\n    # Loop through all the powers of 2 from 0 to n-1 \n    for i in range(n-1): \n        # Check if the current power of 2 is a non-zero number \n        if i % 2!= 0: \n            return False \n        \n        # Add the current power of 2 to the result \n        result += i \n\n    # If the loop has completed without finding a zero power of 2, then the number is a sum of non-zero powers of 2 \n    return True "
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # pi * radius\n    print(\"The circumference of the circle with radius\", r, \"is\", circumference)\n    \n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n    \n    flattened_list = flatten(test_list)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # use a generator expression to flatten the list of lists\n    flattened = (num for sublist in test_list for num in sublist)\n    # convert the flattened list to a set to remove duplicates\n    singly_set = set(flattened)\n    return singly_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            result.append(j)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened.append(item)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for inner_list in test_list:\n        flattened_list.extend(inner_list)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n\n    for i in range(n, 0, -1):\n        # Find the largest number in the range [0, i]\n        largest = i\n        for j in range(i):\n            if nums[j] > nums[largest]:\n                largest = j\n\n        # Swap the largest number with the i-th number\n        nums[i - 1], nums[largest] = nums[largest], nums[i - 1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # loop until all elements are sorted\n    while True:\n\n        # find the largest element and swap with the last element\n        largest = max(nums)\n        last = nums.index(largest)\n        nums[last], nums[largest] = nums[largest], nums[last]\n\n        # check if any more swaps are needed\n        if nums == nums[::-1]:\n            break\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of elements using the pancake sort algorithm.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def partition(nums, low, high):\n        pivot = nums[high]\n        i = low - 1\n        for j in range(low, high):\n            if nums[j] <= pivot:\n                i += 1\n                swap(nums, i, j)\n        swap(nums, i + 1, high)\n        return i + 1\n\n    def sort(nums, low, high):\n        if low < high:\n            pi = partition(nums, low, high)\n            sort(nums, low, pi - 1)\n            sort(nums, pi + 1, high)\n\n    sort(nums, 0, len(nums) - 1)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # find the largest element in the unsorted part of the array\n        largest = nums[i]\n        j = i\n        while j < n-1:\n            if nums[j+1] > largest:\n                largest = nums[j+1]\n            j += 1\n        # swap the largest element with the element at the end of the unsorted part of the array\n        nums[i], nums[j] = nums[j], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # create a copy of the list to avoid modifying the original one\n    nums_sorted = nums.copy()\n\n    # iterate over the list from smallest to largest element\n    for i in range(n):\n        # find the index of the largest element\n        max_index = i\n        for j in range(i+1, n):\n            if nums_sorted[j] > nums_sorted[max_index]:\n                max_index = j\n        # swap the largest element with the i-th element\n        nums_sorted[i], nums_sorted[max_index] = nums_sorted[max_index], nums_sorted[i]\n        # reverse the sublist starting from the i-th element\n        nums_sorted[i+1:][::-1].sort(reverse=True)\n\n    return nums_sorted"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Calculate the length of the list\n    n = len(nums)\n\n    # Convert the list to a string\n    s = str(nums)\n\n    # Reverse the string\n    s = s[::-1]\n\n    # Convert the reversed string back to a list\n    nums = [int(x) for x in s]\n\n    # Pancake sort the list using the counting sort algorithm\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i + 1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the last unsorted element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # Convert the sorted list back to a string and back to a list\n    sorted_nums = [str(x) for x in nums]\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # initialize a list to hold the sorted array\n    sorted_nums = []\n\n    # loop through each element in the input list\n    for num in nums:\n        \n        # create a copy of the input list\n        copy_nums = nums.copy()\n        \n        # find the smallest index i such that nums[i] > num\n        i = 0\n        for j in range(len(copy_nums)):\n            if copy_nums[j] > num:\n                break\n            i += 1\n            \n        # swap the num with nums[i] to reverse the pancake\n        copy_nums[i], num = num, copy_nums[i]\n        \n        # append the sorted version of the list to the sorted_nums list\n        sorted_nums.append(copy_nums)\n        \n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Initialize the maximum swapping index to 0\n    max_swapping = 0\n    # Loop through each element of the list\n    for i in range(n-1):\n        # Initialize the current index to i\n        current = i\n        # Find the maximum element in the current sublist (from i to n-1)\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # If the maximum element is not the current element, swap them\n        if max_index!= current:\n            nums[current], nums[max_index] = nums[max_index], nums[current]\n            max_swapping += 1\n            # Update the maximum swapping index\n            if max_swapping == n-i-1:\n                max_swapping = 0\n                # Bubble sort for the last remaining element in the list\n                for j in range(n-1):\n                    if nums[j] > nums[j+1]:\n                        nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    The pancake sort algorithm is an efficient in-place variation of the bubble sort algorithm.\n    It works by sorting a list in reverse order using a combination of counting sort and bubble sort.\n    '''\n    \n    # Helper function to swap elements in the list\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    \n    # Helper function to reverse a sublist\n    def reverse(arr, start, end):\n        while start < end:\n            swap(arr, start, end)\n            start += 1\n            end -= 1\n    \n    # Helper function to count the occurrences of each element in the list\n    def count_occurrences(arr):\n        count = [0] * (len(arr) + 1)\n        for num in arr:\n            count[num] += 1\n        return count\n    \n    # Helper function to sort a sublist using counting sort\n    def counting_sort(arr):\n        max_num = max(arr)\n        count = count_occurrences(arr)\n        output = [0] * len(arr)\n        i = 0\n        while i <= max_num:\n            count[i] = 0\n            i += 1\n        for num in arr:\n            output[count[num] - 1] = num\n            count[num] -= 1\n        return output\n    \n    # Helper function to sort the list using bubble sort\n    def bubble_sort(arr):\n        n = len(arr)\n        for i in range(n):\n            swapped = False\n            for j in range(0, n - i - 1):\n                if arr[j] > arr[j + 1]:\n                    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                    swapped = True\n            if not swapped:\n                break\n        return arr\n    \n    # Perform the pancake sort algorithm\n    for i in range(len(nums)):\n        # Reverse the sublist\n        reverse(nums, 0, i)\n        # Sort the sublist using counting sort\n        nums[i:] = counting_sort(nums[i:])\n        # Reverse the sorted sublist\n        reverse(nums, 0, i)\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Find the length of the list\n    n = len(nums)\n\n    # Initialize the maximum swaps counter and the pancakes\n    max_swaps = 0\n    pancakes = [[n, 1]]\n\n    # Initialize the list of indexes to be sorted\n    indexes = list(range(n))\n\n    # Sort the list using the pancake sort algorithm\n    while indexes:\n        max_swaps = 0\n        # Find the index with the maximum value in the current pancake\n        for i in indexes:\n            if nums[i] > pancakes[0][0]:\n                max_swaps = max(max_swaps, pancakes[0][1])\n\n        # If there is no more swaps to be made, break out of the loop\n        if max_swaps == 0:\n            break\n\n        # Create a new pancake with the updated size and value\n        pancakes.insert(0, [pancakes[0][0] - max_swaps, pancakes[0][1] + 1])\n\n        # Swap the elements at the indexes with the maximum value\n        for i in indexes:\n            if nums[i] == pancakes[0][0]:\n                nums[i], nums[indexes[0]] = nums[indexes[0]], nums[i]\n                indexes.pop(0)\n                max_swaps -= 1\n                break\n\n        # Move to the next pancake in the list\n        pancakes.pop(0)\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # initialize count variable\n    count = 0\n    # loop through the first list and second list\n    for i in range(len(list1)):\n        # loop through the second list to find the same items\n        for j in range(len(list2)):\n            # check if the item at index i in list1 is the same as the item at index j in list2\n            if list1[i] == list2[j]:\n                # check if the item at index i in list2 is the same as the item at index j in list3\n                if list2[j] == list3[i]:\n                    # increment the count variable\n                    count += 1\n    # return the count\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function counts the number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if isinstance(item, list):\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_diff:\n            max_diff = arr[i] - arr[0]\n        elif arr[i] < max_diff:\n            max_diff = arr[0] - arr[i]\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    # find the maximum value in the array\n    max_val = max(arr)\n    \n    # initialize a variable to store the absolute difference of the maximum value and the first element\n    max_diff = abs(max_val - arr[0])\n    \n    # loop through the array starting from the second element and compare each value to the current max_diff\n    for i in range(1, len(arr)):\n        current_diff = abs(arr[i] - arr[i-1])\n        \n        # update the max_diff if the absolute difference is greater\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    return arr[-1] - arr[0]"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    if len(arr) < 2:\n        return None\n    \n    max_diff = float('-inf')\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = 0 \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # If a and b are both 0, then x = y = n/b\n    if a == 0 and b == 0:\n        x = y = n//b\n        return (x, y)\n    \n    # Find the equation of the line passing through (0, 0) and (1, 1)\n    equation_of_line = (b, -a)\n    y_intercept = equation_of_line[1]*(-1)\n    \n    # If the equation of the line is vertical, then no solution exists\n    if equation_of_line[0] == 0:\n        return None\n    \n    # Find the x-coordinate of the point on the line that is closest to n/b\n    x_coord_of_closest_point = equation_of_line[0]*n//b\n    \n    # Check if the point is on the line or not\n    if x_coord_of_closest_point > 1:\n        return None\n    \n    # Calculate the y-coordinate of the point on the line that is closest to n/b\n    y_coord_of_closest_point = equation_of_line[1]*x_coord_of_closest_point + y_intercept\n    \n    # Check if the point is on the line or not\n    if y_coord_of_closest_point > 1 or y_coord_of_closest_point < -1:\n        return None\n    \n    # Return the x-coordinate and y-coordinate of the point on the line that is closest to n/b\n    return (x_coord_of_closest_point, y_coord_of_closest_point)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Try all possible values of x and y that satisfy the equation ax + by = n\n    for x in range(-b // a, b // a + 1):\n        for y in range(-(n - a * x) // b, (n - a * x) // b + 1):\n            # Check if the equation is satisfied by the given values of x and y\n            if a * x + b * y == n:\n                return (x, y)\n    # If no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # first, find the quadratic formula solution\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        # if the discriminant is negative, there is no solution\n        return None\n    elif discriminant == 0:\n        # if the discriminant is zero, there is only one solution\n        x = -b/(2*a)\n        y = x\n    else:\n        # otherwise, there are two solutions\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        y1 = x1 / a\n        y2 = x2 / a\n    return (x1, y1, x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # If discriminant is greater than 0, there is a solution\n    if discriminant > 0:\n        x1 = (-b + discriminant**(1/2)) / (2*a)\n        x2 = (-b - discriminant**(1/2)) / (2*a)\n        return (x1, x2)\n    \n    # If discriminant is equal to 0, only one solution exists\n    elif discriminant == 0:\n        x1 = -b / (2*a)\n        return (x1, x1)\n    \n    # If discriminant is less than 0, no solution exists\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(-(2 * n) // b, (2 * n) // b + 1):\n        y = (n - a * x) // b\n        if a * x + b * y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = -b/(2*a)\n    y1 = -x1/a\n    x2 = -y1/b\n    y2 = -x2/a\n    x3 = (n+b)/a\n    y3 = x3/b\n    x4 = (n+a)/b\n    y4 = x4/a\n    if a*x1 + b*y1 == n or a*x2 + b*y2 == n or a*x3 + b*y3 == n or a*x4 + b*y4 == n:\n        return (int(x1), int(y1)), (int(x2), int(y2)), (int(x3), int(y3)), (int(x4), int(y4))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    x1 = (-b + n**0.5) / (2 * a)\n    x2 = (-b - n**0.5) / (2 * a)\n    if x1.is_integer() and x2.is_integer():\n        return (int(x1), int(x2))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a is 0, b is 0, or n is 0\n    if a == 0 or b == 0 or n == 0:\n        return None\n    \n    # find gcd(a, b)\n    gcd = 1\n    while b:\n        a, b = b, a % b\n    a = gcd\n    \n    # check if gcd is equal to 1\n    if a == 1:\n        return None\n    \n    # calculate the value of x and y\n    x = n // a\n    y = n % a\n    \n    # check if x and y are both integers\n    if isinstance(x, int) and isinstance(y, int):\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the given equation has a solution\n    if b**2 - 4*a*n < 0:\n        return None\n    \n    # calculate the two solutions\n    x1 = (-b + (b**2 - 4*a*n)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*n)**0.5)/(2*a)\n    \n    # check if the solutions are integers\n    if x1.is_integer() and x2.is_integer():\n        return (int(x1), int(x2))\n    \n    # if the solutions are not integers, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            x = -n / b\n            y = n / b\n            return (x, y)\n    else:\n        d = b * b - 4 * a * n\n        if d < 0:\n            return None\n        elif d == 0:\n            x1 = -b / (2 * a)\n            return (x1, x1)\n        else:\n            x1 = (-b + d ** 0.5) / (2 * a)\n            x2 = (-b - d ** 0.5) / (2 * a)\n            return (min(x1, x2), max(x1, x2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Loop through each element in the first list\n    for item in list1:\n        # If the item is not in the second list, remove it from the first list\n        if item not in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Remove all elements in list2 from list1\n    for item in list2:\n        while item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = [x for x in list1 if x not in list2]\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function removes all elements in the second list from the first list.\n    \"\"\"\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Remove all elements from list1 present in list2\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create an empty list to store the elements present in list1 but not in list2\n    result = []\n\n    # iterate through list1\n    for item in list1:\n        # check if item is not present in list2\n        if item not in list2:\n            # add the item to the result list\n            result.append(item)\n\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-1)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(x for x in range(n - 2, -1, -1) if x >= 0)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += (n - 2 * i)\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = []\n    for i in range(n // 2 + 1):\n        series.append((n - 2*i))\n    series.reverse()\n    return sum(series)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area using the formula for a regular polygon\n    area = (s/2) * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n    \n    for i in range(l):\n        x = s * tan(pi/180*angle*i)\n        y = 0\n        \n        area += x\n        \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += ((s**2)*(tan(i*2*pi/l))) / l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the side length\n    side_length = s / l\n\n    # Calculate the area using the formula for a regular polygon\n    area = 0.5 * side_length * (1 + tan(pi / l))\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(tan(pi/l)))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        x = i * s\n        y = 0\n        area += x * (1 - (x/l)) ** 2\n    area *= (s / 2) ** 2\n    area *= math.sin(math.pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / (4 * tan(pi / l))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = int(input(\"Enter the number of sides: \"))\n    area = (1/2) * s * (l/n)**n\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = [] \n\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_list.append(i) \n            div_list.append(n//i) \n\n    if sum(div_list) == n: \n        return True \n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # find the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    # find the sum of the divisors of (n-1)\n    n_div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if (n-1) % i == 0])\n    # check if the sums are equal\n    return div_sum == n_div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 2\n            if n // i == i:\n                divisor_count += 1\n    if divisor_count == n-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    divisors_sum = sum(set(math.factorial(i) for i in range(1, int(math.sqrt(n))+1) if n % i == 0))\n    # Check if the sum is equal to the original input\n    if divisors_sum == n:\n        print(\"The sum of the divisors of\", n, \"are the same as the input.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"are different from the input.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    \n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # get the list of divisors of n using a for loop \n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0] \n\n    # check if the sum of the divisors is equal to n/2 \n    if sum(divisors) == n/2: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Calculate the sum of divisors of n \n    sum_div = sum([i for i in range(1, int(math.sqrt(n))+1) if n%i==0])\n    \n    # Calculate the sum of divisors of 1\n    sum_div1 = sum([i for i in range(1, n+1) if n%i==0])\n    \n    # Return True if the sum of the divisors is same, else False\n    return sum_div == sum_div1"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_of_divisors(num):\n        div_list = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_list.append(i)\n        return div_list\n    \n    div1 = sum_of_divisors(n)\n    div2 = sum_of_divisors(n)\n    div_sum_set = set(div1)\n    div_sum_list = list(div_sum_set)\n    div_sum_list.sort()\n    \n    if div1 == div2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            print(i)\n        i += 1"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div_sum += i\n\n    # Find the sum of the divisors of the other number\n    other_div_sum = 0\n    for i in range(1, n + 1):\n        if other_num % i == 0:\n            other_div_sum += i\n\n    # Check if the div_sum and other_div_sum are equal\n    if div_sum == other_div_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n\n    for char in str1:\n        if char.lower() in english_alphabet:\n            if str1.lower().find(char.lower()) == str1.lower().find(char.lower(), str1.lower().find(char.lower()) + 1):\n                count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        char = chr(i+97)  # convert integer to character\n        if char in str1.lower():\n            count += str1.lower().count(char)\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    for i in range(26):\n        char = chr(i + 65)\n        if str1.lower() == char.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize count variable to 0\n    count = 0\n    # convert input string to lowercase\n    str1 = str1.lower()\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the current character is a lowercase letter, check if it matches any of the lowercase letters in the English alphabet\n        if str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            # if it does, check if it is the same as the next character in the string\n            if i < len(str1) - 1 and str1[i+1] in 'abcdefghijklmnopqrstuvwxyz':\n                # if it is, increment the count variable\n                count += 1\n    # return the count of characters that occur at the same position in the string as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a dictionary to store the count of characters in the English alphabet\n    char_dict = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n\n    # Convert the input string to lowercase and remove any non-alphabetic characters\n    str1 = ''.join([char for char in str1 if char.isalpha()])\n\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is in the English alphabet\n        if char in char_dict:\n            # Increment the count of characters in the same position in the English alphabet\n            char_dict[char] += 1\n\n    # Return the dictionary of character counts\n    return char_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n\n    # Create an empty dictionary to store the counts\n    char_counts = {}\n\n    # Iterate over the characters in the string\n    for char in str1:\n        # Check if the character is a letter\n        if char.isalpha():\n            # If the character is a letter, add it to the dictionary with a count of 1\n            if char in char_counts:\n                char_counts[char] += 1\n            else:\n                char_counts[char] = 1\n\n    # Return the dictionary of character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a dictionary to store the count of characters\n    char_count = {}\n\n    # Convert all the characters in the string to lowercase\n    str1 = str1.lower()\n\n    # Iterate through the characters in the string\n    for char in str1:\n        # Check if the character is a letter\n        if char.isalpha():\n            # If it is, add it to the dictionary\n            char_count[char] = char_count.get(char, 0) + 1\n\n    # Return the count of characters\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Convert the input string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Initialize a counter for each character in the English alphabet\n    counter = [0] * 26\n\n    # Iterate over each character in the input string\n    for char in str1:\n        # Get the index of the character in the English alphabet\n        index = ord(char) - ord('a')\n\n        # Increment the counter at that index\n        counter[index] += 1\n\n    # Iterate over the counter and print the counts of each character\n    for i in range(26):\n        if counter[i] > 0:\n            print(chr(i + ord('a')), counter[i])"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet:\n            index = english_alphabet.index(char.lower())\n            if index == len(english_alphabet) - 1:\n                count += 1\n            else:\n                count += 1\n                if str1[index + 1].lower() == char.lower():\n                    count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    # Iterate over the characters in the string\n    for i in range(26):\n        # Check if the current character is in the dictionary\n        if chr(65+i) in char_count:\n            # Increment the count of characters at this position by 1\n            char_count[chr(65+i)] += 1\n        else:\n            # Add the current character to the dictionary with a count of 1\n            char_count[chr(65+i)] = 1\n    # Initialize a counter for the total number of characters\n    count = 0\n    # Iterate over the characters in the English alphabet\n    for i in range(26):\n        # Check if the current character is present in the dictionary with a count greater than 0\n        if chr(65+i) in char_count and char_count[chr(65+i)] > 0:\n            # Increment the counter for total number of characters by 1\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n\n    # Initialize the count to zero\n    count = 0\n\n    # Iterate through each integer in the list\n    for i in range(len(A)):\n\n        # Iterate through each integer in the list starting from the next index\n        for j in range(i+1, len(A)):\n\n            # Calculate the xor of the current integer and the next integer\n            xor = A[i] ^ A[j]\n\n            # If the xor is even, increment the count\n            if xor % 2 == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] + A[j] % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a Python function to find the smallest power of 2 greater than or equal to a given number n.\n    \"\"\"\n    if n == 1:\n        return 2\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize a variable to hold the power of 2 that is greater than or equal to n\n    power = 1\n    \n    # loop while the power is less than or equal to the square root of n\n    while power <= n ** 0.5:\n        # if the power is a power of 2, return it\n        if n & (power - 1) == 0:\n            return power\n        \n        # otherwise, increment the power by 1\n        power += 1\n    \n    # if no power of 2 is found, return the largest power of 2 smaller than n\n    return 2 ** (int(n.bit_length()) - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # loop through powers of 2 up to the square root of n\n    for i in range(int(n**0.5)+1):\n        # check if the current power of 2 is greater than or equal to n\n        if 2**i >= n:\n            # return the current power of 2\n            return 2**i\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2\n    greater than or equal to n.\n\n    >>> next_power_of_2(1)\n    2\n    >>> next_power_of_2(2)\n    4\n    >>> next_power_of_2(3)\n    4\n    >>> next_power_of_2(4)\n    8\n    >>> next_power_of_2(5)\n    8\n    >>> next_power_of_2(6)\n    8\n    \"\"\"\n\n    # loop until the power of 2 is greater than or equal to n\n    while n & (n - 1):\n        n = n | (n - 1)\n\n    # return the result\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize variables to store the binary representation of n and the count of 1's\n    binary = bin(n)[2:]\n    count = 0\n    \n    # Iterate through the binary representation of n\n    for i in binary:\n        # If the current binary digit is 1, increment the count of 1's\n        if i == '1':\n            count += 1\n        # If we encounter a 0, exit the loop as there can't be any more 0's after this point\n        else:\n            break\n    \n    # If the count of 1's is 0, the binary representation of n has only 1 digit, which is already a power of 2\n    if count == 0:\n        return n\n    \n    # Otherwise, the binary representation of n has a power of 2 less than 2^n\n    else:\n        return 2**count - 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to the input integer.\n    \"\"\"\n    # Check if n is 0 or 1\n    if n <= 1:\n        return 1\n    \n    # Binary search for the smallest power of 2 greater than or equal to n\n    low = 1\n    high = n\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        # If mid is a power of 2, return it\n        if mid == 1 << int(mid**0.5):\n            return mid\n        \n        # If mid is not a power of 2, update the search range\n        elif mid < 1 << int(mid**0.5):\n            low = mid + 1\n        else:\n            high = mid\n    \n    # Return the smallest power of 2 greater than or equal to n\n    return 1 << int(high**0.5)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Initialize result variable to n\n    result = n\n\n    # While result is not a power of 2\n    while result & (result-1)!= 0:\n        # Set result to the next power of 2\n        result <<= 1\n\n    # Return result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize the power of 2 to 1\n    power = 1\n    # loop until we find a power of 2 greater than or equal to n\n    while power < n:\n        power *= 2\n    # return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        for i in range(1, 32):\n            if (1 << i) >= n:\n                return (1 << i)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the smallest power of 2 greater than or equal to n\n    power = 1\n\n    # Loop through all possible powers of 2\n    while power < n:\n        power <<= 1\n\n    # Return the smallest power of 2 greater than or equal to n\n    return power\n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in a list `a` and a number `x` as input and returns the number of occurrences of `x` in `a`.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, num):\n    \"\"\"\n    This function takes two arguments, a list and a number.\n    The function counts the number of times the number appears in the list and returns it.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments: a list and a number.\n    It returns the number of occurrences of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize a variable to store the sum\n    sum = 0\n    # Loop through the indices of the list\n    for i in range(m, n+1):\n        # Add the element at the current index to the sum\n        sum += list1[i]\n    # Return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Initialize the sum variable to zero\n    total_sum = 0\n\n    # Loop through the list from the first index to the second index\n    for i in range(m, n+1):\n        # Check if the current number is within the range\n        if i >= 0 and i < len(list1):\n            # If it is, add it to the total sum\n            total_sum += list1[i]\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Calculate the sum of the range of numbers in the list\n    total_sum = sum(list1[m:n+1])\n    \n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # check if list1 is valid\n    if not isinstance(list1, list):\n        print(\"Invalid input: list1 must be a list.\")\n        return None\n\n    # check if m and n are valid indices\n    if m < 0 or n >= len(list1) or n < m:\n        print(\"Invalid input: indices m and n must be valid indices of the list.\")\n        return None\n\n    # initialize sum variable\n    sum = 0\n\n    # loop through the list and add the values in the range specified by m and n to the sum variable\n    for i in range(m, n+1):\n        sum += list1[i]\n\n    # return the sum of values in the range specified by m and n\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculating the semi-perimeter of the pentagon\n    semi_perimeter = 5 * a\n    \n    # Calculating the area of the pentagon\n    area = (5 * math.sqrt(3)) / 4\n    \n    # Calculating the circumference of the pentagon\n    circumference = 2 * semi_perimeter\n    \n    # Returning the values of the perimeter and area\n    return {'Perimeter': semi_perimeter, 'Area': area, 'Circumference': circumference}"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula for the perimeter of a regular pentagon\n    perimeter = 5 * a * math.sin(math.pi/5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a  # Formula to find the perimeter of a regular pentagon from its sides\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the length of the side of the pentagon\n    length_side = 5 * math.sqrt(3)\n\n    # calculate the number of equal sides\n    num_equal_sides = int(math.sqrt(5) / 2)\n\n    # calculate the length of the equal side of the pentagon\n    length_equal_side = length_side / num_equal_sides\n\n    # calculate the number of equal angles between two sides\n    num_equal_angles = int(math.sqrt(10) / 2)\n\n    # calculate the angle between two sides of the pentagon\n    angle_between_sides = 360 / (num_equal_angles * 2)\n\n    # calculate the number of equal angles between the first and last sides\n    num_equal_angles_last_first = int(math.sqrt(10) / 2)\n\n    # calculate the angle between the first and last sides of the pentagon\n    angle_between_sides_last_first = 360 / (num_equal_angles_last_first * 2)\n\n    # calculate the number of equal angles between the second and third sides\n    num_equal_angles_second_third = int(math.sqrt(10) / 2)\n\n    # calculate the angle between the second and third sides of the pentagon\n    angle_between_sides_second_third = 360 / (num_equal_angles_second_third * 2)\n\n    # calculate the perimeter of the pentagon using the given formulas\n    perimeter = (length_side * 5) + (length_equal_side * num_equal_sides * 2) + (angle_between_sides * (num_equal_angles * 2 - 1))\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the area of the pentagon using Heron's formula\n    s = (a * (a - 2) * (a - 4) * (a - 6)) ** 0.5\n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * s\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the side length of the pentagon\n    side = 2 * a\n    \n    # calculate the perimeter of the pentagon\n    perimeter = 5 * side\n    \n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    return math.pi * 5 * a\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    std_count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            std_count += 1\n        if std_count == 2:\n            break\n    return std_count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    \n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 1:\n        return True\n    \n    first_element = type(test_tuple[0])\n    rest_elements = type(test_tuple[1:])\n    \n    if first_element == rest_elements:\n        return check_type(test_tuple[1:])\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to store the first element of the tuple\n    first_element = type(test_tuple[0])\n    # iterate over all the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the element has same data type as the first element\n        if type(element)!= first_element:\n            # if not, return False\n            return False\n    # if all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(i) for i in test_tuple])) == 1:\n        print(\"All elements in the tuple have same data type.\")\n    else:\n        print(\"Not all elements in the tuple have same data type.\")"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = set([type(x) for x in test_tuple])\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        first_element = test_tuple[0]\n        if isinstance(first_element, (int, float, str, bool)):\n            for element in test_tuple:\n                if not isinstance(element, type(first_element)):\n                    return False\n            return True\n        else:\n            return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n    for item in test_tuple:\n        if type(item) not in type_set:\n            type_set.add(type(item))\n    if len(type_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 1:\n        return True\n    else:\n        if test_tuple[0] == type(test_tuple[1]):\n            return check_type(test_tuple[1:])\n        else:\n            return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n    # Initialize the majority element to None\n    majority = None\n    \n    # Iterate through the array and count the occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    # If count is greater than n/2, x is the majority element\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    # Initialize the count of occurrences of x to zero\n    count = 0\n    \n    # Traverse the array and count the occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    # Check if the count is more than n/2\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    n (int): A positive integer.\n\n    Returns:\n    int: The number of set bits in the given number.\n\n    Examples:\n    >>> count_Set_Bits(10)\n    2\n    >>> count_Set_Bits(11)\n    3\n    >>> count_Set_Bits(0)\n    0\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize an empty string to store the modified string\n    modified_str = \"\"\n    \n    # Loop through each character in the input string\n    for i in range(len(str)):\n        # If the current character's index is even, append it to the modified string\n        if i % 2 == 0:\n            modified_str += str[i]\n    \n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_values = []\n    for i, char in enumerate(string):\n        if i % 2!= 0:\n            odd_values.append(char)\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    # convert the string to a list of characters\n    lst = list(str)\n    \n    # loop through the list and remove the characters with odd index values\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            lst[i] = ''\n    \n    # convert the list back to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_values.append(str[i])\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # create an empty string to store the result\n    result = \"\"\n    # iterate through each character of the input string\n    for i in range(len(str)):\n        # check if the current character has an odd index value\n        if i % 2!= 0:\n            # if it does, append it to the result string\n            result += str[i]\n    # return the result string\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n\n    # Initialize the minimum value to be the first number\n    minimum = a\n\n    # Check if the second number is smaller than the current minimum\n    if b < minimum:\n        minimum = b\n\n    # Check if the third number is smaller than the current minimum\n    if c < minimum:\n        minimum = c\n\n    # Return the minimum value\n    return minimum"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    This function takes three numbers as inputs and returns the minimum of those numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c: \n        return a \n    elif b <= a and b <= c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n\n    :param n: An integer representing the number of bits in the range.\n    :param l: An integer representing the lower bound of the range.\n    :param r: An integer representing the upper bound of the range.\n\n    :return: True if all the bits are unset in the given range, otherwise False.\n    \"\"\"\n    # Initialize the bits set in the range as a list of all False values\n    bits_set = [False] * n\n\n    # Iterate over all the numbers in the given range\n    for i in range(l, r + 1):\n        # Get the binary representation of the number\n        binary_num = bin(i)[2:]\n\n        # Iterate over the binary representation of the number and set the corresponding bit in the bits_set list\n        for j in range(len(binary_num)):\n            bits_set[j] = True\n\n    # Iterate over the bits_set list and check whether all the bits are set or not\n    for bit in bits_set:\n        if bit is False:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if n is a power of 2 or not\n    def is_power_of_2(n):\n        if n == 0:\n            return False\n        return ((n & (n - 1)) == 0)\n\n    # Check if the given range is valid or not\n    def is_valid_range(n, l, r):\n        return (0 <= l < n) and (0 <= r < n) and (r >= l)\n\n    # Check if all the bits are set in the given range\n    def check_range(n, l, r):\n        if not is_valid_range(n, l, r):\n            return False\n\n        # If n is a power of 2, check if all the bits in the range are set\n        if is_power_of_2(n):\n            return all(n >> i & 1 for i in range(l, r + 1))\n\n        # If n is not a power of 2, check if all the bits in the range are unset\n        else:\n            return all(n >> i & 1 for i in range(l, r + 1))\n\n    return check_range(n, l, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if all bits in the range are set or unset\n    count = 0\n    for i in range(l, r+1):\n        count += bin(n).count('1')\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a set to store the set bits in the range\n    set_bits = set()\n\n    # Loop through all the numbers from l to r\n    for i in range(l, r + 1):\n        # Check if the number has any set bits\n        if bin(i).count('1') > 0:\n            # Add the set bits to the set\n            set_bits.add(i)\n\n    # Check if all the bits in the range are set\n    if set_bits == set(range(l, r + 1)):\n        # All the bits are set, return True\n        return True\n    else:\n        # All the bits are unset, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    # loop through all the numbers between l and r\n    for i in range(l, r+1):\n        # convert the number to binary and count the number of set bits\n        binary = bin(i)[2:]\n        count += sum(1 for x in binary if x == '1')\n    # check if all the bits are set in the range\n    return count == r - l + 1"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Find the number of bits in the given range\n    range_bits = r - l + 1\n\n    # Count the number of unset bits in the given range\n    unset_bits = 0\n    for i in range(range_bits):\n        unset_bits += bin(i ^ l)[2:].count('0')\n\n    # Check if the number of unset bits is equal to the number of bits in the given range\n    if unset_bits == range_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three parameters n, l, r which are the value of the number, the starting position of the range and the ending position of the range respectively.\n    It returns True if all the bits are unset in the given range else False.\n    '''\n\n    # Convert the given range to binary form\n    range_binary = bin(r - l + 1)[2:]\n\n    # Create a set of all possible binary strings of the same length as the given range\n    possible_binary_strings = set()\n    for i in range(len(range_binary)):\n        for j in range(2 ** len(range_binary)):\n            binary_string = bin(j)[2:].zfill(len(range_binary))\n            possible_binary_strings.add(binary_string)\n\n    # Check if all the possible binary strings are present in the given range\n    for binary_string in possible_binary_strings:\n        # Check if the binary string is present in the given range\n        if int(binary_string, 2) >= l and int(binary_string, 2) <= r:\n            # If the binary string is present, then all the bits are unset\n            return False\n\n    # If the above code does not return False, then all the bits are set\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if n == 0:\n        return True\n\n    # Find the first set bit in the range\n    i = 0\n    while (l & (1 << i)) == 0:\n        i += 1\n\n    # Traverse the range to find the last set bit\n    while r > 0:\n        r &= r - 1\n\n    # Check if all set bits are contiguous from the first set bit to the last set bit\n    for j in range(i, r + 1):\n        if (l & (1 << j)) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # iterate through all the bits in the given range\n    for i in range(l, r + 1):\n        # if a bit is set, return False immediately\n        if (n >> i) & 1 == 1:\n            return False\n    # if all bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a boolean variable to True\n    is_all_bits_unset = True\n\n    # Loop through each bit in the range\n    for i in range(l, r+1):\n        # If the bit is set, set the is_all_bits_unset variable to False\n        if n & (1 << i):\n            is_all_bits_unset = False\n            break\n\n    # Return the value of is_all_bits_unset\n    return is_all_bits_unset"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Remove negative numbers from the array\n    negative_numbers = [num for num in arr if num < 0]\n\n    # Add negative numbers to the end of the array\n    arr = arr[:n] + negative_numbers + arr[n:]\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Re-arrange the positive and negative numbers\n    positive_numbers = []\n    negative_numbers = []\n\n    for num in arr:\n        if num > 0:\n            positive_numbers.append(num)\n        elif num < 0:\n            negative_numbers.append(num)\n\n    # Add the positive and negative numbers to the array\n    arr = arr[:n] + positive_numbers + negative_numbers + arr[n:]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Separating negative and positive elements\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    # Sorting the negative elements\n    negatives.sort()\n\n    # Merging the sorted negative elements with the positive elements\n    result = negatives + positives\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Create two empty lists to hold negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Iterate through the array and separate them into negative and positive lists\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    \n    # Sort the negative list in ascending order\n    neg_list.sort()\n    \n    # Iterate through the array and append the negative elements to the end of the array\n    for i in range(n):\n        arr.append(neg_list[i])\n    \n    # Iterate through the array and append the positive elements to the beginning of the array\n    for num in pos_list:\n        arr.insert(0, num)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Sort the array in reverse order (largest to smallest)\n    arr.sort(reverse=True)\n    # Initialize two pointers, one for the positive elements and one for the negative elements\n    i = 0\n    j = n - 1\n    # Iterate through the array\n    while i <= j:\n        # Check if the current element is negative\n        if arr[i] < 0:\n            # If it is, swap it with the current positive element\n            arr[i], arr[j] = arr[j], arr[i]\n            # Decrease j since we swapped a negative element\n            j -= 1\n        # If the current element is positive or zero, increment i\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg = []\n    pos = []\n    for num in arr[:n]:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    arr[:n] = neg + pos\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # To store the negative elements\n    negative = []\n    \n    # Loop through the array\n    for i in range(n):\n        # If the element is negative\n        if arr[i] < 0:\n            # Add it to the negative list\n            negative.append(arr[i])\n            # Swap the element with the next element if it is positive\n            if arr[i+1] > 0:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n    \n    # Add the negative elements to the beginning of the array\n    for i in range(n):\n        arr.insert(0, negative.pop())\n        \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Define two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n\n    # Iterate through the input array and add elements to the appropriate list\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n\n    # Concatenate the negative and positive lists and sort it\n    arr = negative + positive\n    arr.sort()\n\n    # Return the first n elements of the sorted array\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a new array to store the negative elements\n    neg_arr = []\n    # Iterate through the array and append all negative elements to the neg_arr\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n    # Iterate through the array and append all positive elements to the new array\n    for i in range(n, len(arr)):\n        if arr[i] >= 0:\n            neg_arr.append(arr[i])\n    # Sort the negative elements in ascending order and append them to the array\n    neg_arr.sort()\n    # Concatenate the sorted negative and positive elements and store them back in the original array\n    for i in range(len(arr)-n, len(arr)):\n        if arr[i] < 0:\n            arr[i-len(neg_arr)] = neg_arr.pop()\n        else:\n            arr[i-len(neg_arr)] = arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create a new array to store the re-arranged elements\n    rearranged_arr = [0] * (len(arr) - n)\n    \n    # create two pointers for the positive and negative elements of the array\n    pos = 0\n    neg = len(arr) - 1\n    \n    # loop through the array, starting with the first n elements\n    for i in range(n):\n        # if the current element is positive, move the positive pointer to the next element\n        if arr[i] > 0:\n            pos += 1\n        # if the current element is negative, move the negative pointer to the next element\n        elif arr[i] < 0:\n            neg -= 1\n        # if the current element is zero, skip it\n        else:\n            continue\n        \n        # if the positive pointer is greater than or equal to the negative pointer, swap the two elements\n        if pos >= neg:\n            rearranged_arr[i] = arr[pos]\n            arr[pos] = arr[neg]\n            rearranged_arr[i - n] = arr[neg]\n            neg -= 1\n        # if the positive pointer is less than the negative pointer, copy the negative element to the re-arranged array and increment the negative pointer\n        else:\n            rearranged_arr[i] = arr[neg]\n            neg -= 1\n    \n    # copy the remaining elements from the original array to the re-arranged array\n    for i in range(n, len(arr)):\n        rearranged_arr[i - n] = arr[i]\n    \n    # return the re-arranged array\n    return rearranged_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # initialize two pointers to the beginning and end of the array\n    i, j = 0, n - 1\n\n    # loop through the array until both pointers meet\n    while i < j:\n        # if the current element is negative\n        if arr[i] < 0:\n            # if the next element is also negative\n            if arr[i + 1] < 0:\n                # swap the current and the next elements\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            # if the next element is positive\n            else:\n                # move the next pointer to the right\n                j -= 1\n        # if the current element is positive\n        else:\n            # if the next element is also positive\n            if arr[i + 1] > 0:\n                # move the next pointer to the right\n                j -= 1\n            # if the next element is negative\n            else:\n                # swap the current and the next elements\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            # move the next pointer to the right\n            i += 1\n\n    # return the modified array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\" \"+char+\" \")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #replace all blank spaces with the given character\n    str1 = str1.replace(\" \",\"%s\" % char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',''+char)\n    return str1.replace(' '+char,'')"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i == \" \":\n            str2 += char\n        else:\n            str2 += i\n    return str2"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return []\n\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return [heapq.nlargest(n, list1)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a max heap\n    max_heap = []\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        # if the length of the heap exceeds n, remove the smallest item\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # extract the n largest items from the heap\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Using a max heap to store the n largest numbers\n    max_heap = []\n    # Loop through the list and add each number to the max heap\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        # If the max heap has reached its size, remove the smallest number to make room for the new number\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Convert the max heap to a list and return it\n    return [num for num in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    # Create a min heap (priority queue) of size n\n    min_heap = [0] * n\n    for i in range(n):\n        # Add the first n items from the input list to the heap\n        if i < len(lst):\n            heapq.heappush(min_heap, lst[i])\n        # If the heap is full and an item is added, remove the smallest item\n        elif i == len(lst) and len(min_heap) < n:\n            heapq.heappushpop(min_heap, 0)\n\n    # Return the n largest items from the heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[0] for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use heapq to find the n largest items from the list\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        max_heap.append(heapq.heappop(list1))\n    # Add the remaining elements of the list to the max heap\n    for item in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        else:\n            heapq.heappushpop(max_heap, item)\n    # Convert the max heap to a list\n    result = [heapq.heappop(max_heap) for i in range(n)]\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    \n    # Convert the input list to a heap using the heapq module\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        \n    # Extract the n largest items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(max_heap))\n        \n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * (3.14 * r**2 + h * r)\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h  # calculate the surface area using the formula\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n\n    Returns:\n    float: lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*math.pi*r*h + 2*math.pi*(r**2+h**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula:\n    # Lateral Surface Area = 2 * pi * r * h\n    lateral_surface_area = 2 * 3.14159 * r * h\n    \n    # Return the lateral surface area as the result of the function\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * (h/2)**2\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cylinder(r,h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    import math\n    return 2*math.pi*(r**2+h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * r * h) + (2 * r * r * h)\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes two parameters, r, which is the radius of the cylinder, and h, which is the height of the cylinder.\n    It calculates the lateral surface area of the cylinder using the following formula:\n    lateral surface area = 2*pi*(r^2 + h^2)\n    \n    The function returns the value of the lateral surface area.\n    '''\n    \n    lateral_surface_area = 2 * math.pi * (r**2 + h**2)\n    \n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert the given number to binary string and split into individual bits\n    bits = bin(n)[2:].split('b')\n    # iterate over each bit and set even bits to 1\n    for i in range(len(bits)):\n        if int(bits[i]) % 2 == 0:\n            bits[i] = '1'\n        else:\n            bits[i] = '0'\n    # join the bits into a new binary string and convert back to integer\n    new_number = int(bits[0], 2)\n    for i in range(1, len(bits)):\n        new_number += int(bits[i], 2)\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Iterate over each bit of the input number\n    for i in range(16):\n        # If the bit is 1 and the current position is even\n        if (n & (1 << i)) and i % 2 == 0:\n            # Set the bit to 1\n            result += '1'\n        else:\n            # Set the bit to 0\n            result += '0'\n            \n    # Convert the result to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n % 2 == 0:\n            n = n - 2\n        else:\n            n = n - 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the even bit position to 0\n    even_bit = 0\n    \n    # Initialize the sum of even and odd bits\n    even_sum = 0\n    \n    # Iterate through each bit of the number\n    for i in range(8):\n        # Check if the current bit is even\n        if n & 1:\n            # If it is even, set the even bit position to 1\n            even_bit = 1\n            \n        # If the current bit is odd, add it to the sum of even and odd bits\n        else:\n            even_sum += n & 1\n        \n        # Shift the number to the right by 1 bit\n        n = n >> 1\n        \n    # Return the sum of even and odd bits\n    return even_sum + (even_bit << 8)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate over each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) % 2 == 0:\n            result |= int(bit)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize count variable to zero\n    count = 0\n    # loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # if the bit is even, increment the count\n        if bit == '0':\n            count += 1\n        # if the bit is odd, exit the loop\n        else:\n            break\n    # set all even bits to 1\n    result = n | (1 << count)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize result variable to 0\n    result = 0\n    # iterate through each bit in the input number\n    for i in range(32):\n        # shift the result variable to the left by 1 bit\n        result = result << 1\n        # set the least significant bit (LSB) of the result variable to 1\n        result |= 1 if (n & (1 << i)) else 0\n    # return the result variable as the final output\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    result = 0\n    while count < 32:\n        if n & 1 == 0: # check if the current bit is 0\n            result |= 1 << count # set the bit in the result\n        count += 1\n        n >>= 1 # move to the next bit\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n:\n        if n & 1:\n            n = n ^ 1\n        else:\n            n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n\n    Args:\n        n: An integer\n\n    Returns:\n        An integer with all even bits set to 1\n    \"\"\"\n    while n % 2 == 0:\n        n = n // 2\n    return n * 2"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the count_dict, increment the count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the count_dict with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrence of each tuple in the list\n    count = Counter(test_list)\n    \n    # Convert the Counter object to a dictionary\n    result = dict(count)\n    \n    # Return the dictionary\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # Use the Counter function from the Counter module from the collections library to count the occurrences of each unique tuple\n    counts = Counter(unique_tuples)\n    \n    # Convert the Counter object to a dictionary\n    result_dict = counts.to_dict()\n    \n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the frequency of each tuple\n    freq_dict = {}\n    \n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[tup] = 1\n    \n    # Return the dictionary with the count of each tuple\n    return freq_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            count += 1 \n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(len(str)):\n        # Iterate through all possible substrings starting from the current index\n        for j in range(i+1, len(str)+1):\n            # If the substring is non-empty, increment the count\n            if str[i:j]!= '':\n                count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    # Initialize a counter variable to keep track of the number of substrings\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Check for empty substrings\n        if i == 0 or i == len(str) - 1:\n            count += 1\n        else:\n            # Calculate the length of the substring\n            substring_length = 1\n            while i + substring_length < len(str) and str[i] == str[i + substring_length]:\n                substring_length += 1\n            # Increment the counter variable if the substring is not empty\n            if substring_length > 1:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each character that starts with the current character\n        for j in range(i+1, len(str)+1):\n            # Add 1 to the count for each non-empty substring\n            if j-i > 0 and str[i:j]!= \"\":\n                count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    # Count the number of substrings\n    count = 0 \n    for i in range(len(str)): \n        for j in range(i + 1, len(str) + 1): \n            count += 1 \n    # Return the count\n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the result variable\n    result = 0\n    # Loop through all possible length n sequences\n    for i in range(n, 0, -1):\n        # Initialize the count variable to 0\n        count = 0\n        # Loop through all possible sequences of length i\n        for j in range(2, m + 1):\n            # If the current element is greater than or equal to twice the previous element and less than or equal to m, increment the count variable\n            if j >= 2 * i:\n                count += 1\n        # Update the result variable with the current count\n        result += count\n    # Return the result\n    return result"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 2:\n        return 0\n\n    def helper(prev, curr, curr_len):\n        if curr_len == n:\n            return 1\n\n        if prev + 2 <= m:\n            return helper(curr, prev + 2, curr_len + 1) + helper(curr, prev, curr_len)\n        else:\n            return helper(curr, prev, curr_len)\n\n    total = 0\n    for i in range(2, m + 1):\n        total += helper(0, i, 1)\n\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    sequence = [0]\n    for i in range(n):\n        sequence.append(2*sequence[i] + 1)\n    sequence.pop(0)\n    for i in range(m - 2*sequence[n - 1] + 1, m + 1):\n        if i >= 2*sequence[n - 2] and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize total number of sequences to 0\n    total_sequences = 0\n\n    # loop through each integer from 1 to m\n    for i in range(1, m + 1):\n        # initialize count of sequences to 0\n        count = 0\n\n        # loop through each integer from i to m\n        for j in range(i, m + 1):\n            # check if the current integer is within the specified range\n            if j >= 2 * i <= m:\n                # increment the count if the current integer is part of the sequence\n                count += 1\n\n        # add the count to the total number of sequences\n        total_sequences += count\n\n    # return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    prev_element = 0\n    \n    for i in range(1, m + 1):\n        if i < 2 * prev_element or i > m:\n            count += 1\n        prev_element = i\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    total_sequences = 0\n    for i in range(2,n+1):\n        for j in range(2,m+1):\n            if (j%i==0) and (j-i>=2):\n                total_sequences+=1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(seq):\n        for i in range(1, len(seq)):\n            if seq[i] < seq[i - 1] * 2 or seq[i] > m:\n                return False\n        return True\n\n    def get_combinations(seq):\n        seq = sorted(seq)\n        result = []\n        for i in range(1, len(seq) + 1):\n            for subset in get_combinations(seq[:i]):\n                result.append(subset + [seq[i - 1]])\n        return result\n\n    m += 1  # To ensure that the last element of the sequence is less than or equal to m.\n    seq = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    total_sequences = 1\n    count = 0\n\n    while True:\n        combinations = get_combinations(seq)\n        for combination in combinations:\n            if is_valid_sequence(combination) and len(combination) == n:\n                count += 1\n                total_sequences *= count\n\n        if count == 0:\n            break\n\n        seq = [seq[i] for i in range(1, len(seq)) if seq[i] < m]\n        count = 0\n\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    prev = 0\n\n    for i in range(1, m + 1):\n        if i >= 2 * prev and i <= m:\n            total_sequences += 1\n\n        prev = i\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables for the number of possible sequences and the length of the current sequence\n    num_sequences = 0\n    sequence_length = 0\n    \n    # Loop through all possible sequences of length n and check if each element is a positive integer and satisfies the conditions\n    for i in range(n+1):\n        for j in range(m-2*i-n+1):\n            if j < 2*i:\n                sequence_length += 1\n            else:\n                sequence_length += 2\n            \n            if j+sequence_length <= m and (j+sequence_length)%2 == 0:\n                num_sequences += 1\n                \n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    sequences = 0\n    sequence = [2]  # Initialize the sequence with the first element twice the previous one\n\n    # Loop through all possible sequences of length n\n    for i in range(m - 1, n - 1):\n        # If the next element is between twice the previous one and m\n        if i < m - 2 or i % 2 == 1:\n            # Add the sequence to the list of all possible sequences\n            sequences += len(sequence)\n            # Extend the sequence with the next element\n            sequence.append(i + sequence[-1])\n        else:\n            # Otherwise, if the next element is already m or not twice the previous one, discard the sequence and start over\n            sequence = [2]\n\n    return sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    \n    # If the length of the first list is 0, return the empty list\n    if length == 0:\n        return []\n    \n    # Get the last element of the first list\n    last_element = list1[length - 1]\n    \n    # Replace the last element with the elements of the second list\n    for element in list2:\n        last_element = element\n    \n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the second list is empty\n    if not list2:\n        return None\n    \n    # get the length of the second list\n    length = len(list2)\n    \n    # check if the first list is empty\n    if not list1:\n        # append the last element of the second list to the first list\n        list1.append(list2.pop())\n        return list1\n    \n    # get the index of the last element of the first list\n    last_index = len(list1) - 1\n    \n    # loop through the second list and replace the last element of the first list with the elements of the second list\n    for i in range(length):\n        # check if the index is within the bounds of the list\n        if i <= last_index:\n            list1[last_index] = list2[i]\n        else:\n            # append the last element of the second list to the first list\n            list1.append(list2.pop())\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # check if the length of the first list is greater than 1\n    if len(list1) > 1:\n        # replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n    else:\n        # if the length of the first list is 1, add the elements of the second list to the list\n        list1 += list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = len(str1)\n    return total_charac"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a positive integer as input and returns the next perfect square greater than the input.\n    '''\n    # Find the square root of the input number\n    sqrt_N = math.sqrt(N)\n\n    # Check if the square root is an integer\n    if sqrt_N.is_integer():\n        # Round the square root up to the nearest integer and add 1 to it\n        return math.ceil(sqrt_N)\n    else:\n        # Otherwise, round the square root down to the nearest integer\n        return math.floor(sqrt_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_Perfect_Square(N):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_perfect_square(n):\n        return int(math.sqrt(n)) * int(math.sqrt(n)) == n\n\n    def next_perfect_square(N):\n        if not is_perfect_square(N):\n            return None\n\n        square = int(math.sqrt(N))\n        while True:\n            if is_prime(square) and square > N:\n                return square\n            square += 1\n\n    return next_perfect_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Function to check if a number is a perfect square or not\n    def is_perfect_square(num):\n        root = math.sqrt(num)\n        return root == int(root)\n\n    # Function to find the next perfect square\n    def next_square(num):\n        root = math.sqrt(num)\n        square = int(root) ** 2\n        return square\n\n    # Check if the given number is a perfect square or not\n    if is_perfect_square(N):\n        # If it is, return the next perfect square\n        return next_square(N)\n    else:\n        # If it is not, return the smallest perfect square greater than the given number\n        start = N + 1\n        end = int(math.sqrt(start))\n        while True:\n            square = (start + end) // 2\n            if is_perfect_square(square):\n                return square\n            elif square > start:\n                end = square - 1\n            else:\n                start = square + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def isPerfectSquare(n):\n        \"\"\"\n        Helper function to check if a given number is a perfect square or not.\n        \"\"\"\n        if n <= 0:\n            return False\n        root = int(math.sqrt(n))\n        return root*root == n\n\n    def nextPerfectSquare(n):\n        \"\"\"\n        Helper function to find the next perfect square greater than a given number.\n        \"\"\"\n        root = int(math.sqrt(n))\n        while True:\n            newRoot = root\n            root += 1\n            if isPerfectSquare(root**2):\n                return root**2\n\n    # Calculate the next perfect square greater than N\n    next = nextPerfectSquare(N)\n    print(\"The next perfect square greater than\", N, \"is\", next)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Convert given number to its square root\n    sqrt_N = int(math.sqrt(N))\n\n    # Check if given number is a perfect square\n    if sqrt_N*sqrt_N == N:\n        # If it is, find the next number greater than sqrt_N\n        sqrt_N += 1\n\n        # Calculate the next perfect square\n        next_square = int(sqrt_N*sqrt_N)\n\n        # Check if the next perfect square is greater than N\n        if next_square > N:\n            # If it is, return the next perfect square\n            return next_square\n        else:\n            # If not, calculate the next perfect square and return it\n            next_square = next_square - 1\n            return int(next_square*next_square)\n\n    else:\n        # If given number is not a perfect square, return the next perfect square\n        next_square = int(sqrt_N*sqrt_N) + 1\n        return int(next_square*next_square)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # We can iterate from N to 1 because the next perfect square will always be greater than N\n    for i in range(N, 1, -1):\n        # Check if i^2 is a perfect square\n        if math.sqrt(i) == int(math.sqrt(i)):\n            return i\n    \n    # If we don't find a next perfect square, return None\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # calculate the square root of N\n    sqrtN = math.sqrt(N)\n    # find the integer part of sqrtN\n    intSqrtN = int(sqrtN)\n    # add 1 to the integer part of sqrtN\n    intSqrtN += 1\n    # square intSqrtN\n    intSqrtN_sq = int(intSqrtN ** 2)\n    # add the integer part of sqrtN to intSqrtN_sq\n    next_square = intSqrtN + intSqrtN_sq\n    return next_square\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Initialize variables\n    prev_num = N - 1\n    curr_num = N\n    next_num = N + 1\n\n    # Loop until we find a next perfect square greater than N\n    while not is_perfect_square(next_num):\n        # Check if next_num is greater than curr_num\n        if next_num > curr_num:\n            # Check if next_num is greater than prev_num\n            if next_num > prev_num:\n                # Calculate the next perfect square greater than next_num\n                next_num += 1\n            else:\n                # Calculate the next perfect square greater than curr_num\n                next_num += (math.sqrt(curr_num) - math.sqrt(prev_num))\n        else:\n            # Calculate the next perfect square greater than curr_num\n            next_num += (math.sqrt(curr_num) - math.sqrt(prev_num))\n        # Update prev_num and curr_num\n        prev_num = curr_num\n        curr_num = next_num\n\n    # Return the next perfect square greater than N\n    return next_num\n\ndef is_perfect_square(num):\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n    return math.sqrt(num) == int(math.sqrt(num))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        if is_perfect_square(N):\n            break\n        N += 1\n    \n    if N == int(N):\n        return int(N)\n    else:\n        return int(math.sqrt(N))\n\ndef is_perfect_square(N):\n    if N < 0:\n        return False\n    root = math.sqrt(N)\n    return root == int(root)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # check if given number is already a perfect square\n    if N == int(math.sqrt(N)):\n        return int(math.sqrt(N))\n    \n    # find the next prime number greater than the given number\n    p = N + 1\n    while p*p <= N:\n        p += 2\n    \n    # find the next perfect square number greater than the next prime number\n    sq = int(math.sqrt(p)) + 1\n    while sq*sq <= N:\n        sq += 1\n    \n    # return the next perfect square greater than the given number\n    return sq"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * (n * 2)\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if arr[i] < arr[j]:\n                    dp[i * 2] += arr[i]\n                    dp[i * 2 + 1] += arr[j]\n                else:\n                    dp[j * 2] += arr[i]\n                    dp[j * 2 + 1] += arr[j]\n    for i in range(n * 2):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # find the length of the array\n    n = len(arr)\n\n    # find the largest peak index\n    peak_index = max_peak_index(arr, n)\n\n    # initialize the maximum sum and current sum to 0\n    max_sum = 0\n    current_sum = 0\n\n    # iterate over the subarray with the largest peak index\n    for i in range(peak_index):\n        # add the smallest element to the current sum\n        current_sum += arr[i]\n        # if the current sum becomes greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # if the current sum becomes negative, reset it to 0\n        elif current_sum < 0:\n            current_sum = 0\n\n    # return the maximum sum\n    return max_sum\n\n\ndef max_peak_index(arr, n):\n    \"\"\"\n    Helper function to find the index of the largest peak in the given array.\n    \"\"\"\n\n    # initialize the largest peak index to -1\n    max_peak_index = -1\n\n    # iterate over the array and check if the current element is greater than the next element\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_peak_index = i\n\n    return max_peak_index"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    def is_bitonic(arr):\n        if len(arr) < 3:\n            return False\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1] and arr[i] < arr[i - 2]:\n                return False\n        return True\n\n    def max_sum_of_bitonic(arr):\n        if not is_bitonic(arr):\n            return float('-inf')\n        max_sum = 0\n        for i in range(1, len(arr) - 1):\n            if arr[i] >= arr[i - 1] and arr[i] < arr[i + 1]:\n                max_sum = max(max_sum, arr[i] + arr[i - 1] + arr[i + 1])\n        return max_sum\n\n    max_bitonic_sum = float('-inf')\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            max_bitonic_sum = max(max_bitonic_sum, max_sum_of_bitonic(arr[:i + 1]))\n\n    return max_bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            current_sum = 0\n            for j in range(i, n):\n                current_sum += arr[j]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n        else:\n            current_sum = 0\n            for j in range(i, n, -1):\n                current_sum += arr[j]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) < 3:\n        return 0\n    \n    increasing = True\n    max_sum_so_far = arr[0]\n    max_sum_ending_here = 0\n    \n    for i in range(1, len(arr)):\n        if increasing:\n            max_sum_ending_here += arr[i]\n        else:\n            max_sum_ending_here -= arr[i]\n        \n        if max_sum_ending_here < 0:\n            max_sum_ending_here = 0\n            increasing = not increasing\n        \n        if increasing:\n            if max_sum_ending_here > max_sum_so_far:\n                max_sum_so_far = max_sum_ending_here\n        else:\n            if max_sum_ending_here < max_sum_so_far:\n                max_sum_so_far = max_sum_ending_here\n    \n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n\n    # Initialize the maximum sum and two pointers for the increasing and decreasing subsequences\n    max_inc = float('-inf')\n    max_dec = float('-inf')\n    inc_start = 0\n    dec_start = 0\n\n    # Traverse the array and update the maximum sum of increasing and decreasing subsequences\n    for i in range(n):\n        if arr[i] < arr[inc_start]:\n            # The current element is smaller than the current starting element of the increasing subsequence\n            # Update the maximum sum of the increasing subsequence\n            max_inc = max(max_inc, arr[i] + arr[inc_start])\n            # Update the starting element of the increasing subsequence\n            inc_start = i\n        elif arr[i] > arr[dec_start]:\n            # The current element is larger than the current starting element of the decreasing subsequence\n            # Update the maximum sum of the decreasing subsequence\n            max_dec = max(max_dec, arr[i] + arr[dec_start])\n            # Update the starting element of the decreasing subsequence\n            dec_start = i\n\n    # Return the maximum sum of the increasing and decreasing subsequences\n    return max(max_inc, max_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n    else:\n        first = arr[0]\n        last = arr[n-1]\n        if first < last:\n            increasing_sum = first\n            decreasing_sum = first\n            for i in range(1, n):\n                if arr[i] > last:\n                    decreasing_sum += arr[i]\n                else:\n                    increasing_sum += arr[i]\n                if increasing_sum > decreasing_sum:\n                    increasing_sum = decreasing_sum = arr[i]\n            return increasing_sum\n        else:\n            increasing_sum = last\n            decreasing_sum = last\n            for i in range(n-2, -1, -1):\n                if arr[i] < first:\n                    increasing_sum += arr[i]\n                else:\n                    decreasing_sum += arr[i]\n                if decreasing_sum > increasing_sum:\n                    decreasing_sum = increasing_sum = arr[i]\n            return decreasing_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    # Initialize variables for the current subsequence and the maximum sum\n    curr_subseq = [arr[0]]\n    max_sum = arr[0]\n\n    # Iterate over the array\n    for i in range(1, len(arr)):\n        if arr[i] < curr_subseq[-1]:\n            # If the element is increasing, add it to the current subsequence\n            curr_subseq.append(arr[i])\n        else:\n            # If the element is decreasing, remove the last element from the subsequence and add the current element\n            curr_subseq.pop()\n            curr_subseq.append(arr[i])\n\n        # Calculate the maximum sum of a bitonic subsequence\n        if len(curr_subseq) > 1:\n            temp_sum = curr_subseq[0] + curr_subseq[-1]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # Find the length of the longest increasing subsequence\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + 1)\n    \n    # Initialize the maximum sum to the first element of the LIS\n    max_sum = arr[0]\n    \n    # Check if the LIS is increasing or decreasing\n    if lis[0] > 1:\n        max_sum = max(max_sum, sum(arr[:lis[0]-1]))\n    \n    # Check if the LIS is decreasing only\n    if lis[0] == 1:\n        max_sum = max(max_sum, sum(arr[:lis[0]]))\n    \n    # Check if the LIS is increasing only\n    if lis[0] < n-1:\n        max_sum = max(max_sum, sum(arr[lis[0]:]))\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Initialize variables for the maximum sum and its start and end indices\n    max_sum = float('-inf')\n    start = end = 0\n    \n    # Loop through the array and update the maximum sum and start and end indices accordingly\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            # Case 1: The next element is increasing\n            if arr[i] > arr[i-2]:\n                # Case 1.1: The previous element is decreasing as well\n                if arr[i] > max_sum:\n                    max_sum = arr[i]\n                    start = i - 1\n            elif arr[i] > arr[i-1]:\n                # Case 1.2: The previous element is increasing\n                if arr[i] > arr[i-2]:\n                    # Case 1.2.1: The next previous element is decreasing as well\n                    if arr[i] > arr[i-3]:\n                        # Case 1.2.1.1: The previous previous element is decreasing as well\n                        if arr[i] > max_sum:\n                            max_sum = arr[i]\n                            start = i - 1\n                    else:\n                        # Case 1.2.1.2: The previous previous element is increasing\n                        if arr[i] > arr[i-3]:\n                            # Case 1.2.1.2.1: The previous previous element is decreasing as well\n                            if arr[i] > arr[i-4]:\n                                # Case 1.2.1.2.1.1: The next previous previous element is decreasing as well\n                                if arr[i] > max_sum:\n                                    max_sum = arr[i]\n                                    start = i - 1\n        elif arr[i] < arr[i-1]:\n            # Case 2: The next element is decreasing\n            if arr[i] < arr[i-2]:\n                # Case 2.1: The previous element is increasing as well\n                if arr[i] < max_sum:\n                    max_sum = arr[i]\n                    start = i - 1\n            elif arr[i] < arr[i-1]:\n                # Case 2.2: The previous element is decreasing\n                if arr[i] < arr[i-2]:\n                    # Case 2.2.1: The next previous element is increasing as well\n                    if arr[i] < arr[i-3]:\n                        # Case 2.2.1.1: The previous previous element is increasing as well\n                        if arr[i] < max_sum:\n                            max_sum = arr[i]\n                            start = i - 1\n                    else:\n                        # Case 2.2.1.2: The previous previous element is decreasing\n                        if arr[i] < arr[i-3]:\n                            # Case 2.2.1.2.1: The previous previous element is increasing as well\n                            if arr[i] < arr[i-4]:\n                                # Case 2.2.1.2.1.1: The next previous previous element is increasing as well\n                                if arr[i] < max_sum:\n                                    max_sum = arr[i]\n                                    start = i - 1\n    \n    return max_sum, start, end"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize two variables, a and b, to start with\n    a = 1\n    b = number\n\n    # loop while the difference between a and b is greater than epsilon\n    while abs(b - a * a) > 1e-12:\n\n        # calculate the new midpoint of the interval and update a and b\n        mid = (a + b) / 2\n        a = mid\n\n        # update b to the new midpoint\n        b = mid\n\n    # return the square root of the number\n    return a"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess**2 > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    y = x + x / number\n    z = x + y / 2\n\n    while abs(y - x) > 0.001:\n        x = x\n        y = x + x / number\n        z = x + y / 2\n\n    return z"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    guess = number / 2\n    current = guess\n    prev = 0\n    \n    # Iterate until the current guess is within 0.001 of the target number\n    while abs(current - guess) > 0.001:\n        prev = current\n        current = (current + number / current) / 2\n    \n    # Return the final guess\n    return current"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    y = x\n    i = 0\n    while abs(y*y - number) > 0.0001:\n        x = x - (y*y - number) / (2 * y)\n        y = x\n        i += 1\n    return x, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001 # small error margin\n    guess = number / 2 # initialize guess with half of number\n    while True:\n        # calculate next guess\n        next_guess = guess - (guess*guess - number)/(2*guess)\n        # check if next guess is close enough\n        if abs(next_guess*next_guess - number) < epsilon:\n            return next_guess\n        # update guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = 0\n    y = number\n    while y < x:\n        x = y\n        y = (x + number / x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number\n    for i in range(20):\n        root = (root + number/root) / 2\n    return root"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0\n    while abs(guess**2 - number) >= 0.0001:\n        guess = (guess + number / guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function takes a number as input and returns its square root using the babylonian method.\n    '''\n    # Initialize variables\n    old_guess = 1\n    new_guess = number / old_guess\n    guess_count = 0\n    \n    # Loop until the absolute difference between the old and new guesses is less than epsilon\n    while abs(old_guess - new_guess) > 0.00001:\n        old_guess = new_guess\n        guess_count += 1\n        new_guess = (old_guess + number / old_guess) / 2\n    \n    return new_guess, guess_count"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(string):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Convert the given string to a list of characters\n    string = list(string)\n\n    # Initialize two pointers: one for the start of the string and another for the end of the string\n    start, end = 0, 0\n\n    # Initialize a variable to store the maximum length of palindromic subsequence found so far\n    max_length = 1\n\n    # Loop through the string and check if the current character is a palindrome or not\n    for i in range(1, len(string)):\n\n        # If the current character is not a palindrome, move the start pointer to the next character\n        if string[i]!= string[i-1]:\n            start = i\n            break\n\n        # If the current character is a palindrome, check if it is longer than the current longest palindromic subsequence found so far\n        if i - start + 1 > max_length:\n            max_length = i - start + 1\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    n = len(s)\n    # create a 2D table to store lengths of LPS subsequences for all prefixes of s\n    table = [[0] * n for _ in range(n)]\n    # length of LPS subsequence ending at s[0] is 1\n    table[0][0] = 1\n    # length of LPS subsequence ending at s[1] is 1\n    table[1][1] = 1\n    # fill the table using dynamic programming\n    for i in range(2, n):\n        for j in range(i):\n            if s[j] == s[i]:\n                # length of LPS subsequence ending at s[j] is 2 + the length of LPS subsequence ending at s[j-1]\n                table[i][j] = 2 + table[i-1][j-1]\n            else:\n                # length of LPS subsequence ending at s[j] is the maximum of the length of LPS subsequence ending at s[j-1] and the length of LPS subsequence ending at s[j]\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    # find the length of the longest LPS subsequence ending at s[n-1]\n    length = table[n-1][n-1]\n    # construct the LPS subsequence\n    lps_subseq = \"\"\n    while length > 0:\n        if s[n-1-length] == s[n-length]:\n            lps_subseq = s[n-length] + lps_subseq\n            length -= 1\n        else:\n            if table[n-1][n-1-length] > table[n-1][n-length]:\n                length = table[n-1][n-1-length]\n            else:\n                length = table[n-1][n-length]\n    return len(lps_subseq)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_length = 1\n    start = 0\n    length = 1\n    for i in range(1, len(str)):\n        # Case 1: If current character is same as previous character, then both characters are part of palindrome and length should be incremented\n        if str[i] == str[i-1]:\n            length += 1\n            # If length becomes greater than max_length, then update max_length and start and length\n            if length > max_length:\n                max_length = length\n                start = i - length + 1\n                length = 1\n        # Case 2: If current character is not same as previous character, then it is not a part of palindrome and length should be reset\n        else:\n            length = 1\n    \n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    \"\"\"\n    Given a string, return the length of the longest palindromic subsequence in it.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return n\n\n    # create a 2D table to store the lengths of longest palindromic subsequences\n    # for all prefixes of the string\n    table = [[0] * n for _ in range(n)]\n\n    # base case: if the string is a single character, it is a palindrome of length 1\n    table[0][0] = 1\n\n    # fill the table in a bottom-up manner\n    for i in range(1, n):\n        # if the current character is same as the previous character,\n        # then the current subsequence can be obtained by concatenating\n        # the two subsequences obtained for the substrings preceding and\n        # succeeding the current character\n        if s[i] == s[i - 1]:\n            table[i][i] = table[i - 1][i - 1] + 1\n        else:\n            # otherwise, the current subsequence can be obtained by either\n            # choosing the longest subsequence obtained for the substrings\n            # preceding the current character or the substrings succeeding\n            # the current character, whichever is longer\n            table[i][i] = max(table[i - 1][j] for j in range(i))\n            if s[i] == s[table[i][i] - 1]:\n                table[i][i] += 1\n\n    # return the length of the longest palindromic subsequence\n    return table[n - 1][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a 2D array to store the lengths of palindromic subsequences for all possible substrings\n    lengths = [[0] * len(str) for _ in range(len(str))]\n\n    # Initialize the base cases\n    for i in range(len(str)):\n        lengths[i][i] = 1\n\n    # Fill the lengths array using dynamic programming\n    for length in range(3, len(str) + 1):\n        for i in range(len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                lengths[i][j] = lengths[i + 1][j - 1] + 2\n            else:\n                lengths[i][j] = max(lengths[i + 1][j], lengths[i][j - 1])\n\n    return lengths[0][len(str) - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(string):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(string)\n\n    # Create a 2D array to store the length of longest palindromic subsequence for each substring of length i\n    # The base case is when the i is 1, as there can only be one character in the substring itself\n    dp = [[1] * n for i in range(1, n + 1)]\n\n    # Fill the dp array\n    for i in range(1, n):\n        if string[i] == string[i - 1]:\n            dp[i][i] = 2\n        else:\n            dp[i][i] = 1\n\n    # Find the length of the longest palindromic subsequence for substrings of length i+1 to n\n    for l in range(3, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n\n            if string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(string):\n    if len(string) <= 1:\n        return len(string)\n\n    # Create a 2D table to store the length of longest palindromic subsequence of substrings\n    dp = [[0 for _ in range(len(string))] for _ in range(len(string))]\n\n    # Initialize the first row and first column\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            dp[i][i] = 1\n        else:\n            dp[i][i] = 0\n\n    # Fill the table in bottom-up manner\n    for length in range(2, len(string)+1):\n        for i in range(len(string)-length+1):\n            j = i + length - 1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][len(string)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    # create a 2D table to store the length of the longest palindromic subsequence for each substring of the string\n    table = [[0] * len(str) for _ in range(len(str))]\n    \n    # base case: if the length of the string is 1, then the longest palindromic subsequence is that character\n    for i in range(len(str)):\n        table[i][i] = 1\n    \n    # fill the table using dynamic programming\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                table[i][j] = table[j][i-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[j][i])\n    \n    # return the length of the longest palindromic subsequence\n    return table[len(str)-1][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    if len(str) < 2:\n        return 0\n\n    # Initialize a matrix to store the length of longest palindromic subsequence ending at each index\n    dp = [[0] * (len(str) + 1) for _ in range(len(str) + 1)]\n\n    # Fill in the matrix using dynamic programming\n    for i in range(len(str) + 1):\n        for j in range(len(str) + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str[i - 1] == str[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Convert the given string to a set so that we can remove duplicates easily\n    str = set(str)\n\n    # Initialize two variables to keep track of the length of the longest palindromic subsequence\n    # for odd and even length palindromes respectively\n    start, end = 0, 0\n\n    # Loop through the set of characters in the string\n    for i in range(1, len(str)):\n        # Check if the current character is a palindrome\n        if str[i] == str[i - 1]:\n            # If it is, update the start and end indices if needed\n            if i - start > end - start:\n                start = i - start\n                end = i\n        # If it's not a palindrome, update the start and end indices for odd length palindromes\n        else:\n            # Check if the next character is a palindrome\n            if str[i + 1] == str[i]:\n                start = i\n                end = i + 1\n\n    # Return the length of the longest palindromic subsequence\n    return end - start + 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/(n-1)) + (harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize a variable to store the harmonic sum\n    harmonic_sum = 0\n    \n    # Iterate from 1 to n-1\n    for i in range(1, n):\n        # Calculate the harmonic sum of the current number\n        current_sum = 1 / i\n        \n        # Add the current harmonic sum to the harmonic sum variable\n        harmonic_sum += current_sum\n    \n    # Return the harmonic sum of n-1\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n - 1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n-1))//2\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n - 1)) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/n**(n-1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two sets from the two arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two sets to store unique elements of array1 and array2\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    intersection = list(set1.intersection(set2))\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty set to store the intersection\n    intersection = set()\n    # Iterate through each number in the first array\n    for num in array_nums1:\n        # Check if the number is present in the second array\n        if num in array_nums2:\n            # If it is, add it to the intersection set\n            intersection.add(num)\n    # Return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store the frequency of each element in each array\n    freq_dict1 = {}\n    freq_dict2 = {}\n    \n    # Iterate through each element in the first array\n    for num in array_nums1:\n        # If the element is already in the frequency dictionary, increment its value\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        # If the element is not in the dictionary, add it with a value of 1\n        else:\n            freq_dict1[num] = 1\n            \n    # Iterate through each element in the second array\n    for num in array_nums2:\n        # If the element is already in the frequency dictionary, increment its value\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        # If the element is not in the dictionary, add it with a value of 1\n        else:\n            freq_dict2[num] = 1\n            \n    # Create an empty list to store the intersection of the two arrays\n    intersection_list = []\n    \n    # Iterate through each element in the first dictionary\n    for num in freq_dict1:\n        # If the element is in the second dictionary and the frequency in the first dictionary is greater than 0,\n        # append the element to the intersection list and decrement its frequency in the first dictionary\n        if num in freq_dict2 and freq_dict1[num] > 0 and freq_dict2[num] > 0:\n            intersection_list.append(num)\n            freq_dict1[num] -= 1\n            \n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    common_nums = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_nums:\n            common_nums.append(num)\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # Create two dictionaries to store the elements of the input arrays\n    dict1 = {}\n    dict2 = {}\n    # Loop through the input arrays and add the elements to the dictionaries\n    for num in array_nums1:\n        dict1[num] = True\n    for num in array_nums2:\n        dict2[num] = True\n    # Loop through the dictionaries and add the elements that are in both arrays to a new array\n    intersection = []\n    for key in dict1:\n        if key in dict2 and dict1[key] and dict2[key]:\n            intersection.append(key)\n    # Return the intersection array\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for element in tup: \n        if element == x: \n            count += 1 \n    return count "
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    # create a new empty list to store the new elements\n    new_list = []\n    \n    # iterate over each element in the original list\n    for item in list:\n        # add the element to the new list\n        new_list.append(element)\n        # add the original element to the new list\n        new_list.append(item)\n    \n    # return the new list with the inserted element\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Loop through the list\n    for i in range(1, len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    # Use list comprehension to iterate over each element in the list\n    new_list = [element] + [elem for elem in list]\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(lst)):\n        lst.insert(i, element)\n    return lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and converts them to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        polar_coordinates.append((real, imag))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            # convert the complex number to polar coordinates\n            r = abs(num)\n            phi = cmath.phase(num)\n            # print the polar coordinates\n            print(\"({:.2f}, {:.2f})\".format(r, phi))\n        else:\n            print(num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real, imag = cmath.rect(number)\n        angle = cmath.phase(number)\n        polar_coordinates.append((real, imag, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for number in numbers:\n        real = abs(number)\n        imag = cmath.phase(number)\n        polar.append((real, imag))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Split the complex number into real and imaginary parts\n        real, imag = map(float, number.split('+'))\n        \n        # Calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        \n        # Calculate the angle of the complex number\n        angle = cmath.phase(complex(real, imag))\n        \n        # Print the polar coordinate for each complex number\n        print(f\"({magnitude:.3f}, {angle:.3f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and converts it to polar coordinates.\n    '''\n    polar_coords = []\n    for number in numbers:\n        real_part = abs(number)\n        imaginary_part = cmath.phase(number)\n        polar_coords.append((real_part, imaginary_part))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        polar_coordinates.append((real, imag))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n\n    Parameters:\n    numbers (list): A list of complex numbers to convert to polar coordinates.\n\n    Returns:\n    list: A list of tuples representing the polar coordinates of the complex numbers.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        magnitude = abs(number)\n        phase = cmath.phase(number)\n        polar_coordinates.append((magnitude, phase))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        real = abs(num.real)\n        imag = num.imag\n        if imag == 0:\n            angle = 0\n        else:\n            angle = cmath.phase(num)\n        print(\"({:.2f}, {:.2f})\".format(real, angle))"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    '''\n    This function counts the number of integer elements in a list.\n    '''\n    count = 0\n    for elem in lst:\n        if type(elem) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations of length n from the list l using the itertools.combinations_with_replacement function\n    combs = list(combinations_with_replacement(l, n))\n    # Return the list of tuples as the result\n    return combs"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, len(l) + 1):\n        for j in combinations_with_replacement(l, i):\n            result.append(tuple(j))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l, n):\n            result.append(tuple(comb))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(1, len(l) + 1):\n        for c in combinations_with_replacement(l, i):\n            combinations.append((tuple(c)))\n    return combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    def is_prime(num):\n        '''\n        Write a helper function that checks whether a given number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Initializing count variable\n    count = 0\n    \n    # Looping through the numbers from 2 to n-1\n    for num in range(2, n):\n        # Checking if the number is prime or not\n        if is_prime(num):\n            # Incrementing count variable if the number is prime\n            count += 1\n    \n    # Returning the count of prime numbers less than n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Initialize a boolean array \"is_prime[0..n]\" and\n    # \"is_prime[i] = true\" if i is prime, else false.\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n\n    # Iterate through all numbers up to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            # Update all multiples of i in the array\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n\n    # Count the number of prime numbers less than n\n    count = 0\n    for i in range(n):\n        if is_prime[i+1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables to store maximum values for each tuple element\n    max1, max2 = float('-inf'), float('-inf')\n    # Loop through each element of each tuple\n    for i in range(len(test_tup1)):\n        # If the current element is greater than the current maximum for tuple 1, update max1\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n        # If the current element is greater than the current maximum for tuple 2, update max2\n        if test_tup2[i] > max2:\n            max2 = test_tup2[i]\n    # Return the tuple with the maximum value for each element\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    # create a new tuple that contains the maximum value from each tuple\n    max_tup = tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n    # return the max_tup\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Checking if both tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length.\")\n        return None\n\n    # Finding the maximum value in both tuples\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n\n    # Returning the maximum tuple\n    if max1 >= max2:\n        return (max1, test_tup2)\n    else:\n        return (max2, test_tup1)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if all elements are numbers\n    if not all(isinstance(x, (int, float)) for x in test_tup1 + test_tup2):\n        raise TypeError('All elements in the tuples must be numbers')\n    \n    # get the maximum of each tuple\n    max1, max2 = max(test_tup1), max(test_tup2)\n    \n    # compare the maximums and return the maximum tuple\n    return max1 if max1 > max2 else max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the tuple with maximum sum of elements.\n    \"\"\"\n    max_sum = 0\n    max_tuple = None\n    for tup in [test_tup1, test_tup2]:\n        temp_sum = 0\n        for i in range(len(tup)):\n            temp_sum += tup[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_tuple = tup\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n        else:\n            max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        max_tuple = test_tup1\n    else:\n        max_tuple = test_tup2\n    if max_tuple[1] > test_tup1[1]:\n        return max_tuple\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup.append(test_tup1[i])\n        else:\n            max_tup.append(test_tup2[i])\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem = max(test_tup1)\n    if max_elem > max(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the first 10 prime numbers\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    # Loop until we have found the nth newman\u2013shanks\u2013williams prime number\n    for i in range(n):\n        # Create a list of all possible prime factors of the current number\n        prime_factors = []\n        for prime in prime_numbers:\n            if prime > 1:\n                while prime % prime_numbers[i] == 0:\n                    prime_factors.append(prime_numbers[i])\n                    prime //= prime_numbers[i]\n        # If there are no prime factors, the number is not a newman\u2013shanks\u2013williams prime\n        if not prime_factors:\n            return None\n        # Otherwise, add the newman\u2013shanks\u2013williams prime number to the list of prime numbers\n        else:\n            prime_numbers.append(2 * max(prime_factors))\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime_numbers[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2  # starting with 2 as the first prime number\n    count = 0  # count the number of primes found\n    \n    while count < n:\n        # check if p is prime\n        is_prime = True\n        for i in range(2, int(p**0.5) + 1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1  # if p is prime, increment count\n        p += 1  # increment the number to check\n    \n    return p - 1  # return the nth prime number"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Set the initial value of the loop counter\n    count = 0\n    # Set the initial value of the prime number to 2\n    prime = 2\n    \n    # Loop until we have found the nth newman-shanks-williams prime number\n    while count < n:\n        # Check if the current prime number is a newman-shanks-williams prime\n        if is_newman_shanks_williams_prime(prime):\n            count += 1\n        \n        # Increment the prime number by 1\n        prime += 1\n    \n    # If we have found the nth newman-shanks-williams prime number, return it\n    return prime\n\ndef is_newman_shanks_williams_prime(n): \n    '''\n    Write a helper function to check if a number is a newman-shanks-williams prime.\n    '''\n    # Check if the number is less than 4\n    if n < 4:\n        return False\n    \n    # Check if the number is divisible by any number from 2 to n-2\n    for i in range(2, n-2):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize a list to store prime numbers\n    prime_list = []\n    # iterate from 2 to n\n    for i in range(2, n+1):\n        # check if i is prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, add it to the list\n        if is_prime:\n            prime_list.append(i)\n    # return the nth prime number in the list\n    return prime_list[n-2]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_primes(n):\n        count = 0\n        for i in range(2, n+1):\n            if is_prime(i):\n                count += 1\n        return count\n\n    def newman_prime_count(n):\n        count = 0\n        for i in range(n+1):\n            count += count_primes(i)\n        return count\n\n    return newman_prime_count(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    def sieve(limit):\n        primes = [True] * (limit + 1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(limit**0.5) + 1):\n            if primes[i]:\n                for j in range(i*i, limit + 1, i):\n                    primes[j] = False\n        return [i for i in range(limit + 1) if primes[i]]\n\n    def nth_newman_prime(n):\n        limit = 100000\n        primes = sieve(limit)\n        for i in range(2, len(primes)):\n            if primes[i] and primes[i] ** 2 > n:\n                return primes[i]\n        return None\n\n    return nth_newman_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Set the initial value for the nth newman-shanks-williams prime number\n    if n == 1:\n        return 2\n\n    # Set the initial value for the factorial of n\n    factorial = 1\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Calculate the nth newman-shanks-williams prime number\n    nth_prime = int(factorial**(1/n))\n\n    return nth_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    This function finds the nth newman-shanks-williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0\n    current_prime = 2\n\n    # Loop until we have found n newman-shanks-williams primes\n    while count < n:\n\n        # Check if current_prime is prime\n        if is_prime(current_prime):\n\n            # Check if current_prime is a newman-shanks-williams prime\n            if is_newman_shanks_williams(current_prime):\n\n                # Increase count and move on to next number\n                count += 1\n\n            else:\n\n                # Move on to next number\n                current_prime += 1\n\n        else:\n\n            # Move on to next number\n            current_prime += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return current_prime\n\n\ndef is_prime(n):\n    '''\n    This function checks if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_newman_shanks_williams(n):\n    '''\n    This function checks if a number is a newman-shanks-williams prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= int(n**0.5) + 1:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False \n        return True \n    \n    count = 0 \n    num = 1 \n    while count < n: \n        if is_prime(num): \n            count += 1 \n        num += 1 \n    return num - 1 "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize count variable to 0\n    count = 0\n    # initialize a variable to store the number of iterations\n    iterations = 0\n    # initialize a variable to store the last prime number\n    last_prime = 2\n    # loop through numbers starting from 3\n    for num in range(3, n+1):\n        # initialize a variable to store the sum of the first n digits of num\n        digits_sum = sum(int(digit) for digit in str(num))\n        # if digits_sum is a prime number, increment count and update last_prime\n        if is_prime(digits_sum):\n            count += 1\n            last_prime = num\n            iterations = num - 2\n    # return the nth newman\u2013shanks\u2013williams prime number\n    return last_prime\n\n\ndef is_prime(n):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_result = []\n    for i in range(len(test_tup1)):\n        division_result.append(test_tup1[i] / test_tup2[i])\n    return division_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (None,)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= float and type(test_tup2[i])!= float:\n            return \"Error: Both tuples must have elements of same type.\"\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of both tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Length of tuples is not same.\"\n    \n    # perform element-wise division operation\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print('Warning: division by zero occurred at index:', i)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        try:\n            result += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Warning: division by zero\")\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths!\")\n        return\n    \n    # Perform element-wise division operation\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    \n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Create an empty list to hold the result\n    result_list = []\n\n    # Perform element-wise division on each tuple\n    for i in range(len(test_tup1)):\n        try:\n            result = test_tup1[i] / test_tup2[i]\n        except ZeroDivisionError:\n            result = float('inf')  # Set result to infinity if either tuple is zero\n        result_list.append(result)\n\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the tuples is not equal\")\n        return\n    \n    # initialize an empty list to store the result\n    result_list = []\n    \n    # loop through each element of the tuples\n    for i in range(len(test_tup1)):\n        # perform the division operation element-wise\n        result = test_tup1[i] / test_tup2[i]\n        # append the result to the result list\n        result_list.append(result)\n    \n    # return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Split a list into two parts of length L, and return the resulting lists as a tuple.\n    \"\"\"\n    num_parts = len(list1) // L  # calculate number of parts based on L\n    parts = []\n    for i in range(num_parts):\n        start = i * L\n        end = (i + 1) * L\n        parts.append(list1[start:end])\n    if len(list1) % L!= 0:  # if there is a remainder, add it to the last part\n        last_part = list1[-num_parts * L:]\n        parts[-1].extend(last_part)\n    return tuple(parts)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    It returns the resulting lists in a tuple.\n    '''\n    if len(lst) < L:\n        raise ValueError('List should be at least length L')\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return ([list1[:L]], [list1[L:]])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    if L > len(lst):\n        raise ValueError(\"L is greater than the length of the list\")\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into chunks of size L\n    chunk1 = list1[:L]\n    chunk2 = list1[L:]\n    # Return the two chunks as a tuple\n    return (chunk1, chunk2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # if the length of the list is greater than L, then we need to split it into two parts\n    if len(lst) > L:\n        # we split the list into two parts and assign the first part to the new list\n        part1 = lst[:L]\n        # we create a new list and append all the elements from the list starting from the Lth element onwards to it\n        part2 = lst[L:]\n        return (part1, part2)\n    # if the length of the list is less than or equal to L, then we don't need to split it\n    else:\n        return (lst, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Split the given list into two parts, where the length of the first part is L, and return the resulting lists in a tuple.\n    '''\n    # If L is greater than the length of the list, return the list as is\n    if L > len(lst):\n        return lst\n\n    # Initialize variables to keep track of the first part and the second part\n    part1 = []\n    part2 = []\n\n    # Loop through the list and add each element to either part1 or part2, depending on its length\n    for elem in lst:\n        if len(part1) < L:\n            part1.append(elem)\n        else:\n            part2.append(elem)\n\n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is a positive integer\n    if L <= 0:\n        print(\"L should be a positive integer\")\n        return\n    \n    # get the length of the first part of the list\n    len1 = len(list1) // 2\n    \n    # split the list into two parts\n    list2 = list1[len1:]\n    list1 = list1[:len1]\n    \n    # return the two parts as a tuple\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than L\n    if len(list1) > L:\n        # Split the list into two parts based on the value of L\n        list2 = list1[L:]\n        list1 = list1[:L]\n        # Return the resulting lists in a tuple\n        return (list1, list2)\n    # If the length of the list is less than or equal to L\n    else:\n        # Return the original list as a tuple\n        return (list1, list1)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert height from inches to centimeters\n    h_cm = h_age * 2.54\n    \n    # calculate dog's age in dog's years\n    age_years = h_cm / 12\n    \n    # return the dog's age in dog's years\n    return age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate dog's age in human years\n    h_age = 7 * h_age\n    \n    # calculate dog's age in dog's years\n    dog_years = h_age / 7\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert the human age to dog years\n    dog_years = h_age * 7\n    # Return the dog's age in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n\n    dog_age = 7 * h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 + h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (h_age / 4)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(height_in_inches):\n    # Convert height in inches to centimeters\n    height_in_centimeters = height_in_inches * 2.54\n\n    # Calculate age in dog years\n    age_in_dog_years = height_in_centimeters / 120\n\n    # Return the age in dog years\n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_age = 7 * int(h_age)\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n    h_age (int): the height of the dog in inches.\n\n    Returns:\n    int: the dog's age in dog's years.\n    \"\"\"\n    return int(h_age / 70)"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Create an empty list to store the resulting lists\n    result = []\n    # Loop through the input list\n    for i in range(0, len(S), step):\n        # Create a new list with the current element and append it to the result list\n        new_list = [S[i]]\n        # Append the remaining elements of the current list to the new list\n        new_list.extend(S[i+1:])\n        # Append the new list to the result list\n        result.append(new_list)\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # initialize an empty list to hold the resulting lists\n    result = []\n    \n    # loop through the list S, splitting it every nth element into a new list\n    for i in range(0, len(S), step):\n        # create a new list with the current element and the remaining elements\n        new_list = [S[i]]\n        for j in range(i+1, min(i+step, len(S))):\n            new_list.append(S[j])\n        # add the new list to the result list\n        result.append(new_list)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the list\n    for i in range(0, len(S), step):\n        # Append the current sublist to the result list\n        result.append(S[i:i+step])\n    # Return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = step\n    while n <= len(S):\n        sub_list = S[:n]\n        result.append(sub_list)\n        S = S[n:]\n        n += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # check if step is a positive integer\n    if not isinstance(step, int) or step <= 0:\n        raise ValueError(\"The step must be a positive integer.\")\n\n    # initialize an empty list to store the resulting lists\n    result = []\n\n    # loop through the input list, splitting it for every nth element and appending to the result list\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to hold the resulting sublists\n    result = []\n    # iterate over the input list\n    for i in range(0, len(S), step):\n        # extract the sublist and append it to the result list\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2 # multiplying by 6 to get the lateral surface area of a cube"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2) + (2 * l) + 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    surface_area = 6 * l * l # Formula for lateral surface area of a cube\n    print(\"The lateral surface area of the cube is:\", surface_area)\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6*l**2) + (12*l)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i**2\n        return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0  \n    i = 1  \n    while i <= n:  \n        if i % 2!= 0:  \n            sum_of_squares += i*i  \n        i += 1  \n    return sum_of_squares  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    sum_squares = 0\n\n    for i in range(2, n + 1, 2):\n        sum_squares += i ** 2\n\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initializing variables\n    sum = 0\n    num = 1\n    # iterating through the first n odd natural numbers\n    while num <= n:\n        # adding the square of the current natural number to the sum\n        sum += num ** 2\n        # incrementing the natural number by 2\n        num += 2\n    # returning the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum_of_squares = 0  # Initialize sum_of_squares to 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):  # Start from 1 and go up to n, increment by 2 to get odd numbers only\n        sum_of_squares += i**2  # Add the square of i to sum_of_squares\n\n    return sum_of_squares  # Return the final sum_of_squares value\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize a list to store the star numbers\n    star_nums = []\n    # loop until we have stored then'th star number\n    while len(star_nums) < n:\n        # loop until we have stored then'th star number\n        for i in range(1, n+1):\n            # add the current number to the list of star numbers\n            star_nums.append(i)\n        # subtract 1 from the current number in the list\n        star_nums[-1] -= 1\n        # check if the current number is 0\n        if star_nums[-1] == 0:\n            # if it is, break out of the loop and start over with the next number\n            break\n    # return then'th star number\n    return star_nums[n-1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num = num * (2 * i + 1)\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th star number is:\", find_star_num(n))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    for i in range(1, n + 1):\n        print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    star_num = 1\n    # Loop through the n-th row of the triangle\n    for i in range(1, n+1):\n        # Multiply the current star number by 2 to get the next row of the triangle\n        star_num = star_num * 2\n        # Add 1 to the star number for the next row\n        star_num += 1\n    # Return the n-th star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    return n * (n+1) / 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1):\n        print('*' * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            print('*', end=' ')\n        count += 1\n        print()\n\n    print(\"Number of stars:\", count)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n - 1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    result = 0\n    count = 1\n    \n    # Loop through the first n terms of the sequence\n    for i in range(1, n+1):\n        # Calculate the term for the current iteration\n        term = count * (2*i-1) / (2*count + 1)\n        \n        # Add the term to the result and increment the count\n        result += term\n        count += 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the count variable to 1\n    count = 1\n    \n    # loop until we have reached then'th star number\n    while count <= n:\n        # print a star\n        print('*', end='')\n        \n        # increment the count variable\n        count += 1\n        \n    # print a new line to move to the next line\n    print()"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value_dict = {\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76,\n        'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90,\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,\n       'm': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122,\n        '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57,\n        '.': 46\n    }\n    if k in ascii_value_dict:\n        return ascii_value_dict[k]\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Define a dictionary that maps each character to its corresponding ascii value.\n    ascii_dict = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122, 'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90}\n    # Check if the input character is present in the dictionary, otherwise return -1.\n    if k in ascii_dict:\n        return ascii_dict[k]\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even_numbers = 0\n    for index in range(len(arr)):\n        if arr[index] % 2 == 0 and index % 2 == 0:\n            sum_even_numbers += arr[index]\n    return sum_even_numbers"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index_sum = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_index_sum += i\n    \n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes in a list and returns the sum of even numbers at even positions.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n            if even_index % 2 == 0:\n                break\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    count_even = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n                count_even += 1\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i%2 == 0:\n            sum += i**5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i%2==0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_of_powers += i ** 5\n            count += 1\n        if count == n:\n            break\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_evens = 0\n    for i in range(1, n+1):\n        sum_of_evens += (i ** 5)\n    return sum_of_evens"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [i for i in range(2, n+1, 2)] # generating a list of even natural numbers\n    sum = 0\n    for num in even_numbers:\n        sum += num ** 5 # adding the sum of each number raised to the fifth power\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for item in test_list:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list[::-1]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The input tuples must have the same number of elements.\"\n\n    # Create a new tuple with the elements of test_tup1 and test_tup2\n    result_tup = tuple(list(test_tup1) + [x - y for x, y in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # Loop through the tuples and subtract the corresponding elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n\n    # Loop through the tuples and subtract the elements\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            # Check if the index is within range\n            if i >= len(test_tup2):\n                print(\"The index is out of range.\")\n                return\n            # Subtract the elements and add them to the result tuple\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        except TypeError:\n            print(\"The elements in the tuples must be numeric.\")\n            return\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Create a new empty tuple to store the result\n    result_tup = ()\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n\n        # Find the corresponding element in the second tuple with the same index\n        j = i\n        while j < len(test_tup2) and i!= j:\n            j += 1\n\n        # If there is a corresponding element, subtract them and add them to the new result tuple\n        if j < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[j],)\n\n    # Return the new result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    sum = 0\n\n    # Calculate the sum of even index binomial coefficients\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            term = math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n            sum += term\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial_coeffs = 0\n    for i in range(n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += coeff\n    return sum_even_binomial_coeffs\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        term = i * math.factorial(n-i) // math.factorial(2*i-1)\n        if i % 2 == 0:\n            sum += term\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # initialize sum to 0\n    coeff_sum = 0\n\n    # loop through each index from 0 to n\n    for i in range(0, n+1):\n\n        # calculate the even index binomial coefficient\n        coeff = math.comb(n, i)\n\n        # check if the index is even\n        if i % 2 == 0:\n\n            # add the even index binomial coefficient to the sum\n            coeff_sum += coeff\n\n    # return the sum of even index binomial coefficients\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients of a given positive integer n.\n    \"\"\"\n    sum_even_coeffs = 0\n    for i in range(1, n+1, 2):\n        sum_even_coeffs += math.comb(n, i)\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(1, n+1):\n        binomial_coeff = math.comb(n, i-1)\n        if i%2 == 0:\n            sum_even += binomial_coeff\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_of_even_index_binomial_coeffs = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_even_index_binomial_coeffs += math.comb(n, i)\n    return sum_of_even_index_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients for a given positive integer n.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        binomial_coeff = math.comb(n, i-1)\n        total += binomial_coeff\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeff = 0\n    for i in range(1,n+1):\n        even_binomial_coeff += math.comb(n,i)\n    \n    return even_binomial_coeff"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * pi * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * 3.14159 * r * r * h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*r*r*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r * r * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= 0:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count = 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i-1]!= test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            continue\n        if test_tup[i] == test_tup[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal_sum = 0\n    num = 1\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n + 1):\n        # If the number is a decagonal number, add it to the sum\n        if i in range(1, 11):\n            decagonal_sum += num\n        # Increment the number for the next loop\n        num += 2\n\n    # Return the sum of the decagonal numbers\n    return decagonal_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    num = 1\n    for i in range(1, n+1):\n        num += (4*i*i-3*i+1)\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_number = 1\n    for i in range(1, n+1):\n        decagonal_number += (i**2)*4\n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the variables\n    count = 0\n    decagonal_num = 1\n\n    # Loop through the first n numbers\n    for i in range(n):\n        # Calculate the value of the decagonal number\n        decagonal_num += count * (2 * count - 1)\n        count += 1\n\n    # Check if the calculated decagonal number is equal to n\n    if decagonal_num == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    decagonal = 0\n    for i in range(1, n+1):\n        decagonal += i ** 2\n    return decagonal\n\ndef nth_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n\n    return is_num_decagonal(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the square root of n\n    sqrt_n = n ** 0.5\n    # Calculate the sum of the squares of the first n odd integers\n    first_n_odd_squares = sum(i ** 2 for i in range(1, n + 1, 2))\n    # Calculate the sum of the squares of the first n even integers\n    first_n_even_squares = sum(i ** 2 for i in range(2, n + 1, 2))\n    # Return the sum of the decagonal numbers\n    return sqrt_n ** 2 + first_n_odd_squares - first_n_even_squares"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Initialize the first row of the matrix\n    matrix = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n    # Find the number of rows in the matrix\n    num_rows = len(matrix)\n    # Calculate the nth row of the matrix\n    row_n = matrix[n-1]\n    # Iterate over the digits of the n-th decagonal number\n    for digit in str(n):\n        # Calculate the index of the current digit in the row\n        digit_index = int(digit) - 1\n        # Multiply the index by the number of rows in the matrix\n        index = digit_index * num_rows\n        # Add the value of the row at the calculated index to the sum\n        result += row_n[index]\n    return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = 0\n    for i in range(1, n+1):\n        decagonal_number += (2*i - 1) ** 2\n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_nums = [1, 12, 36, 84, 210, 486, 1290, 3130, 7870, 19382, 48108, 115940, 271776, 622700, 1388880, 3008210, 7297020, 17840322, 46803608, 112808968, 265193650, 589599770, 1296092970, 2985871010, 6922792220, 15885342562, 33271616920, 78073492130, 187788796062, 482684356828, 1136325499770, 2614804671150, 5759758404020, 12768290219300, 29351117042322, 67995626619072, 155991253238144, 328988703377590, 768050611096180, 1843343999308490, 4741665967978492, 11157731993073798, 25580192130882510, 56340493741616980, 125441448024990990, 289883213968431400, 666289048233964420, 1528389073258471300, 3192177661117077722, 7416438745612503970, 18034720936375831442, 46273877541712517140, 109872187668162301070, 250599532382623395050, 547627397645825196180, 1227111724591118536500, 2850371430295036380400, 6496211224678055039400, 14892422449356110078800, 31596136752306473982800, 72857808604612947965600, 177438039201183050544000, 456056044400896288217600, 1083407931915483277481600, 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n + 1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element.\n    If the element is not found, the function returns (-1, -1).\n    \"\"\"\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, d in enumerate(dlist):\n        if d == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return (found, i)\n    return (found, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = len(set(test_list)) == len(test_list)\n    return unique_elements"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Converting the list to a set to remove duplicate values\n    unique_set = set(test_list)\n    \n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all its elements are unique, and False otherwise.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # creating a set to store unique elements of the list\n    unique_set = set(test_list)\n    # checking if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes in two lists of integers, nums1 and nums2, and returns a new list that contains the difference of the elements of nums1 and nums2.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Input lists must be of the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must be of same length\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the input lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    # Initialize the output list with the same length as the input lists\n    output = [0] * len(nums1)\n    # Iterate through the input lists and subtract each element element-wise\n    for i in range(len(nums1)):\n        output[i] = nums1[i] - nums2[i]\n    return output"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # create an empty list to store the result\n    result = []\n\n    # iterate over the elements of the two lists\n    for i in range(len(nums1)):\n        # subtract the corresponding elements of the two lists\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # convert the integer to a string\n    s = str(n)\n    # count the frequency of each digit in the string\n    freq = [s.count(str(i)) for i in range(10)]\n    # check if the frequency of each digit is less than or equal to the digit itself\n    return all(freq[i] <= i for i in range(10))"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    digits = []\n    for i in range(10):\n        count = n.count(str(i))\n        if count > 0 and count <= i:\n            digits.append(i)\n    \n    return digits"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    frequency = [0] * 10\n\n    for d in digits:\n        frequency[d] += 1\n\n    for i in range(10):\n        if frequency[i] > digits[i]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10  # Initialize an array of size 10 to store the frequency of each digit\n\n    # Count the frequency of each digit in the integer\n    while n > 0:\n        digit = n % 10  # Get the last digit of the integer\n        freq[digit] += 1  # Increment the frequency of the last digit in the array\n        n //= 10  # Remove the last digit from the integer\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # convert integer to string\n    n_str = str(n)\n    # split the string into list of characters\n    n_list = list(n_str)\n    # initialize frequency dictionary\n    freq_dict = {}\n    # loop through each character in the string\n    for c in n_list:\n        # if the character is already in the dictionary, increment its value\n        if c in freq_dict:\n            freq_dict[c] += 1\n        # if the character is not in the dictionary, initialize its value to 1\n        else:\n            freq_dict[c] = 1\n    # loop through each digit in the string\n    for d in n_str:\n        # get the digit's index in the list of characters\n        digit_index = n_str.index(d)\n        # get the frequency of the digit in the dictionary\n        digit_freq = freq_dict[d]\n        # if the frequency of the digit is greater than the digit itself, return False\n        if digit_freq > digit_index:\n            return False\n    # if all digits have frequencies less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    for d in freq:\n        if freq[d] > d:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # convert the integer to a string\n    s = str(n)\n    # initialize an empty list to store the frequency of each digit\n    freq = [0] * 10\n    # loop through each digit in the string\n    for digit in s:\n        # increment the frequency of the digit in the list\n        freq[int(digit)] += 1\n    # loop through each digit in the list\n    for i in range(10):\n        # if the frequency of the current digit is greater than or equal to its value, return True\n        if freq[i] >= i:\n            return True\n    # if no digits pass the test, return False\n    return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # convert the number to a string\n    num_str = str(n)\n\n    # count the frequency of each digit in the string\n    freq = {}\n    for digit in num_str:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    # if the loop completes, the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = set(str(n))\n    for digit in digits:\n        freq = digits.count(digit)\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10\n\n    while n > 0:\n        digit = n % 10\n        count[digit] += 1\n        n //= 10\n\n    for i in range(len(count)):\n        if count[i] > count[i]:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    all_equal = True\n    for item in list:\n        if item!= element:\n            all_equal = False\n            break\n    return all_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    \n    first_element = list[0]\n    if first_element!= element:\n        return False\n    \n    for item in list[1:]:\n        if item!= element:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?<=a)[b]{2,3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=(?:b\\2|b\\3))+b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'\\ba\\w{2,3}\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b.{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    if match:\n        print(\"The text contains the pattern 'a' followed by two or three 'b' characters.\")\n    else:\n        print(\"The text does not contain the pattern 'a' followed by two or three 'b' characters.\")"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    count = 0\n    \n    # Loop through the array and form the modified array\n    for i in range(n, 0, -1):\n        if i <= k:\n            temp_array = a + [a[i-1]]*(k-i+1)\n            curr_sum = sum(temp_array)\n        else:\n            temp_array = a + a[:i]\n            curr_sum = sum(temp_array)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        count += 1\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the max_sum and current_sum variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the array and calculate the maximum sum\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If the current_sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n            \n    # Repeat the array k times to obtain the desired sum\n    desired_sum = k * max_sum\n    \n    # Initialize the max_sum and current_sum variables for the repeating array\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the repeating array and calculate the maximum sum\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If the current_sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n            \n    # Find the difference between the desired sum and the maximum sum of the repeating array\n    difference = desired_sum - max_sum\n    \n    # Return the maximum sum of the original array and the difference between the desired sum and the maximum sum of the repeating array\n    return max_sum, difference"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Get the length of the given array\n    m = len(a)\n\n    # Initialize the maximum subarray sum and the current subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Initialize the index of the current subarray\n    start = 0\n\n    # Repeat the given array k times\n    for i in range(k):\n        # Add the next element to the current subarray\n        current_sum += a[i]\n\n        # Move the start index to the next element\n        start = (i + 1) % m\n\n        # Update the maximum subarray sum if the current subarray sum is greater than the maximum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Create the modified array\n    modified_array = []\n    for i in range(k):\n        for j in range(n):\n            modified_array.append(a[j])\n\n    # Sort the modified array in descending order\n    modified_array.sort(reverse=True)\n\n    # Initialize variables\n    current_sum = 0\n    max_sum = float('-inf')\n\n    # Iterate through the modified array\n    for num in modified_array:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_window_sum = 0\n    window_size = k\n\n    # Iterate through the array and calculate the current sum of the array\n    for i in range(n):\n        current_sum += a[i]\n\n        # Check if the current window sum exceeds the maximum sum so far\n        if i >= k - 1:\n            current_window_sum -= a[i - k + 1]\n\n        # Update the maximum sum if the current window sum becomes greater\n        if current_window_sum + a[i] > max_sum:\n            max_sum = current_window_sum + a[i]\n\n        # Update the current window sum\n        current_window_sum += a[i]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Calculate the maximum sum of any subarray of length k\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n-k+1, k):\n            curr_sum = sum(a[j:j+k])\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Find the maximum sum of a contiguous array without repeating\n    max_sum = max_sum_without_repeating(a, n)\n    \n    # Calculate the maximum sum of a contiguous array with repeating\n    max_sum_with_repeating = max_sum_with_repeating(a, n, k)\n    \n    # Return the maximum sum of a contiguous array with repeating\n    return max_sum_with_repeating\n\ndef max_sum_without_repeating(a, n):\n    '''\n    Find the maximum sum of a contiguous array without repeating.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum\n\ndef max_sum_with_repeating(a, n, k):\n    '''\n    Find the maximum sum of a contiguous array with repeating.\n    '''\n    # Calculate the sum of the first k elements of the modified array\n    modified_sum = sum(a[:k])\n    \n    # Calculate the sum of the last k-1 elements of the modified array\n    modified_sum += sum(a[-(k-1):])\n    \n    # Find the maximum sum of the modified array\n    max_sum = modified_sum\n    \n    # Calculate the maximum sum of a contiguous array with repeating\n    for i in range(1, n-k+1):\n        current_sum = a[i-1]\n        for j in range(k-1):\n            current_sum += a[i+j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    def repeated_array(arr, k):\n        if k == 0:\n            return [arr[0]] * len(arr)\n        else:\n            return repeated_array(arr, k-1) + [arr[0]] + repeated_array(arr, k-1)\n\n    def max_sub_array_sum(arr):\n        max_so_far = float('-inf')\n        max_ending_here = 0\n        for num in arr:\n            max_ending_here += num\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n            elif max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n\n    repeated_arr = repeated_array(a, k)\n    max_sub_array_sum_repeated_k = max_sub_array_sum(repeated_arr)\n\n    if max_sub_array_sum_repeated_k == 0:\n        return 0\n    else:\n        return max_sub_array_sum_repeated_k - max_sub_array_sum_repeated(a, n, k)\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # initialize the maximum sum to be the first element in the array\n    max_sum = a[0]\n\n    # loop through all the elements of the array\n    for i in range(1, n):\n\n        # calculate the sum of the previous elements in the array\n        # this is the difference between the sum of the current element and the sum of the previous elements\n        diff = a[i] - a[i-1]\n\n        # if the difference is greater than 0, it means that the sum of the previous elements is positive and we can include the current element in the sum\n        if diff > 0:\n\n            # update the maximum sum\n            max_sum = max(max_sum, a[i] + a[i-1] + a[i-2] + a[i-3] + a[i-4])\n\n    # calculate the sum of the first k elements in the array\n    sum_first_k = sum(a[:k])\n\n    # calculate the sum of the last k elements in the array\n    sum_last_k = sum(a[-k:])\n\n    # calculate the sum of the modified array by repeating the first k elements and the last k elements\n    sum_modified = sum_first_k + sum_last_k\n\n    # calculate the largest sum of a contiguous array in the modified array\n    # this is the maximum of the sum of the current element and the sum of the modified array\n    return max(max_sum, sum_modified)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Initialize max_sum to the first element of the array\n    max_sum = a[0]\n    # Initialize max_sum_repeat to the sum of the first k elements of the array\n    max_sum_repeat = a[0] + a[1] + a[2] +... + a[k-1]\n    # Initialize an empty list to store the sum of the array\n    sum_list = []\n    # Initialize a variable to store the current sum\n    current_sum = 0\n    # Loop through the array from the second element to the last element\n    for i in range(1, n-k+1):\n        # Add the next element to the current sum\n        current_sum += a[i]\n        # Remove the first element from the sum list\n        sum_list.pop(0)\n        # Add the current sum to the sum list\n        sum_list.append(current_sum)\n        # If the current sum is greater than the current max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # If the sum of the current sum list is greater than the current max_sum_repeat, update max_sum_repeat\n        if sum(sum_list) > max_sum_repeat:\n            max_sum_repeat = sum(sum_list)\n    return max_sum_repeat"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(2,n+1,2):\n        sum+=i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 == 0:\n            sum += i ** 2\n            count += 1\n        i += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    i = 0  \n    while i <= n:  \n        if i % 2 == 0:  \n            sum_of_squares += i ** 2  \n        i += 1  \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize sum to zero\n    total = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the square of the even natural number\n        square = i * i\n        \n        # Add the square to the total\n        total += square\n        \n    # Return the total\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # initialize max length to zero\n    max_length = 0\n\n    # iterate through each list in the list of lists\n    for lst in list1:\n\n        # check the length of the current list\n        if len(lst) > max_length:\n            # if the length is greater than the current max length, update max length\n            max_length = len(lst)\n\n    # return the maximum length\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # iterate over each sublist in the input list\n    for sublist in list1:\n        # initialize a variable to store the current maximum length\n        current_max_length = 0\n        # iterate over each element in the sublist\n        for element in sublist:\n            # if the length of the current element is greater than the current maximum, update the maximum\n            if len(str(element)) > current_max_length:\n                current_max_length = len(str(element))\n        # add the current maximum length to the list of maximum lengths\n        max_lengths.append(current_max_length)\n    # find the index of the maximum length in the list\n    max_length_index = max_lengths.index(max(max_lengths))\n    # return the maximum length as the final result\n    return max_lengths[max_length_index]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    maxList = []\n\n    for i in range(len(list1)):\n        if len(list1[i]) > maxLength:\n            maxLength = len(list1[i])\n            maxList = list1[i]\n\n    return maxList"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_lengths.append(max([len(elem) for elem in lst]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    max_length_list = []\n    for length in lengths:\n        if length not in max_length_list:\n            max_length_list.append(length)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize a variable to store the length of the longest list\n    max_len = 0\n    # Initialize an empty list to store the longest lists\n    longest = []\n    # Loop through each list in the input list\n    for i in range(len(list1)):\n        # Loop through each element in the current list\n        for j in range(len(list1[i])):\n            # If the length of the current element is greater than the max_len variable, update the max_len variable\n            if len(list1[i][j]) > max_len:\n                max_len = len(list1[i][j])\n                # Add the current list to the longest list\n                longest.append(list1[i])\n    # Return the longest list(s)\n    return longest"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of lists, where each sublist contains the maximum length of all lists in the input list.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        sublist_max = max(sublist, key=len)\n        max_lengths.append(sublist_max)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # initialize a variable to store the maximum length\n    max_len = 0\n\n    # loop through each list in the input list\n    for lst in list1:\n\n        # check if the length of the current list is greater than the current maximum length\n        if len(lst) > max_len:\n            max_len = len(lst)\n\n    # create an empty list to store the maximum length for each list in the input list\n    max_lengths = []\n\n    # loop through each list in the input list\n    for lst in list1:\n\n        # append the maximum length for the current list to the max_lengths list\n        max_lengths.append(max_len)\n\n    # return the max_lengths list containing the maximum length for each list in the input list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list) or len(max_length_list) == 0:\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Calculate the number of ways for n-2 posts and k-1 colors\n    ways1 = count_no_of_ways(n-2, k-1)\n\n    # Calculate the number of ways for n-2 posts and k colors\n    ways2 = count_no_of_ways(n-2, k)\n\n    # Calculate the number of ways for n-1 posts and k-1 colors\n    ways3 = count_no_of_ways(n-1, k-1)\n\n    # Calculate the number of ways for n-1 posts and k colors\n    ways4 = count_no_of_ways(n-1, k)\n\n    # Calculate the number of ways for n posts and k-1 colors\n    ways5 = count_no_of_ways(n, k-1)\n\n    # Calculate the number of ways for n posts and k colors\n    ways6 = count_no_of_ways(n, k)\n\n    # Calculate the number of ways for n+1 posts and k-1 colors\n    ways7 = count_no_of_ways(n+1, k-1)\n\n    # Calculate the number of ways for n+1 posts and k colors\n    ways8 = count_no_of_ways(n+1, k)\n\n    # Calculate the number of ways for n+2 posts and k-1 colors\n    ways9 = count_no_of_ways(n+2, k-1)\n\n    # Calculate the number of ways for n+2 posts and k colors\n    ways10 = count_no_of_ways(n+2, k)\n\n    # Calculate the number of ways for n+3 posts and k-1 colors\n    ways11 = count_no_of_ways(n+3, k-1)\n\n    # Calculate the number of ways for n+3 posts and k colors\n    ways12 = count_no_of_ways(n+3, k)\n\n    # Calculate the number of ways for n+4 posts and k-1 colors\n    ways13 = count_no_of_ways(n+4, k-1)\n\n    # Calculate the number of ways for n+4 posts and k colors\n    ways14 = count_no_of_ways(n+4, k)\n\n    # Calculate the number of ways for n+5 posts and k-1 colors\n    ways15 = count_no_of_ways(n+5, k-1)\n\n    # Calculate the number of ways for n+5 posts and k colors\n    ways16 = count_no_of_ways(n+5, k)\n\n    # Calculate the number of ways for n+6 posts and k-1 colors\n    ways17 = count_no_of_ways(n+6, k-1)\n\n    # Calculate the number of ways for n+6 posts and k colors\n    ways18 = count_no_of_ways(n+6, k)\n\n    # Calculate the number of ways for n+7 posts and k-1 colors\n    ways19 = count_no_of_ways(n+7, k-1)\n\n    # Calculate the number of ways for n+7 posts and k colors\n    ways20 = count_no_of_ways(n+7, k)\n\n    # Calculate the number of ways for n+8 posts and k-1 colors\n    ways21 = count_no_of_ways(n+8, k-1)\n\n    # Calculate the number of ways for n+8 posts and k colors\n    ways22 = count_no_of_ways(n+8, k)\n\n    # Calculate the number of ways for n+9 posts and k-1 colors\n    ways23 = count_no_of_ways(n+9, k-1)\n\n    # Calculate the number of ways for n+9 posts and k colors\n    ways24 = count_no_of_ways(n+9, k)\n\n    # Calculate the number of ways for n+10 posts and k-1 colors\n    ways25 = count_no_of_ways(n+10, k-1)\n\n    # Calculate the number of ways for n+10 posts and k colors\n    ways26 = count_no_of_ways(n+10, k)\n\n    # Calculate the number of ways for n+11 posts and k-1 colors\n    ways27 = count_no_of"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    elif n == 2:\n        return 4\n    else:\n        ways = 0\n        for i in range(1, n):\n            ways += count_no_of_ways(n-i, k)\n        return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # base case: if there is only one post and one color, there is only one way to paint the fence\n    if n == 1 and k == 1:\n        return 1\n\n    # base case: if there is only one post and k colors, there is only one way to paint the fence\n    if n == 1 and k > 1:\n        return 1\n\n    # base case: if there are no posts and k colors, there is only one way to paint the fence\n    if n == 0 and k > 0:\n        return 0\n\n    # base case: if there are only two posts and k colors, there are only two ways to paint the fence (one pair, one not pair)\n    if n == 2 and k > 1:\n        return 2\n\n    # initialize a boolean matrix to store the possible ways to paint the fence\n    fence = [[False for _ in range(k+1)] for _ in range(n+1)]\n\n    # initialize the first row of the matrix with the base case values\n    for i in range(k+1):\n        fence[0][i] = True\n\n    # initialize the first column of the matrix with the base case values\n    for i in range(n+1):\n        fence[i][0] = True\n\n    # fill in the rest of the matrix with the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if fence[i-1][j-1]:\n                fence[i][j] = fence[i-1][j]\n            else:\n                fence[i][j] = fence[i-1][j] or fence[i][j-1]\n\n    # return the value in the last row and last column of the matrix, which represents the number of ways to paint the fence\n    return fence[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case: If n=0 or k=0, the fence can be painted without changing any post color\n    if n == 0 or k == 0:\n        return 1\n    \n    # Base case: If n=1 or k=1, there can be only 1 way to paint the fence\n    if n == 1 or k == 1:\n        return n\n    \n    # Recursive case: Count the number of ways to paint the fence with n-1 posts and k-1 colors and add the number of ways to paint the fence with n posts and k colors\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an empty dictionary to store the counts of different colors\n    color_count = {}\n    \n    # Loop through each post in the fence\n    for post in range(1, n+1):\n        # If the number of colors used so far is less than or equal to k,\n        # increment the count of the current post's color\n        if len(color_count) <= k:\n            color_count[post] = color_count.get(post, 0) + 1\n        # Otherwise, decrement the count of the post's color that was used\n        else:\n            color_count[post] = color_count.get(post, 0) - 1\n    \n    # Initialize a count of ways to paint the fence\n    ways = 0\n    \n    # Loop through each color that was used\n    for count in color_count.values():\n        # If the count is greater than 0, add 1 to the count of ways\n        if count > 0:\n            ways += 1\n    \n    # Return the final count of ways to paint the fence\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * k for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(k):\n            if j == 0:\n                dp[i][j] = 1\n            elif j == k - 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    return dp[n][k - 1]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    elif n == 1:\n        return 1\n    \n    ways = [[0] * (k+1) for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        ways[i][0] = 1\n        for j in range(1, k+1):\n            if i == 1:\n                ways[i][j] = ways[i][j-1]\n            else:\n                ways[i][j] = ways[i-1][j]\n                \n                for k in range(j-1, 0, -1):\n                    if ways[i-1][k] and (not ways[i-1][k-1] or ways[i-1][k]!= ways[i-1][k-1]):\n                        ways[i][j] += ways[i-1][k]\n                        \n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a boolean 2D array to store the number of ways of painting the fence\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    # Initialize the first row with 1\n    for i in range(1, k + 1):\n        dp[0][i] = 1\n    \n    # Fill the remaining rows using the following recurrence relation:\n    # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j >= 3:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    # Return the final answer\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the count to 1\n    count = 1\n    \n    # Loop through the range of n-k\n    for i in range(n-k+1):\n        # Initialize the count to 1 for this sub-range\n        count = 1\n        \n        # Loop through the range of k\n        for j in range(k):\n            # If the color at index i+j is the same as the previous color, increment the count\n            if i+j < k:\n                if i+j > 0:\n                    if j == 0:\n                        if i == 0:\n                            count = 0\n                        else:\n                            count = count * (n-i)\n                    else:\n                        count = count * (n-i-j)\n                else:\n                    count = 0\n            else:\n                count = 0\n        \n        # Multiply the count by the number of ways to paint the first i+j sub-range with k colors\n        count = count * count_no_of_ways(i+j, k)\n        \n        # Add the count to the overall count\n        count = count + count\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):\n    # base case\n    if n == 0:\n        return 0\n    # recursive case\n    else:\n        q = n // m\n        r = n % m\n        return find(r,m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # calculate the quotient\n    quotient = n // m\n\n    # check if the quotient is an integer\n    if quotient.is_integer():\n        return quotient\n    else:\n        # if the quotient is not an integer, round it down to the nearest integer\n        return quotient - 1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate the quotient\n    quotient = n//m\n    # round the quotient down to the nearest integer\n    quotient = round(quotient)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w+h)**0.5\n\n    # calculate the area of the triangle using Heron's formula\n    area = (s*(s-w)*(s-h))/4\n    \n    # find the semi-perimeter of the triangle using Heron's formula\n    s_corrected = math.sqrt(s**2 - area)\n    \n    # calculate the third side of the triangle using the area of the triangle\n    third_side = area/s_corrected\n    \n    # return the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Formula to calculate the third side of a right angled triangle\n    s = (w ** 2) + (h ** 2)\n    c = math.sqrt(s)\n    third_side = math.sqrt((w ** 2) + (c ** 2))\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = math.sqrt(w**2 + h**2)\n    if w == 0:\n        print(\"The third side cannot be determined since the length of the first side is 0.\")\n    elif h == 0:\n        print(\"The third side cannot be determined since the length of the second side is 0.\")\n    else:\n        print(\"The third side of the right angled triangle with sides\", w, \"and\", h, \"is:\", s)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = (w**2 + h**2)**0.5\n    s = (w**2 + h**2 + c**2)**0.5\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the third side of a right angled triangle.\n    It takes the length of the base and height as input arguments.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the first side of the right angled triangle\n    a = math.sqrt(w**2 + h**2)\n\n    # Calculate the second side of the right angled triangle\n    b = math.sqrt(w**2)\n\n    # Calculate the third side of the right angled triangle\n    c = math.sqrt(h**2)\n\n    # Calculate the semi-perimeter of the triangle\n    s = (a + b + c) / 2\n\n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Calculate the other side of the triangle\n    other_side = (area ** 2) / (4 * s ** 2)\n\n    # Return the other side of the triangle\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w + h) / 2\n    s = math.sqrt(w**2 + h**2)\n    return c - s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2+h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the right triangle\n    s = (w+h)/2\n    # Calculate the length of the third side of the right triangle\n    c = math.sqrt(s*(s-w)*(s-h))\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Using Heron's formula to find the semi-perimeter of the right angled triangle\n    semi_perimeter = math.sqrt(w**2 + h**2)\n\n    # Using the formula for the third side of a right angled triangle\n    third_side = 2 * w * h / semi_perimeter\n\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if val is None:\n            max_val = None\n        elif isinstance(val, int):\n            if max_val is None or val > max_val:\n                max_val = val\n        elif isinstance(val, float):\n            if max_val is None or val > max_val:\n                max_val = val\n        elif isinstance(val, str):\n            if max_val is None or val > max_val:\n                max_val = val\n        elif isinstance(val, bool):\n            if max_val is None or val is True:\n                max_val = val\n        else:\n            raise TypeError('Invalid type for list element: {}'.format(type(val)))\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(lst):\n    '''\n    Given a list of numbers, return the maximum value in the list.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return max(lst)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the maximum value\n    max_val = None\n    \n    # Loop through each value in the list\n    for val in listval:\n        # If the current value is greater than the maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for value in listval:\n        if max_val is None or value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of heterogeneous values as input and returns the maximum value.\n    '''\n    if not listval:\n        return None\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to the smallest possible integer value.\n    max_val = -9223372036854775808\n\n    # Loop through the list and compare each element with the current maximum value.\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value found.\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to None\n    max_val = None\n    \n    # Loop through each element in the list\n    for val in listval:\n        # If the current value is greater than the maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for val in listval:\n        if max_num is None or val > max_num:\n            max_num = val\n    return max_num"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_div(28)) # Output: 40"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # The length of the array is n\n    n = len(arr)\n\n    # Initialize inversion count as 0\n    inversion_count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Traverse through the array\n    for i in range(n-1):\n        # If the current element is greater than the next element, then there is an inversion\n        if arr[i] > arr[i+1]:\n            # Increment the inversion count\n            inversion_count += (n-i-1)\n\n    return inversion_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Counting the inversions using the counting sort algorithm \n    for i in range(n): \n        count = [0] * (n + 1) \n        for j in range(n - i - 1): \n            # Counting the inversions in the current subarray \n            count[arr[j] - 1] += 1 \n            # Counting the inversions in the entire array \n            for k in range(j + 1, n): \n                if arr[k] - 1 < arr[j] - 1: \n                    count[arr[j] - 1] -= 1 \n                else: \n                    break \n        # Adding the count of the current subarray to the sum of all counts \n        for j in range(n + 1): \n            if count[j] > 0: \n                count_sum[j] += count[j] \n    return count_sum[0]"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += j - i + 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n                j = n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n\n    # If array has only one element or is empty\n    if n <= 1:\n        return 0\n\n    # Divide the array into two halves recursively\n    left_count = get_Inv_Count(arr[:n // 2])\n    right_count = get_Inv_Count(arr[n // 2:])\n\n    # Calculate the count of inversions in the two halves\n    inversions = 0\n    i = j = 0\n    while i < n and j < n:\n        if arr[i] <= arr[j]:\n            i += 1\n        else:\n            j += 1\n            inversions += n - i\n\n    # Combine the two counts and return the final result\n    return left_count + right_count + inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Count the number of inversions in the array\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Iterate through the array and count the inversions\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            inv_count += n - i - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Initialize two variables to keep track of the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # Initialize a variable to keep track of the number of inversions\n    inv_count = 0\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Traverse the array using two pointers\n    while left < right:\n        # If the left pointer is greater than or equal to the right pointer, there are no more inversions\n        if arr[left] >= arr[right]:\n            break\n        \n        # If the left element is greater than the right element, swap them and increment the inversion count\n        if arr[left] > arr[right]:\n            arr[left], arr[right] = arr[right], arr[left]\n            inv_count += right - left\n            right -= 1\n        else:\n            left += 1\n    \n    # Return the final count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize inversion count to 0\n    inv_count = 0\n    # Traverse the array and calculate inversions\n    for i in range(1, n):\n        # Check if current element is greater than the previous element\n        if arr[i] < arr[i-1]:\n            # Increment inversion count\n            inv_count += i - 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - i\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) is list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    :param lst: the list to flatten\n    :return: a flattened list\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n        lst (list): the nested list to flatten\n\n    Returns:\n        list: the flattened list\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the max aggregate for each store\n    max_agg = defaultdict(int)\n    # loop through the list of tuples and update the max aggregate for each store\n    for store, price in stdata:\n        max_agg[store] = max(max_agg[store], price)\n    # find the maximum aggregate across all stores\n    max_agg_sum = max(max_agg.values())\n    # return the maximum aggregate\n    return max_agg_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the count of each item\n    count_dict = defaultdict(int)\n    # iterate over the list of tuples\n    for item, quantity in stdata:\n        # increment the count of the item in the dictionary\n        count_dict[item] += quantity\n    # find the maximum count of each item\n    max_counts = [count_dict[item] for item in stdata]\n    # find the maximum count of all items\n    max_count = max(max_counts)\n    # calculate the maximum aggregate\n    max_aggregate = sum(i*j for i,j in zip(max_counts, stdata)) * max_count\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and calculates the maximum aggregate.\n    '''\n    # create a defaultdict to store the maximum aggregate for each month\n    max_aggs = defaultdict(int)\n\n    # iterate over each tuple in the list\n    for item in stdata:\n        # extract the month and the aggregate from the tuple\n        month, agg = item\n\n        # update the maximum aggregate for the month in the defaultdict\n        max_aggs[month] = max(agg, max_aggs[month])\n\n    # return the maximum aggregate for each month\n    return max_aggs"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for x, y in stdata:\n        max_dict[x] += y\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        if item[1] > max_aggr[item[0]]:\n            max_aggr[item[0]] = item[1]\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        customer, amount = item\n        max_aggr[customer] = max(max_aggr[customer], amount)\n\n    for customer, max_amount in max_aggr.items():\n        print(f\"Max aggregate for customer {customer} is {max_amount}\")"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Create a dictionary to store the maximum aggregate for each student\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for (name, age, grade) in stdata:\n        # Calculate the maximum aggregate for the student\n        max_aggr[name] = max(max_aggr[name], grade)\n\n    # Find the maximum aggregate in the dictionary\n    max_agg = 0\n    for aggr in max_aggr.values():\n        max_agg = max(max_agg, aggr)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the max aggregate and the count of each transaction\n    max_agg = defaultdict(int)\n    \n    # loop through the list of transactions\n    for transaction in stdata:\n        # calculate the total amount spent\n        total_amount = sum([value for (item, value) in transaction])\n        \n        # check if the max aggregate is greater than the current total amount spent\n        if max_agg[total_amount] < len(transaction):\n            max_agg[total_amount] = len(transaction)\n    \n    # find the maximum count of transactions for each maximum aggregate\n    max_count = max(max_agg.values())\n    \n    # create a list to store the transactions with the maximum count\n    max_transactions = []\n    \n    # loop through the defaultdict and add the transactions with the maximum count\n    for total_amount, count in max_agg.items():\n        if count == max_count:\n            max_transactions.append((total_amount, [transaction for (item, value) in stdata if total_amount == sum([value for (item, value) in transaction])]))\n    \n    return max_transactions\n"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each item\n    counts = defaultdict(int)\n    for item, count in stdata:\n        counts[item] += count\n\n    # Find the maximum count in the dictionary\n    max_count = max(counts.values())\n\n    # Calculate the maximum aggregate by iterating over the dictionary\n    max_aggregate = 0\n    for count in counts.values():\n        if count == max_count:\n            max_aggregate += counts.keys()[counts.values().index(max_count)]\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each team\n    max_aggs = defaultdict(int)\n    for team, agg in stdata:\n        max_aggs[team] = max(agg, max_aggs[team])\n    # find the maximum aggregate from the defaultdict\n    max_agg = max(max_aggs.values())\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n, 2**2*n+1, 2**n):\n        total = 0\n        for j in range(n):\n            total += (i & 1)\n            i >>= 1\n        if total == sum(i>>n for i in range(2**n, 2**2*n+1, 2**n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Find all possible binary sequences of length 2n\n    seqs = set()\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(n*2)\n        seqs.add(seq)\n\n    # Count the number of sequences that satisfy the condition\n    count = 0\n    for seq1 in seqs:\n        seq2 = ''.join(sorted(seq1, reverse=True))\n        if seq2 == seq1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    seq = 0\n    count = 0\n    for i in range(2**n):\n        seq = seq + 2**(n-1)\n        if sum(bin(seq)[2:].zfill(n)) == sum(bin(seq-2**(n-1)-1)[2:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        a = bin(i)[2:].zfill(n)\n        b = bin(i+1)[2:].zfill(n)\n        if int(a) == int(b):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_bits = bin(i)[2:]\n        last_bits = bin(i)[-n-2:-1]\n        if int(first_bits, 2) == int(last_bits, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        if (sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i)[2:].zfill(n)[::-1])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n-1, -1, -1):\n        count += (2**n - 1) // (2*i)\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    # generate all binary strings of length 2n\n    for i in range(2**n):\n        # check if sum of first n bits is same as sum of last n bits\n        if sum(int(j) for j in bin(i)[2:].zfill(n)) == sum(int(j) for j in bin(i)[2:].zfill(n))[::-1]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        if i == 0 or i == 1:\n            count += 1\n        else:\n            # Check if the sum of first n bits is same as sum of last n bits\n            if sum(int(digit) for digit in bin(i)[2:]) == sum(int(digit) for digit in bin(i-1)[2:]):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the current binary sequence to a list of bits\n        seq = [int(bit) for bit in bin(i)[2:]]\n\n        # Check if the sum of the first n bits is same as the sum of the last n bits\n        if sum(seq[:n]) == sum(seq[-n:]):\n            count += 1\n\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth to zero\n    depth = 0\n\n    # traverse the dictionary recursively\n    for key in d:\n        # check if the value is a dictionary\n        if isinstance(d[key], dict):\n            # increment depth by one\n            depth += 1\n        # check if the value is a list\n        elif isinstance(d[key], list):\n            # traverse the list recursively to find the depth\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n        # if the value is not a dictionary or list, it is a simple value\n        else:\n            pass\n\n    # return the depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    curr_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            curr_depth = curr_depth + 1\n            if curr_depth > max_depth:\n                max_depth = curr_depth\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    curr_depth = curr_depth + 1\n                    if curr_depth > max_depth:\n                        max_depth = curr_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Define a variable to store the depth\n    depth = 0\n    \n    # Loop through each key in the dictionary\n    for key in d:\n        # Check if the value is a dictionary\n        if isinstance(d[key], dict):\n            # Increment the depth by one\n            depth += 1\n            # Recursively call the function on the nested dictionary\n            dict_depth(d[key])\n    \n    # Return the final depth value\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n\n    # Initialize a counter variable\n    depth = 0\n\n    # Recursively search the dictionary for nested dictionaries\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the current depth\n    depth = 0\n    \n    # Recursively iterate over the dictionary\n    for key, value in d.items():\n        # If the value is a dictionary, increment the depth\n        if isinstance(value, dict):\n            depth += 1\n        # If the value is a list, increment the depth for each item in the list\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n        # If the value is not a dictionary or list, simply increment the depth\n    depth += 1\n    \n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = max(len(str(k)) + len(str(v)) + 1 for k, v in d.items())\n        return max_depth\n    elif isinstance(d, list):\n        return len(d)\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = 1 + dict_depth(value)\n            if new_depth > max_depth:\n                max_depth = new_depth\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    new_depth = 1 + dict_depth(item)\n                    if new_depth > max_depth:\n                        max_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            count += 1 + dict_depth(value)\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k,v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth += dict_depth(v)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotated_arr = []\n    n = len(arr)\n\n    # Apply all rotations to the given array\n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(1, n):\n            arr[j-1] = arr[j]\n        arr[n-1] = temp\n\n    # Find the element at the given index after rotations\n    for i in range(n):\n        if i+index < n:\n            rotated_arr.append(arr[i+index])\n        else:\n            rotated_arr.append(arr[i+index-n])\n\n    # Find the final element\n    final_element = 0\n    for i in range(len(rotated_arr)):\n        final_element = (final_element + rotated_arr[i]) % (n**2)\n\n    # Find the element at the given index\n    for i in range(len(ranges)):\n        if ranges[i][0] <= final_element < ranges[i][1]:\n            final_element = arr[final_element-ranges[i][0]]\n            break\n\n    return final_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, number of rotations and an index as input.\n    It then finds the element at the given index after rotations.\n\n    :param arr: an array of integers\n    :param ranges: a list of tuples, where each tuple contains the start and end indices of a range\n    :param rotations: an integer, representing the number of rotations required to find the element\n    :param index: an integer, representing the index of the element required to find after rotations\n    :return: the element at the given index after rotations\n    \"\"\"\n\n    # Find the range of the element we are looking for\n    range_index = find_range(ranges, index)\n\n    # Find the start and end indices of the range we are looking for\n    start_index, end_index = ranges[range_index]\n\n    # Calculate the total number of elements in the range\n    total_elements = end_index - start_index + 1\n\n    # Calculate the number of elements to shift by\n    shift = rotations % total_elements\n\n    # Find the element we are looking for after rotations\n    new_start_index = (start_index + shift) % (len(arr) + 1)\n    new_end_index = (end_index + shift) % (len(arr) + 1)\n\n    # Return the element at the new indices\n    return arr[new_start_index:new_end_index + 1]\n\n\ndef find_range(ranges, index):\n    \"\"\"\n    This function takes in a list of ranges and an index as input.\n    It then finds the index of the range that contains the given index.\n\n    :param ranges: a list of tuples, where each tuple contains the start and end indices of a range\n    :param index: an integer, representing the index of the element required to find after rotations\n    :return: the index of the range that contains the given index\n    \"\"\"\n\n    # Initialize the range index to -1\n    range_index = -1\n\n    # Loop through the ranges and find the index of the range that contains the given index\n    for i in range(len(ranges)):\n        start_index, end_index = ranges[i]\n        if start_index <= index <= end_index:\n            range_index = i\n            break\n\n    # Return the range index\n    return range_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, list of ranges, and number of rotations to perform,\n    and returns the element at the specified index after the specified number of rotations.\n    \"\"\"\n    # Get the original element at the given index\n    element = arr[index]\n    # Initialize the index of the element after rotations\n    rotated_index = index\n    # Perform the specified number of rotations\n    for _ in range(rotations):\n        # Get the range of the rotated element\n        range_index = (index - 1) % len(ranges)\n        # Get the index of the element in the rotated range\n        rotated_index = (rotated_index - ranges[range_index]) % len(arr)\n    # Return the element at the rotated index\n    return arr[rotated_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the current element\n    current_element = arr[index]\n\n    # Find the number of rotations to apply\n    num_rotations = len(rotations)\n\n    # Iterate through the rotations and apply each rotation to the current element\n    for i in range(num_rotations):\n        rotation = rotations[i]\n\n        # Find the new element after the rotation\n        if rotation == 'left':\n            new_element = arr[(index - 1) % len(arr)]\n        elif rotation == 'right':\n            new_element = arr[(index + 1) % len(arr)]\n        elif rotation =='swap':\n            new_element = current_element\n        else:\n            raise ValueError(\"Invalid rotation type\")\n\n        # Check if the new element is within the valid range\n        if new_element < ranges[0]:\n            new_element = ranges[0]\n        elif new_element > ranges[1]:\n            new_element = ranges[1]\n\n        # Update the current element\n        current_element = new_element\n\n    # Return the current element\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        start = 0\n        end = len(arr) - 1\n        temp = []\n        while start <= end:\n            mid = (start + end) // 2\n            if arr[mid] >= ranges[index]:\n                temp.append(mid)\n                start = mid + 1\n            else:\n                end = mid - 1\n        temp.sort()\n        arr = [arr[i] for i in temp]\n\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Calculate the number of times the rotation needs to be applied\n    num_rotations = (index // len(arr)) % rotations\n\n    # Calculate the final index after the rotation\n    final_index = ((index - num_rotations * len(arr)) % len(arr))\n\n    # Calculate the element at the final index\n    element = arr[final_index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, list of ranges, and the number of rotations required to find the element at the given index.\n    It returns the element at the given index after rotations.\n    '''\n    # finding the element at the given index without rotations\n    original_element = arr[index]\n\n    # finding the element at the given index after rotations\n    for i in range(len(ranges)):\n        # calculate the number of rotations to get to the current range\n        rotations_required = len(ranges) - i\n        if index >= ranges[i] and index < ranges[i+1]:\n            # getting the element at the current range after rotations\n            current_range = ranges[i+1] - ranges[i]\n            current_element = arr[index-ranges[i]]\n            # finding the element at the given index after rotations\n            if rotations_required > 0:\n                for j in range(rotations_required):\n                    # finding the element at the current range after the rotation\n                    current_range = current_range // 2\n                    current_element = arr[index-ranges[i] + current_range]\n            # adding the element at the current range to get the element at the given index after rotations\n            original_element = original_element + current_element\n\n    # returning the original element at the given index after rotations\n    return original_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n        arr (list): List of integers to perform the rotations on.\n        ranges (list): List of ranges of integers in the arr to perform the rotations on.\n        rotations (int): Number of rotations to perform on arr.\n        index (int): Index of the element to be searched after rotations.\n\n    Returns:\n        int: Element at the given index after rotations.\n\n    \"\"\"\n    # Perform rotations on arr\n    for i in range(rotations):\n        arr = rotate(arr, ranges)\n\n    # Search for element at index after rotations\n    result = None\n    for i in range(len(arr)):\n        if i == index:\n            result = arr[i]\n            break\n\n    return result\n\n\ndef rotate(arr, ranges):\n    \"\"\"\n    Perform rotations on a given array of integers.\n\n    Args:\n        arr (list): List of integers to perform the rotations on.\n        ranges (list): List of ranges of integers in the arr to perform the rotations on.\n\n    Returns:\n        list: Rotated array of integers.\n\n    \"\"\"\n    # Initialize result array\n    result = []\n\n    # Check if rotations are possible\n    for rotation in ranges:\n        if rotation > len(arr):\n            return None\n\n    # Perform rotations on arr\n    for rotation in ranges:\n        result += arr[-rotation:]\n        arr = arr[:-rotation]\n\n    return result\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Get the original element\n    element = arr[index]\n    # Calculate the new index after rotations\n    new_index = (index + rotations) % len(arr)\n    # Calculate the new element after rotations\n    new_element = arr[new_index]\n    # Find the element in the new array\n    new_array = []\n    for i in range(len(arr)):\n        if i == index:\n            new_array.append(element)\n        elif i == new_index:\n            new_array.append(new_element)\n        else:\n            new_array.append(arr[i])\n    # Return the element in the new array\n    return new_array[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a number of rotations, and an index to find the element after rotating it.\n    It finds the element by finding the element in the original array and shifting it by the given number of rotations.\n    It returns the element at the given index after rotating it.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6]\n    ranges = [(0, 2), (2, 4), (4, 6)]\n    rotations = 2\n    index = 4\n    Output: 4\n\n    \"\"\"\n    # Find the element in the original array\n    original_element = arr[index]\n\n    # Rotate the original array by the given number of rotations\n    rotating_array = arr[rotations:] + arr[:rotations]\n\n    # Find the element at the given index after rotating it\n    element_after_rotation = rotating_array[index - rotations]\n\n    # Shift the element to the right by the given range\n    shifted_element = element_after_rotation + original_element\n\n    # Find the element in the original array\n    original_element_in_range = False\n    for range in ranges:\n        if shifted_element >= range[0] and shifted_element < range[1]:\n            original_element_in_range = True\n            break\n\n    # If the element is not in the range, it is the original element\n    if not original_element_in_range:\n        return original_element\n\n    # Find the element after shifting it\n    element_after_shift = original_element - shifted_element\n\n    return element_after_shift"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp[a-zA-Z]+\\b')\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    if matches:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define pattern to match starting with letter 'p'\n    pattern = re.compile(r'^\\p{L}+')\n    # loop through the list of words\n    for i in range(len(words)):\n        # check if the word starts with letter 'p' using the pattern\n        if pattern.match(words[i]):\n            # if it does, return the two words\n            return words[i-1:i+2]\n    # if no words start with letter 'p', return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression to match words starting with letter 'p'\n    pattern = r'^p\\w+'\n    \n    # Use re.findall() function to find all words starting with letter 'p'\n    match_words = re.findall(pattern, words)\n    \n    # Return two words starting with letter 'p'\n    return match_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Compile a regular expression pattern for words starting with 'p'\n    pattern = re.compile(r'^p\\w+')\n    \n    # Find all matches for the pattern in the list of words\n    matches = re.findall(pattern, words)\n    \n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n    \n    # If there are two matches, return the two matches\n    if len(matches) == 2:\n        return matches\n    \n    # If there are more than two matches, return the first two matches\n    else:\n        return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p.*', re.IGNORECASE)\n    matched_words = re.findall(pattern, words)\n    return matched_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match(\"^p\", word)]\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'^p\\w+')\n    # use re.findall() method to find all the words starting with 'p' in the list of words\n    result = re.findall(pattern, words)\n    # if there are two words starting with 'p', return them, else return an empty list\n    if len(result) == 2:\n        return result\n    else:\n        return []"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for i in range(len(words)):\n        if re.match(pattern, words[i]):\n            return words[i], words[i+1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = r'^p[a-z]+'  # regular expression pattern to match words starting with letter 'p'\n    \n    # filter the words that match the pattern\n    p_words = list(filter(lambda w: re.match(pattern, w), words))\n    \n    if len(p_words) < 2:\n        return None\n    \n    # return the two matching words\n    return p_words[:2]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n    if k == index:\n        return a[k]\n    if k < index:\n        return max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, k, index) + a[k])\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n\n    if index == n:\n        return 0\n\n    dp = [0] * n\n    dp[index] = a[index]\n\n    for i in range(index + 1, n):\n        if i < k:\n            dp[i] = max(dp[i - 1], dp[i])\n        else:\n            dp[i] = max(dp[i - 1], dp[i], dp[i - k] + a[i])\n\n    return dp[n - 1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return 0\n    \n    if index == n:\n        return 0\n    \n    # initialize variables\n    dp = [0] * (k+1)\n    prev_ind = [0] * (k+1)\n    \n    # fill the dp array\n    for i in range(1, k+1):\n        if i <= index:\n            dp[i] = a[index]\n        else:\n            dp[i] = dp[prev_ind[i]] + a[index]\n            \n        # find the index of the maximum sum\n        max_sum = max(dp[:i+1])\n        for j in range(i+1):\n            if dp[j] == max_sum:\n                prev_ind[i] = j\n                \n    # find the maximum sum of increasing subsequence from index to k\n    max_sum_k = dp[k]\n    prev_ind_k = prev_ind[k]\n    \n    # backtrack to find the maximum sum of increasing subsequence from index to 0\n    for i in range(k, 0, -1):\n        if prev_ind[i] == prev_ind_k:\n            max_sum_k = max(max_sum_k, dp[i])\n        else:\n            break\n        \n    return max_sum_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    if k > index:\n        return 0\n\n    if index == k:\n        return a[k]\n\n    if index == n-1 and k == n:\n        return a[k]\n\n    if index < n-1:\n        if a[index] < a[index+1]:\n            return max(a[index], a[index+1]) + max_sum_increasing_subseq(a, n, index+1, k)\n        else:\n            return max(a[index], a[index+1]) + max_sum_increasing_subseq(a, n, index+1, k)\n\n    return max_sum_increasing_subseq(a, n, index+1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    if k == index:\n        return a[k]\n    max_sum = 0\n    for i in range(index, k+1):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i+1, k) + a[i])\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n\n    # Initialize the maximum sum and current sum to zero\n    max_sum = 0\n    curr_sum = 0\n\n    # Loop through the array starting from index and ending at k\n    for i in range(index, k + 1):\n        # Update the current sum by adding the current element\n        curr_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sum is negative, reset it to zero\n        elif curr_sum < 0:\n            curr_sum = 0\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    prefix_sum = [0] * n\n    prefix_sum[0] = a[0]\n\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i]\n\n    for i in range(index, n):\n        for j in range(k, i):\n            if prefix_sum[j] > prefix_sum[i]:\n                prefix_sum[i] = max(prefix_sum[i], prefix_sum[j])\n                max_sum = max(max_sum, prefix_sum[i])\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the maximum sum of increasing subsequences from prefix to index\n    max_sum_subseq = [0] * (n - index + 1)\n    \n    # Create a list to store the index of the maximum sum of increasing subsequences from prefix to index\n    max_sum_index = [-1] * (n - index + 1)\n    \n    # Initialize the maximum sum of increasing subsequence to the first element of the array\n    max_sum_subseq[0] = a[index]\n    max_sum_index[0] = index\n    \n    # Iterate over the remaining elements of the array\n    for i in range(1, n - index + 1):\n        # Initialize a variable to store the maximum sum of increasing subsequences from prefix to i\n        curr_max_sum = 0\n        \n        # Initialize the current index of the maximum sum of increasing subsequences from prefix to i\n        curr_max_sum_index = 0\n        \n        # Iterate over the previous maximum sum of increasing subsequences from prefix to i\n        for j in range(i):\n            # If the element at the current index is greater than the element at the current index of the maximum sum of increasing subsequences from prefix to i, add the element at the current index to the maximum sum of increasing subsequences from prefix to i\n            if a[index + j] > a[index + i]:\n                curr_max_sum = max(curr_max_sum, max_sum_subseq[j] + a[index + i])\n                curr_max_sum_index = j\n        \n        # Add the element at the current index to the maximum sum of increasing subsequences from prefix to i\n        curr_max_sum = max(curr_max_sum, max_sum_subseq[i - 1] + a[index + i])\n        curr_max_sum_index = i - 1\n        \n        # Update the maximum sum of increasing subsequences from prefix to i and its index\n        max_sum_subseq[i] = curr_max_sum\n        max_sum_index[i] = curr_max_sum_index\n    \n    # Initialize a variable to store the maximum sum of increasing subsequences from prefix to k\n    max_sum_k = 0\n    \n    # Initialize the current index of the maximum sum of increasing subsequences from prefix to k\n    max_sum_k_index = 0\n    \n    # Iterate over the previous maximum sum of increasing subsequences from prefix to k\n    for i in range(k):\n        # If the element at the current index of the maximum sum of increasing subsequences from prefix to k is greater than the element at the current index of the maximum sum of increasing subsequences from prefix to k-1, add the element at the current index of the maximum sum of increasing subsequences from prefix to k to the maximum sum of increasing subsequences from prefix to k\n        if max_sum_index[i] > max_sum_index[i - 1]:\n            max_sum_k = max(max_sum_k, max_sum_subseq[i] + a[index + max_sum_index[i]])\n            max_sum_k_index = i\n    \n    return max_sum_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_subseq = []\n\n    # Traverse through the array from index to n-1\n    for i in range(index, n):\n\n        # If k is greater than i, include it in the sum\n        if k > i:\n            curr_sum += a[i]\n        else:\n            curr_sum = a[i]\n\n        # If the current sum is greater than max sum so far, update max sum and max subseq\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_subseq = [a[i]]\n        elif curr_sum == max_sum:\n            max_subseq.append(a[i])\n\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    def backtrack(i, k, dp):\n        if i == n:\n            return dp[0]\n        if dp[i] is not None:\n            return dp[i]\n        if a[i] > a[index] or (a[i] == a[index] and i > index):\n            dp[i] = max(dp[i], backtrack(i + 1, k, dp) + a[i])\n        else:\n            dp[i] = max(dp[i], backtrack(i + 1, k, dp))\n        if i >= k:\n            dp[i] = max(dp[i], backtrack(i + 1, k - 1, dp) + a[i])\n        return dp[i]\n\n    dp = [0] * (n + 1)\n    return backtrack(0, k, dp)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = []\n    for i in range(m):\n        new_tuplex.append(deepcopy(tuplex[i*n:(i+1)*n]))\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    if isinstance(tuplex, tuple):\n        return tuple([tuplex[i] for i in range(m, n+1)])\n    elif isinstance(tuplex, list):\n        return list(colon_tuplex(tuple(tuplex), m, n))\n    else:\n        return []"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple to avoid modifying original\n    colon = deepcopy(tuplex)\n    # get the length of the tuple\n    length = len(tuplex)\n    # loop through the tuple and add m copies of each element to the colon\n    for i in range(length):\n        for j in range(m):\n            colon.insert(i,tuplex[i])\n    # slice the colon from the first m elements to the nth element (exclusive)\n    colon = colon[m:n]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Initialize an empty list to store the colon\n    colon = []\n    # Loop through the tuple\n    for i in range(m):\n        # Loop through the range of n\n        for j in range(n):\n            # Get the index of the element in the tuple at position (i, j)\n            index = i*n + j\n            # If the index is valid, append the element to the colon\n            if 0 <= index < len(tuplex_copy):\n                colon.append(tuplex_copy[index])\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #create a new tuple with the same elements as the original tuple\n    colon = deepcopy(tuplex)\n    #set the length of the colon to m\n    colon = colon[:m]\n    #set the elements of the colon to n\n    for i in range(m):\n        colon[i] = n\n    #return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = tuple(new_tuplex[j] for j in range(n))\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    t = deepcopy(tuplex)\n    # Create a new empty list\n    colon = []\n    # Loop through the input tuple and add elements to the new list until it has m elements\n    for i in range(m):\n        colon.append(t[i])\n    # Return the new colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[:m] + (new_tuplex[m],) + new_tuplex[m+1:n]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex + (tuplex[i],)\n    for i in range(n):\n        new_tuplex += (tuplex[i],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        m, n = n, m\n\n    if m > len(tuplex):\n        m = len(tuplex)\n\n    if n > len(tuplex):\n        n = len(tuplex)\n\n    if m > n:\n        return (tuplex[:n], tuplex[m:])\n    else:\n        return (tuplex[:m], tuplex[n:])"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the maximum product and its indices\n    max_product = float('-inf')\n    max_product_index = -1\n    max_product_index2 = -1\n\n    # Loop through all possible pairs of factors and find the maximum product\n    for i in range(N):\n        for j in range(N):\n            product1 = nums1[i] * nums1[j]\n            product2 = nums2[i] * nums2[j]\n\n            # Check if the product is greater than the current maximum product\n            if product1 > max_product:\n                max_product = product1\n                max_product_index = i\n                max_product_index2 = j\n            if product2 > max_product:\n                max_product = product2\n                max_product_index = j\n                max_product_index2 = i\n\n    # Return the maximum product and the indices of the two factors that contributed to it\n    return max_product, max_product_index, max_product_index2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum number of products to find\n    max_products = min(N, len(nums1)) * min(N, len(nums2))\n    # Initialize the result list\n    result = []\n    # Iterate over the possible pairs of factors to choose from\n    for i in range(min(N, len(nums1)), len(nums1) + 1):\n        for j in range(min(N, len(nums2)), len(nums2) + 1):\n            # Compute the product of the selected factors\n            prod = 1\n            for k in range(max(0, i - N + 1), i + 1):\n                prod *= nums1[k]\n            for l in range(max(0, j - N + 1), j + 1):\n                prod *= nums2[l]\n            # Add the product to the result list if it's greater than any previous product\n            if prod > max(result):\n                result = [prod]\n            elif prod == max(result):\n                result.append(prod)\n    # Sort the result list in descending order and return it\n    return sorted(result, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    \n    # Initialize two variables to keep track of the largest products\n    largest1 = 0\n    largest2 = 0\n    \n    # Iterate through the lists and find the specified number of largest products\n    for i in range(N):\n        if nums1[i] > largest1:\n            largest1 = nums1[i]\n        if nums2[i] > largest2:\n            largest2 = nums2[i]\n    \n    # Return the two largest products\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the maximum product and its indices\n    max_product = 0\n    max_index1 = 0\n    max_index2 = 0\n    \n    # Loop through the two lists and find the maximum product and its indices\n    for i in range(N):\n        for j in range(N):\n            product1 = nums1[i] * nums1[j]\n            product2 = nums2[i] * nums2[j]\n            \n            if product1 > max_product:\n                max_product = product1\n                max_index1 = i\n                max_index2 = j\n            elif product1 == max_product and product2 > max_product:\n                max_product = product2\n                max_index1 = i\n                max_index2 = j\n                \n    # Return the specified number of largest products from the two lists\n    return max_product, max_index1, max_index2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value from each list\n    max_val1 = max(nums1)\n    max_val2 = max(nums2)\n    \n    # Create a list to store the products of the largest values\n    product_list = []\n    \n    # Loop through the number of products to find\n    for i in range(N):\n        # Calculate the product of the largest values from each list\n        prod1 = nums1[nums1.index(max_val1)] * nums1[nums1.index(max_val1)]\n        prod2 = nums2[nums2.index(max_val2)] * nums2[nums2.index(max_val2)]\n        \n        # Check if the product is greater than the current maximum in the product list\n        if prod1 > product_list[-1]:\n            product_list.append(prod1)\n        if prod2 > product_list[-1]:\n            product_list.append(prod2)\n    \n    # Sort the list in descending order\n    product_list.sort(reverse=True)\n    \n    return product_list[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum number of products to find\n    max_products = N\n\n    # Initialize the maximum product variables for each list\n    max_product1 = max_product2 = float('-inf')\n\n    # Iterate over the given lists and find the maximum product for each combination\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the current combination\n            product = nums1[i] * nums2[j]\n\n            # If the current product is larger than the maximum for the first list, update it\n            if product > max_product1:\n                max_product1 = product\n\n            # If the current product is larger than the maximum for the second list, update it\n            if product > max_product2:\n                max_product2 = product\n\n            # If we have found the maximum number of products, stop iterating\n            if N == 2:\n                break\n\n    # Return the two maximum products\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products found so far\n    largest_product1 = nums1[0] * nums2[0]\n    largest_product2 = nums1[0] * nums2[1]\n    largest_product3 = nums1[1] * nums2[0]\n    largest_product4 = nums1[1] * nums2[1]\n\n    # Find the largest N products\n    for i in range(2, N+1):\n        largest_product = max(largest_product1, largest_product2, largest_product3, largest_product4)\n        nums1.remove(largest_product1)\n        nums2.remove(largest_product2)\n        largest_product1 = max(nums1[0] * nums2[0], nums1[0] * nums2[1], nums1[1] * nums2[0], nums1[1] * nums2[1])\n        nums1.append(largest_product1)\n        nums2.append(largest_product)\n\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the input lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # find the first N elements of each list\n    first_N = nums1[:N]\n    second_N = nums2[:N]\n    \n    # initialize the largest_product variable\n    largest_product = 0\n    \n    # iterate through the first N elements of each list\n    for i in range(N):\n        # multiply the first factor with the second factor\n        product = first_N[i] * second_N[i]\n        \n        # update the largest_product if the current product is greater\n        if product > largest_product:\n            largest_product = product\n            \n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Parameters\n    ----------\n    nums1 : list of int\n        First list of integers.\n    nums2 : list of int\n        Second list of integers.\n    N : int\n        The number of largest products to find.\n\n    Returns\n    -------\n    list of int\n        The indices of the N largest products in the two input lists.\n    \"\"\"\n\n    # Find the indices of the largest products in both lists\n    indices1 = sorted(range(len(nums1)), key=lambda i: nums1[i], reverse=True)[:N]\n    indices2 = sorted(range(len(nums2)), key=lambda i: nums2[i], reverse=True)[:N]\n\n    return indices1 + indices2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize variables for the largest products\n    max_product1 = 1\n    max_product2 = 1\n\n    # iterate over the desired number of largest products\n    for i in range(N):\n        # calculate the product of the two largest elements in each list\n        product1 = nums1[-1] * nums1[-2]\n        product2 = nums2[-1] * nums2[-2]\n\n        # update the largest products if necessary\n        if product1 > max_product1:\n            max_product1 = product1\n        if product2 > max_product2:\n            max_product2 = product2\n\n    # return the largest products\n    return max_product1, max_product2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers a and b as inputs and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''   \n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as an input and returns a tuple of characters\n    in the string.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the given number to binary representation \n    bin_n = bin(n)[2:]\n\n    # Find the index of the leftmost unset bit in the binary representation \n    left_most_unset_bit_index = bin_n.find('1')\n\n    # If no unset bit is found, return the original number \n    if left_most_unset_bit_index == -1: \n        return n \n\n    # Set the leftmost unset bit to 1 \n    bin_n = bin_n[:left_most_unset_bit_index] + '1' + bin_n[left_most_unset_bit_index+1:]\n\n    # Convert the binary representation back to decimal \n    n = int(bin_n, 2)\n\n    return n "
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while n & (1 << i):\n        i += 1\n    return n | (1 << i)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit in a number.\n    '''\n    # Find the position of the first unset bit\n    for i in range(32):\n        if n & (1 << i) == 0:\n            break\n    \n    # Set the left most unset bit to 1\n    n = n | (1 << i)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to 0\n    left_most_unset_bit = 0\n    \n    # Iterate over the binary representation of n\n    for i in range(32):\n        # If the i-th bit of n is 1, then the leftmost unset bit is i\n        if ((n & (1 << i)) >> i) == 1:\n            break\n            \n    # Return the leftmost unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a given integer n.\n\n    :param n: an integer\n    :return: an integer with the left most unset bit set to 1\n    \"\"\"\n    # find the first bit that is set to 1 in n\n    index = 0\n    while n & (1 << index) == 0:\n        index += 1\n\n    # set the leftmost bit to 1\n    n |= (1 << index)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the leftmost unset bit in the given number n.\n\n    Args:\n    n: the number to set the leftmost unset bit in\n\n    Returns:\n    The updated number with the leftmost unset bit set to 1.\n    \"\"\"\n    # Iterate through each bit in the binary representation of n\n    for i in range(32):\n        # Check if the i-th bit is 0 (unset)\n        if (n & (1 << i)) == 0:\n            # Set the i-th bit to 1 and break out of the loop\n            n |= (1 << i)\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function takes an integer n as input and returns the integer with its leftmost unset bit set to 1.\n    \"\"\"\n    while n & (1 << 31): \n        n ^= (1 << 31)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the mask variable to 1 in the binary representation of n.\n    mask = bin(n)[2:]\n    # Iterate through the mask variable and set each bit to 0 if its value is 1.\n    for i in range(len(mask)):\n        if mask[i] == '1':\n            break\n        else:\n            mask[i] = '0'\n    # Convert the mask variable back to an integer.\n    mask = int(mask, 2)\n    # Use the mask variable to set the left most unset bit in n.\n    n = n | mask\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to -1\n    unset_bit = -1\n    # Iterate through each bit in the binary representation of n\n    for i in range(32):\n        # If the current bit is unset, set unset_bit to i and exit the loop\n        if n & (1 << i) == 0:\n            unset_bit = i\n            break\n    # If all bits are set, unset_bit is still -1\n    if unset_bit == -1:\n        # Set unset_bit to the last bit in the binary representation of n\n        unset_bit = 32\n    # Set the leftmost unset bit of n to unset_bit\n    n = n | (1 << unset_bit)\n    # Return the updated binary representation of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to -1 (assuming the bit is the least significant bit)\n    leftmost_unset_bit = -1\n\n    # Iterate over the binary digits of n\n    for i in range(32, -1, -1): \n        # If the bit is 0, set the leftmost unset bit to i and break out of the loop\n        if n & (1 << i) == 0: \n            leftmost_unset_bit = i \n            break\n\n    # Set the leftmost unset bit in n\n    n |= (1 << leftmost_unset_bit)\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes two arguments: r (radius) and h (height) of a cone.\n    It returns the volume of the cone.\n    '''\n    vol = math.pi * r ** 2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula for volume of a cone: V = (1/3) * pi * r^2 * h\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the area of the cone\n    area = math.pi * r * r\n    # calculate the volume of the cone\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r (radius) and h (height), and returns the volume of a cone.\n    '''\n    area = math.pi * r ** 2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return (1/3) * pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with a base radius r and height h.\n    '''\n    volume = (1/3) * math.pi * (r**3) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone given its base radius r and height h.\n    '''\n    # Calculate the half height of the cone\n    h_half = h / 2\n    \n    # Calculate the volume of the cone using the formula V = (1/3) * pi * r^2 * h_half\n    cone_volume = (1 / 3) * math.pi * r**2 * h_half\n    \n    # Return the calculated volume\n    return cone_volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 ** highest_Power_of_2(n//2)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return None\n    \n    # Initialize a variable to store the highest power of 2\n    highest = 1\n    \n    # Iterate through all the numbers between 1 and n\n    for i in range(2, n+1):\n        # If the current number is a power of 2, update the highest power of 2\n        if i == 2**highest:\n            highest += 1\n    \n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Convert n to binary and count the number of 1's\n    count = bin(n).count('1')\n    # Calculate the highest power of 2 that is less than or equal to n\n    highest_power_of_2 = 1 << (count - 1)\n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while n > 0:\n        n >>= 1\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize a variable to keep track of the highest power of 2\n    highest = 1\n    \n    # loop until the highest power of 2 is less than or equal to n\n    while highest <= n:\n        # increment the highest power of 2 by 1\n        highest <<= 1\n    \n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Find the highest power of 2 that is less than or equal to n\n        power = 1\n        while power < n:\n            power <<= 1\n        \n        # Return the highest power of 2 less than or equal to n\n        return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2\n    highest_power = 1\n    \n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is a power of 2\n        if i == 1:\n            # If the current number is 1, then it is a power of 2\n            continue\n        elif i == 2:\n            # If the current number is 2, then it is also a power of 2\n            highest_power = 2\n            break\n        elif i % 2 == 0:\n            # If the current number is even, then it is a power of 2\n            continue\n        elif i * i > n:\n            # If the square of the current number is greater than n, then the current number is not a power of 2\n            break\n        else:\n            # If the square of the current number is less than or equal to n, then it is a power of 2\n            highest_power = i\n    \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    return highest - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # initialize the highest power of 2 found to be 0\n    highest = 0\n    \n    # loop through all the powers of 2 between 1 and n\n    for i in range(1, n + 1):\n        # check if the current power of 2 is greater than the highest power found so far\n        if i > highest:\n            # update the highest power of 2 found so far\n            highest = i\n    \n    # return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    highest_power_of_2 = 1\n    while highest_power_of_2 < n:\n        highest_power_of_2 <<= 1\n    \n    return highest_power_of_2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = [2, 1]\n        for i in range(2, n):\n            lucas.append(lucas[i-1] + lucas[i-2])\n        return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [2]\n    for i in range(1, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 1 or n == 2:\n        return 2\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 0:\n        return 2\n\n    elif n == 1:\n        return 1\n\n    else:\n        prev_lucas = 2\n        lucas = 1\n\n        for i in range(2, n+1):\n            lucas = prev_lucas + lucas\n            prev_lucas = lucas\n\n        return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n as input and returns the nth Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        # Recursive formula for finding nth Lucas number\n        lucas = find_lucas(n-1)\n        return (lucas**2) % 28  # 28 is the largest number that can be written as the sum of two smaller primes"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    This function finds then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_prev = 2\n        lucas_curr = 1\n        for i in range(2, n+1):\n            lucas_next = lucas_prev + lucas_curr\n            lucas_prev = lucas_curr\n            lucas_curr = lucas_next\n        return lucas_curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Use a loop to apply the format string to each element in the list\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string % item)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(elem) for elem in list_]\n    return formatted_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    # loop through each list\n    for lst in [l1, l2, l3]:\n        # loop through each element in the list\n        for item in lst:\n            # if the element is a dictionary, update the result dictionary with it\n            if isinstance(item, dict):\n                result.update(item)\n            # if the element is a list, convert it to a nested dictionary and update the result dictionary\n            elif isinstance(item, list):\n                result.update(convert_list_dictionary(item))\n            # if the element is not a dictionary or a list, just add it to the result dictionary\n            else:\n                result[item] = None\n    # return the final dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Define a dictionary to hold the final result\n    result = {}\n\n    # Loop through each list and add its elements as keys in the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a dictionary to hold the nested dictionary\n    result = {}\n    \n    # Loop through each list\n    for i in range(len(l1)):\n        # Create a dictionary to hold the sub-list\n        sub_dict = {}\n        \n        # Loop through each item in the sub-list\n        for j in range(len(l2[i])):\n            # Add the item to the sub-list dictionary\n            sub_dict[l2[i][j]] = l3[i][j]\n        \n        # Add the sub-list dictionary to the parent dictionary\n        result[l1[i]] = sub_dict\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l1[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    - l1: A list of dictionaries.\n    - l2: A list of dictionaries.\n    - l3: A list of dictionaries.\n\n    Returns:\n    A dictionary that contains all the elements from all the input lists.\n\n    Example:\n    >>> l1 = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]\n    >>> l2 = [{'city': 'New York', 'population': 8313000}, {'city': 'Los Angeles', 'population': 3975000}]\n    >>> l3 = [{'country': 'USA', 'capital': 'Washington D.C.'}, {'country': 'UK', 'capital': 'London'}]\n    >>> result = convert_list_dictionary(l1, l2, l3)\n    >>> print(result)\n    {'Alice': {'name': 'Alice', 'age': 25}, 'Bob': {'name': 'Bob', 'age': 30}, 'New York': {'city': 'New York', 'population': 8313000}, 'Los Angeles': {'city': 'Los Angeles', 'population': 3975000}, 'USA': {'country': 'USA', 'capital': 'Washington D.C.'}, 'UK': {'country': 'UK', 'capital': 'London'}}\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                key = l1[i]['name'] +'' + l2[j]['city'] +'' + l3[k]['country']\n                value = {'name': l1[i]['name'], 'age': l1[i]['age'], 'city': l2[j]['city'], 'population': l2[j]['population'], 'country': l3[k]['country'], 'capital': l3[k]['capital']}\n                result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if not (isinstance(l1, list) and isinstance(l2, list) and isinstance(l3, list)):\n        raise ValueError(\"Input must be a list\")\n    \n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        raise ValueError(\"Lists should have the same length\")\n    \n    if not all(isinstance(x, list) for x in l1) or not all(isinstance(x, list) for x in l2) or not all(isinstance(x, list) for x in l3):\n        raise ValueError(\"Each list item must be a list\")\n    \n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): List of strings.\n    l2 (list): List of integers.\n    l3 (list): List of dictionaries.\n\n    Returns:\n    dictionary: Nested dictionary.\n    '''\n\n    # Create a dictionary to store the lists in the nested dictionary.\n    result = {}\n\n    # Loop through the three lists and append each item to the appropriate key in the dictionary.\n    for i in range(len(l1)):\n        result[str(i)] = l1[i]\n    for i in range(len(l2)):\n        result[str(i+len(l1))] = l2[i]\n    for i in range(len(l3)):\n        result[str(i+len(l1)+len(l2))] = l3[i]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a dictionary to store the final result\n    result = {}\n\n    # Loop through the input lists and add each element to the dictionary\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        if l3[i] in result:\n            result[l3[i]].append(value)\n        else:\n            result[l3[i]] = [value]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    :param l1: A list of lists, each inner list contains a dictionary\n    :param l2: A list of lists, each inner list contains a dictionary\n    :param l3: A list of lists, each inner list contains a dictionary\n    :return: A nested dictionary of all the dictionaries in the input lists\n    \"\"\"\n    # initialize an empty dictionary\n    nested_dict = {}\n    # iterate through the input lists\n    for i in range(len(l1)):\n        # iterate through the inner lists of the current list\n        for j in range(len(l1[i])):\n            # check if the current inner list is a dictionary\n            if isinstance(l1[i][j], dict):\n                # if it is, iterate through the keys of the dictionary\n                for key in l1[i][j]:\n                    # if the current key is not already in the nested dictionary, add it\n                    if key not in nested_dict:\n                        nested_dict[key] = []\n                    # append the current value to the nested dictionary\n                    nested_dict[key].append(l1[i][j][key])\n    # iterate through the second input lists\n    for i in range(len(l2)):\n        # iterate through the inner lists of the current list\n        for j in range(len(l2[i])):\n            # check if the current inner list is a dictionary\n            if isinstance(l2[i][j], dict):\n                # if it is, iterate through the keys of the dictionary\n                for key in l2[i][j]:\n                    # if the current key is not already in the nested dictionary, add it\n                    if key not in nested_dict:\n                        nested_dict[key] = []\n                    # append the current value to the nested dictionary\n                    nested_dict[key].append(l2[i][j][key])\n    # iterate through the third input lists\n    for i in range(len(l3)):\n        # iterate through the inner lists of the current list\n        for j in range(len(l3[i])):\n            # check if the current inner list is a dictionary\n            if isinstance(l3[i][j], dict):\n                # if it is, iterate through the keys of the dictionary\n                for key in l3[i][j]:\n                    # if the current key is not already in the nested dictionary, add it\n                    if key not in nested_dict:\n                        nested_dict[key] = []\n                    # append the current value to the nested dictionary\n                    nested_dict[key].append(l3[i][j][key])\n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 45\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nprint(get_max_sum(1))  # output: 1\nprint(get_max_sum(2))  # output: 3\nprint(get_max_sum(3))  # output: 10\nprint(get_max_sum(4))  # output: 45"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 5\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Initialize the sum variable with the value of n\n    max_sum = n\n    \n    # Calculate the sum of first n terms of the series\n    for i in range(1, n+1):\n        max_sum += i\n    \n    # Calculate the sum of first n/2 terms of the series\n    for i in range(1, n/2+1):\n        max_sum += i\n    \n    # Calculate the sum of first n/3 terms of the series\n    for i in range(1, n/3+1):\n        max_sum += i\n    \n    # Calculate the sum of first n/4 terms of the series\n    for i in range(1, n/4+1):\n        max_sum += i\n    \n    # Calculate the sum of first n/5 terms of the series\n    for i in range(1, n/5+1):\n        max_sum += i\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case: if n is 0, then the maximum sum is 0\n    if n == 0:\n        return 0\n    \n    # Recursive case: calculate the maximum sum using the given equation and max(max_sum, n)\n    max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        max_sum = 1\n        for i in range(1, n):\n            if i % 2 == 0:\n                max_sum += get_max_sum(i/2)\n            else:\n                max_sum += get_max_sum(i/3) + get_max_sum(i/4) + get_max_sum(i/5)\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    def rec_max_sum(n):\n        if n == 1:\n            return n\n        elif n == 2:\n            return max(3*n-1, 1)\n        else:\n            return max(fibonacci(n-1) + n, rec_max_sum(n-1))\n\n    return rec_max_sum(n)\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_len:\n            max_len = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for element in input_list:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_list = element\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    # Create a set from the tuple to remove duplicates\n    set_tup = set(test_tup)\n    \n    # If the length of the set is equal to the length of the original tuple,\n    # then there were no duplicates and the function returns True\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(string):\n    '''\n    This function takes a string as input and returns the first non-repeated character in it.\n    '''\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    \n    # Iterate over the string and count the frequency of each character\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate over the string again and find the first non-repeated character\n    for char in string:\n        if freq[char] == 1:\n            return char\n    \n    # If all characters are repeated, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the first non-repeating character in the string\n    first_non_repeating = None\n    for char in str1:\n        if freq_dict[char] == 1:\n            first_non_repeating = char\n            break\n    \n    # Return the first non-repeating character\n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store characters and their counts\n    char_count = {}\n    # loop through the string and update the character count dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # find the first non-repeating character and return its index\n    for i in range(len(str1)):\n        if char_count[str1[i]] == 1:\n            return i\n    # if no non-repeating character is found, return -1\n    return -1"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first non-repeated character by iterating through the dictionary and finding the first character with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # iterate through the frequency dictionary and return the first non-repeating character\n    for char in freq:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the dictionary and find the first character that has a count of 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # If no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n\n    Args:\n    str1 (str): The given string.\n\n    Returns:\n    str: The first non-repeated character in the string.\n    \"\"\"\n    # create a dictionary to store the character frequency\n    freq_dict = {}\n    # loop through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # loop through the string again and find the first non-repeated character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if the input string matches the regex pattern\n    match = re.match(regex, string)\n    if match:\n        # If the input string matches the regex pattern, extract the first character of the string\n        first_char = match.group(1)\n        # Check if the first character is the same as the last character in the string\n        if first_char == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Check if string starts and ends with the same character\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # find the length of the sorted list\n    length = len(sorted_numbers)\n    \n    # calculate the median\n    if length % 2 == 0:\n        median = (sorted_numbers[length//2] + sorted_numbers[length//2-1])/2\n    else:\n        median = sorted_numbers[length//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_sorted = sorted([a, b, c])\n    if len(a_sorted) % 2 == 0:\n        return (a_sorted[len(a_sorted)//2-1] + a_sorted[len(a_sorted)//2])/2\n    else:\n        return a_sorted[len(a_sorted)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Calculate the median based on the sorted list\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2])/2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    length = len(sorted_numbers)\n\n    if length % 2 == 0:\n        # if the length of the sorted list is even\n        middle = length // 2\n        median1 = sorted_numbers[middle - 1]\n        median2 = sorted_numbers[middle]\n        median = (median1 + median2) / 2\n    else:\n        # if the length of the sorted list is odd\n        middle = length // 2\n        median = sorted_numbers[middle]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list of numbers and sort it in ascending order\n    numbers = sorted([a, b, c])\n\n    # Get the length of the list\n    length = len(numbers)\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # Find the average of the two middle numbers\n        middle_index = length // 2\n        median = (numbers[middle_index - 1] + numbers[middle_index]) / 2\n    else:\n        # Return the middle number\n        median = numbers[length // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers\n    nums = sorted([a, b, c])\n\n    # Determine the median\n    n = len(nums)\n    if n % 2 == 0:\n        median = (nums[n//2 - 1] + nums[n//2]) / 2\n    else:\n        median = nums[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    a = sorted([a])[0]\n    b = sorted([b])[0]\n    c = sorted([c])[0]\n    \n    # Calculate the median of the three numbers\n    median = (a + b + c) / 3\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    if a >= b and a >= c:\n        if b >= c:\n            return a\n        else:\n            return b\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize the sum variable to 0\n    sum_of_digits = 0\n    \n    # Iterate over each number in the list\n    for num in nums:\n        # Convert the number to a string and get the digits\n        digits = [int(digit) for digit in str(num)]\n        # Add up all the digits\n        sum_of_digits += sum(digits)\n    \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit\n            num //= 10\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Create an empty list to store the sum of digits of each number in the list\n    digit_sums = []\n\n    # Iterate over each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = list(str(num))\n\n        # Compute the sum of digits in the list\n        digit_sum = sum(int(digit) for digit in digits)\n\n        # Append the sum of digits to the digit_sums list\n        digit_sums.append(digit_sum)\n\n    # Return the list of digit_sums\n    return digit_sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            num_str = str(num)\n            digit_sum = sum(int(digit) for digit in num_str)\n            total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # create an empty list to store the sum of digits for each number\n    sum_list = []\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into individual characters\n        num_str = str(num)\n        # loop through each character in the string and add its integer value to a running total\n        total = 0\n        for char in num_str:\n            total += int(char)\n        # add the running total to the sum_list for this number\n        sum_list.append(total)\n    # return the sum_list of sums of digits for each number\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        # Convert the number to a string and iterate over its characters\n        num_str = str(num)\n        for digit in num_str:\n            # Convert the character to an integer and add it to the sum of digits\n            sum_digits += int(digit)\n    return sum_digits"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Get the length of both tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Create an empty result tuple with the same length as the first tuple\n    result_tup = (0,) * len1\n\n    # Loop through both tuples and perform the bitwise xor operation\n    for i in range(len1):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= (test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Convert the tuples to lists for easier manipulation\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    \n    # Iterate over the two lists and perform the bitwise xor operation on each pair of elements\n    for i in range(len(lst1)):\n        lst1[i] = lst1[i] ^ lst2[i]\n    \n    # Convert the resulting list back to a tuple and return it\n    return tuple(lst1)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Define a function to perform bitwise xor operation on two given numbers\n    def bitwise_xor_numbers(num1, num2):\n        return num1 ^ num2\n    \n    # Create two empty lists to store the result of bitwise xor operation on each element of the given tuples\n    xor_list1 = []\n    xor_list2 = []\n    \n    # Iterate through each element of the given tuples and append the result of bitwise xor operation on each element to their respective lists\n    for num1, num2 in zip(test_tup1, test_tup2):\n        xor_list1.append(bitwise_xor_numbers(num1, num2))\n        xor_list2.append(bitwise_xor_numbers(num2, num1))\n    \n    # Return the result of bitwise xor operation on both lists\n    return xor_list1, xor_list2"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and performs the bitwise xor operation on their elements.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result = tuple([0] * len(test_tup1))\n    \n    # Iterate over the elements of the input tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # Return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0, 0, 0, 0)\n    # Loop through the tuples and perform the bitwise xor operation on each element\n    for i in range(4):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    # iterate through each element in the tuples\n    for i in range(len(test_tup1)):\n        # calculate the bitwise xor of the current elements\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    # return the calculated result\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert each tuple element to an integer\n    num1 = int(test_tup1[0])\n    num2 = int(test_tup2[0])\n    # Perform bitwise xor operation on the integers\n    result = num1 ^ num2\n    # Convert the result back to a tuple\n    new_tup = (result,)\n    return new_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for elem in test_list:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty set to store unique tuples\n    unique_tuples = set()\n\n    # Loop through the list and add each unique tuple to the set\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            unique_tuples.add((test_list[i], test_list[j]))\n\n    # Return the number of unique tuples in the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for i in test_list:\n        for j in test_list:\n            if i!= j:\n                unique_tuples.add((i,j))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if isinstance(item, tuple) and len(item) == 2 and isinstance(item[0], int) and isinstance(item[1], int):\n            unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary, if so increment the count\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[tup] = 1\n    \n    # return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    \n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    \n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        for elem in item:\n            unique_tuples.add((elem,))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n    # Iterate over the list of tuples\n    for t in test_list:\n        # Add the tuple to the set\n        unique_tuples.add(t)\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the given input is a nested tuple\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        # Check if the first tuple has the same number of elements as the second tuple\n        if len(test_tup1) == len(test_tup2):\n            # Create a new tuple with the sum of elements at each index\n            result_tup = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n            return result_tup\n        else:\n            print(\"Error: The two tuples have different number of elements.\")\n            return None\n    else:\n        print(\"Error: The input is not a nested tuple.\")\n        return None"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initialize the result tuple\n    result_tup = []\n\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize the current element as 0\n        current_elem = 0\n\n        # Loop through the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the current element of the first tuple and the current element of the second tuple\n            current_elem += test_tup1[i][j] + test_tup2[i][j]\n\n        # Add the current element to the result tuple\n        result_tup.append(current_elem)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # initialize an empty result list\n    result = []\n    \n    # loop through the outer tuple\n    for i in range(len(test_tup1)):\n        # loop through the inner tuple\n        for j in range(len(test_tup1[i])):\n            # add the corresponding elements of the tuples\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n            \n    # return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    # Check if one of the tuples is empty\n    if not test_tup1:\n        print(\"One of the tuples is empty.\")\n        return\n    # Check if the length of the second tuple is greater than zero\n    if not test_tup2[0]:\n        print(\"The second tuple is empty.\")\n        return\n    # Loop through the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # Check if the index i is valid in both tuples\n        if i < len(test_tup1) and i < len(test_tup2):\n            # Add the elements at index i of both tuples\n            result_list.append(test_tup1[i] + test_tup2[i])\n        else:\n            # If either index i is out of bounds or if the tuple is empty, set the result as None\n            result_list.append(None)\n    # Return the result tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have same length.\")\n        return\n    \n    # Perform index wise addition of elements in the two tuples\n    result_tup = tuple(sum(zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize an empty list to store the current row result\n        row_result = []\n        # Iterate through the second tuple\n        for j in range(len(test_tup2[0])):\n            # Perform the index wise addition of the corresponding elements of the two tuples\n            row_result.append(test_tup1[i] + test_tup2[j][i])\n        # Add the row result to the result list\n        result.append(tuple(row_result))\n    # Return the result as a nested tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # First we check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    # Then we loop through each element of the tuples and perform index wise addition\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    \n    # Finally, we return the modified tuple\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result of addition of each tuple element\n    result_list = []\n    # iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # add the corresponding element of the first tuple with the corresponding element of the second tuple\n        result = test_tup1[i] + test_tup2[i]\n        # add the result to the result_list\n        result_list.append(result)\n    # return the final result as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of those two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the smallest one.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for tup in tuplex:\n        if tup == tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in the tuple\")\n    else:\n        print(f\"{tuplex} does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        print(f\"{tuple1} exists within {tuplex}.\")\n    else: \n        print(f\"{tuple1} does not exist within {tuplex}.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(tuplex, \"exists in tuple1\") \n    else: \n        print(tuplex, \"does not exist in tuple1\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    if tuplex[0] in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as an input and returns True if the number is odd and False if it's even.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    \"\"\"\n    This function takes an integer x as input and returns True if the parity of x is odd, and False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of {} is even.\".format(x)\n    else:\n        return \"The parity of {} is odd.\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 1 if x % 2!= 0 else 0\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    \n    if x%2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Initialize a variable to keep track of the parity of the input number\n    parity = None\n    \n    # Check if the input number is odd or even\n    if x % 2 == 0:\n        # If the input number is even, set the parity variable to True\n        parity = True\n    else:\n        # If the input number is odd, set the parity variable to False\n        parity = False\n    \n    # Return the parity of the input number\n    return parity"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # convert the input number to a string and split it into individual digits\n    digits = [int(d) for d in str(n)]\n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    # join the sorted digits back into a string and convert it back to an integer\n    result = int(''.join(str(d) for d in digits))\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num_digits = len(str(n))\n    if num_digits == 1:\n        return n\n    else:\n        # Find the largest digit\n        largest_digit = 0\n        for digit in str(n):\n            if int(digit) > largest_digit:\n                largest_digit = int(digit)\n        # Rearrange the digits of the number\n        rearranged_digits = str(n)\n        for digit in str(n):\n            if int(digit) == largest_digit:\n                rearranged_digits = rearranged_digits.replace(digit, str(largest_digit + 1))\n            elif int(digit) > largest_digit:\n                rearranged_digits = rearranged_digits.replace(digit, str(largest_digit + num_digits - int(digit)))\n        # Convert the rearranged digits to a number\n        rearranged_number = int(rearranged_digits)\n        # Check if the rearranged number is equal to the original number + 1\n        if rearranged_number == n + 1:\n            return rearranged_number\n        else:\n            return rearrange_bigger(rearranged_number)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    # Find the length of the number\n    num_len = len(num_str)\n    # Initialize a list to store the digits of the number\n    num_digits = []\n    # Loop through each digit of the number\n    for digit in num_str:\n        num_digits.append(int(digit))\n    # Reverse the order of the digits in the number\n    num_digits.reverse()\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each digit of the number\n    for digit in num_digits:\n        # Multiply the current digit with the result so far\n        result *= 10\n        # Add the current digit to the result\n        result += digit\n    # Check if the result is negative and adjust it if necessary\n    if result < 0:\n        result = -result\n    # Convert the result to a string and add a leading zero if necessary\n    result_str = str(result)\n    if len(result_str) == 1:\n        result_str = '0' + result_str\n    # Add the result to the original number\n    result_int = int(n) + int(result_str)\n    # Return the result\n    return result_int"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    max_num = 9 * 9 * 9\n    if n > max_num:\n        return n\n    new_num = 0\n    while n!= 0:\n        new_num = new_num * 10 + n % 10\n        n = n // 10\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Find the index of the digit that is the largest\n    max_digit_index = 0\n    for i in range(1, len(num_str)):\n        if int(num_str[i]) > int(num_str[max_digit_index]):\n            max_digit_index = i\n\n    # Find the index of the digit that is the smallest after the rearrangement\n    min_digit_index = max_digit_index\n    for i in range(max_digit_index, len(num_str)):\n        if int(num_str[i]) < int(num_str[min_digit_index]):\n            min_digit_index = i\n\n    # Swap the digits at the max and min indices\n    num_str[max_digit_index], num_str[min_digit_index] = num_str[min_digit_index], num_str[max_digit_index]\n\n    # Reverse the digits at the max and min indices\n    num_str = num_str[::-1]\n\n    # Convert the number back to an integer\n    next_bigger = int(num_str)\n\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # function to get the digits of a number\n    def get_digits(num):\n        return [int(digit) for digit in str(num)]\n\n    # function to rearrange the digits of a number\n    def rearrange_digits(digits):\n        n = len(digits)\n        for i in range(n):\n            j = i\n            while j < n and digits[j] <= digits[i]:\n                j += 1\n            digits[i], digits[j] = digits[j], digits[i]\n        return ''.join(str(digit) for digit in digits)\n\n    # get the digits of the given number\n    digits = get_digits(n)\n    # get the maximum digit\n    max_digit = max(digits)\n    # find the index of the maximum digit\n    max_index = digits.index(max_digit)\n\n    # rearrange the digits of the next bigger number\n    for i in range(max_index, len(digits)):\n        digits[max_index], digits[i] = digits[i], digits[max_index]\n\n    # convert the rearranged digits back to a number\n    next_bigger = int(''.join(str(digit) for digit in digits))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    The function takes an integer n as input and returns the next bigger number created by rearranging the digits of n.\n\n    For example, if n = 12345, then the function should return 54321, which is the next number in lexicographic order.\n\n    Note: If the input number is already the next biggest number, then the function should return the same number.\n\n    Input:\n    - n: an integer\n\n    Output:\n    - the next bigger number created by rearranging the digits of n\n    '''\n\n    # Convert the given number to a string\n    n_str = str(n)\n\n    # Find the index of the first digit that has a 0\n    i = 0\n    while i < len(n_str) and n_str[i] == '0':\n        i += 1\n\n    # Find the index of the last digit that has a 9\n    j = len(n_str) - 1\n    while j >= 0 and n_str[j] == '9':\n        j -= 1\n\n    # Swap the digits at the first and last indices\n    n_str = n_str[:i] + n_str[j] + n_str[i:j] + n_str[i+1:j] + n_str[j+1:]\n\n    # Convert the string back to an integer\n    n_new = int(n_str)\n\n    # Check if the new number is the next biggest number\n    if n_new == n + 1:\n        return n_str\n    else:\n        return n_new"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # First, find the digits of n\n    digits = [int(d) for d in str(n)]\n    # Reverse the digits\n    digits = digits[::-1]\n    # Find the index of the largest digit\n    max_index = digits.index(max(digits))\n    # Find the corresponding smaller digits (i.e., the digits to the left of the max digit)\n    smaller_digits = [d for d in digits if d < max(digits) and d!= 0]\n    # Find the index of the smallest digit to the left of the max digit\n    left_index = smaller_digits.index(min(smaller_digits))\n    # Combine the digits and put the max digit at the end\n    new_digits = digits[:max_index] + [max(digits)] + digits[left_index:]\n    # Convert the new digits back to a number\n    new_number = int(\"\".join(str(d) for d in new_digits))\n    # Return the new number\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Create a list of digits of the given number\n    digits = [int(d) for d in str(n)]\n    # Rearrange the digits in reverse order\n    digits.reverse()\n    # Convert the list back to a string\n    next_bigger = ''.join([str(d) for d in digits])\n    # Convert the string back to an integer\n    next_bigger = int(next_bigger)\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    def is_valid(num):\n        '''\n        Helper function to check if a number is a valid rearrangement of digits.\n        '''\n        digits = set(str(num))\n        for i in range(1, 10):\n            if i in digits:\n                if str(i) in digits:\n                    return False\n        return True\n\n    def next_bigger(num):\n        '''\n        Helper function to find the next bigger number by rearranging the digits.\n        '''\n        digits = list(str(num))\n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] == '9':\n                digits[i] = '0'\n            else:\n                digits[i] = str(int(digits[i]) + 1)\n                break\n        else:\n            # All digits are already 9 or greater\n            return None\n        return int(''.join(digits))\n\n    while not is_valid(n):\n        n = next_bigger(n)\n        if n is None:\n            return None\n\n    return n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # First, we sort the two arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    # Then, we initialize two heaps, one for each array\n    min_heap1 = []\n    min_heap2 = []\n    \n    # We iterate through the two sorted arrays and add the smallest element to each heap\n    for num1 in nums1:\n        heapq.heappush(min_heap1, num1)\n        heapq.heappush(min_heap2, nums2.pop(0))\n        \n        # If we have found k pairs, we break out of the loop\n        if len(min_heap1) == k:\n            break\n    \n    # We iterate through the two heaps and pop the smallest element from each heap until the two heaps are empty\n    result = []\n    while min_heap1 and min_heap2:\n        pair = (min_heap1[0], min_heap2[0])\n        heapq.heappop(min_heap1)\n        heapq.heappop(min_heap2)\n        result.append(pair)\n        \n        # If we have found k pairs, we break out of the loop\n        if len(min_heap1) == k:\n            break\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1 + num2, (num1, num2)))\n\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Use heapq to maintain the k smallest elements\n    min_heap = []\n    for num in nums1:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n    \n    for num in nums2:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n    \n    # Get the k smallest pairs from the min_heap\n    result = []\n    for i in range(k):\n        pair = (min_heap[0], min_heap[i+1])\n        result.append(pair)\n        min_heap.pop(0)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n    \n    for num1 in nums1:\n        min_heapq.heappush(min_heap, (num1, float('inf')))\n    \n    for num2 in nums2:\n        if min_heap and min_heap[0][0] > num2:\n            min_heapq.heappop(min_heap)\n        \n        if len(result) == k:\n            break\n        \n        min_heapq.heappush(min_heap, (float('inf'), num2))\n        result.append((min_heap[0][0], num2))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pq = [(nums1[0], nums2[0], 0)]\n    heapq.heapify(pq)\n\n    result = []\n    while k > 0 and pq:\n        curr_val, curr_idx1, curr_idx2 = heapq.heappop(pq)\n        k -= 1\n        result.append((curr_val, curr_idx1, curr_idx2))\n\n        if curr_idx1 < len(nums1) - 1:\n            heapq.heappush(pq, (nums1[curr_idx1+1], curr_idx1+1, curr_idx2))\n        if curr_idx2 < len(nums2) - 1:\n            heapq.heappush(pq, (nums1[curr_idx1], curr_idx1, curr_idx2+1))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a heap with the smaller numbers first\n    smaller_heap = []\n    for num in nums1:\n        heapq.heappush(smaller_heap, num)\n    \n    # create a heap with the larger numbers first\n    larger_heap = []\n    for num in nums2:\n        heapq.heappush(larger_heap, num)\n    \n    # create a list to store the pairs\n    pairs = []\n    \n    # loop until we have found k pairs\n    while len(pairs) < k:\n        # if there are no numbers left in the smaller heap, move on to larger heap\n        if not smaller_heap:\n            pairs.append((heapq.heappop(larger_heap), float('inf')))\n            break\n        \n        # if there are no numbers left in the larger heap, move on to smaller heap\n        if not larger_heap:\n            pairs.append((heapq.heappop(smaller_heap), float('inf')))\n            break\n        \n        # if there are numbers left in both heaps, compare the smallest number in the smaller heap with the smallest number in the larger heap\n        smaller_num = heapq.heappop(smaller_heap)\n        larger_num = heapq.heappop(larger_heap)\n        if smaller_num <= larger_num:\n            pairs.append((smaller_num, larger_num))\n            heapq.heappush(larger_heap, smaller_num)\n        else:\n            pairs.append((larger_num, smaller_num))\n            heapq.heappush(smaller_heap, larger_num)\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # sorting both arrays\n    nums1.sort()\n    nums2.sort()\n\n    # using a min heap to store the k smallest pairs\n    min_heap = []\n\n    # initializing the first and second pointers for the two arrays\n    i = j = 0\n\n    while k > 0:\n        # if the second pointer is less than the length of the second array, we have found a pair and we add it to the min heap\n        if j < len(nums2):\n            if nums2[j] + min_heap[0][0] <= nums1[0]:\n                heapq.heappushpop(min_heap, (nums2[j], nums1[0]))\n                k -= 1\n        # if the first pointer is less than the length of the first array, we need to move the first pointer forward\n        if i < len(nums1):\n            i += 1\n        # if the first pointer is at the end of the first array, we need to move the second pointer forward\n        else:\n            j += 1\n\n    # storing the k smallest pairs in a list\n    result = []\n    while min_heap and k > 0:\n        result.append(heapq.heappop(min_heap))\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the smallest k pairs\n    min_heap = []\n    \n    # Iterate through both arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the sum of the current pair and add it to the heap\n            pair_sum = nums1[i] + nums2[j]\n            heapq.heappush(min_heap, pair_sum)\n            \n            # If the size of the heap exceeds k, remove the smallest element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    \n    # Extract the smallest k pairs from the heap and return them\n    result = []\n    while min_heap:\n        result.append((heapq.heappop(min_heap), nums1[i], nums2[j]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function takes in three parameters:\n    - nums1: a list of integers, the first array\n    - nums2: a list of integers, the second array\n    - k: an integer, the number of pairs we want to find\n    \n    This function returns a list of pairs of integers, where each pair is a combination of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap to store the pairs of numbers we are looking for\n    min_heap = []\n    \n    # Loop through each pair of numbers in the first array\n    for num1 in nums1:\n        # Loop through each pair of numbers in the second array\n        for num2 in nums2:\n            # Add the current pair to the min heap\n            heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n            \n            # If the heap has exceeded the size k, remove the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    \n    # Create a list to store the final pairs\n    final_pairs = []\n    \n    # Loop through the min heap and add the pairs to the final list\n    while min_heap:\n        pair_value, pair = heapq.heappop(min_heap)\n        final_pairs.append(pair)\n    \n    return final_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Merge the two sorted arrays into a single sorted array\n    merged_array = sorted(nums1 + nums2)\n    # Initialize a min-heap of size k to store the k smallest elements\n    min_heap = []\n    # Initialize two pointers to start from the left and right ends of the merged array\n    left, right = 0, len(merged_array) - 1\n    # Loop while there are still elements in the min-heap and we have k elements in the result array\n    while len(min_heap) < k and left < right:\n        # If the current element in the merged array is less than the smallest element in the min-heap, pop the smallest element from the min-heap and add it to the result array\n        if merged_array[left] < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, merged_array[left])\n        # Otherwise, pop the current element from the merged array and add it to the result array\n        else:\n            heapq.heappush(min_heap, merged_array[left])\n            left += 1\n    # Return the result array\n    return min_heap"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Create a set of tuples to avoid duplicates\n    tuples = set(tuple(pair) for pair in list1)\n    \n    # Calculate the product of each tuple and store in a dictionary\n    products = {}\n    for pair in tuples:\n        product = pair[0] * pair[1]\n        products[pair] = product\n    \n    # Find the minimum product from the dictionary\n    min_product = float('inf')\n    for pair in products:\n        if products[pair] < min_product:\n            min_product = products[pair]\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables to keep track of the minimum product found so far\n    min_product = float('inf')\n    current_product = 1\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Calculate the product of the current tuple and the rest of the list\n        for j in range(len(list1)):\n            if j!= i:\n                current_product *= list1[j]\n\n        # Update the minimum product if the current product is less than the minimum\n        if current_product < min_product:\n            min_product = current_product\n            # Reset the current product to 1 so we can compare it with the next tuple\n            current_product = 1\n\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    min_product = float('inf')\n    result = []\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                result = [(list1[i][0], list1[j][0]), (list1[i][1], list1[j][1])]\n    \n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        product = list1[i][0] * list1[i][1]\n        if product < minimum:\n            minimum = product\n    return minimum"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize the minimum product and current product\n    min_product = float('inf')\n    current_product = 1\n\n    # Loop through the list of tuples\n    for i, tuple1 in enumerate(list1):\n        # Loop through the list of tuples from the current index\n        for j in range(i+1, len(list1)):\n            # Calculate the current product and check if it's smaller than the minimum product\n            current_product = tuple1[0] * tuple1[1] * list1[j][0] * list1[j][1]\n            if current_product < min_product:\n                min_product = current_product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initializing variables\n    min_product = float('inf')\n    product = 1\n\n    # iterating over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # updating the product with the current tuple\n            product = list1[i][0] * list1[j][1]\n            # updating the minimum product if the current product is less than the minimum\n            if product < min_product:\n                min_product = product\n\n    # returning the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the minimum product of pairs of tuples from the list.\n    '''\n    min_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[j][1]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    if len(list1) < 2:\n        return \"List should contain at least 2 tuples\"\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value as first element in the list\n    min_val = listval[0]\n\n    # Iterate through the rest of the list\n    for i in range(1, len(listval)):\n        # Check if the current element is less than the minimum value\n        if listval[i] < min_val:\n            # Update the minimum value\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the minimum value found in the list.\n    '''\n\n    # initialize minimum value to the first element of the list\n    min_val = listval[0]\n\n    # loop through the rest of the list and compare each element to the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # return the minimum value found in the list\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Check if the list is empty\n    if len(listval) == 0:\n        return \"The list is empty.\"\n\n    # Find the minimum value\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list and returns the minimum value in the list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for num in listval:\n        if num < min_val:\n            min_val = num\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = float('inf')\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in listval:\n            if i < min_val:\n                min_val = i\n        return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    first_letter = word[0].lower()\n    camel_case = first_letter.capitalize() + word[1:].replace('_', '')\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words using the split() method\n    word_list = word.split('_')\n    # Capitalize the first letter of each word in the list using the capitalize() method\n    camel_case_word =''.join(word.capitalize() for word in word_list)\n    # Join the words in the list back together into a single string using the join() method and an empty string as the separator\n    camel_case_string = ''.join(camel_case_word)\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('([a-z])([A-Z])')\n    return pattern.sub(r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub(r'_(\\w)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all the words in the string to lowercase\n    words = word.lower().split('_')\n\n    # Initialize an empty string to store the camel case string\n    camel_case = ''\n\n    # Iterate over the words and convert each to camel case\n    for word in words:\n        # Convert the first letter of each word to uppercase\n        camel_case += word[0].upper()\n\n        # Concatenate the rest of the letters of the word to the camel case string\n        camel_case += word[1:]\n\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # split the word into words separated by underscores\n    words = re.findall(r'(?<=[a-z0-9])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z0-9])', word)\n    # capitalize the first letter of each word\n    camel_case = [word.capitalize() for word in words]\n    # join the words with underscores\n    camel_case = '_'.join(camel_case)\n    # return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # convert the snake case to camel case\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    # capitalize the first letter\n    camel_case = camel_case.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = re.findall(r'[A-Za-z]+', word)\n    # Capitalize the first letter of each word and concatenate them\n    return ''.join(words[0].capitalize() + word[len(words[0])+1:])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into a list of words\n    words = word.split('_')\n    # create a new list to store the camel case words\n    camel_words = []\n    # iterate over the words and convert each to camel case\n    for word in words:\n        if word.isupper():\n            camel_words.append(word)\n        else:\n            camel_words.append(word.capitalize())\n    # join the camel case words into a single string\n    camel_case_word = ''.join(camel_words)\n    # return the camel case word\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i, tup in enumerate(list1):\n        if i == n-1:\n            return tup[1]\n    return \"Element not found\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return list1[0][1]\n    else:\n        return extract_nth_element(list1[1:], n-1)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return 'Invalid index'\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list) or not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Invalid input type. Please provide a valid list and a positive integer as the second argument.\")\n\n    if len(list1) == 0:\n        return None\n\n    for tup in list1:\n        if len(tup)!= 2:\n            raise ValueError(\"All elements in the list must be tuples of length 2.\")\n\n    if n > len(list1):\n        return None\n\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n\n    # check if n is valid\n    if n < 1 or n > len(list1):\n        raise IndexError('n is out of range')\n\n    # extract nth element from list1\n    result = list1[n-1]\n\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1 (list): a list of values\n    list2 (list): a list of values\n\n    Returns:\n    bool: True if there is at least one overlapping value, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    if len(list1) > len(list2):\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                return True\n        return False\n    else:\n        for i in range(len(list2)):\n            if list2[i] in list1:\n                return True\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a set of the first list\n    set1 = set(list1)\n    \n    # Loop through the second list\n    for item in list2:\n        # If the item exists in the first list, return True\n        if item in set1:\n            return True\n    \n    # If no item was found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Check whether any value in the first list exists in the second list\n    for value in list1:\n        if value in list2:\n            return True\n    # If no value in the first list exists in the second list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Use set to remove duplicates from list1\n    list1 = list(set(list1))\n\n    # Iterate through list2\n    for value in list2:\n        # Check if value exists in list1\n        if value in list1:\n            # If value exists, return True\n            return True\n\n    # If no value exists in list1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n        list1 (list): a sequence of values\n        list2 (list): another sequence of values\n\n    Returns:\n        bool: True if any value in list1 exists in list2, False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if there is any value in a sequence that exists in another sequence.\n\n    Parameters:\n    - list1 (list): The first sequence.\n    - list2 (list): The second sequence.\n\n    Returns:\n    - bool: True if there is any value in list1 that exists in list2, False otherwise.\n    \"\"\"\n\n    # Create a set to store values in list1\n    set1 = set(list1)\n\n    # Loop through each value in list2 and check if it exists in set1\n    for value in list2:\n        if value in set1:\n            return True\n\n    # If no values exist in list2 that exist in list1, return False\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a pair with the highest product.\n    '''\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n    min_product = float('inf')\n    min_pair = (-1, -1)\n\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_pair = (arr[i], arr[i])\n        elif arr[i] > min_product:\n            min_product = arr[i]\n            min_pair = (arr[i], max_pair[0])\n        else:\n            max_pair = (max_pair[0], arr[i])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Create a list to store the products of adjacent elements\n    products = []\n    for i in range(len(arr)):\n        # Check if there are enough elements to calculate the products\n        if i >= 2:\n            products.append(arr[i-1] * arr[i])\n        else:\n            products.append(arr[i])\n\n    # Find the maximum product\n    max_product = max(products)\n\n    # Initialize variables for finding the pair with highest product\n    max_pair = (-1, -1)\n    product = 0\n    index = 0\n\n    # Iterate over the elements and find the pair with highest product\n    for i in range(len(arr)):\n        # Calculate the product of the current element and the pair with maximum product\n        product = arr[i] * max_pair[0]\n\n        # Update the pair with maximum product if the product is greater than the current pair\n        if product > max_pair[1]:\n            max_pair[0] = arr[i]\n            max_pair[1] = product\n            index = i\n\n    return max_pair, index"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    # Initialize variables to store the maximum and minimum product seen so far\n    max_product = float('-inf')\n    min_product = float('inf')\n    max_pair = None\n    min_pair = None\n\n    # Iterate through the array and update the maximum and minimum products\n    for i in range(len(arr)):\n        if arr[i] * max_product < 0:\n            # Update the maximum product if the current element multiplied with the current maximum product results in a negative number\n            max_product = min_product\n            min_product = arr[i]\n            max_pair = min_pair\n        elif arr[i] * min_product > 0:\n            # Update the minimum product if the current element multiplied with the current minimum product results in a positive number\n            min_product = max_product\n            max_product = arr[i]\n            min_pair = max_pair\n        else:\n            # Update the current product if the current element is equal to the current product\n            max_product = min_product = arr[i]\n\n    # Return the pair with the highest product\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize two variables to store the maximum product and the two numbers with the maximum product\n    max_product = arr[0] * arr[1]\n    max_num1 = max_num2 = arr[0]\n\n    # Loop through the array and update the maximum product and the two numbers with the maximum product\n    for i in range(2, len(arr)):\n        if arr[i] * arr[i-1] > max_product:\n            max_product = arr[i] * arr[i-1]\n            max_num1 = arr[i]\n            max_num2 = arr[i-1]\n        elif arr[i] * arr[i-1] < max_product:\n            max_product = arr[i] * arr[i-1]\n            max_num1 = arr[i-1]\n            max_num2 = arr[i]\n\n    # Return the pair with the maximum product\n    return (max_num1, max_num2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_pair = (-float('inf'), -float('inf'))  # initialize max pair\n    max_product = arr[0] * arr[1]  # initialize max product\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    return max1*max2, min1*min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max1:\n                max1 = arr[i]*arr[j]\n                max2 = arr[i]\n            elif arr[i]*arr[j] > max2:\n                max2 = arr[i]*arr[j]\n                max1 = arr[j]\n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Given an array of integers, find a pair with the highest product.\n    Return a tuple containing the pair's indices and their product.\n    \"\"\"\n    # Initialize the maximum product to the first element\n    max_product = arr[0]\n\n    # Initialize the indices of the maximum product pair\n    max_pair = (0, 0)\n\n    # Loop through the rest of the array\n    for i in range(1, len(arr)):\n        # Check if the current element is greater than the maximum product\n        if arr[i] > max_product:\n            # If it is, update the maximum product and its indices\n            max_product = arr[i]\n            max_pair = (i, arr[i])\n\n        # Check if the current element is greater than the product of the current element and the maximum product\n        elif arr[i] > max_product * arr[max_pair[0]]:\n            # If it is, update the maximum product and its indices\n            max_product = arr[i]\n            max_pair = (i, arr[i])\n\n    # Return the pair's indices and their product\n    return max_pair, max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    max_product = float('-inf')\n    max_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize variables\n    max1 = arr[0]\n    max2 = 0\n    min1 = arr[0]\n    min2 = 0\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Check if the current number is greater than the current maximum\n        if arr[i] > max1:\n            # Update maximum values\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            # Update maximum values\n            max2 = arr[i]\n        # Check if the current number is less than the current minimum\n        if arr[i] < min1:\n            # Update minimum values\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            # Update minimum values\n            min2 = arr[i]\n\n    # Return the pair with the highest product\n    return (max1, max2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        else:\n            if tup[0] == common_element:\n                common_element = None\n                break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_First = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                if i not in Common_First:\n                    Common_First.append(i)\n    return Common_First"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for tuple in Input:\n        if common_first_element is None:\n            common_first_element = tuple[0]\n        elif tuple[0] == common_first_element:\n            common_first_element = None\n            break\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)): \n        if i == 0: \n            common_elements.append(Input[i][0]) \n        else: \n            if Input[i][0] in common_elements: \n                if Input[i][1] in common_elements: \n                    common_elements.append((Input[i][0], Input[i][1])) \n            else: \n                common_elements.append(Input[i][0]) \n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    common_tuple = None\n\n    for item in Input:\n        if common_tuple == None:\n            common_tuple = item\n        else:\n            if item[0] == common_tuple[0]:\n                common_tuple = item\n                break\n\n    return common_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a dictionary of tuples where the keys are the common first element of the tuples and the values are the number of times the element occurs in the list.\n    '''\n    count = {}\n    for i in Input:\n        if i[0] in count:\n            count[i[0]] += 1\n        else:\n            count[i[0]] = 1\n    return count"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element is None:\n            common_element = i[0]\n        else:\n            if common_element == i[0]:\n                return common_element\n            else:\n                return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for item in Input:\n        if item[0] not in common_first_element:\n            common_first_element.append(item[0])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        first_element = Input[i][0]\n        if first_element in common_elements:\n            common_elements.remove(first_element)\n        else:\n            common_elements.append(first_element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Define an empty dictionary\n    common_dict = {}\n\n    # Loop through each tuple in the input list\n    for tup in Input:\n        # Get the first element of the tuple\n        elem = tup[0]\n\n        # Check if the first element is already in the dictionary\n        if elem in common_dict:\n            # If it is, add the second element of the tuple to the list of elements for that first element\n            common_dict[elem].append(tup[1])\n        else:\n            # If it is not, create a new list with the second element of the tuple\n            common_dict[elem] = [tup[1]]\n\n    # Create an empty list to hold the common elements\n    common_list = []\n\n    # Loop through each key in the dictionary\n    for key in common_dict:\n        # Loop through each element in the list of elements for that key\n        for elem in common_dict[key]:\n            # Add each common element to the common_list\n            common_list.append(elem)\n\n    # Return the common_list\n    return common_list"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element with maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    \n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list with maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_elem = lst[i]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = \"\" \n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    # Round every number in the list\n    rounded_list = [round(num) for num in list1]\n    \n    # Calculate the total sum\n    total_sum = sum(rounded_list)\n    \n    # Print the result\n    print(total_sum * len(rounded_list))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    length = len(list1)\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    total_sum *= len(lst)\n    return total_sum"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round all the numbers in the list and store them in a new list\n    rounded_list = [round(num) for num in list1]\n\n    # Calculate the total sum of the rounded list\n    total_sum = sum(rounded_list)\n\n    # Calculate the length of the rounded list\n    length = len(rounded_list)\n\n    # Print the total sum multiplied by the length of the rounded list\n    print(total_sum * length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum_multiplied_by_len = total_sum * len(list1)\n    print(total_sum_multiplied_by_len)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initializing sum and count variables\n    sum = 0\n    count = 0\n    \n    # iterating through even natural numbers from 2 to n\n    for i in range(2, n+1, 2):\n        # calculating the cube of the even natural number\n        cube = i**3\n        \n        # adding the cube to the sum and incrementing the count\n        sum += cube\n        count += 1\n        \n    # returning the sum of cubes\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing sum to 0\n    cube_sum = 0\n    # iterating through first n even natural numbers\n    for i in range(n+1):\n        if i % 2 == 0 and i**3 % 2 == 0:\n            cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n\n    # initializing sum variable to zero\n    sum_cube = 0\n\n    # iterating till n even natural numbers\n    for i in range(2, n, 2):\n        # calculating cube of i\n        cube = i ** 3\n\n        # adding the cube to the sum variable\n        sum_cube += cube\n\n    return sum_cube\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize a variable to store the sum of cubes of even natural numbers\n    cube_sum = 0\n    # loop through the first n even natural numbers and calculate the cube of each number\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    # return the final sum of cubes\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize sum variable to zero\n    sum = 0\n    # Iterate through first n even natural numbers\n    for i in range(2,n+1,2):\n        # Calculate the cube of the current even natural number\n        c = i*i*i\n        # Add the cube to the sum variable\n        sum += c\n    # Return the sum variable\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    i = 2\n    while i <= n:\n        sum_of_cubes += i**3\n        i += 2\n    return sum_of_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(elem) + delimiter for elem in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '|'\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = ''\n    for element in test_tup:\n        result += str(element)\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + \" \"\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple as input and returns a concatenated string of elements separated by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function takes a tuple as input and concatenates each element of the tuple by the specified delimiter.\n    '''\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i*i*i  \n    average = sum / (n*n*n)  \n    return average  \n  \nn = int(input(\"Enter a value of n: \"))  \nresult = find_Average_Of_Cube(n)  \nprint(\"The average of cubes of the first\", n, \"natural numbers is:\", result)  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    average_of_cubes = sum_of_cubes / count\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # initialize the sum and count of cubes as 0\n    sum_cubes = 0\n    count_cubes = 0\n    \n    # iterate through the first n natural numbers\n    for i in range(1, n+1):\n        \n        # calculate the cube of the current number and add it to the sum of cubes\n        sum_cubes += i**3\n        \n        # increment the count of cubes\n        count_cubes += 1\n        \n    # calculate the average of cubes and return it\n    return sum_cubes/count_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n\n    # initialize sum and count variables to 0\n    sum_cube = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n\n        # calculate the cube of the current natural number\n        cube = i**3\n\n        # add the cube to the sum and increment the count\n        sum_cube += cube\n        count += 1\n\n    # calculate the average of cubes by dividing the sum by the count\n    average_cube = sum_cube / count\n\n    # return the average of cubes\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize variables\n    sum = 0\n    count = 0\n\n    # Calculate the cube of each natural number and add it to the sum and count variables\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum += cube\n        count += 1\n\n    # Find the average of cubes by dividing the sum by count\n    average = sum / count\n\n    # Return the average of cubes\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    \n    return sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum += i ** 3\n        count += 1\n\n    average = sum / count\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for item in test_tuple:\n        try:\n            rear_index.append(item[-1])\n        except IndexError:\n            print(\"The string is empty or has no trailing characters.\")\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        if isinstance(item, str):\n            rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i in range(len(test_tuple)):\n        rear_index_list.append(test_tuple[i][-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string_index in range(len(test_tuple)):\n        rear_index_elements.append(test_tuple[string_index][-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n            \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n\n    Parameters:\n    nums: a list of integers\n\n    Returns:\n    a list of odd numbers from the input list\n    \"\"\"\n\n    # Create an empty list to store the odd numbers\n    odd_nums = []\n\n    # Loop through each number in the input list\n    for num in nums:\n        # If the number is odd, append it to the odd_nums list\n        if num % 2!= 0:\n            odd_nums.append(num)\n\n    # Return the list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use regular expressions to extract the year, month, and day from the date string\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n\n    # Extract the year, month, and day from the match object\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n\n    # Convert the year, month, and day to the desired date format\n    new_format = day + '-' + month + '-' + year\n    return new_format\n"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.sub(r'[^\\d]', '', dt)\n    mm_dd_yyyy = yyyy_mm_dd.split('-')\n    day = mm_dd_yyyy[2]\n    month = mm_dd_yyyy[1]\n    year = mm_dd_yyyy[0]\n    return '{}-{}-{}'.format(day, month, year)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    new_format = r'\\d{2}-\\d{2}-\\d{4}'\n    return re.sub(pattern, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Search the pattern in the input string\n    match = re.search(pattern, dt)\n    # Check if the match object is not None\n    if match:\n        # Convert the match object to a tuple\n        match_tuple = tuple(int(i) for i in match.groups())\n        # Convert the tuple to a date object\n        new_date = datetime.datetime(*match_tuple)\n        # Format the date object to dd-mm-yyyy format\n        new_dt = new_date.strftime('%d-%m-%Y')\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace '-' with '/' for the date format\n    new_dt = re.sub(r'[-]', '/', dt)\n    # Split the date into year, month, and day components\n    year, month, day = new_dt.split('/')\n    # Convert the year component to a 4-digit string\n    year = str(int(year))\n    # Add the century if needed\n    if len(year) == 2:\n        year = '20' + year\n    # Concatenate the new year and day components into a new date string\n    new_dt = day + '-' + month + '-' + year\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regex pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Search for the pattern in the date string\n    match = re.search(pattern, dt)\n    \n    # If the pattern is found, extract the components and format them accordingly\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_regex = r'\\d{4}-\\d{2}-\\d{2}'\n    return re.sub(dt_regex, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the format of the date\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    # Use the re.match() function to check if the string matches the pattern\n    if re.match(pattern, dt):\n        # Split the date into year, month, and day components\n        year, month, day = [int(x) for x in dt.split('-')]\n        # Reverse the order of the month and day components\n        month, day = day, month\n        # Convert the date components back to strings\n        new_date = f'{day}-{month}-{year}'\n        # Return the new date in the desired format\n        return new_date\n    else:\n        # If the date does not match the pattern, return the original date as it is\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace hyphens with slashes in the date string\n    dt = re.sub('-', '/', dt)\n    # Split the date string into year, month, and day components\n    year, month, day = dt.split('/')\n    # Convert the year to an integer and add a century to ensure a 4-digit year\n    year = int(year) + 100\n    # Format the date string with the new format\n    new_dt = f'{day}-{month}-{year}'\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Replace the first three groups of the pattern with the corresponding replacement string\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Find the length of the array\n    n = len(my_list)\n    \n    # Set a gap value for the array\n    gap = n // 2\n    \n    # While gap is greater than 0\n    while gap > 0:\n        \n        # Perform insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        \n        # Decrease gap value\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n\n    Parameters:\n    my_list (list): A list of integers to be sorted.\n\n    Returns:\n    list: A sorted version of the input array.\n    \"\"\"\n\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Calculate the maximum element in the array\n    max_element = max(my_list)\n\n    # Calculate the number of passes required to sort the array\n    n = len(my_list)\n    passes = 0\n    while max_element > 1:\n        max_element = max_element // 2\n        passes += 1\n\n    # Perform the shell sort n times\n    for i in range(passes):\n        gap = n // (2 ** i)\n        for j in range(gap, n):\n            temp = my_list[j]\n            k = j\n            while k > gap - 1 and my_list[k - gap] > temp:\n                my_list[k] = my_list[k - gap]\n                k -= gap\n            my_list[k] = temp\n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n\n    The shell sort algorithm works by applying a simple insertion sort to sub-arrays of\n    the array, where the gap between the elements in each sub-array is constant. The\n    gap is determined by the previous gap divided by 3, and the array is divided into\n    n sub-arrays, where n is the length of the array. Each sub-array is sorted by a\n    simple insertion sort.\n\n    Parameters:\n    my_list (list): the array to be sorted.\n\n    Returns:\n    None: sorts the given array in place using the shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Find the largest power of 2 smaller than or equal to n\n    power = 1\n    while power < n:\n        power = 3 * power + 1\n\n    # Sort the list using the shell sort algorithm\n    while power > 0:\n        gap = power // 3\n        # Move the gap positions ahead\n        for i in range(gap, n):\n            # Insert the current element at its correct position\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n        # Decrease the gap\n        power //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same number of elements.')\n    # Initialize the output list with zeros\n    and_tup = [0] * len(test_tup1)\n    # Extract the elementwise and tuples from the input tuples\n    for i in range(len(test_tup1)):\n        and_tup[i] = test_tup1[i] & test_tup2[i]\n    # Return the output list of and tuples\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n        \n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    # loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # extract the elements from the two tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        # perform the elementwise and operation\n        result_tup += (tup1_elem & tup2_elem,)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    # create an empty list to store the elementwise and tuples\n    and_tup = []\n\n    # loop through the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # check if the element at the current index is a tuple\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            # loop through the elements of the two tuples\n            for j in range(len(test_tup1[i])):\n                # check if the element at the current index is a tuple\n                if isinstance(test_tup1[i][j], tuple) and isinstance(test_tup2[i][j], tuple):\n                    # if both elements are tuples, recursively call the function and append the result to the and_tup list\n                    and_tup.append(and_tuples(test_tup1[i][j], test_tup2[i][j]))\n                # if one of the elements is a tuple but not the other, raise a ValueError\n                else:\n                    raise ValueError(\"Both elements must be tuples.\")\n        # if one of the elements is not a tuple, raise a ValueError\n        else:\n            raise ValueError(\"Both elements must be tuples.\")\n\n    # return the elementwise and tuples\n    return tuple(and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(zip(test_tup1, test_tup2, test_tup1 & test_tup2))\n    else:\n        raise ValueError(\"The two tuples must have the same length.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x1 = (-b)/(2*a)\n        return x1\n    else:\n        return \"No real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4*a*c < 0: \n        return \"The directrix doesn't exist.\"\n    else: \n        x = (-b + ((b**2 - 4*a*c)**0.5))/(2*a)\n        return \"The directrix is at x = {:.2f}\".format(x)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function finds the directrix of a parabola using the \n    quadratic formula.\n    '''\n\n    delta = b**2 - 4*a*c\n\n    if delta < 0:\n        print(\"The parabola has no real roots.\")\n    else:\n        x1 = (-b + delta**(1/2))/(2*a)\n        x2 = (-b - delta**(1/2))/(2*a)\n\n        print(\"The directrix of the parabola is x =\", x1, \"or x =\", x2, \"depending on which root is closer to the origin.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Use the quadratic formula to find the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the real part of the directrix\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n\n        # Check if the real part is greater than or less than the imaginary part\n        if x1 > x2:\n            # Sort the two directrix values\n            x1, x2 = sorted([x1, x2])\n\n            # Return the average of the two values\n            return (x1 + x2)/2\n        else:\n            # Return the first directrix value\n            return x1\n\n    elif discriminant == 0:\n        # The directrix lies in the line y=ax^2 + bx + c\n        x1 = -b/(2*a)\n\n        # Return the directrix value\n        return x1\n\n    else:\n        # The directrix lies outside the line y=ax^2 + bx + c\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    else:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function takes three values for the equation of a parabola: a, b, and c.\n    It finds the directrix of the parabola and returns it as the output.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        return -b / (2*a)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    det = b**2 - 4*a*c\n    root1 = (-b + det**0.5)/(2*a)\n    root2 = (-b - det**0.5)/(2*a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # check if the discriminant is greater than 0\n    if discriminant > 0: \n        # calculate the root of the discriminant\n        root = (-b + math.sqrt(discriminant))/(2*a)\n\n        # print the directrix\n        print(\"The directrix of the parabola is:\", root)\n\n    # check if the discriminant is equal to 0\n    elif discriminant == 0: \n        # calculate the root of the discriminant\n        root = -b/(2*a)\n\n        # print the directrix\n        print(\"The directrix of the parabola is:\", root)\n\n    # check if the discriminant is less than 0\n    else: \n        # print an error message\n        print(\"The parabola has no real root(s).\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    This function takes three parameters, a, b, and c, representing the coefficients of the equation of a parabola.\n    The function returns the directrix of the parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is non-negative, then the directrix is unique\n    if discriminant >= 0:\n        directrix = (-b + math.sqrt(discriminant)) / (2*a)\n        return directrix\n    # If the discriminant is negative, then there are two distinct directrixes\n    elif discriminant < 0:\n        directrix1 = (-b + math.sqrt(discriminant)) / (2*a)\n        directrix2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return directrix1, directrix2\n    # If the discriminant is zero, then the directrix is the root of the quadratic equation\n    else:\n        return math.sqrt(-b/a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # check if the parabola is vertical\n    if disc == 0:\n        return -b / (2*a)\n\n    # check if the parabola is horizontal\n    elif disc > 0:\n        return (-b - disc**0.5) / (2*a)\n\n    # parabola is degenerate, no real root\n    else:\n        return \"parabola is degenerate, no real root\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of list1 elements\n    set1 = set(list1)\n    # iterate over list2 and check if any element is in set1\n    for element in list2:\n        if element in set1:\n            return True\n    # if we got to here, there was no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # convert the lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n\n    # check if there is at least one common element\n    return any(list1 & list2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from each list and find the intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    common_set = set1.intersection(set2)\n\n    # Return True if there is at least one element in the intersection set, else False\n    return bool(common_set)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Using set() to remove duplicate elements from both lists\n    list1_unique = list(set(list1))\n    list2_unique = list(set(list2))\n    \n    # Checking if there is any common element between the two lists\n    for element in list1_unique:\n        if element in list2_unique:\n            return True\n    \n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # create a set of list1\n    set1 = set(list1)\n\n    # iterate over list2 and check if each element is in set1\n    for element in list2:\n        if element in set1:\n            return True\n\n    # if we reach here, no common element was found\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the height of the trapezium\n    trapezium_height = height\n\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) / 2\n\n    # Calculate the length of the lower half of the trapezium\n    lower_half_length = trapezium_length / 2\n\n    # Calculate the length of the upper half of the trapezium\n    upper_half_length = trapezium_length - lower_half_length\n\n    # Calculate the sum of the areas of the two triangles\n    area1 = (base1 / 2) * height\n    area2 = (base2 / 2) * height\n\n    # Calculate the area of the trapezium using the formula: area = (base1 + base2) * height / 2\n    area_trapezium = (base1 + base2) * height / 2\n\n    # Calculate the median area of the trapezium\n    median_area = (area1 + area2) / 2\n\n    # Calculate the length of the lower and upper halves of the trapezium\n    lower_half_length = area_trapezium / 2\n    upper_half_length = area_trapezium - lower_half_length\n\n    # Check if the median area is greater than the trapezium area\n    if median_area > area_trapezium:\n        # If it is, calculate the length of the third half of the trapezium\n        third_half_length = area_trapezium - upper_half_length - lower_half_length\n\n        # Return the median length of the trapezium\n        return trapezium_length\n    else:\n        # If it's not, calculate the length of the third half of the trapezium\n        third_half_length = area_trapezium - upper_half_length\n\n        # Return the median length of the trapezium\n        return third_half_length\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the lengths of the two equal sides of the trapezium\n    s1 = base1 + base2\n    s2 = height\n\n    # Calculate the length of the third side of the trapezium\n    s3 = s1 + s2\n\n    # Calculate the area of the trapezium\n    a = (s1 + s2) * height / 2\n\n    # Calculate the semi-perimeter of the trapezium\n    sp = (s1 + s2 + s3) / 2\n\n    # Calculate the area of the parallelogram formed by the base1 and s1 sides\n    area1 = s1 * height / 2\n\n    # Calculate the area of the parallelogram formed by the base2 and s2 sides\n    area2 = s2 * height / 2\n\n    # Calculate the area of the parallelogram formed by the s3 and s1 sides\n    area3 = s3 * height / 2\n\n    # Calculate the area of the trapezium formed by the base1, base2, and height sides\n    area_trapezium = (area1 + area2 + area3) / 2\n\n    # Calculate the area of the trapezium formed by the s1 and s2 sides\n    area_trapezium_s1_s2 = area1 - area3\n\n    # Calculate the area of the trapezium formed by the s2 and s3 sides\n    area_trapezium_s2_s3 = area2 - area3\n\n    # Calculate the area of the trapezium formed by the s1 and height sides\n    area_trapezium_s1_height = area1 + area2 + area3 - area_trapezium\n\n    # Calculate the area of the trapezium formed by the base1, s1, and height sides\n    area_trapezium_base1_s1_height = area1 - area3 + area_trapezium_s1_height\n\n    # Calculate the area of the trapezium formed by the s1, s2, and height sides\n    area_trapezium_s1_s2_height = area1 + area2 - area3 + area_trapezium_s1_s2 - area_trapezium_s1_height\n\n    # Calculate the area of the trapezium formed by the base2, s2, and height sides\n    area_trapezium_base2_s2_height = area2 - area3 + area_trapezium_s2_height\n\n    # Calculate the area of the trapezium formed by the s2, s3, and height sides\n    area_trapezium_s2_s3_height = area2 + area3 - area3 + area_trapezium_s2_s3 - area_trapezium_s2_height\n\n    # Calculate the area of the trapezium formed by the base1, base2, and height sides\n    area_trapezium_base1_base2_height = area1 + area2 - area3 + area_trapezium_base1_s1_height + area_trapezium_base2_s2_height\n\n    # Calculate the area of the trapezium formed by the s1, s2, and height sides\n    area_trapezium_s1_s2_s3_height = area1 + area2 + area3 - area_trapezium_s1_s2 - area_trapezium_s1_s2_height + area_trapezium_s2_s3 - area_trapezium_s2_s3_height - area_trapezium_base1_base2_height\n\n    # Calculate the total area of the trapezium formed by the three sides\n    total_area = area_trapezium + area_trapezium_s1_s2 + area_trapezium_s2_s3 + area_trapezium_s1_height + area_trapezium_base1_s1_height + area_trapezium_s1_s2_height + area_trapezium_base2_s2_height + area_trapezium_s2_s3_height + area_trapezium_base1_base2_height + area_trape"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the areas of the trapezium using the formula: \n    # A = (b1 + b2) / 2 * h\n    # b1 and b2 are the bases of the trapezium, h is its height\n    area1 = (base1 + base2) / 2 * height\n    area2 = (base2 + base1) / 2 * height\n\n    # Calculate the length of each side of the trapezium using the formula:\n    # l = sqrt(h^2 - A^2)\n    # h^2 - A^2 is the area of the trapezium less the area of the base\n    # h^2 is the square of the height, and A^2 is the square of the area of the base\n    # the square root of h^2 - A^2 is the length of the smaller side of the trapezium\n    # the length of the larger side is equal to the length of the smaller side\n    side1 = math.sqrt(height**2 - area1**2)\n    side2 = side1\n\n    # Combine the lengths of the two sides to find the length of the trapezium\n    trapezium_length = side1 + side2\n\n    # Find the median length of the trapezium using the formula:\n    # m = (l1 + l2) / 2\n    # l1 and l2 are the lengths of the two sides of the trapezium\n    median_length = (side1 + side2) / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    half_height = height / 2\n    base1_short = base1 / 2\n    base2_short = base2 / 2\n    sum_1 = base1_short + base2_short\n    sum_2 = base1 + base2\n\n    return min(sum_1, sum_2) - max(sum_1, sum_2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the lengths of the two half-trapeziums\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n\n    # Calculate the lengths of the three semi-perimeters\n    semi_perimeter1 = 2 * half_base1\n    semi_perimeter2 = 2 * half_base2\n\n    # Calculate the lengths of the two equal-width trapeziums\n    equal_width1 = half_base1 + half_base2\n    equal_width2 = half_base1 - half_base2\n\n    # Find the two larger semi-perimeters\n    larger_semi_perimeter1 = max(semi_perimeter1, semi_perimeter2)\n    larger_semi_perimeter2 = min(semi_perimeter1, semi_perimeter2)\n\n    # Calculate the area of the larger semi-perimeter\n    larger_semi_area = 0.5 * larger_semi_perimeter1 * (larger_semi_perimeter2 + larger_semi_perimeter1)\n\n    # Calculate the area of the smaller semi-perimeter\n    smaller_semi_area = 0.5 * half_base1 * half_base2\n\n    # Calculate the difference between the two areas\n    area_difference = abs(area - larger_semi_area - smaller_semi_area)\n\n    # Calculate the height of the trapezium above the area difference\n    above_height = area_difference / 2\n\n    # Calculate the median height of the trapezium\n    median_height = height + above_height\n\n    # Calculate the lengths of the two trapeziums above the area difference\n    above_base1 = half_base1 - above_height\n    above_base2 = half_base2 - above_height\n\n    # Calculate the median length of the above-the-area trapezium\n    median_above_base1 = 0.5 * above_base1 * median_height + 0.5 * half_base1 * above_height\n    median_above_base2 = 0.5 * above_base2 * median_height + 0.5 * half_base2 * above_height\n\n    # Calculate the median length of the larger semi-trapezium\n    median_larger_semi = 0.5 * half_base1 * (larger_semi_perimeter1 + above_height) + 0.5 * half_base2 * (larger_semi_perimeter2 + above_height)\n\n    # Return the median length of the trapezium\n    return max(median_above_base1, median_above_base2, median_larger_semi)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of the base of the first half of the trapezium\n    half_base1 = (base1 + base2) / 2\n\n    # Calculate the length of the base of the second half of the trapezium\n    half_base2 = (base1 + base2) / 2\n\n    # Calculate the length of the trapezium itself\n    trapezium_length = height / 2\n\n    # Calculate the length of the third half of the trapezium\n    half_trapezium = (base1 + base2 + height) / 2\n\n    # If the length of the trapezium is less than half the length of the third half,\n    # the trapezium is too tall to be considered a trapezium\n    if trapezium_length < half_trapezium:\n        return \"The trapezium is too tall to be considered a trapezium.\"\n\n    # If the length of the base of the first half of the trapezium is greater than\n    # half of the length of the trapezium, the first half of the trapezium is too wide\n    if half_base1 > half_trapezium:\n        return \"The first half of the trapezium is too wide.\"\n\n    # If the length of the base of the second half of the trapezium is greater than\n    # half of the length of the trapezium, the second half of the trapezium is too wide\n    if half_base2 > half_trapezium:\n        return \"The second half of the trapezium is too wide.\"\n\n    # If the length of the trapezium is equal to half of the length of the third half,\n    # the trapezium has a median length of the third half\n    if trapezium_length == half_trapezium:\n        return f\"The median length of the trapezium is {half_trapezium}.\"\n\n    # If none of the above conditions are met, the trapezium has a median length of the second half of the first base\n    if half_base1 > half_trapezium and half_base2 < half_trapezium:\n        return f\"The median length of the trapezium is {half_base2}.\"\n\n    # If none of the above conditions are met, the trapezium has a median length of the first half of the second base\n    if half_base2 > half_trapezium and half_base1 < half_trapezium:\n        return f\"The median length of the trapezium is {half_base1}.\"\n\n    # If none of the above conditions are met, the trapezium has a median length of the third half of the trapezium\n    return f\"The median length of the trapezium is {half_trapezium}.\""
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 + 0.5 * height * base2\n    # Calculate the area of the left half of the trapezium\n    area_left = 0.5 * base1 * (base1 + base2)\n    # Calculate the area of the right half of the trapezium\n    area_right = 0.5 * base2 * (base1 + base2)\n    # Calculate the height of the trapezium\n    height_trapezium = math.sqrt(area_left + area_right - area)\n    # Calculate the length of the left half of the trapezium\n    length_left = 0.5 * height * area_left / base1\n    # Calculate the length of the right half of the trapezium\n    length_right = 0.5 * height * area_right / base2\n    # Return the median length of the trapezium\n    return max(length_left, length_right)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    #Calculate the area of the trapezium\n    area = 0.5*(base1+base2)*(height+base2)\n\n    #Calculate the length of the base of the trapezium\n    base_length = 0.5*(base1+base2)\n\n    #Calculate the length of the height of the trapezium\n    height_length = height\n\n    #Calculate the length of the base and height of the trapezium\n    trapezium_length = base_length + height_length\n\n    #Calculate the midpoint of the base and height of the trapezium\n    midpoint = trapezium_length/2\n\n    #Calculate the area of the base of the trapezium\n    base_area = 0.5*base_length*base_length\n\n    #Calculate the area of the height of the trapezium\n    height_area = height_length*height_length\n\n    #Calculate the total area of the trapezium\n    total_area = area + base_area + height_area\n\n    #Calculate the midpoint of the total area of the trapezium\n    midpoint_total = total_area/2\n\n    #Calculate the area of the base of the total area of the trapezium\n    base_total_area = midpoint_total - total_area\n\n    #Calculate the area of the total area of the trapezium\n    total_area_area = 0.5*midpoint_total*midpoint_total\n\n    #Calculate the difference between the base area and the area of the base of the total area of the trapezium\n    base_diff = abs(base_area-base_total_area)\n\n    #Calculate the difference between the total area area and the area of the total area of the trapezium\n    total_diff = abs(total_area_area-total_area)\n\n    #If the difference between the base area and the area of the base of the total area of the trapezium is greater than the difference between the total area area and the area of the total area of the trapezium, the median is in the lower half of the trapezium. Otherwise, it's in the upper half of the trapezium.\n    if base_diff > total_diff:\n        median = trapezium_length - base_length\n    else:\n        median = base_length + height_length\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5*base1*base2 + 0.5*base2*height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the length of the shorter side\n    shorter_side = min(base1,base2)\n\n    # Calculate the length of the longer side\n    longer_side = max(base1,base2)\n\n    # Calculate the length of the trapezium\n    trapezium_length = 2*shorter_side + 2*longer_side\n\n    # Calculate the difference between the area and the perimeter\n    diff = abs(area - perimeter)\n\n    # Check if the trapezium is a square or a rectangle\n    if diff < 1e-6:\n        return trapezium_length\n    else:\n        # Calculate the length of the shorter side using the Pythagorean theorem\n        shorter_side = sqrt(shorter_side**2 + height**2)\n\n        # Calculate the length of the longer side using the Pythagorean theorem\n        longer_side = sqrt(longer_side**2 + height**2)\n\n        # Calculate the length of the trapezium using the Pythagorean theorem\n        trapezium_length = 2*shorter_side + 2*longer_side\n\n        # Calculate the area of the trapezium using the Pythagorean theorem\n        area = 0.5*trapezium_length**2 + 0.5*height**2\n\n        # Check if the area is a perfect square\n        if area**2 == diff:\n            return trapezium_length\n        else:\n            # Calculate the difference between the area and the perimeter\n            diff = abs(area - perimeter)\n\n            # Calculate the length of the shorter side using the Pythagorean theorem\n            shorter_side = sqrt(shorter_side**2 + height**2)\n\n            # Calculate the length of the longer side using the Pythagorean theorem\n            longer_side = sqrt(longer_side**2 + height**2)\n\n            # Calculate the length of the trapezium using the Pythagorean theorem\n            trapezium_length = 2*shorter_side + 2*longer_side\n\n            # Calculate the area of the trapezium using the Pythagorean theorem\n            area = 0.5*trapezium_length**2 + 0.5*height**2\n\n            # Check if the area is a perfect square\n            if area**2 == diff:\n                return trapezium_length\n            else:\n                return None"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    This function finds the median length of a trapezium using the trapezoidal rule.\n    '''\n    area = (base1 + base2) * height / 2\n    trap_base = math.sqrt(area)\n    \n    return (2 * trap_base * height) / (base1 + base2)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(f\"{number} is greater than {element}\")\n            return True\n    print(f\"{number} is not greater than any element of the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = False\n    \n    for element in arr:\n        if element > number:\n            greater_than = True\n            break\n    \n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\b[b]*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a\\w*b')\n    return pattern.search(text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba.*\\bb\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_one(text)) # Output: ['brown']"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    # Extract the last digit from the number using string slicing.\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # take the last digit of the number\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the given number to string\n    num_str = str(n)\n    # get the length of the string\n    length = len(num_str)\n    # return the last digit of the string\n    return int(num_str[length-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a new list of negative numbers.\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for i in list1:\n        if i < 0:\n            neg_num.append(i)\n    return neg_num"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for char in str1:\n        if int(char) % 2 == 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for c in str1 if c.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(filter(str.isalpha, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the odd characters removed.\n    \"\"\"\n    new_str = \"\"\n    for char in string:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create an empty string to store the even characters\n    even_chars = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, add it to the even_chars string\n        if char % 2 == 1:\n            even_chars += char\n    # Return the even_chars string\n    return even_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] % 2!= 0:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = []\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(string):\n    '''\n    This function takes a string as input and removes all the odd characters from it.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isdigit():\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if ord(char) % 2!= 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Create an empty dictionary to store the count of bidirectional pairs\n    count_dict = {}\n    # Loop through the list of tuples\n    for pair in test_list:\n        # If the pair is already in the dictionary, increment its count by 1\n        if (pair[1], pair[0]) in count_dict:\n            count_dict[(pair[1], pair[0])] += 1\n        # If the pair is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[(pair[1], pair[0])] = 1\n    # Loop through the dictionary and return the count of bidirectional pairs\n    for key in count_dict:\n        if count_dict[key] % 2 == 0:\n            return count_dict[key]\n    # If no bidirectional pairs were found, return 0\n    return 0"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0] or (test_list[j][0], test_list[i][1]) in test_list[i][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[i+1:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the number of\n    pairs of tuples that appear in the list twice in a row.\n\n    Args:\n        test_list (list of tuples): A list of tuples.\n\n    Returns:\n        int: The number of bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        if i == 0 or test_list[i]!= test_list[i - 1]:\n            for j in range(i + 2, len(test_list)):\n                if test_list[i] == test_list[j]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j], test_list[j] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n\n    Args:\n    L (list): A list of integers.\n\n    Returns:\n    int: A single integer representing the sum of all integers in L.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate over each element in the list\n    for num in L:\n        # Convert the element to an integer and add it to the result variable\n        result += int(num)\n        \n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_number = 1\n    for i in L:\n        single_number *= i\n    return single_number"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the single integer variable\n    single_int = 0\n    \n    # Iterate through each element in the list\n    for num in L:\n        # Check if the current number is a multiple of 10\n        if num % 10 == 0:\n            # If it is, add it to the single integer variable\n            single_int += num\n    \n    # Return the single integer variable\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # join all the integers in the list into a string\n    string_list = ''.join(str(i) for i in L)\n    # convert the string into a single integer\n    single_integer = int(string_list)\n    # return the single integer\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(\\w+)(\\w{2,}\\b)'\n    match = re.search(pattern, text)\n\n    if match:\n        adverb = match.group(1)\n        positions = []\n        pos = 0\n        while pos < len(text):\n            if text[pos] =='':\n                positions.append(pos)\n            pos += 1\n\n        positions.append(len(text))\n        adverb_positions = []\n        for pos in positions:\n            if text[pos:pos+len(adverb)] == adverb:\n                adverb_positions.append((pos, pos+len(adverb)))\n\n        return adverb_positions\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for adverbs\n    pattern = re.compile(r'\\b(?:adverb|adv|adv\\.|advantage|advantageous|adventuresome|adventurous|admirable|ambitious|amazing|amazingly|anxious|angry|annoyed|annoying|anxiously|appalling|appallingly|appreciative|appreciatively|apprehensive|apprehensively|arrogant|ashamed|ashamedly|assured|assertive|astonishing|astonishingly|attractive|attractively|authentic|authentically|awe|awed|awful|awfully|awkward|awkwardly|baddish|baddishly|badly|baffling|bafflingly|baulking|baulkingly|beautiful|beautifully|belated|beloved|beneficial|beneficially|benevolent|benevolently|benign|benignly|bewildering|bewilderingly|black|blackly|bland|blandly|bleak|bleakly|blissful|blissfully|blissfulness|boring|boringly|bossy|brave|bravely|brawny|bright|brightly|brilliant|brilliantly|bubbly|buoyant|buoyantly|bulky|bullying|bullyish|bustling|bustlingly|cagey|calculating|calculatively|callous|callously|calm|calmly|capable|careful|carefully|careless|carelessly|caring|caringless|castorous|castorously|cautious|cautiously|censure|censurement|charming|charmingly|chaste|chastely|cheerful|cheerfully|cheerfulness|cheerless|cheerlessly|cheery|cherished|cherishing|cherishingly|childish|childishly|chilly|chilly weather|chubby|chubbiness|chummy|chummy-chatty|clacking|clad|clean|cleancut|clever|cleverly|clinging|clingless|clutching|cluttered|cluttering|coaxing|coaxingly|cold|coldly|colourful|colourfully|combinative|compelling|competent|competently|complacent|complacently|complaining|complainingly|comprehensive|concerned|concernedly|confident|confidently|confused|confusedly|congratulatory|conscious|consciously|consciousness|considerate|considerately|consistent|consistently|conspicuous|conspicuously|constant|constantly|contemplative|contemplatively|content|contented|contentedly|contentious|contentiously|continual|continuous|contrivance|contrivances|conventional|convinced|convincedly|convincing|convincingly|convulsive|convulsively|cooperative|coordinated|courageous|courageously|courteous|courteously|courteousness|cowardly|cowardlyness|crabby|crafty|crazy|creepy|cruel|cruelly|cuddly|cultured|culturally|cumbersome|cumbersomely|curious|curiously|curly|curmudgeon|curmudgeoning|curmudgeonous|curmudgeonously|curseful|cursefully|curt|curtly|curtiness|curvy|cynical|cynically|daffy|daily|dainty|daisy|damaged|damaging|damn|damned|damning|damnably|dapper|dapperly|daring|daringly|dark|darkly|dastardly|dead|deadly|deadpan|deafening|deafeningly|dear|dearly|debonair|debonairly|debonairness|decadent|decadently|decayed|decaying|deceitful|deceitfully|de"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the regular expression pattern to match adverbs\n    pattern = r'\\b(?:a(?:nd)?|an)?\\s*(?:the|a)\\b'\n\n    # use the re.search() function to search for adverbs in the text\n    match = re.search(pattern, text)\n\n    # if a match is found, return the adverb and its position in the sentence\n    if match:\n        adverb = match.group().lower()\n        return adverb, match.start()\n    # otherwise, return None for both the adverb and its position\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define the pattern to find the first adverb\n    pattern = r\"\\b(\\w+)(\\w*)\\s+(\\w+)(\\w*)\\b\"\n    # Find all the matches of the pattern in the given text\n    matches = re.finditer(pattern, text)\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    # Loop through all the matches and find their positions\n    for match in matches:\n        # Get the word and its position in the sentence\n        word = match.group(1)\n        word_pos = match.start(1)\n        # Check if the word is a verb\n        if word.lower() in ['can', 'will','should', 'could']:\n            # If it is a verb, append its position to the adverbs list\n            adverbs.append((word_pos, match.start(1)))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define regex pattern for adverbs\n    pattern = r'\\b(?:adv|adv\\w*)\\b'\n    # find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # initialize an empty dictionary to store positions and adverbs\n    positions = {}\n    # loop through all matches and update the dictionary\n    for i, match in enumerate(matches):\n        positions[i] = match\n    # return the dictionary\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(\\w+)'\n    # Find all the matches in the sentence\n    matches = re.findall(pattern, text)\n    # Create a dictionary to store the adverbs and their positions\n    adverbs = {}\n    # Loop through the matches and store the positions and adverbs in a dictionary\n    for i, match in enumerate(matches):\n        # If the match is already in the dictionary, update its position\n        if match in adverbs:\n            adverbs[match].append(i+1)\n        # Otherwise, add a new entry with the position and adverb\n        else:\n            adverbs[match] = [i+1]\n    # Return the dictionary with the adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['amazing', 'amazingly', 'beautiful', 'beautifully', 'brilliant', 'brilliantly', 'bright', 'brightly', 'charming', 'charmingly', 'clever', 'cleverly', 'colorful', 'colorfully', 'cool', 'coolest', 'crazy', 'crazily', 'dazzling', 'dazzlingly', 'ecstatic', 'ecstatically', 'excellent', 'excellently', 'fantastic', 'fantastically', 'fabulous', 'fabulously', 'festive', 'festively', 'flamboyant', 'flamboyantly', 'flawless', 'flawlessly', 'flying', 'flyingly', 'glorious', 'gloriously', 'graceful', 'gracefully', 'graceless', 'gracelessly', 'grand', 'grandiose', 'grandiosely', 'great', 'greatly', 'greatness', 'hallowed', 'hallowedly', 'hallowedness', 'hilarious', 'hilariously', 'hopeful', 'hopefully', 'joyful', 'joyfully', 'jovial', 'jovially', 'just', 'justly', 'justice', 'justiceless', 'justiciar', 'justiciary', 'keen', 'keenly', 'kind', 'kindly', 'kindest', 'kindestly', 'lovely', 'lovelyhearted', 'lovelyheartedly','magical','magickly','majestic','majestically','mighty','mightily','miniature','miniaturally','mirthful','mirthfully','morbid','morbidly','move','moveable','moveably','moving','movingly','mystical','mystically', 'neat', 'neatly', 'nice', 'nicely', 'noble', 'nobly', 'nurturing', 'nurturingly', 'outstanding', 'outstandingly', 'philosophical', 'philosophically', 'pleasant', 'pleasantly', 'pretty', 'pretty pleased', 'pretty pleasedly', 'powerful', 'powerfully', 'radiant', 'radiantly', 'rambling', 'ramblingly','revolutionary','revolutionarily', 'romantic', 'romantically', 'rueful', 'ruefully', 'ruthless', 'ruthlessly','sexy','sexyly','sexypenic','sexypenically','shining','shiningly','sparkling','sparklingly','splendid','splendidly','squeamish','squeamishly','stunning','stunningly','super','superb','superior','superiority','superlative','supreme','supremely','swank','swanky', 'talented', 'talentedly', 'terrible', 'terrifically', 'thrilling', 'thrillingly', 'timeless', 'timelessly', 'transparent', 'transparently', 'trustworthy', 'trustworthily', 'ultimate', 'ultimately', 'unbeatable', 'unbeatablely', 'uncommon', 'uncommonly', 'unique', 'uniquely', 'unparalleled', 'unrivaled', 'unwavering', 'unwaveringly', 'wonderful', 'wonderfully', 'world-renowned']\n    adverb_list = []\n    pattern = r'(\\b|\\s)' + '|'.join(re.escape(adv) for adv in adverbs) + r'(\\b|\\s)'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        adverb_list = match.groups()\n        adverb_list = [adv.strip() for adv in adverb_list]\n    return adverb_list"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = re.compile(r'\\b(after|against|above|aboven|across|afterwards|again|ahead|behind|below|beside|beneath|besides|besideby|belowby|belowwhich|besidewhich|belowwhere|besidewhere|besidewherewith|besidewho|besidewhom|besidewhose|between|beyond|below|beyond|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define the pattern to match adverbs\n    pattern = r'\\b([a-z]+)s\\b'\n\n    # find all matches in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # initialize an empty dictionary to store the adverbs and their positions\n    adverb_positions = {}\n\n    # loop through all matches and add them to the dictionary\n    for match in matches:\n        # remove the's' at the end of the adverb\n        adverb = match[:-1]\n        # convert the adverb to lowercase\n        adverb = adverb.lower()\n        # add the adverb and its position to the dictionary\n        adverb_positions[adverb] = text.lower().index(match)\n\n    # return the dictionary of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(no|nor|not|now|never|nobody|nowhere|nevermore|nevertheless|nowhereforever|nevermore)\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l * l * l)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6 * l * l) + (2 * l * l * l) + (l * l * l)\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n\n    # Convert the input list of integers to an array\n    arr = array('i', nums)\n\n    # Count the number of positive integers in the array\n    positive_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n\n    # Find the ration of positive integers\n    ration = positive_count / len(arr)\n\n    # Return the result as a float\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an empty array to store positive numbers\n    positive_numbers = []\n    \n    # Iterate over the input array\n    for num in nums:\n        # Check if the number is positive and add it to the positive_numbers array\n        if num > 0:\n            positive_numbers.append(num)\n    \n    # Calculate the ration of positive numbers\n    if len(positive_numbers) == 0:\n        # If there are no positive numbers, return 0\n        return 0\n    else:\n        # Calculate the sum of positive numbers\n        positive_sum = sum(positive_numbers)\n        \n        # Calculate the ration of positive numbers by dividing the sum by the length of the array\n        return positive_sum / len(positive_numbers)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array of integers into an array of booleans\n    bool_arr = array('b', [num > 0 for num in nums])\n    # count the number of positive numbers\n    count = bool_arr.count(True)\n    # calculate the ratio of positive numbers\n    ratio = count / len(nums)\n    # return the ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize the count of positive numbers to 0\n    pos_count = 0\n    # Loop through the array of integers\n    for num in nums:\n        # If the number is positive, increment the count\n        if num > 0:\n            pos_count += 1\n    # Return the ration of positive numbers as a float\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Convert the input array to an array of type int\n    arr = array('i', nums)\n\n    # Initialize variables to keep track of the count of positive and negative numbers\n    pos = 0\n    neg = 0\n\n    # Loop through the array and count the positive and negative numbers\n    for num in arr:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg += 1\n\n    # Calculate the ration of positive numbers in the array\n    pos_ratio = pos / (pos + neg)\n\n    # Return the ration of positive numbers in the array\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num_count = 0\n    for num in nums:\n        if num > 0:\n            positive_num_count += 1\n\n    return positive_num_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array to store the count of positive numbers\n    count_arr = array('i', [0])\n\n    # loop through the array and increment the count for each positive number\n    for num in nums:\n        if num > 0:\n            count_arr.itemset(0, count_arr.item(0) + 1)\n\n    # calculate the ration of positive numbers\n    pos_count = count_arr.item(0)\n    total_count = len(nums)\n    pos_ratio = float(pos_count) / total_count\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    positive_count = len(positive_nums) / len(nums)\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_count = 0\n    negative_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    \n    positive_ratio = positive_count / (positive_count + negative_count)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_arr = array('i')\n    negative_arr = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n        else:\n            negative_arr.append(num)\n\n    total_count = len(nums)\n    positive_count = len(positive_arr)\n    negative_count = len(negative_arr)\n\n    positive_ratio = positive_count / total_count\n\n    return positive_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    if not lst:\n        return None\n    else:\n        max_neg = lst[0]\n        for num in lst:\n            if num < 0 and num > max_neg:\n                max_neg = num\n        return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = -1\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    max_num
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Finds the largest negative number in a list.\n\n    :param lst: The list to search through\n    :return: The largest negative number in the list, or None if there are no negative numbers in the list\n    \"\"\"\n    largest = None\n    for num in lst:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    largest = lst[0]\n    for i in lst:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_negative = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest_negative:\n                largest_negative = num\n    return largest_negative"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number k as input and returns a new list of trimmed tuples.\n    \"\"\"\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the length of the tuple is greater than k, then trim the tuple\n        if len(tup) > K:\n            # Trim the tuple by k positions\n            tup = tup[:K]\n        # Add the trimmed tuple to the trimmed list\n        trimmed_list.append(tup)\n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[i:i+K] for i in range(len(tup)))\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + (test_list[i][-K:],))\n\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1] - K)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tuple([x for x in tup if x]))\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[:-K])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j >= len(test_list[i]):\n                break\n            else:\n                test_list[i] = test_list[i][:j] + test_list[i][j+1:]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + (test_list[i][K+1:],))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        print(\"Index: {} | Product: {}\".format(i, test_tup1[i] * test_tup2[i]))"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if both tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have same length\")\n\n    # Initialize an empty result tuple with same length as test_tup1\n    result_tup = (0,) * len(test_tup1)\n\n    # Perform index wise multiplication of tuple elements\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have same length.\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n        \n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have same length.')\n    multiplied_tup = ()\n    for i in range(len(test_tup1)):\n        multiplied_tup += (test_tup1[i] * test_tup2[i],)\n    return multiplied_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    \n    # iterate through each index of the tuple\n    for i in range(len(test_tup1)):\n        # multiply the corresponding elements of the two tuples and append the result to the result list\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    # return the result list as a tuple\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize an empty list to store the result\n    result_list = []\n    # loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # add the element at the current index multiplied with the corresponding element of the second tuple\n        result_list.append(test_tup1[i] * test_tup2[i])\n    # return the list of result\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as inputs. It counts the occurrences of all elements of the list in the tuple.\n    The function returns a dictionary where the keys are the elements of the list and the values are the occurrences of that element in the tuple.\n    '''\n    # Creating a dictionary to store the counts\n    count_dict = {}\n\n    # Counting the occurrences of each element of the list in the tuple\n    for element in lst:\n        count = tup.count(element)\n        count_dict[element] = count\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple into a set to remove duplicates\n    tup_set = set(tup)\n    # Count the occurrences of each element in the set\n    count_dict = Counter(tup_set)\n    # Get a list of all the elements in the list\n    lst_set = set(lst)\n    # Find the elements that are in the list but not in the tuple\n    extra_elements = list(lst_set - tup_set)\n    # Print the result\n    print(\"The tuple:\", tup)\n    print(\"The list:\", lst)\n    print(\"Count of each element in the tuple:\", count_dict)\n    print(\"Elements in the list that are not present in the tuple:\", extra_elements)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the tuple to a set so that duplicates are removed \n    tup_set = set(tup) \n    # count the occurrences of each element in the list using the Counter class \n    count_dict = Counter(lst) \n    # return the intersection of count_dict and tup_set \n    return count_dict.intersection(tup_set)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary where keys are the elements of the list and values are their respective counts in the tuple.\n    '''\n    # convert the tuple to a list to avoid count errors\n    lst = list(tup)\n    # count the occurrences of each element in the list using Counter\n    count_dict = Counter(lst)\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    return count[x] if x in count else 0 "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert tuple to set to remove duplicates\n    tup = set(tup)\n    # count occurence of each element in list in tuple\n    count = Counter(tup)\n    # count the number of occurrences of each element in the list\n    for elem in lst:\n        if elem in count:\n            count[elem] += 1\n    # print the result\n    print(count)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Using Counter module from collections to count occurrence of elements in the tuple\n    count_dict = Counter(tup) \n\n    # Using dictionary comprehension to extract the occurrence of each element from the tuple\n    occurrence_dict = {key: count_dict[key] for key in lst if key in count_dict} \n\n    # Return the occurrence dictionary\n    return occurrence_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for key in count:\n        if key in tup:\n            result.append((key, count[key]))\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    p = 2\n    sum = 0\n    for i in range(n):\n        sum += p * p\n        p += 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [0, 1]\n    sum_of_numbers = 1\n    while len(perrin_numbers) < n:\n        perrin_numbers.append(sum_of_numbers)\n        sum_of_numbers += 1\n    return sum_of_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i*(n-i+1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Calculate the sum of perrin numbers.\n    '''\n    # Initialize a variable to keep track of the sum\n    total = 0\n    # Use a for loop to iterate over the range of n\n    for i in range(n+1):\n        # Add the i-th perrin number to the total\n        total += i\n    # Return the total\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        if i%2 == 1:\n            perrin_sum += i\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    total = 0\n    for i in range(n):\n        total += perrin_numbers[i]\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize variables\n    p = 1\n    s = 0\n    # loop through n numbers\n    for i in range(1, n+1):\n        # calculate the perrin number\n        pi = 1\n        for j in range(1, i+1):\n            pi = (pi * j) // i\n        # add the perrin number to the sum\n        s += pi\n    # return the sum\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3 - 2 * i**2 + 1\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for i in range(len(l)):\n        res.append(l[i][:l[i].find(str)])\n    return res"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    str_list_new = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            str_list_new.append(str_list[i])\n    return str_list_new\n"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for s in l:\n        if len(s) == size:\n            extracted_str.append(s)\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and an integer value representing the size of strings to be extracted.\n    It returns a list of the extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and a size as input and returns a list of the specified size of strings from the input list.\n    '''\n    return str_list[:size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of strings and an integer l and returns a new list containing l elements from the input list.\n    The function extracts the first l characters from each string in the input list and returns them as a new list.\n    \"\"\"\n    new_list = []\n    for string in str_list:\n        new_list.append(string[:l])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for i in range(len(l)):\n        if len(l[i]) >= size:\n            extracted_str.append(l[i][:size])\n        else:\n            extracted_str.append(l[i])\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[:l] for x in l if len(x) >= l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer value representing the size of the strings to extract.\n    It then returns a list of the extracted strings.\n    '''\n    extracted_str_list = []\n    for i in range(len(str_list)):\n        extracted_str = str_list[i][:size]\n        extracted_str_list.append(extracted_str)\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from a string using regular expressions.\n    \"\"\"\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # define a regular expression pattern for whitespaces\n    pattern = r'\\s+'\n    # use re.sub() function to replace all whitespaces with a single space\n    text2 = re.sub(pattern,'', text1)\n    # return the modified text\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespaces from the string using regex\n    text1 = re.sub('\\s+','', text1)\n    # Remove any leading or trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expression to remove whitespaces\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespaces from the string using regular expressions\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    loss_percent = 10 # loss percentage\n    if sale_amount < actual_cost: # if sale amount is less than actual cost\n        loss = (actual_cost - sale_amount) * loss_percent # calculate loss amount\n        return loss # return the loss amount\n    else: # if sale amount is greater than or equal to actual cost\n        return 0 # return 0 as there is no loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (actual_cost/sale_amount) * 100\n    if loss_percentage > 5:\n        loss_amount = sale_amount * 0.1\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize the sum of even factors to zero\n    even_sum = 0\n    \n    # Loop through all numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # If n is divisible by i, add i to the sum\n        if n % i == 0:\n            even_sum += i\n    \n    # Return the sum of even factors\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            sum += i + n//i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even factors of n. \n    A factor of a number n is an integer that divides n evenly. \n    We will find the even factors of n using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    # create a list of all numbers from 2 to n\n    primes = [True] * (n + 1)\n    primes[0], primes[1] = False, False\n\n    # initialize the sum of even factors to 0\n    even_sum = 0\n\n    # loop through all numbers from 2 to n-1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # if the number is prime, check if it is even and add it to the sum\n        if primes[i]:\n            if n % i == 0 and i % 2 == 0:\n                even_sum += i\n                # mark all multiples of the prime number as composite\n                for j in range(i * i, n + 1, i):\n                    primes[j] = False\n\n    # check if the last number is even and add it to the sum\n    if primes[n]:\n        even_sum += n\n\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    i = 2\n    \n    while i <= math.sqrt(n):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n        i += 1\n        \n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            even_sum += i\n\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n%i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n\n    # loop through the number and check if each factor is even\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n\n    # add the last even factor if it exists\n    if n % 2 == 0:\n        sum += n\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of even factors of n.\n    \"\"\"\n\n    # Initialize a variable sum to store the sum of even factors of n\n    sum = 0\n\n    # Iterate through all the numbers from 2 to the square root of n (inclusive)\n    for i in range(2, int(math.sqrt(n))+1):\n        # If n is divisible by i, add it to sum\n        if n % i == 0:\n            sum += i\n\n    # Return the sum of even factors of n\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    words = re.findall(pattern, text)\n    return words\n\ntext = \"The quick brown fox jumps over the lazy dog. The lazy dog sleeps in the zoo.\"\nprint(text_match_wordz(text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # define the regular expression pattern\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    # match the pattern in the text\n    matches = re.findall(pattern, text)\n    # return a list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Define a regular expression pattern to match a word containing 'z'\n    pattern = re.compile(r'\\w+z')\n\n    # Use the re.search() method to search for a match in the text\n    match = pattern.search(text)\n\n    # If a match is found, return the matched word\n    if match:\n        return match.group(0)\n\n    # Otherwise, return None if no match is found\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(monthnum2) == 2:\n        if monthnum2[1] in ['01', '03', '05', '07', '08', '10', '12']:\n            return True\n        elif monthnum2[1] in ['04', '06', '09', '11']:\n            return False\n        else:\n            return False\n    elif len(monthnum2) == 4:\n        if monthnum2[:2] in ['01', '03', '05', '07', '08', '10', '12']:\n            return True\n        elif monthnum2[:2] in ['04', '06', '09', '11']:\n            return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # check whether the given month number is valid or not\n    if monthnum2 > 12 or monthnum2 < 1:\n        return False\n    \n    # check whether the given month number contains 31 days or not\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum % 2 == 0:\n        return \"Month number should not be even.\"\n    else:\n        if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n            return \"Month number should not contain 31 days.\"\n        else:\n            if monthnum in [4, 6, 9, 11]:\n                return \"Month number should contain 30 days.\"\n            else:\n                if monthnum == 2:\n                    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                        return \"Month number should contain 28 days.\"\n                    else:\n                        return \"Month number should not contain 28 days.\"\n                else:\n                    return \"Month number is not valid.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n    \n    # check if month number contains 31 days\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2]:\n        if monthnum2 % 4 == 0:\n            if monthnum2 % 100 == 0:\n                if monthnum2 % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        result.append(string[::-1])\n    return result"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    # find the length of each sublist\n    sublist_lengths = [len(lst[i:j+1]) for i in range(len(lst)) for j in range(i+1, len(lst)+1)]\n\n    # find the index of the minimum length sublist\n    min_index = sublist_lengths.index(min(sublist_lengths))\n\n    # extract the sublist with the minimum length\n    min_sublist = lst[sublist_lengths.index(min(sublist_lengths)):]\n\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in lst:\n        for j in range(len(i)):\n            if len(i[j]) < min_len:\n                min_len = len(i[j])\n                min_sublist = i[j]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    # Initialize min length as infinity\n    min_len = float('inf')\n    # Initialize min sublist as empty list\n    min_sublist = []\n    # Loop through each element of the list\n    for i in range(len(lst)):\n        # If the length of the current sublist is less than min_len, update min_len and min_sublist\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    for i in lst:\n        if len(i) < len(min_sublist):\n            min_sublist = i\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_sublist = lst\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_sublist = lst[i]\n            min_length = len(lst[i])\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and finds the sublist with minimum length.\n    '''\n\n    # Initialize a variable for the minimum length of the sublist\n    min_len = 1000000000\n\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n\n        # Calculate the length of the current sublist\n        sublist_len = len(lst[i])\n\n        # If the current sublist has a length smaller than the minimum length\n        if sublist_len < min_len:\n\n            # Update the minimum length with the current sublist length\n            min_len = sublist_len\n\n    # Create a new list with only the sublist(s) with the minimum length\n    result = []\n    for i in range(len(lst)):\n        if len(lst[i]) == min_len:\n            result.append(lst[i])\n\n    # Return the new list with the sublist(s) with the minimum length\n    return result"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_length = j-i\n            if current_length < min_length:\n                min_length = current_length\n                min_sublist = lst[i:j]\n                \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    str1 = str1.lower()\n    result = re.sub(r'(?i)\\b[A-Z][a-z]+\\b', '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]')\n    # Use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Loop through each uppercase substring and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Find all uppercase substrings in the string\n    uppercase = re.findall('[A-Z]+', str1)\n\n    # Remove the uppercase substrings from the string\n    str2 = re.sub('[A-Z]+', '', str1)\n\n    # Print the original and modified strings\n    print(\"Original String:\", str1)\n    print(\"Modified String:\", str2)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expression to find all uppercase substrings\n    uppercase_substrings = re.findall(r'\\b[A-Z]\\w*\\b', str1)\n    \n    # Removing uppercase substrings from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'(?i)[A-Z][^A-Z]*' # case-insensitive pattern\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function removes uppercase substrings from a given string.\n    \"\"\"\n    string = re.sub(r'\\b[A-Z][a-z]+\\b', '', string, flags=re.IGNORECASE)\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    # Find all uppercase substrings in the string using the pattern\n    matches = re.findall(pattern, str1)\n    # Iterate over the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    uppercase_pattern = re.compile(r'\\b[A-Z]+\\b', re.IGNORECASE)\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for item in lst:\n        new_lst.append(item[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    upper_count = 0\n\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            combo = list1[j:j+i]\n            if combo not in result:\n                result.append(combo)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Args:\n        lst (list): The list of elements to choose from.\n\n    Returns:\n        list: A list of all possible combinations of the elements in lst.\n    \"\"\"\n    if not lst:\n        return []\n\n    result = []\n    for i in range(1, len(lst) + 1):\n        for subset in combinations_list(lst[:i]):\n            result.append(subset + [lst[i - 1]])\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create a list of all possible combinations of the elements of list1\n    combinations = [list(i) for i in itertools.combinations(list1, len(list1))]\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # create a list to store all possible combinations\n    combinations = []\n\n    # iterate over all possible length of combinations\n    for i in range(1, len(list1) + 1):\n        # create a list to store each combination\n        combination = []\n\n        # iterate over all possible starting indices\n        for j in range(len(list1) - i + 1):\n            # add the current combination to the list of all combinations\n            combination.append(list1[j:j+i])\n\n        # add the current combination to the list of all combinations\n        combinations.append(combination)\n\n    # return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if len(arr) == 0:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n\n    Args:\n        arr: A list of integers representing the array.\n\n    Returns:\n        An integer representing the maximum product subarray.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n        current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = float('-inf')\n    current_product = 1\n    min_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product, min_product = min_product, current_product\n\n        current_product *= num\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = max_so_far\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = min(min_ending_here, arr[i])\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            min_ending_here = min(min_ending_here, arr[i])\n        if max_ending_here <= min_ending_here:\n            max_product = max(max_product, max_ending_here)\n        else:\n            max_product = max(max_product, max_ending_here * min_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    global_max_product = float('-inf')\n\n    for num in arr:\n        current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < 0:\n            current_product = 1\n\n        global_max_product = max(global_max_product, current_product)\n\n    return global_max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if n!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict.values():\n        if count == 0:\n            first_value = i\n        else:\n            if i!= first_value:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n\n    for i in range(1, len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(value == dict[list(dict.keys())[0]] for value in dict.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if n!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # initialize a list to store the values of the dictionary\n    values = []\n\n    # iterate through the dictionary and add the values to the list\n    for value in dict.values():\n        values.append(value)\n\n    # check if all the values in the list are same\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    return len(values) == n"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    # loop over all items in the dictionary\n    for key, value in dict1.items():\n        # if the value is an empty string or a list with only empty strings, remove the key-value pair\n        if isinstance(value, str) and not value:\n            dict1.pop(key)\n        elif isinstance(value, list) and all(isinstance(item, str) and item for item in value) and not value:\n            dict1.pop(key)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if not dict1[key]:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    max_product = float('-inf')\n    min_product = float('inf')\n    for i in range(len(arr)):\n        if i == 0:\n            max_product = arr[0]\n            min_product = arr[0]\n        elif arr[i] > max_product:\n            max_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n        else:\n            max_product = min(max_product * arr[i], arr[i])\n            min_product = max(min_product * arr[i], arr[i])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and arr[j] > arr[i] and arr[i] > dp[i]:\n                dp[i] = arr[i] * dp[j]\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize max_product and max_ending_here to the first element of the array\n    max_product = arr[0]\n    max_ending_here = arr[0]\n\n    # Traverse the array from second element to n-1\n    for i in range(1, n):\n        # If the element is smaller than max_ending_here, we can't form a larger product\n        if arr[i] < max_ending_here:\n            # Update max_ending_here to be the current element\n            max_ending_here = arr[i]\n        else:\n            # Otherwise, multiply max_ending_here with the current element to get a larger product\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        # Update max_product to be the maximum of the current element and max_product\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    # Initialize the maximum and minimum product to negative infinity\n    max_product = float('-inf')\n    min_product = float('-inf')\n\n    # Initialize the current product and current subsequence length to 1\n    current_product = 1\n    current_subsequence = 1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Calculate the product of the current element and its complement\n        complement = arr[len(arr) - 1] - arr[i]\n\n        # Update the current product if the current element is greater\n        if arr[i] > arr[i - 1]:\n            current_product *= arr[i]\n        else:\n            current_product *= complement\n\n        # Update the current subsequence length if the current element is greater\n        if arr[i] > arr[i - 1]:\n            current_subsequence += 1\n        else:\n            current_subsequence -= 1\n\n        # Update the maximum and minimum product if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < min_product:\n            min_product = current_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    curr_product = 1\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product_so_far = arr[0]\n    max_product_ending_here = 1\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_product_ending_here *= arr[i]\n            if max_product_ending_here > max_product_so_far:\n                max_product_so_far = max_product_ending_here\n        else:\n            max_product_ending_here = 1\n\n    return max_product_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            if max_ending_here < min_ending_here:\n                max_so_far = max_ending_here * min_ending_here\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here * min_ending_here\n        else:\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here * min_ending_here\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return 0\n    \n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n    \n    for num in arr:\n        max_product_ending_here = max(max_product_ending_here * num, max_product_ending_here)\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product_ending_here = arr[0]\n    max_product_so_far = max_product_ending_here\n\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product_ending_here = max(max_product_ending_here * arr[i], max_product_so_far)\n            max_product_so_far = max(max_product_ending_here, max_product_so_far)\n        else:\n            max_product_ending_here = max_product_so_far\n            max_product_so_far = arr[i]\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Convert the tuple to a list to access its elements\n    lst = list(test_tup)\n    # Initialize the sum variable to 0\n    total_sum = 0\n    # Loop through the list and calculate the sum of the neighboring elements\n    for i in range(1, len(lst)):\n        total_sum += lst[i-1] + lst[i]\n    return total_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(x + y for x, y in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i-1] + test_tup[i]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    size = len(test_tup)\n    # check if the tuple has at least two elements\n    if size < 2:\n        return None\n    else:\n        # initialize the sum to the first element\n        sum = test_tup[0]\n        # iterate through the tuple starting from the second element\n        for i in range(1, size):\n            # add the sum and the next element of the tuple to the sum\n            sum += test_tup[i]\n        # return the final sum\n        return sum\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i:i+2] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return \"Invalid input. Please provide a tuple with at least two elements.\"\n    \n    # Find the length of the tuple\n    length = len(test_tup)\n\n    # Initialize a variable to store the sum of the neighboring elements\n    sum_neighboring = 0\n\n    # Loop through the tuple from the second element to the last element\n    for i in range(1, length-1):\n        # Add the neighboring elements and assign the result to the variable\n        sum_neighboring += test_tup[i]\n\n    # Return the sum of the neighboring elements\n    return sum_neighboring"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        return None\n    else:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                yield test_tup[i] + test_tup[j]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # initialize the sum to zero\n    sum = 0\n    # loop through the tuple and add the pairwise elements to the sum\n    for i in range(len(test_tup) - 1):\n        sum += test_tup[i] + test_tup[i + 1]\n    # return the sum\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[-2] + test_tup[-1]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n\n    # initialize variables\n    total = 0\n    count = 0\n\n    # iterate through the tuple\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n        count += 1\n\n    # return the average\n    return total / count"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in two arguments: the array arr and the integer n.\n    It returns the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes in an array and a number and returns the product of array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the product variable to 1\n    product = 1\n\n    # Iterate through the array and multiply each element with the product\n    for num in arr:\n        product = (product * num) % n\n\n    # Return the final product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # calculate product of array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product*i) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n\n    Args:\n        l: a list of integers\n\n    Returns:\n        True if the list contains consecutive numbers, else False.\n\n    Examples:\n        >>> check_Consecutive([1,2,3,4,5])\n        True\n        >>> check_Consecutive([1,2,3,4,5,6])\n        False\n    \"\"\"\n\n    # Check if the list is empty or not\n    if len(l) <= 1:\n        return False\n\n    # Initialize a variable to keep track of the number of consecutive numbers\n    consecutive_count = 1\n\n    # Loop through the list and check if the next number is equal to the current number + 1\n    for i in range(1, len(l)):\n        if l[i]!= l[i-1] + 1:\n            return False\n        else:\n            consecutive_count += 1\n\n    # If the loop completes without returning False, then all the numbers are consecutive\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    \"\"\"\n    i = 0\n    while i < len(l)-1:\n        if l[i] + 1 == l[i+1]:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and checks whether the list contains consecutive numbers or not.\n    Returns True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] + 1 == l[i+1]:\n                return True\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: # check for empty or single element list\n        return True\n    elif l[0] == l[1]: # check for single element list\n        return False\n    else:\n        for i in range(len(l)-1): # check for consecutive numbers in list\n            if l[i+1] - l[i]!= 1:\n                return False\n        return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    i = 0\n    j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            intersection.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Create a set to store unique elements from both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set to a list and return it\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # creating a set from the first list to remove duplicates\n    set1 = set(test_list1)\n    \n    # creating a set from the second list to remove duplicates\n    set2 = set(test_list2)\n    \n    # finding the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # creating a list from the intersection to return the result\n    result_list = list(intersection)\n    \n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set to store unique elements in the first list\n    set1 = set(test_list1)\n    # create an empty list to store the common elements\n    common_list = []\n    # loop through the second list\n    for elem in test_list2:\n        # if the element is in the set1, add it to the common list\n        if elem in set1:\n            common_list.append(elem)\n    # return the common list\n    return common_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store unique elements\n    unique_set = set()\n\n    # Loop through the first list and add unique elements to the set\n    for element in test_list1:\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # Loop through the second list and check if any of the unique elements are present in the first list\n    for element in test_list2:\n        if element in unique_set:\n            print(element)\n            unique_set.remove(element)\n\n    # Return the final set with unique elements\n    return unique_set"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of elements in the first list\n    set1 = set(test_list1)\n    # create a set of elements in the second list\n    set2 = set(test_list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the intersection set back to a list\n    intersection_list = list(intersection)\n    # return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of elements in the first list\n    set1 = set(test_list1)\n    # Create a set of elements in the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersect_set = set1.intersection(set2)\n    # Create a list of tuples from the intersection set\n    intersect_list = list(intersect_set)\n    return intersect_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for item in test_list1:\n        if all(item == tuple_item for tuple_item in test_list2):\n            intersection_list.append(item)\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Create a new string with all occurrences of the old character replaced with the new character\n    str2 = str1.replace(ch, newch)\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a specified character in a string with another specified character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by value using Counter function\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict_sorted = {}\n    for i in sorted_dict:\n        sorted_dict_sorted[i[0]] = i[1]\n    return sorted_dict_sorted"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a list of tuples\n    lst = dict1.items()\n    # sort the list of tuples based on the value of each tuple\n    lst.sort(key=lambda x: x[1])\n    # convert the sorted list of tuples back to a dictionary\n    dict2 = {k: v for k, v in lst}\n    return dict2"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1.values())\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = {k: v for k, v in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in ascending order\n    nums.sort()\n    # find the sum of the largest and smallest values\n    sum_largest_smallest = nums[-1] + nums[0]\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest value in the array\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the sum of the largest and smallest value\n    big_sum = largest + smallest\n    \n    return big_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    # get the largest and smallest values\n    largest = nums[0]\n    smallest = nums[1]\n    # calculate the sum of the largest and smallest values\n    sum_largest_smallest = largest + smallest\n    # return the sum\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = min(nums)\n    smallest = max(nums)\n\n    # Calculate the sum of the largest and smallest values\n    sum_of_biggest_smallest = largest + smallest\n\n    # Return the sum of the largest and smallest values\n    return sum_of_biggest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is all lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    # Convert the string to lowercase\n    lowercase_string = string.lower()\n    \n    # Check if all characters are lowercase\n    all_lowercase = True\n    for char in lowercase_string:\n        if char.isupper():\n            all_lowercase = False\n            break\n    \n    return all_lowercase"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile('[a-z]+')\n    result = re.sub(lowercase_pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    \n    # Use the re.sub() function to remove all lowercase substrings from the string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # replace all lowercase substrings with an empty string\n    result = pattern.sub('', str1)\n    # return the modified string\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match lowercase substrings\n    pattern = re.compile('[a-z]+')\n    # split the string into substrings using the pattern\n    substrings = pattern.findall(str1)\n    # loop through the substrings and remove any that are lowercase\n    for substring in substrings:\n        if substring.islower():\n            str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert string to lowercase\n    string = string.lower()\n    # use regular expression to remove substrings\n    pattern = r'(?i)' + r'([a-z])' + r'+'\n    result = re.sub(pattern, r'\\1', string)\n    # convert result back to string\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Split the string into substrings based on lowercase words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Combine the substrings into a new string\n    new_str =''.join(words)\n    # Remove any spaces between words\n    new_str = re.sub(r'\\s+','', new_str)\n    # Remove any leading or trailing spaces\n    new_str = new_str.strip()\n    return new_str"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Use regular expressions to find all lowercase substrings\n    pattern = r'[a-z]+'\n    matches = re.findall(pattern, string)\n\n    # Remove the lowercase substrings from the string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to string\n    num_str = str(n)\n    # return the first character of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    #convert the input number to string\n    str_num = str(n)\n    #return the first character of the string\n    return str_num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # extract the first digit of the number\n    digit = n // 10 ** (len(str(n)) - 1)\n    # return the first digit\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = n // 10**len(str(n))\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the number to string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in list: \n        if num % 2!= 0: \n            odd_numbers.append(num) \n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list containing only the odd integers from the original list.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n\n    # Calculate the sum of first n natural numbers\n    sum_numbers = sum(range(1,n+1))\n\n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n    natural_numbers_sum = sum(range(1, n+1))\n    return abs(cubes_sum - natural_numbers_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # find the sum of the first n natural numbers\n    sum_natural = sum(range(1,n+1))\n    # find the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n    # return the difference\n    return sum_natural - sum_cubes"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    # sum of cubes of the first n natural numbers\n    cubes = 0\n    for i in range(1, n+1):\n        cubes += i*i*i\n\n    # sum of the first n natural numbers\n    sum_n = 0\n    for i in range(1, n+1):\n        sum_n += i\n\n    # calculate the difference between the two sums\n    difference = abs(cubes - sum_n)\n\n    # return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(n+1)])\n    sum_natural = sum(range(1,n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return sum(x**3 for x in range(1, n+1))\n\n    # Function to calculate the sum of the first n natural numbers\n    def sum_numbers(n):\n        return sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return sum_cubes(n) - sum_numbers(n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate the cube of a number\n    def cube(num):\n        return num**3\n\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum([cube(i) for i in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    natural_sum = sum([i for i in range(1, n+1)])\n\n    # Return the difference between the two sums\n    return abs(cubes_sum - natural_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum(i**3 for i in range(n+1))\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Calculate the difference between the sum of cubes and the sum of natural numbers\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            if A[i]^A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count variable\n    count = 0\n\n    # Iterate through all possible pairs\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate the xor of the two elements and check if it's odd\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    # Count the number of elements in the list\n    n = len(A)\n\n    # Initialize a counter for odd xor values\n    odd_xor_count = 0\n\n    # Loop over all pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the xor of the two elements\n            xor_value = A[i] ^ A[j]\n\n            # Check if the xor value is odd\n            if xor_value % 2 == 1:\n                # Increment the counter\n                odd_xor_count += 1\n\n    return odd_xor_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor_sum = 0\n    for i in range(N):\n        xor_sum += A[i]\n        xor_sum %= 2\n    while xor_sum!= 0:\n        if xor_sum % 2 == 1:\n            count += 1\n        xor_sum //= 2\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum += A[i]\n        xor_sum %= 2**31  # To handle the case when there are negative numbers in the array.\n    for i in range(N):\n        xor_sum -= A[i]\n        xor_sum %= 2**31\n        if xor_sum % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in two lists A and N and returns the number of odd pairs\n    whose XOR value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n                if count == N:\n                    break\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert the integers to strings so that we can compare their digits\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # initialize the sum of per-digit differences to 0\n    total_sum = 0\n    \n    # loop through each digit in the two integers\n    for i in range(len(str_n1)):\n        # subtract the current digit from the corresponding digit in the other integer\n        diff = int(str_n1[i]) - int(str_n2[i])\n        \n        # add the per-digit difference to the total sum\n        total_sum += diff ** 2\n        \n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert numbers to strings\n    num1 = str(n1)\n    num2 = str(n2)\n    # initialize sum variable\n    sum_diff = 0\n    # loop through digits of both numbers\n    for i in range(len(num1)):\n        diff = int(num1[i]) - int(num2[i])\n        sum_diff += abs(diff)\n    # return sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the input integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n\n    # Initialize a variable to store the sum of per-digit difference\n    digit_sum = 0\n\n    # Loop through each digit of each number\n    for i in range(len(n1_digits)):\n        digit_sum += abs(n1_digits[i] - n2_digits[i])\n\n    # Return the sum of per-digit difference\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize variables for sum of per-digit differences and remainder\n    digit_sum = 0\n    remainder = 0\n    \n    # loop through each digit of the integers and calculate per-digit difference\n    while n1 > 0 or n2 > 0:\n        # calculate the digit difference\n        diff = n1 - n2\n        # add to the sum of per-digit differences\n        digit_sum += diff\n        # update the remainder to the next digit in n1 and n2\n        n1, n2 = n2, n1 % 10\n        \n    # return the sum of per-digit differences\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n    # Calculate the sum of differences for each pair of digits in the two lists\n    diff_sum = 0\n    for i in range(len(digits1)):\n        diff_sum += abs(digits1[i] - digits2[i])\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    digit_diff_sum = 0\n    for i in range(10):\n        digit_diff = abs(n1 // 10**i - n2 // 10**i)\n        digit_diff_sum += digit_diff\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # Initialize the sum of differences as 0\n    diff_sum = 0\n    \n    # Iterate through the digits of both strings\n    for i in range(len(s1)):\n        diff = abs(ord(s1[i]) - ord(s2[i]))\n        diff_sum += diff\n    \n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # create a list of digits for both numbers\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n    # calculate the distance between the two numbers by counting the number of digits that are different\n    digit_distance = sum(abs(d1 - d2) for d1, d2 in zip(num1_digits, num2_digits))\n    return digit_distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert the input numbers to strings to make the calculations easier\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through each digit in the two strings\n    for i in range(len(s1)):\n        # calculate the difference between the corresponding digits\n        diff = int(s1[i]) - int(s2[i])\n\n        # add the difference to the sum\n        sum += abs(diff)\n\n    # return the sum of the per-digit differences\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize a variable to store the sum of the per-digit differences\n    digit_sum = 0\n    \n    # iterate through each digit of the two numbers\n    for i in range(len(str(n1))):\n        # convert the current digit of the first number to an integer\n        num1 = int(str(n1)[i])\n        # convert the current digit of the second number to an integer\n        num2 = int(str(n2)[i])\n        # calculate the per-digit difference between the two numbers\n        diff = num1 - num2\n        # add the difference to the sum variable\n        digit_sum += diff\n    \n    return digit_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        elif curr_sum < 0:\n            curr_sum = 0\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    This function takes in a list of integers and a size parameter and returns the maximum sum of contiguous subarray of size n in the list.\n\n    Args:\n    arr (list): A list of integers.\n    size (int): The size of the subarray.\n\n    Returns:\n    int: The maximum sum of contiguous subarray of size n in the list.\n\n    \"\"\"\n    if size > len(arr):\n        return \"Invalid size value\"\n    \n    max_so_far = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += arr[i]\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n            \n    for i in range(len(arr) - size):\n        current_sum -= arr[i]\n        current_sum += arr[i+size]\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n            \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        return 0\n\n    max_sum = float('-inf')\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_sum:\n            max_sum = max_ending_here\n        if i < len(a) - size:\n            max_ending_here -= a[i + size]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        size = len(a)\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n\n    return max_sum, start\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    curr_start = 0\n    for i in range(len(a)):\n        curr_sum += a[i]\n        while curr_sum > 0 and i - curr_start + 1 > size:\n            curr_sum -= a[curr_start]\n            curr_start += 1\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the list to find the maximum sum of the contiguous sublist\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n        # If the current sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one list\n    combined_list = test_tup1 + test_tup2\n\n    # Convert the list into a set to remove duplicates\n    unique_set = set(combined_list)\n\n    # Convert the set back into a list and sort it\n    sorted_list = sorted(list(unique_set))\n\n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of the elements of both tuples and sort them\n    union_set = sorted(set(test_tup1).union(set(test_tup2)))\n    # output the union of the elements\n    for elem in union_set:\n        print(elem)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets for faster element checking\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the union of the sets using the | (union) operator\n    union = set1 | set2\n    # Convert the union set back to a list and sort it in ascending order\n    union_list = sorted(list(union))\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples into a single tuple\n    combined_tuple = test_tup1 + test_tup2\n\n    # use set() function to remove duplicate elements from the tuple\n    unique_tuple = set(combined_tuple)\n\n    # convert the set to a list and sort it\n    sorted_list = sorted(list(unique_tuple))\n\n    # print the sorted list of unique elements\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    \n    # Sort the combined list in ascending order\n    combined_list.sort()\n    \n    # Output the sorted combined list\n    print(combined_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Convert both tuples to lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # Find the union of the two lists\n    union_list = list(set(tup1_list + tup2_list))\n\n    # Sort the union list in ascending order\n    union_list.sort()\n\n    # Convert the union list back to a tuple and return it\n    return tuple(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples and sort them\n    sorted_tup = sorted(test_tup1 + test_tup2)\n    # loop through the sorted tuple and print each element\n    for element in sorted_tup:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    # Remove duplicates using sets and list comprehension\n    unique_elements = list(set(combined_tup))\n    # Sort the elements in ascending order\n    sorted_elements = sorted(unique_elements)\n    # Output the sorted elements\n    print(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Using set to remove duplicates and sort the elements\n    unique_tup1 = sorted(set(test_tup1))\n    unique_tup2 = sorted(set(test_tup2))\n    # Merging the two tuples and outputting the sorted result\n    union_tup = sorted(set(unique_tup1 + unique_tup2))\n    print(union_tup)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize the maximum length to zero\n    max_len = 0\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n\n        # Initialize the current sublist length to zero\n        current_len = 0\n\n        # Loop through each element in the sublist\n        for element in sublist:\n\n            # Increment the current sublist length\n            current_len += 1\n\n            # If the current sublist length is greater than the maximum length, update the maximum length\n            if current_len > max_len:\n                max_len = current_len\n\n    # Return the maximum length found\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            length = len(lst[j]) - len(lst[i])\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    currentLength = 0\n    for i in range(len(lst)):\n        currentLength += 1\n        if i == len(lst) - 1 or lst[i+1]!= lst[i]:\n            if currentLength > maxLength:\n                maxLength = currentLength\n            currentLength = 0\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        current_length = 0\n        for j in range(i, len(lst)):\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0   # initialize max length to 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i <= len(lst)//2:\n                continue\n            sublist = lst[i:j]\n            max_len = max(max_len, len(sublist))\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_length = 0  \n    sub_list = []  \n    \n    for i in range(len(lst)):  \n        if i == 0:  \n            sub_list.append(lst[i])  \n            max_length = 1  \n        elif i == len(lst)-1:  \n            sub_list.append(lst[i])  \n            max_length = max(max_length, len(sub_list))  \n        else:  \n            sub_list.append(lst[i])  \n            sub_list.pop(0)  \n            max_length = max(max_length, len(sub_list))  \n            \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize variables\n    max_length = 0\n    current_length = 0\n    sublist = []\n\n    # loop through list\n    for i in range(len(lst)):\n        # if current element is greater than the last element in the sublist,\n        # add the current element to the sublist and reset the current_length\n        if lst[i] > sublist[-1]:\n            sublist.append(lst[i])\n            current_length = 1\n        # if current element is not greater than the last element in the sublist,\n        # increment the current_length\n        else:\n            current_length += 1\n\n        # if the current_length is greater than the max_length, update max_length and sublist\n        if current_length > max_length:\n            max_length = current_length\n            sublist = [lst[i]]\n\n    # return max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        current_length += 1\n        if i == len(lst)-1:\n            max_length = max(max_length, current_length)\n        elif lst[i+1]!= lst[i]:\n            max_length = max(max_length, current_length)\n            current_length = 0\n            \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize max_length to the first element in the list\n    max_length = len(lst[0])\n\n    # Iterate over the remaining elements in the list\n    for i in range(1, len(lst)):\n        # Find the length of the current sublist\n        sublist_length = len(lst[i])\n        # Update max_length if current sublist is longer than max_length\n        if sublist_length > max_length:\n            max_length = sublist_length\n\n    # Return max_length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    # Use regular expressions to match between quotation marks and extract values\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    # define a regular expression to find all the values between quotation marks\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'\n\n    # use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n\n    # remove the quotation marks from the matches and return the values\n    return [match[1:-1] for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\W|^)\"(.*?)\"(?=\\W|$)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    This function extracts values between quotation marks from a string.\n\n    :param text: The string from which to extract the values.\n    :return: A list of extracted values.\n    \"\"\"\n    pattern = r'\\\"(.*?)\\\"'  # match quoted values surrounded by double quotes\n    matches = re.findall(pattern, text)  # find all matches using regular expression\n    values = [match[1:-1] for match in matches]  # remove quotes from matches and split into list\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(\")(.*?)\\1'\n    matches = re.findall(pattern, text)\n    values = [match[1] for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\".*?\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string using regular expressions.\n\n    Args:\n    text (str): The string to extract values from.\n\n    Returns:\n    list: A list of strings containing the extracted values.\n    '''\n\n    # Define regular expression pattern to match quotation marks\n    pattern = r'\"(.*?)\"'\n\n    # Use re.findall() function to extract all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    # create a dictionary to store frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    \n    # initialize the count variable to zero\n    count = 0\n    \n    # iterate over the array and check for unordered pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # if the elements at positions i and j are not equal and their frequencies are both greater than zero, increment the count\n            if arr[i]!= arr[j] and freq[arr[i]] > 0 and freq[arr[j]] > 0:\n                count += 1\n    \n    # return the count of unordered pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    # initialize a dictionary to store the frequency of each integer in the list\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    \n    # initialize a counter for the number of pairs\n    count = 0\n    \n    # iterate through the list and check if the difference between consecutive integers is equal to 1\n    for i in range(n-1):\n        if freq[arr[i+1]] == 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of its characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and splits it into characters.\n    '''\n    # Split the string into a list of characters\n    chars = list(word)\n    return chars"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string\n    num_str = str(n)\n    \n    # initialize a variable to store the sum of digits\n    total = 0\n    \n    # loop through each character in the string\n    for digit in num_str:\n        # convert the character to an integer\n        digit_int = int(digit)\n        \n        # add the integer to the sum\n        total += digit_int\n        \n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string and then to a list of digits\n    digits = [int(d) for d in str(n)]\n    # sum the digits of the integer\n    total = sum(digits)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each digit of the input integer\n    while n > 0:\n        # Get the rightmost digit of the integer and add it to the sum of digits\n        sum_of_digits += n % 10\n        \n        # Remove the rightmost digit from the integer\n        n //= 10\n    \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    # convert the input integer to a string and loop through each character in the string\n    for digit in str(n):\n        # add the integer digit to the sum\n        sum += int(digit)\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i-1] > list1[i]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and checks if it is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # check if the list is empty\n    if not list1:\n        return True\n    \n    # check if all elements of the list are same\n    first_element = list1[0]\n    for element in list1:\n        if element!= first_element:\n            return False\n    \n    # if all elements are same, then the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    if list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n            \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i, sublist in enumerate(list1):\n        for j, item in enumerate(sublist):\n            if isinstance(item, str):\n                sublist[j] = item.lower()\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # initialize an empty set to store unique numbers\n    unique_set = set()\n\n    # loop through each list in the input\n    for num_list in nums:\n        # loop through each number in the list\n        for num in num_list:\n            # if the number is not in the set, add it to the set\n            if num not in unique_set:\n                unique_set.add(num)\n\n    # convert the set to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set of unique elements from all the lists\n    unique_nums = set(num for sublist in nums for num in sublist)\n\n    # convert the set back to a list\n    unique_nums_list = list(unique_nums)\n\n    # return the list of unique numbers\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set of unique numbers from the first list\n    unique_nums = set(nums[0])\n    # Iterate through the remaining lists\n    for num_list in nums[1:]:\n        # Add the unique numbers from each list to the set of unique numbers\n        unique_nums = unique_nums.union(set(num_list))\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function removes duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                continue\n            unique_nums.append(nums[i])\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert the list to set to remove duplicates\n    unique_nums = set(nums)\n    # convert the set back to list to get the unique numbers\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    # Create a set to remove duplicates from the original list\n    unique_set = set(list_data)\n    # Convert the set back to a list and calculate the product\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    # create a set of the unique numbers in the list\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # create a set to store unique numbers\n    unique_set = set(list_data)\n\n    # calculate the product of the unique numbers in the set\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Remove duplicates from the list\n    unique_numbers = list(set(list_data))\n\n    # Calculate the product of unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of the unique numbers in the list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert the list to a set to remove duplicates\n    unique_product = 1  # initialize the product to 1\n    \n    for num in unique_numbers:\n        unique_product *= num\n    \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(lst):\n    \"\"\"\n    Given a list of integers, return the product of the unique numbers in the list.\n    \"\"\"\n    unique_nums = set(lst)\n    unique_product = 1\n    for num in unique_nums:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # filter out duplicate numbers from the list\n    unique_list = list(set(list_data))\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * r ** 2 + 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder using the formula:\n    # (1/2) * \u03c0 * r^2 * h\n    surface_area = (math.pi * r**2 * h) / 2.0\n    \n    # Return the calculated surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h # Formula for surface area of a cylinder"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*r + 2*3.14*r*h + 2*3.14*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the area of the cylinder using the formula: A = \u03c0r\u00b2h\n    A = 3.14159 * r ** 2 * h\n    \n    # Return the surface area of the cylinder\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*(r+h)*(r+h)\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area using the formula:\n    # surface area = 2\u03c0r\u00b2h\n    # where r is the radius of the cylinder and h is its height\n    surface_area = 2 * math.pi * r ** 2 * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B: \n        return True \n    if len(A) < len(B): \n        return False \n    for i in range(len(A)-len(B)+1): \n        if A[i:i+len(B)] == B: \n            return True \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if B is a sublist of A\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if B is a sublist of A\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B as input and checks whether B is a sublist of A or not.\n    It returns True if B is a sublist of A and False otherwise.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i=i-j\n            j=0\n    if j==len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if B is a sublist of A\n    if A in B:\n        return True\n    # If A is not a sublist of B, then check for A in the reversed B\n    if B[::-1] in A:\n        return True\n    # If none of the above conditions are met, then A is not a sublist of B\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A): \n        return False\n\n    for i in range(len(A)): \n        if A[i] in B: \n            if is_Sub_Array(A[i:], B[1:]) == True: \n                return True\n        else: \n            break\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n            \n        if i == len(A):\n            return True\n            \n        if j == len(B):\n            break\n            \n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a positive integer n as input and returns the last digit of the factorial of n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return (n // 10) % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        fact = 1\n        while n > 0:\n            fact *= n\n            n -= 1\n        return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit in its factorial.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # check if n is a positive integer\n    if type(n)!= int or n < 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    \n    # initialize the last digit as 0\n    last_digit = 0\n    \n    # loop through the digits of n and find the last digit\n    while n > 0:\n        last_digit = n % 10\n        n //= 10\n    \n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the last digit variable\n    last_digit = 0\n    # convert the number to a string\n    n_str = str(n)\n    # iterate through the string\n    for i in range(len(n_str)-1, -1, -1):\n        # multiply the last digit by the corresponding digit in the factorial\n        last_digit = last_digit*int(n_str[i])\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # find factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # find last digit of factorial\n    last_digit = factorial % 10\n\n    # return last digit of factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    # initialize factorial to 1\n    factorial = 1\n    # loop through the digits of the number\n    for digit in str(n):\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # multiply the factorial by the digit raised to its power\n        factorial *= digit_int ** digit_int\n    # return the last digit of the factorial\n    return str(factorial)[-1]"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize a variable to store the last digit of factorial\n    last_digit = 0\n\n    # Initialize a variable to store the remainder when n is divided by 10\n    remainder = n % 10\n\n    # While n is greater than 9, keep dividing it by 10 and adding the remainder to last_digit\n    while n > 9:\n        n = n // 10\n        last_digit += remainder\n        remainder = n % 10\n\n    # Return the last digit of factorial\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes 3 lists of the same length and returns a single flat list with all elements interleaved.\n    \"\"\"\n    if not list1:  # base case for empty list\n        return list2 + list3\n    else:\n        return [list1.pop(0)] + interleave_lists(list1, list2 + [list3.pop(0)], list3)"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Get the lengths of the lists\n    len1 = len(list1)\n    len2 = len(list2)\n    len3 = len(list3)\n    \n    # Check if the lists are of the same length\n    if len1!= len2 or len1!= len3 or len2!= len3:\n        raise ValueError(\"The lists must have the same length\")\n    \n    # Initialize the empty result list\n    result = []\n    \n    # Loop through the lists, adding the elements to the result list\n    for i in range(len1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    \n    # iterate over the lists in the order they appear in the function signature\n    for i in range(len(list1)):\n        # add the ith element of each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    \n    # Iterate over the lists and add elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n    list1 (list): first list to be interleaved.\n    list2 (list): second list to be interleaved.\n    list3 (list): third list to be interleaved.\n\n    Returns:\n    list: the flat list of interleaved lists.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the dissimilar elements\n    between them.\n    \"\"\"\n    # check if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length.\")\n        return\n    \n    # create an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        # if the elements are not equal, add it to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n            \n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input, and returns a list of all the elements that are in the first tuple but not in the second tuple.\n    \"\"\"\n\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # If the element is not in the second tuple\n        if element not in test_tup2:\n            # Add it to the dissimilar list\n            dissimilar_list.append(element)\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of all the elements in the first tuple that are not present in the second tuple.\n    \"\"\"\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the set of elements in both tuples\n    all_elements = set(test_tup1 + test_tup2)\n\n    # Get the intersection of the two sets\n    intersected_elements = test_tup1.intersection(test_tup2)\n\n    # Get the set of elements that are in the first tuple but not in the second tuple\n    dissimilar_elements = all_elements.difference(test_tup2)\n\n    # Print the results\n    print(\"Dissimilar elements in the first tuple:\", dissimilar_elements)\n    print(\"Dissimilar elements in the second tuple:\", dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a list to store the dissimilar elements\n    dissimilar_list = []\n    # iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # check if the element at index i is the same in both tuples\n        if test_tup1[i]!= test_tup2[i]:\n            # if it's different, add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n    # return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Using a list comprehension to iterate over the nested tuple and remove uneven elements\n    even_tuple = [(even_fnc(x)) for x in test_tuple if even_fnc(x) is not None]\n    \n    # Return the even tuple\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n        else:\n            pass\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = [] \n    for i in test_tuple: \n        if even_fnc(i): \n            even_list.append(i) \n    return even_list "
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for item in test_tuple:\n        if isinstance(item, list):\n            new_list.extend(even_ele(item, even_fnc))\n        else:\n            new_list.append(even_fnc(item))\n    return new_list\n\ndef is_even(x):\n    return x % 2 == 0\n\nresult = even_ele((1, (2, (3, (4, 5))), 6, (7, 8)), is_even)\nprint(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    filtered_list = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            filtered_list.extend(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            filtered_list.append(element)\n    return filtered_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.extend(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        new_tup = []\n        for item in tup:\n            if even_fnc(item):\n                new_tup.append(item)\n        new_tuple.append(new_tup)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_list.append(even_ele(i, even_fnc))\n        elif type(i) == list:\n            even_list.append([even_fnc(j) for j in i])\n        elif even_fnc(i):\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Compute the surface area of a square pyramid \n    # by multiplying the base edge and height \n    return b*s "
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the area of the base using Heron's formula\n    area_base = 0.5 * b * b\n\n    # Calculate the area of the pyramid using the formula for a square pyramid\n    area_pyramid = area_base + b * s\n\n    # Return the surface area of the pyramid\n    return area_pyramid"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s*2 + b*b*s + s*s*2 \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    return 2 * (b * s + b * s) + 2 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2  # Formula for surface area of a square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (b * s) + 2 * (s * b) + 4 * (b ** 2) + 4 * (s ** 2) + 2 * b * s - 2 * (b * b)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s + 2 * b * b + 2 * b * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s + b*s + s*b + s*b) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((b * s) * 3) / 2\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and returns True if it is empty, and False otherwise.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as an input and returns True if it is empty and False otherwise.\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(1, num+1):\n            catalan += (2*i-1) * catalan_number(i-1)\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (4 * n - 1) // (2 * n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Catalan number of 0 is 1\n    if num == 0:\n        return 1\n\n    # Catalan number of 1 is 1\n    if num == 1:\n        return 1\n\n    # Initialize the first two Catalan numbers\n    catalan_0 = 1\n    catalan_1 = 1\n\n    # Calculate the remaining Catalan numbers\n    for i in range(2, num + 1):\n        catalan_i = catalan_0 * catalan_1\n        catalan_0 = catalan_1\n        catalan_1 = catalan_i\n\n    return catalan_1"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)*num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Catalan number for\", n, \"is\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    num = 1\n    for i in range(1, n+1):\n        num = num * (n-i+1) / i\n    return num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculates the nth Catalan number using recursion.\n    \"\"\"\n    # Base case: if n is 0, return 1\n    if n == 0:\n        return 1\n    # Base case: if n is 1 or 2, return 1\n    if n == 1 or n == 2:\n        return 1\n    # Recursive case: calculate the nth Catalan number\n    else:\n        return catalan_number(n-1) + 2 * catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n\n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Calculate the denominator of the binomial coefficient\n    denominator = factorial // (factorial-n)\n\n    # Calculate the numerator of the binomial coefficient\n    numerator = factorial // (factorial-2*n)\n\n    # Calculate the Catalan number\n    catalan = numerator // denominator\n\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    else:\n        return (4 * catalan_number(num - 1) / (num + 1)) + catalan_number(num - 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the regular expression pattern for finding the adverb\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # use the re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n    # loop through all the matches and append their positions to the list\n    for match in matches:\n        adverb_positions.append(match.start())\n    # return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern for finding adverbs\n    pattern = r'\\bly\\b'\n    \n    # Use re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop through matches and return the first adverb ending with ly and its position\n    for i, match in enumerate(matches):\n        if 'ly' in match and i == 0:\n            return match, i"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\b(ly|ll|l|e)\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.span()\n        adverb = text[start:end]\n        adverbs.append((start, end, adverb))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find all words containing the letter \"ly\"\n    words = re.findall(r'\\bly\\w*\\b', text)\n    \n    # find the position of the first adverb ending with ly\n    pos = -1\n    for i in range(len(words)):\n        if words[i][-2:] == 'ly':\n            pos = i\n            break\n    \n    # print the result\n    if pos!= -1:\n        print('Adverb found:', words[pos])\n        print('Positions:', pos, 'and', pos+1)\n    else:\n        print('No adverb found.')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]*ly\\b'\n    # Use the re.finditer() method to find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n    # Loop through the matches and extract the start and end positions of each adverb\n    for match in matches:\n        start_position = match.start()\n        end_position = match.end()\n        adverb_positions.append((start_position, end_position))\n    # Return a tuple of the adverb positions and the list of matches\n    return adverb_positions, matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the pattern to match adverbs ending with \"ly\"\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    \n    # find all the matches of the pattern in the text\n    matches = pattern.finditer(text)\n    \n    # initialize an empty list to store the adverb and its positions\n    adverbs = []\n    \n    # loop through all the matches and store the adverb and its positions in the list\n    for match in matches:\n        adverb = match.group(0)\n        start_pos = match.start()\n        end_pos = match.end()\n        adverbs.append((adverb, start_pos, end_pos))\n        \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define regex pattern for adverbs ending with \"ly\"\n    pattern = re.compile(r'\\b\\w+ly\\b', re.IGNORECASE)\n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n    # Initialize an empty list to store adverb positions\n    positions = []\n    # Loop through the matches and append their positions to the positions list\n    for match in matches:\n        positions.append((text.index(match), text.index(match)+len(match)-1))\n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(?:adverb)(?:ly|ies)\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start, end = match.span()\n        print(f\"Adverb found at position {start}: {text[start:end]}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(?:(?<=\\W)ly\\b|\\b\\w*ly\\b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Heapify the dataset\n    heapq.heapify(items)\n\n    # Extract the n most expensive items and store them in a new list\n    expensive_items = []\n    for _ in range(n):\n        expensive_items.append(heapq.heappop(items))\n\n    return expensive_items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n and returns a list of the n most expensive items in the list.\n    '''\n\n    # Create a min heap to keep track of the n most expensive items\n    min_heap = []\n\n    # Use heapq to push each item into the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n    # Pop the smallest n items from the heap and add them to the result list\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the top n prices\n    prices = []\n    heapq.heapify(prices)\n\n    # Iterate through the items and update the min-heap\n    for price in items:\n        heapq.heappushpop(prices, price)\n\n    # Return the top n prices from the min-heap\n    return prices[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n and returns the n most expensive items in the dataset.\n    '''\n\n    # Sort the items in decreasing order of their prices\n    items.sort(reverse=True)\n\n    # Return the first n items in the sorted list\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for _, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items.\n    '''\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n\n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(min_heap, item)\n\n    # Iterate through the remaining items and add them to the heap if they are cheaper than the smallest item in the heap\n    for item in items[n:]:\n        if item < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items from the heap\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to keep track of the n most expensive items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # If the min heap has more than n elements, remove the last element\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Loop through the dataset and add each item to the heap if its price is lower than the current\n    # minimum price\n    for item in items:\n        if not min_heap or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n\n        # If the heap is full, remove the least expensive item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Extract the n most expensive items from the heap and return them as a list\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items based on their prices\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Take the top n items from the sorted list\n    result = [sorted_items[i][0] for i in range(n)]\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap with items and their prices\n    min_heap = []\n    for item, price in items:\n        heapq.heappush(min_heap, (price, item))\n    \n    # Extract the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        _, item = heapq.heappop(min_heap)\n        result.append(item)\n    \n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first_part = l[:n]\n    last_part = l[n:]\n    \n    # Add the first part to the end of the last part\n    new_list = last_part + first_part\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    mid = len(l) // 2\n    first_part = l[:mid]\n    last_part = l[mid:]\n    # Add the first part to the end of the last part\n    new_list = last_part + first_part\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # add the first part to the end of the second part\n    l = second_part + first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    new_list = l[:n] + [l[n]]\n    # Add the first part of the list to the end\n    return [l[0]] + new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"Error: The length of the list should be greater than or equal to the nth element\")\n    else:\n        # Split the list at the nth element\n        mid = n\n        left = l[:mid]\n        right = l[mid:]\n\n        # Add the first part of the list to the end of the right part\n        result = left + right\n        \n        return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the list is empty\n    if not l:\n        return l\n    \n    # Split the list at the nth element\n    mid = n // 2\n    first = l[:mid]\n    second = l[mid:]\n    \n    # Add the first part to the end\n    l = first + second\n    \n    # Recursively split the list and add the remaining elements to the end\n    l = split_Arr(l, n - mid)\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n == len(l):\n        return l\n    else:\n        mid = len(l) // 2\n        left_part = l[:mid]\n        right_part = l[mid:]\n        if n < mid:\n            return left_part + split_Arr(right_part, n)\n        else:\n            return split_Arr(left_part, n - mid) + right_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return None\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        print(\"Error: n cannot be negative.\")\n        return None\n    \n    if n == 0:\n        return [l[0]]\n    \n    mid = len(l) // 2\n    if n <= mid:\n        return l[:n] + l[n:]\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list and converts it to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # convert list to tuple\n    new_tuple = tuple(listx)\n    return new_tuple"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    # calculate the difference between the max and min values\n    diff = max_num - min_num\n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest value in the list\n    largest = max(nums)\n    smallest = min(nums)\n\n    # calculate the difference between the largest and smallest value\n    diff = largest - smallest\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the minimum value in the list\n    min_val = min(nums)\n    # Find the maximum value in the list\n    max_val = max(nums)\n    # Return the difference between minimum and maximum values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        diff = max_num - min_num\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # sort the list in ascending order\n    nums.sort()\n    # calculate the difference between the largest and smallest values\n    diff = nums[-1] - nums[0]\n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the smallest and largest values in the list\n    smallest = min(nums)\n    largest = max(nums)\n    \n    # Calculate the difference between largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function finds the difference between the largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    else:\n        return abs(max(nums) - min(nums))"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list of all the perfect squares between a and b\n    perfect_squares_list = []\n    for i in range(a, b + 1):\n        for j in range(i, i + 1):\n            perfect_squares_list.append(j**2)\n    \n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    perfect_squares = []\n    \n    # iterate through the numbers from a to b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num*num == num:\n            # add the perfect square to the list\n            perfect_squares.append(num*num)\n    \n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b + 1):\n        square = i * i\n        if square == i**2:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    count = 0\n    for i in range(a, b+1):\n        j = i * i\n        while j <= b:\n            j = j * 2\n            count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize two variables to keep track of the square root of a and b\n    root_a = 0\n    root_b = 0\n\n    # loop through a and b until a >= b\n    while a >= b:\n        # calculate the square root of a and b\n        root_a = (a + b) / 2\n        root_b = (b + a) / 2\n\n        # check if the square root of a is a perfect square\n        if root_a ** 2 == a:\n            # print the perfect square root of a\n            print(\"The perfect square root of\", a, \"is\", root_a)\n            break\n\n        # check if the square root of b is a perfect square\n        if root_b ** 2 == b:\n            # print the perfect square root of b\n            print(\"The perfect square root of\", b, \"is\", root_b)\n            break\n\n        # if neither of the above conditions is true, update a and b to search for the next perfect square\n        a = root_a\n        b = root_b"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a variable to store the sum of perfect squares\n    sum_of_squares = 0\n    \n    # iterate through the range of numbers between a and b\n    for num in range(int(a**0.5)+1):\n        # check if the number is a perfect square\n        if num**2 == num and num >= a and num <= b:\n            # add the square of the number to the sum of squares\n            sum_of_squares += num**2\n    \n    # return the sum of perfect squares\n    return sum_of_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for num in range(a, b+1):\n        if num == int(num**0.5 + 0.5) ** 2:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares_list = []\n    for i in range(a, b+1):\n        if i*i == i:\n            perfect_squares_list.append(i)\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two integers `a` and `b` as input and returns a list of perfect squares between them.\n    \"\"\"\n    # initialize a list to store the perfect squares\n    perfect_squares_list = []\n\n    # iterate through the range of numbers between a and b (inclusive)\n    for i in range(a, b+1):\n        # check if the square of the number is equal to the number itself\n        if i == i*i:\n            # if it is, add it to the list\n            perfect_squares_list.append(i)\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 0 or b < 0:\n        return 'Invalid input. Both numbers must be non-negative.'\n    else:\n        for i in range(a, b+1):\n            root = i**0.5\n            if int(root) ** 2 == i:\n                print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function converts polar coordinates (r, theta) to rectangular coordinates.\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    r = cmath.sqrt(x**2 + y**2) # calculating the magnitude of the complex number\n    theta = cmath.phase(x + y*1j) # calculating the angle in radians\n\n    # converting angle to degrees\n    theta = cmath.degrees(theta)\n\n    # calculating x and y coordinates using the polar formulas\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n\n    return x,y # returning the x and y coordinates in a tuple"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    \n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    \n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r (float): Polar radius\n        theta (float): Polar angle in radians\n\n    Returns:\n        tuple: rectangular coordinates (x, y)\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, y.real)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Length of the list\n    n = len(newList)\n\n    # Checking if the list has at least two elements\n    if n < 2:\n        print(\"The list must have at least two elements.\")\n    else:\n        # Interchanging the first and last elements\n        first_element = newList[0]\n        newList[0] = newList[n-1]\n        newList[n-1] = first_element"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # if list has less than 2 elements, return original list\n    if len(newList) < 2:\n        return newList\n    # if list has exactly 2 elements, return new list with first and last elements swapped\n    elif len(newList) == 2:\n        return [newList[1], newList[0]]\n    # if list has more than 2 elements, swap first and last elements and return the new list\n    else:\n        return [newList[-1], newList[0]] + newList[:-1]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"List must have at least two elements.\"\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # interchange the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"The list must have at least 2 elements to swap the first and last elements.\")\n        return\n\n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"New list after swapping the first and last elements: \", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return \"The list should have at least two elements.\"\n    \n    # swap first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    # Finding the length of the list\n    length = len(newList)\n\n    # Interchanging the first and last elements of the list\n    if length >= 2:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least 2 elements!\")\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"Swapped list:\", newList)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    i = 0\n    while i <= n - k:\n        sum += (i + 1) * (n - i) * (k + 1 - i) / (i + 1)\n        i += 1\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k, n+1):\n        sum += i\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 0\n    for i in range(1, k+1):\n        total += ((n - i + 1) * (k - i + 1)) // i\n    return total\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0 or k > n:\n        return None\n    else:\n        sum_of_products = 0\n        for i in range(1,k+1):\n            sum_of_products += i * binomial_Coeff(n-i,k-1)\n        return sum_of_products"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # find the sum of the product of consecutive binomial co-efficients\n    sum_prod = 0\n    for i in range(1,n+1):\n        prod = 1\n        for j in range(i):\n            prod *= j\n        for j in range(k-i+1,k+1):\n            prod *= (j-i+1)\n        sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Computes the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    coeffs = []\n    for i in range(k, n+1):\n        coeffs.append(binomial(n, i) * binomial(k-1, i-1))\n    return sum(coeffs)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    count = 0\n    total = 0\n    for i in range(k, n+1):\n        count += 1\n        total += i * (n-i+1)\n    return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k:\n        return 0\n    else:\n        return (n-k+1)*binomial_Coeff(n-1,k) + k*binomial_Coeff(n-1,k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum and the product of coefficients\n    sum_of_coeffs = 0\n    product_of_coeffs = 1\n\n    # Calculate the sum of consecutive binomial coefficients and their product\n    for i in range(1,k+1):\n        sum_of_coeffs += (n+1)*i\n        product_of_coeffs *= (n-i+1)\n\n    # Calculate the sum of the product of consecutive binomial coefficients\n    return sum_of_coeffs*product_of_coeffs"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): Total number of terms in the series.\n    k (int): Number of terms to be included in the series.\n\n    Returns:\n    float: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Define a helper function to calculate the binomial coefficient\n    def binomial_coeff(n, k):\n        \"\"\"\n        This function calculates the binomial coefficient using the formula nCk.\n\n        Parameters:\n        n (int): Total number of terms in the series.\n        k (int): Number of terms to be included in the series.\n\n        Returns:\n        float: The value of nCk.\n        \"\"\"\n        if k > n:\n            return 0\n        elif k == 0 or k == n:\n            return 1\n        else:\n            return binomial_coeff(n - 1, k - 1) + binomial_coeff(n - 1, k)\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum_product = binomial_coeff(n, k) * binomial_coeff(n - 1, k - 1)\n\n    return sum_product"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Regular expression pattern to match all zeroes from the beginning of the ip address\n    pattern = r'^\\0*'\n\n    # Remove all zeroes from the beginning of the ip address\n    ip = re.sub(pattern, '', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the IP address\n    pattern = re.compile(r'^(0)+')\n    ip = pattern.sub('', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\D*0+','',ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern for matching ip addresses\n    pattern = r'^([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'\n    \n    # Check if the input is a valid ip address using the pattern\n    if re.match(pattern, ip):\n        # Remove leading zeroes from each octet of the ip address\n        return re.sub(r'^\\d*[1-9]\\d*\\.\\d*\\.\\d*\\.\\d*$', '', ip)\n    else:\n        # If the input is not a valid ip address, return it unchanged\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeros from the ip address using regular expression\n    ip = re.sub('^0+', '', ip)\n    \n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from ip address using regular expression\n    ip = re.sub(r'^(0){1,3}\\.', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if not pattern.match(ip):\n        return None\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if ip_list[i] == '0':\n            del ip_list[i]\n    return '.'.join(ip_list)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    ip = re.sub(r'(\\b0+\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even_num = lst[0]\n    odd_num = lst[1]\n    if even_num % 2 == 0:\n        return even_num - odd_num\n    else:\n        return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n        else:\n            first_odd = num\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables\n    first_even = None\n    first_odd = None\n    sum_of_evens = 0\n    sum_of_odds = 0\n\n    # loop through the list\n    for i in list1:\n        # check if the number is even or odd\n        if i % 2 == 0:\n            # if it's even, check if it's the first one\n            if first_even is None:\n                first_even = i\n            else:\n                # if it's not the first one, add it to the sum of even numbers\n                sum_of_evens += i\n        else:\n            # if it's odd, check if it's the first one\n            if first_odd is None:\n                first_odd = i\n            else:\n                # if it's not the first one, add it to the sum of odd numbers\n                sum_of_odds += i\n\n    # calculate the difference between the sums of even and odd numbers\n    diff = first_even - first_odd - sum_of_evens + sum_of_odds\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Finding the first even and first odd number in the list\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0 and list1[i] % 3 == 0:\n            first_even = list1[i]\n            break\n        elif list1[i] % 2!= 0 and list1[i] % 3!= 0:\n            first_odd = list1[i]\n            break\n    \n    # Finding the difference between the first even and first odd number\n    diff = first_even - first_odd\n    \n    # Returning the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            if first_even == 0:\n                first_even = num\n            else:\n                return first_even - num\n        else:\n            if first_odd == 0:\n                first_odd = num\n            else:\n                return first_odd - num\n    \n    if first_even == 0:\n        return first_odd\n    elif first_odd == 0:\n        return first_even\n    else:\n        return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    diff = even_num - odd_num\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = next((num for num in lst if num % 2 == 0), None)\n    first_odd = next((num for num in lst if num % 2 == 1), None)\n    if first_even and first_odd:\n        return first_even - first_odd\n    else:\n        print(\"No even or odd numbers in the list.\")\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    \n    # finding the first even number in the list\n    i = 0\n    while i < len(list1) and list1[i] % 2 == 0:\n        i += 1\n    \n    # finding the first odd number in the list\n    j = i\n    while j < len(list1) and list1[j] % 2!= 0:\n        j += 1\n    \n    # calculating the difference of the two numbers\n    diff = abs(list1[i] - list1[j])\n    \n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert the first number into the second number.\n    \"\"\"\n    # Convert the two binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Calculate the number of bits in the two numbers\n    num_bits = len(str1)\n\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = num_bits\n\n    # Initialize a variable to store the carry\n    carry = 0\n\n    # Iterate through the bits of the two numbers\n    for i in range(num_bits - 1, -1, -1):\n\n        # Calculate the sum of the current bit and the carry\n        sum = num1 & 1 + carry\n\n        # Check if the sum is greater than or equal to 2\n        if sum >= 2:\n\n            # Calculate the difference between the sum and 2\n            diff = sum - 2\n\n            # Calculate the position of the bit that should be flipped\n            flip_pos = i - diff\n\n            # Check if the bit is already 1\n            if (num1 >> flip_pos) & 1 == 1:\n\n                # If the bit is already 1, then we need to swap it with the opposite bit\n                # To flip the bit, we need to set its position to 1, and the opposite bit to 0\n                if flip_pos < i:\n                    num1 = num1 ^ (1 << flip_pos)\n                    num1 = num1 ^ (1 << (flip_pos + 1))\n                else:\n                    num1 = num1 ^ (1 << (flip_pos - 1))\n                    num1 = num1 ^ (1 << flip_pos)\n\n                # Increment the minimum number of swaps\n                min_swaps += 1\n\n            # If the bit is 0, then we need to flip it to 1\n            else:\n\n                # To flip the bit, we need to set its position to 1, and the opposite bit to 0\n                if flip_pos < i:\n                    num1 = num1 ^ (1 << flip_pos)\n                    num1 = num1 ^ (1 << (flip_pos + 1))\n                else:\n                    num1 = num1 ^ (1 << (flip_pos - 1))\n                    num1 = num1 ^ (1 << flip_pos)\n\n                # Increment the minimum number of swaps\n                min_swaps += 1\n\n            # Set the carry to 0\n            carry = 0\n\n        # If the sum is less than 2, then we don't need to do anything\n        else:\n\n            # Increment the carry\n            carry = 1\n\n    # Check if the result is 0, which means we can't convert the first number into the second number\n    if num1!= 0:\n        min_swaps = -1\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    # Convert both strings to binary\n    num1 = int(str1,2)\n    num2 = int(str2,2)\n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n    # Traverse through all possible swaps\n    for i in range(len(str1)):\n        # Swap the i-th bits of both numbers\n        num1_swap = num1 ^ (1 << i)\n        num2_swap = num2 ^ (1 << i)\n        # Calculate the difference between the swapped numbers\n        diff = num1_swap - num2_swap\n        # Update the minimum number of swaps if the new difference is smaller\n        if diff < min_swaps:\n            min_swaps = diff\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists of digits\n    binary1 = [int(i) for i in str1]\n    binary2 = [int(i) for i in str2]\n\n    # Initialize a counter for swaps\n    swaps = 0\n\n    # Iterate over the first binary string and compare it to the second binary string\n    for i in range(len(binary1)):\n        if binary1[i]!= binary2[i]:\n            # Swap the digits if they are not equal\n            binary1[i], binary2[i] = binary2[i], binary1[i]\n            # Increment the swap count\n            swaps += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0 for j in range(n2+1)] for i in range(n1+1)]\n    for i in range(n1):\n        for j in range(n2):\n            if str1[i] == str2[j]:\n                dp[i+1][j+1] = dp[i][j]\n            else:\n                dp[i+1][j+1] = 1 + min(dp[i+1][j], dp[i][j+1], dp[i][j])\n    return dp[n1][n2]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    min_swaps = 0\n    for i in range(n):\n        if str1[i] == str2[i]:\n            continue\n        else:\n            min_swaps += abs(str1.count(str2[i]) - str2.count(str1[i]))\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert one to the other.\n\n    Args:\n        str1 (str): Binary number represented as a string.\n        str2 (str): Binary number represented as a string.\n\n    Returns:\n        int: The minimum number of swaps required to convert one binary number to another.\n\n    \"\"\"\n    # convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize the min_swaps variable\n    min_swaps = 0\n\n    # loop until all bits are swapped\n    while num1!= num2:\n\n        # if the binary representation of num1 is greater than num2, swap the bits of num1 and num2\n        if num1 > num2:\n            num1 = num1 ^ num2\n            num2 = num1 ^ num2\n            num1 = num1 ^ num2\n            min_swaps += 1\n\n        # if the binary representation of num2 is greater than num1, swap the bits of num1 and num2\n        else:\n            num2 = num2 ^ num1\n            num1 = num2 ^ num1\n            num2 = num2 ^ num1\n            min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert string to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n\n    # initialize minimum number of swaps\n    swaps = 0\n\n    # check if both strings are of equal length\n    if len(binary1)!= len(binary2):\n        # if not, return -1 as it is not possible to convert the binary strings\n        return -1\n\n    # iterate through the binary strings and compare them\n    for i in range(len(binary1)):\n        # if the digits are different, swap them\n        if binary1[i]!= binary2[i]:\n            # increment the number of swaps\n            swaps += 1\n\n    # return the minimum number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the two binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for the current number and the number of swaps required\n    curr_num = num1\n    swap_count = 0\n\n    # While the current number is different from the second number\n    while curr_num!= num2:\n        # Check if the current number has a 1 at a position that is different from the next position in the other number\n        if (curr_num & 1)!= ((curr_num >> 1) & 1):\n            # If there is a 1 at a different position, swap the numbers and increment the swap count\n            curr_num ^= num2\n            num2 ^= curr_num\n            curr_num ^= num2\n            swap_count += 1\n        else:\n            # If there is no 1 at a different position, divide the number by 2\n            curr_num = curr_num >> 1\n\n    # Return the minimum number of swaps required to convert the two binary numbers\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n    Args:\n    str1: A binary number represented as a string.\n    str2: A binary number represented as a string.\n\n    Returns:\n    An integer representing the minimum number of swaps required to convert str1 to str2.\n\n    \"\"\"\n\n    # Convert both strings into lists of binary digits.\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # Compare the length of the two lists. If they are different, swap the digits with the missing digits to make them same length.\n    if len(list1)!= len(list2):\n        for i in range(min(len(list1), len(list2))):\n            if list1[i] == 1:\n                list1[i], list2[i] = list2[i], list1[i]\n        list1 = list1[:len(list2)]\n\n    # Initialize variables for keeping track of swaps.\n    count = 0\n    n = len(list1)\n\n    # Iterate over the list of digits and swap them if they are not same.\n    for i in range(n):\n        if list1[i]!= list2[i]:\n            count += 1\n            list1[i], list2[i] = list2[i], list1[i]\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert both the strings to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n    \n    # create a matrix to store the number of swaps required to convert each binary number to another\n    matrix = [[0 for i in range(len(binary2)+1)] for j in range(len(binary1)+1)]\n    \n    # fill the matrix with the number of swaps required to convert each binary number to another\n    for i in range(len(binary1)):\n        for j in range(len(binary2)):\n            if binary1[i] == binary2[j]:\n                matrix[i+1][j+1] = 0\n            elif binary1[i] > binary2[j]:\n                matrix[i+1][j+1] = matrix[i+1][j] + 1\n            else:\n                matrix[i+1][j+1] = matrix[i][j+1] + 1\n    \n    # find the minimum number of swaps required to convert the first binary number to the second binary number\n    swaps = matrix[len(binary1)][len(binary2)]\n    \n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples and returns the size in bytes of the tuples in bytes.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        total_size += sys.getsizeof(tuple)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments:\n    arr1: The first sorted array\n    arr2: The second sorted array\n    k: The value of k for which the kth element needs to be found\n\n    This function returns the kth element from arr1. If there are duplicate elements in arr1, \n    then the function will return the first occurrence of the element.\n    \"\"\"\n    if len(arr1) == 0:\n        return arr2[k-1]\n    elif len(arr2) == 0:\n        return arr1[k-1]\n    elif arr1[0] < arr2[0]:\n        if k <= len(arr1):\n            return find_kth(arr1[1:], arr2, k)\n        else:\n            return find_kth(arr1, arr2[1:], k-len(arr1))\n    else:\n        if k <= len(arr2):\n            return find_kth(arr1, arr2[1:], k)\n        else:\n            return find_kth(arr1, arr2, k-len(arr2))"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    while i < len(arr1):\n        if i == len(arr1) - 1 or arr1[i] < arr1[i+1]:\n            return arr1[i]\n        i += 1\n    while j < len(arr2):\n        if j == len(arr2) - 1 or arr2[j] < arr2[j+1]:\n            return arr2[j]\n        j += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    m = len(arr1)\n    n = len(arr2)\n\n    # If either array is empty, return the other array's element.\n    if m == 0:\n        return arr2[k-1]\n    elif n == 0:\n        return arr1[k-1]\n\n    # If both arrays are not empty, merge them into a single sorted array.\n    merged = merge_sorted_arrays(arr1, arr2)\n\n    # Return the element at index k-1 in the merged array.\n    return merged[k-1]\n\n\ndef merge_sorted_arrays(arr1, arr2):\n    \"\"\"\n    Merge two sorted arrays into a single sorted array.\n    \"\"\"\n    merged = []\n    i = j = 0\n\n    # Merge the two arrays into a single sorted array.\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    # Add any remaining elements from either array to the merged array.\n    merged += arr1[i:]\n    merged += arr2[j:]\n\n    return merged"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = k = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr1[k], arr1[i] = arr1[i], arr1[k]\n            k += 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            arr2[k], arr2[j] = arr2[j], arr2[k]\n            k += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    if i < len(arr1):\n        arr1[k:] = arr1[i:]\n    else:\n        arr2[k:] = arr2[j:]\n\n    return arr1[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize variables for pointers to start of each array\n    i, j = 0, 0\n    # Initialize variable to store kth element\n    kth_elem = None\n    # Initialize variable to store count of elements in both arrays\n    count = 0\n    # Traverse both arrays simultaneously\n    while i < len(arr1) and j < len(arr2):\n        # If element at index i in arr1 is smaller, increment i and increment count\n        if arr1[i] < arr2[j]:\n            i += 1\n            count += 1\n        # If element at index j in arr2 is smaller, increment j and increment count\n        elif arr1[i] > arr2[j]:\n            j += 1\n            count += 1\n        # If elements at indices i and j are equal, check if count is equal to k\n        elif count == k:\n            kth_elem = arr1[i]\n            break\n        # If count is greater than k, decrement count and continue traversal\n        else:\n            count -= 1\n    # Return kth element if it is found, else return None\n    return kth_elem"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and the value of k as input and returns the kth smallest element from both arrays.\n    \"\"\"\n    # Find the length of the first array\n    n1 = len(arr1)\n    # Find the length of the second array\n    n2 = len(arr2)\n    # Check if k is less than the sum of the lengths of the two arrays\n    if k < n1 + n2:\n        return None\n    # Initialize two pointers to the first and last elements of the first array\n    i = 0\n    j = n1 - 1\n    # Initialize the variable to store the kth smallest element\n    kth_smallest = None\n    # Traverse the first array and compare each element with the kth smallest element\n    while i <= j and kth_smallest is None:\n        if arr1[i] < arr2[j]:\n            if kth_smallest is None:\n                kth_smallest = arr1[i]\n                k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if kth_smallest is None:\n                kth_smallest = arr2[j]\n                k -= n1\n            j -= 1\n        else:\n            # If the elements are equal, check if the kth element is already found\n            if kth_smallest is None and k == 1:\n                kth_smallest = arr1[i]\n            i += 1\n            j -= 1\n    # Return the kth smallest element\n    return kth_smallest"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(n)\n    sum_of_powers = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum_of_powers += digit ** len(num_str)\n        temp //= 10\n    return n == sum_of_powers\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(number)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit in the number string\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum variable\n        digit = int(digit)\n        sum += digit ** 3\n    # Check whether the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # converting the number to a string\n    number_str = str(number)\n    # initializing the sum of the digits\n    sum = 0\n    # iterating over each digit of the number\n    for digit in number_str:\n        # converting each digit to an integer\n        digit_int = int(digit)\n        # adding the product of the digit and the sum of the previous digits to the sum\n        sum += digit_int ** len(number_str)\n    # checking whether the sum is equal to the original number\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    temp = number\n    \n    # convert number to a string\n    str_num = str(number)\n    \n    # calculate the sum of the digits of the number\n    for i in range(len(str_num)):\n        digit = int(str_num[i])\n        sum += digit ** len(str_num)\n    \n    # check if the sum is equal to the original number\n    if sum == temp:\n        print(f\"{number} is an Armstrong number\")\n    else:\n        print(f\"{number} is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num = number\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    if num == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Checks if a number is a perfect square.\n    \"\"\"\n    return n == int(n**0.5) ** 2\n\ndef is_armstrong_number(number):\n    \"\"\"\n    Checks if the given number is an armstrong number or not.\n    \"\"\"\n    # Check if the number is less than 10\n    if number < 10:\n        return False\n\n    # Calculate the sum of the cube of each digit\n    num_digits = len(str(number))\n    sum_of_cubes = 0\n    for digit in str(number):\n        sum_of_cubes += int(digit)**3\n\n    # Check if the sum of the cubes is equal to the number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(num):\n    # Helper function to check if a number is divisible by 10 or not\n    def is_divisible_by_ten(num):\n        while num >= 10:\n            num //= 10\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 3 or not\n    def is_divisible_by_three(num):\n        while num >= 3:\n            num //= 3\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 5 or not\n    def is_divisible_by_five(num):\n        while num >= 5:\n            num //= 5\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 7 or not\n    def is_divisible_by_seven(num):\n        while num >= 7:\n            num //= 7\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 11 or not\n    def is_divisible_by_eleven(num):\n        while num >= 11:\n            num //= 11\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 13 or not\n    def is_divisible_by_thirteen(num):\n        while num >= 13:\n            num //= 13\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 17 or not\n    def is_divisible_by_seventeen(num):\n        while num >= 17:\n            num //= 17\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 19 or not\n    def is_divisible_by_nineteen(num):\n        while num >= 19:\n            num //= 19\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 23 or not\n    def is_divisible_by_twenty_three(num):\n        while num >= 23:\n            num //= 23\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 29 or not\n    def is_divisible_by_twenty_nine(num):\n        while num >= 29:\n            num //= 29\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 31 or not\n    def is_divisible_by_thirty_one(num):\n        while num >= 31:\n            num //= 31\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 37 or not\n    def is_divisible_by_thirty_seven(num):\n        while num >= 37:\n            num //= 37\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 41 or not\n    def is_divisible_by_forty_one(num):\n        while num >= 41:\n            num //= 41\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 43 or not\n    def is_divisible_by_forty_three(num):\n        while num >= 43:\n            num //= 43\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 47 or not\n    def is_divisible_by_forty_seven(num):\n        while num >= 47:\n            num //= 47\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 53 or not\n    def is_divisible_by_fifty_three(num):\n        while num >= 53:\n            num //= 53\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 59 or not\n    def is_divisible_by_fifty_nine(num):\n        while num >= 59:\n            num //= 59\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 61 or not\n    def is_divisible_by_sixty_one(num):\n        while num >= 61:\n            num //= 61\n        return num == 0\n    \n    # Helper function to check if a number is divisible by 67 or not\n    def is_divisible_by_sixty_se"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Initialize the sum of the number\n    sum = 0\n    \n    # Loop through each digit in the number\n    for digit in number_str:\n        # Convert the digit to an integer\n        digit = int(digit)\n        # Multiply the digit to the power of its position in the number\n        sum += digit ** len(number_str)\n    \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n\n    num_str = str(number)\n    sum_of_squares = 0\n\n    for digit in num_str:\n        square = int(digit) ** 2\n        sum_of_squares += square\n\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        num_str = str(number)\n        sum_of_powers = 0\n        for i in range(len(num_str)):\n            power = len(num_str) - i - 1\n            sum_of_powers += int(num_str[i]) ** power\n        return sum_of_powers == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(number + 1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and calculates the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    \n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    total = 0\n    for i in range(1, number+1):\n        sum += i\n        total += 1\n    average = sum/total\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables for sum and count\n    sum_val = 0\n    count = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, number+1):\n        # add the current number to the sum and increment the count\n        sum_val += i\n        count += 1\n    \n    # calculate the average by dividing the sum by the count\n    average = sum_val/count\n    \n    # print the sum and average\n    print(\"Sum of first {} natural numbers: {}\".format(number, sum_val))\n    print(\"Average of first {} natural numbers: {}\".format(number, average))\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of first\", number, \"natural numbers:\", sum)\n    print(\"Average of first\", number, \"natural numbers:\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \"\"\"\n    return (n % 2) == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer input and returns True if it is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns True if `n` is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(f\"{n} is Even\")\n    else:\n        print(f\"{n} is Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character by looping through the dictionary and keeping track of the character with the highest count\n    first_repeated = None\n    max_count = 0\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            first_repeated = char\n\n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # loop through each character in the string\n    for char in str1:\n        # if the character has already been seen before, return it\n        if str1.count(char) > 1:\n            return char\n    \n    # if no repeated character has been found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j]:\n                return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first repeated character in the dictionary\n    for char in freq:\n        if freq[char] == 2:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(2, n+1):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            ludic.append(i)\n        else:\n            j = 2\n            while j*j <= i:\n                if i % j == 0:\n                    break\n                j += 1\n            if j*j > i:\n                ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(n+1):\n        if i**2 <= n:\n            lucid_numbers.append(i**2)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Start with 1 as the first number\n    current_number = 1\n\n    # Loop until we reach the given integer\n    while current_number <= n:\n\n        # Check if the current number is a lucid number\n        is_lucid = True\n        for i in range(2, current_number):\n            if current_number % i == 0:\n                is_lucid = False\n                break\n\n        # If the current number is a lucid number, add it to the list\n        if is_lucid:\n            lucid_numbers.append(current_number)\n\n        # Move on to the next number\n        current_number += 1\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    return is_prime(n) and is_prime(sum_of_digits(n))\n\n\ndef is_prime(n):\n    '''\n    Write a function to check if a given integer is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_of_digits(n):\n    '''\n    Write a function to calculate the sum of digits of a given integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            j = i + i\n            while j <= n:\n                if j % i:\n                    lucid_numbers.append(j)\n                j += i\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n    # Start with the first lucid number\n    current_lucid_number = 1\n    # While the current lucid number is less than or equal to n\n    while current_lucid_number <= n:\n        # Append the current lucid number to the list\n        lucid_numbers.append(current_lucid_number)\n        # Increment the current lucid number by 1\n        current_lucid_number += 1\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize a list to store lucid numbers\n    lucid_numbers = []\n    \n    # Loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a lucid number\n        if i == 1 or (i % 2 == 0 and i!= 2) or (i % 3 == 0 and i!= 3):\n            lucid_numbers.append(i)\n    \n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join(words[::-1])"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into a list of words\n    reversed_words = [word[::-1] for word in words]  # reverse each word\n    return''.join(reversed_words)  # join the reversed words back into a string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Splitting the string by space and reversing each word\n    words = s.split()\n    reversed_words = words[::-1]\n    # Joining the reversed words back together with space\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)//2):\n        words[i], words[-i-1] = words[-i-1], words[i]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into a list of words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    result =''.join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if a given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    This function checks if the given integer is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given number is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function returns True if the given integer is a prime number,\n    else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number or not.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # Check if the number is divisible by any number between 2 and the square root of the number (inclusive)\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # If no number is divisible by any number between 2 and the square root of the number, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180.0\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function searches for a regex pattern in a given string and returns the matching substrings, start indices, and end indices.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        print(\"Match found:\", match)\n        print(\"Start index:\", start_index)\n        print(\"End index:\", end_index)\n        print()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        first_match, end_index = matches[0]\n        return first_match, 0, end_index\n    return None, 0, 0"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, -1, -1"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        print(\"Match: %s\" % match)\n        print(\"Start index: %d\" % start)\n        print(\"End index: %d\" % end)\n        print()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        start = result.start()\n        end = result.end()\n        return result.group(), start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # Find all matches of the regex pattern in the string\n    matches = re.findall(pattern, text)\n\n    # Loop through the matches and return the substrings, start indices, and end indices\n    for match in matches:\n        # Get the start and end indices of the match\n        start = match.start()\n        end = match.end()\n\n        # Get the substring of the text that matches the match\n        substring = text[start:end]\n\n        # Return the substring, start index, and end index\n        yield substring, start, end"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 0: \n        return \"Input must be a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * bell_Number(n-1) - bell_Number(n-2)) // (2**n)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 12\n    elif n == 2:\n        return 21\n    elif n == 3:\n        return 34\n    elif n == 4:\n        return 55\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 144\n    elif n == 7:\n        return 233\n    elif n == 8:\n        return 377\n    elif n == 9:\n        return 610\n    elif n == 10:\n        return 987"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return bell_Number(n//2) * bell_Number(n//2)\n    else:\n        return bell_Number(n//2) * (2 * bell_Number(n//2) - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(L):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    n = len(list1)\n    k = L - 1\n    if k >= n:\n        return list1\n    else:\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Define the length of the list\n    n = len(list1)\n    \n    # Define the index of the k'th element to be removed\n    k = L - 1\n    \n    # Remove the k'th element from the list\n    del list1[k]\n    \n    # Return the updated list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1 = list1[1:]  # remove the first element (index 0)\n    list1.pop(L-1)  # remove the k'th element\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Remove the kth element from the given list.\n    \"\"\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i!= k:\n            list1[i], list1[k] = list1[k], list1[i]\n            k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    if L >= n:\n        return []\n    k = L-1\n    i = 0\n    while i < k:\n        list1[i] = list1[i+1]\n        i += 1\n    list1.pop()\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and an integer k and returns a list with the same elements, \n    but the k'th element removed.\n    '''\n\n    if k >= len(list1):\n        return []\n\n    k -= 1\n    result = list1[:k] + list1[k+1:]\n\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    k = L\n    n = len(list1)\n\n    # Move all elements to the right of the kth element to the left\n    for i in range(k-1):\n        list1[i], list1[i+1] = list1[i+1], list1[i]\n\n    # Remove the kth element from the list\n    del list1[k-1]\n\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            max_value = test_list[i][N-1]\n        else:\n            if test_list[i][N-1] > max_value:\n                max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Returning the max of the nth column from the given matrix\n    return max([row[N-1] for row in test_list])"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if max_val < row[N]:\n            max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(test_list)\n    cols = len(test_list[0])\n    \n    # Check if then'th column exists\n    if N >= cols:\n        return None\n    \n    # Initialize the max value to the first element in then'th column\n    max_value = test_list[0][N-1]\n    \n    # Loop through the rows and find the max value in then'th column\n    for i in range(1, rows):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    \n    # Return the max value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first row of the matrix\n    length = len(test_list[0])\n    # Initialize the max value to be the first element of then'th column\n    max_val = test_list[0][N-1]\n    # Iterate through the remaining rows of the matrix\n    for row in test_list[1:]:\n        # Compare the current element of then'th column with the max value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # create a list to store the maximum value of each column\n    max_values = []\n    \n    # loop through each row of the matrix\n    for row in test_list:\n        # append the maximum value of then'th column to the list of max_values\n        max_values.append(max(row[N-1]))\n    \n    # return the maximum value of then'th column\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the maximum value of the Nth column.\n    \"\"\"\n    max_value = float('-inf')\n    for row in matrix:\n        if N > len(row):\n            raise ValueError(f\"N ({N}) should be less than or equal to the number of columns in the matrix ({len(row)}).\")\n        max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first list in the list (which is the number of rows in the matrix)\n    n = len(test_list)\n    # Get the n-th column as a list\n    col = [row[N-1] for row in test_list]\n    # Return the maximum value in the column\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max_col to the first element of the first row\n    max_col = test_list[0][N-1]\n    \n    # loop through each row of the matrix\n    for i in range(1, len(test_list)):\n        # if the current element is greater than max_col\n        if test_list[i][N-1] > max_col:\n            # update max_col to the current element\n            max_col = test_list[i][N-1]\n    \n    # return max_col as the result\n    return max_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        if len(sublist)!= 2:\n            raise ValueError(\"All sublists must have two elements\")\n        first_elem, second_elem = sublist\n        result.append([first_elem, second_elem])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):  \n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n        else:\n            print(\"Invalid sublist\")\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Initialize an empty list to store the merged list\n    merged = []\n    # Loop through each sublist in the original list\n    for sublist in lst:\n        # If the sublist has two elements, add the first element to the first list of the merged list and the second element to the second list of the merged list\n        if len(sublist) == 2:\n            merged.append([sublist[0], sublist[1]])\n        else:\n            raise ValueError(\"All sublists in the original list should have two elements\")\n    # Return the merged list\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum variable\n    cumulative_sum = 0\n\n    # Iterate through the list of tuples\n    for num_tuple in test_list:\n\n        # Iterate through the numbers in each tuple\n        for num in num_tuple:\n\n            # Add each number to the cumulative sum\n            cumulative_sum += num\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Create an empty list to store the cumulative sum\n    cum_sum = []\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple and add it to the cumulative sum\n        for val in tup:\n            cum_sum.append(val)\n    \n    # Return the cumulative sum as a list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for elem in test_list:\n        cumsum += elem\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total = 0\n    for item in test_list:\n        total += item\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # Loop through the list of tuples\n    for i in test_list:\n        # Check if the value is an integer\n        if isinstance(i, int):\n            # Add it to the cumulative sum\n            cum_sum += i\n        else:\n            # If the value is not an integer, ignore it\n            continue\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for num in test_list:\n        sum_list.append(sum(num))\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n    \n    # Loop through the list of tuples\n    for i, tup in enumerate(test_list):\n        # Check if the current tuple contains a value\n        if len(tup) > 0:\n            # If the value is an integer, add it to the cumulative sum\n            if isinstance(tup[0], int):\n                cumulative_sum += tup[0]\n            # If the value is a float, convert it to an integer and add it to the cumulative sum\n            elif isinstance(tup[0], float):\n                cumulative_sum += int(tup[0])\n            # If the value is a string, convert it to an integer and add it to the cumulative sum\n            elif isinstance(tup[0], str):\n                cumulative_sum += int(tup[0])\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        if type(i) == tuple:\n            result.append(sum(i) / len(i))\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the average values\n    avg_list = []\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # calculate the sum of all the numbers in the tuple\n        total = sum(tup)\n        # calculate the average by dividing the sum by the number of elements in the tuple\n        avg = total/len(tup)\n        # append the average to the list of averages\n        avg_list.append(avg)\n    # return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to hold the averages\n    avg_list = []\n    \n    # loop through each tuple in the input list\n    for tup in nums:\n        # loop through each value in the tuple\n        count = 0\n        total = 0\n        for val in tup:\n            # add the value to the total and increment the count\n            total += val\n            count += 1\n        # if the count is not 0, calculate the average and add it to the avg_list\n        if count!= 0:\n            avg = total/count\n            avg_list.append(avg)\n    \n    # return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        averages.append(sum(num)/len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        average = sum(i) / len(i)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Initialize an empty list to store the averages\n    avg_list = []\n\n    # Iterate over the tuples in the input tuple\n    for tup in nums:\n        # Calculate the average value of the tuple\n        avg = sum(tup) / len(tup)\n        # Append the average value to the list\n        avg_list.append(avg)\n\n    # Return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        averages.append(sum(num) / len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must be of equal length.\")\n    # perform element wise modulo\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples must be of the same length.\")\n        return\n    \n    # Perform element-wise modulo\n    result_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    \n    # Print the result\n    print(\"Element-wise modulo of the input tuples:\")\n    print(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n        \n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length!\")\n    else:\n        modulo_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n        return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length!\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Calculating the maximum number of jumps possible from (0, 0) to (d, 0)\n    max_jumps = steps // d\n\n    # Calculating the number of jumps required to reach the desired point from (0, 0)\n    min_jumps = steps - d\n\n    # Returning the minimum number of jumps required\n    return min(max_jumps, min_jumps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Create a list to store the number of jumps for each step\n    jumps = []\n\n    # Initialize the number of jumps to 0\n    current_jumps = 0\n\n    # Loop through each step\n    for step in range(steps):\n        # Check if the distance from origin is greater than or equal to the distance to reach the goal point\n        if abs(d) >= abs(step + d):\n            # If the distance from origin is greater than the distance to reach the goal point,\n            # the number of jumps required is the current jumps plus 1\n            jumps.append(current_jumps + 1)\n            # Move the distance to reach the goal point to the next step\n            d = step + d\n        else:\n            # If the distance from origin is less than or equal to the distance to reach the goal point,\n            # the number of jumps required is the current jumps plus the difference between the distance to reach the goal point and the current distance from origin\n            jumps.append(current_jumps + abs(d) - abs(step + d))\n            # Move the distance from origin to the next step\n            d = step + d - abs(d)\n        # Update the current number of jumps\n        current_jumps += 1\n\n    # Return the minimum number of jumps required\n    return min(jumps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initializing variables\n    reachable_points = 0\n    current_point = 0\n    current_level = 0\n    reachable_points_per_level = {}\n\n    # adding starting point to list of reachable points\n    reachable_points_per_level[current_level] = [current_point]\n\n    # loop to iterate over all steps\n    for step in range(steps):\n        # calculating the maximum number of jumps possible from current level\n        max_jumps = len(reachable_points_per_level[current_level])\n        # calculating the minimum number of jumps required for current level\n        min_jumps = current_level * max_jumps\n        # calculating the jumps required for current level\n        jumps = 0\n        for i in range(max_jumps):\n            if reachable_points_per_level[current_level][i] + d < steps:\n                jumps += 1\n                reachable_points_per_level[current_level+1].append(reachable_points_per_level[current_level][i] + d)\n        # calculating the minimum of jumps required for current level and jumps required for next level\n        min_jumps = min(min_jumps, jumps)\n        # updating the reachable points for current level\n        reachable_points_per_level[current_level] = reachable_points_per_level[current_level][:-min_jumps]\n        # updating the current point and current level\n        current_point += min_jumps\n        current_level += 1\n        reachable_points += len(reachable_points_per_level[current_level])\n\n    # returning the minimum number of jumps required\n    return min_jumps + reachable_points"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    steps.sort()\n    i = 0\n    j = steps[0]\n    jumps = 0\n    \n    # Loop until all steps have been processed\n    while i < len(steps):\n        # If we reach the desired point, increment jumps and exit loop\n        if d == 0 and steps[i] == 0:\n            jumps += 1\n            break\n        \n        # If we can reach the desired point from the current position, increment jumps and move to next step\n        if d >= 0 and i + d < len(steps) and steps[i+d] >= j + 1:\n            jumps += 1\n            i += d\n        else:\n            i += 1\n        \n        # Update current position\n        if i == len(steps):\n            j = 0\n        else:\n            j = steps[i]\n            \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    n = 1  # current step\n    j = 0  # number of jumps\n    \n    # Loop until we reach the point (d, 0)\n    while n <= steps:\n        if n == d:\n            return j + 1\n        j += 1\n        n += 1\n        \n    # If we reach here, it means we cannot reach the point (d, 0) in the given steps\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # if length of steps is less than 2, return 0\n    if len(steps) < 2:\n        return 0\n\n    # create a dictionary to store the minimum number of jumps required to reach each point\n    jump_dict = {}\n    # start at (0, 0) and add the minimum number of jumps required to reach (0, 0) to the dictionary\n    jump_dict[(0, 0)] = 0\n    # iterate through the steps and update the minimum number of jumps required to reach each point\n    for step in steps:\n        # get the current point and the distance from origin\n        x, y = step\n        # check if the current point is (0, 0) and update the dictionary accordingly\n        if (x, y) == (0, 0):\n            jump_dict[step] = 0\n        # check if the current point is a neighbor of the starting point and update the dictionary accordingly\n        elif (x - d, y) in jump_dict or (x, y - d) in jump_dict:\n            # if the current point is already in the dictionary, use its value as the minimum number of jumps required\n            if (x, y) in jump_dict:\n                jump_dict[step] = min(jump_dict[(x, y)], jump_dict[(x - d, y)] + 1, jump_dict[(x, y - d)] + 1)\n            # if the current point is not in the dictionary, calculate its minimum number of jumps required\n            else:\n                jump_dict[step] = min(jump_dict[(x - d, y)] + 1, jump_dict[(x, y - d)] + 1)\n    # get the minimum number of jumps required to reach (0, 0) from origin\n    return min(jump_dict[(x, y)] for x in range(0, d + 1) for y in range(0, d + 1))"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 1:\n        return 0\n    elif d == 0:\n        return steps\n    else:\n        min_jumps = min_Jumps(steps-1, d)\n        if min_jumps > 0:\n            return min_jumps + 1\n        else:\n            return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    curr_pos = (0, 0)  # Current position\n    curr_step = 0  # Current step\n    \n    # Check if the start position is on the top row\n    if curr_pos[0] == d:\n        return 0\n    \n    # Check if the start position is in the top row\n    if curr_pos[0] == 0 and curr_pos[1] == 0:\n        return steps - curr_step\n    \n    # Initialize variable to store the number of jumps required\n    jumps = 0\n    \n    # Loop until the current position is on the top row\n    while curr_pos[0] < d:\n        # Move to the next position\n        if curr_pos[0] == curr_pos[1]:\n            if curr_step + 1 < steps:\n                curr_pos = (curr_pos[0], curr_pos[1] + 1)\n                curr_step += 1\n                jumps += 1\n        else:\n            if curr_pos[1] + 1 < d:\n                curr_pos = (curr_pos[0], curr_pos[1] + 1)\n                jumps += 1\n            else:\n                if curr_pos[0] == d:\n                    return jumps + 1\n    \n    # If the current position is on the bottom row\n    return jumps + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    i = 0\n    while i < steps:\n        i += d\n        jumps += 1\n        if i >= steps:\n            break\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    def binary_search(start, end, target):\n        if start == end:\n            return start\n        mid = (start + end) // 2\n        if steps[mid] < target:\n            return binary_search(mid + 1, end, target)\n        else:\n            return binary_search(start, mid - 1, target)\n\n    def min_jumps_helper(start, end, target):\n        if start == end:\n            return start\n        if steps[start] >= target:\n            return min_jumps_helper(start + 1, end, target)\n        else:\n            mid = binary_search(start + 1, end, target - steps[start])\n            return min_jumps_helper(start + 1, start + mid, target)\n\n    return min_jumps_helper(0, len(steps) - 1, d)\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes in two lists and returns a new list containing the element-wise division of the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]/nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if both lists have equal length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have equal length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # loop through the two lists and divide each element\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists have different lengths.\")\n        return\n    \n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero!\")\n            return\n        \n        nums1[i] = nums1[i] / nums2[i]\n        \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have same length\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n\n    Parameters:\n    nums1 (list): List of numbers to be divided.\n    nums2 (list): List of numbers to divide the first list by.\n\n    Returns:\n    list: List of integers, each corresponding to the quotient of the corresponding elements of `nums1` and `nums2`.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] // nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store the numbers\n    num_str = \"\"\n    \n    # loop through the characters in the string\n    for char in test_str:\n        # if the character is a number, add it to the num_str\n        if char.isdigit():\n            num_str += char\n    \n    # if there are no numbers, return the original string\n    if not num_str:\n        return test_str\n    \n    # otherwise, return the original string with the numbers moved to the end\n    return test_str[:-len(num_str)] + num_str + test_str[-len(num_str):]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize an empty string to store the numbers\n    num_str = \"\"\n    # Initialize a variable to store the position of the last number found\n    last_pos = 0\n    # Iterate through each character in the input string\n    for i in range(len(test_str)):\n        # Check if the character is a number\n        if test_str[i].isdigit():\n            # Append the number to the number string and update the last_pos variable\n            num_str += test_str[i]\n            last_pos = i\n    # Check if there are any numbers in the string\n    if len(num_str) == 0:\n        # If there are no numbers, return the original string\n        return test_str\n    # Check if the last number found was at the beginning of the string\n    if last_pos == 0:\n        # If it was at the beginning, return the number string concatenated with the rest of the string\n        return num_str + test_str[last_pos:]\n    # Check if the last number found was at the end of the string\n    if last_pos == len(test_str)-1:\n        # If it was at the end, return the number string concatenated with the rest of the string\n        return test_str[:last_pos] + num_str\n    # Otherwise, return the number string concatenated with the rest of the string\n    return test_str[:last_pos] + num_str + test_str[last_pos+1:]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        num_str = ''.join(num_list)\n        test_str = test_str.replace(num_str, '')\n        test_str += num_str\n    else:\n        test_str = ''\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables to keep track of the index of the numbers and the length of the string\n    index = 0\n    length = len(test_str)\n\n    # Loop through the string from the beginning until the end\n    while index < length:\n        # Check if the current character is a number\n        if test_str[index].isdigit():\n            # If it is, move it to the end of the string\n            for j in range(index + 1, length):\n                test_str = test_str[:j] + test_str[j] + test_str[index] + test_str[j + 1:]\n                length = len(test_str)\n                index = 0\n                for j in range(index + 1, length):\n                    test_str = test_str[:j] + test_str[j] + test_str[index] + test_str[j + 1:]\n            break\n        index += 1\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # initialize a variable to store the new string\n    new_str = ''\n\n    # loop through each character in the original string\n    for char in test_str:\n\n        # if the character is a number, add it to the new string\n        if char.isdigit():\n            new_str += char\n\n        # if the character is not a number, add it to the end of the new string\n        else:\n            new_str += char\n\n    # return the new string with all numbers moved to the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    # Initialize a variable to store the number count\n    num_count = 0\n    # Initialize a variable to store the string length\n    str_len = len(test_str)\n    # Loop through the string from left to right\n    for i in range(str_len):\n        # If the current character is a number\n        if test_str[i].isdigit():\n            # Increment the number count\n            num_count += 1\n    # Initialize a variable to store the first index of the number\n    num_start = 0\n    # Initialize a variable to store the last index of the number\n    num_end = 0\n    # Loop through the string from right to left\n    for i in range(str_len - 1, -1, -1):\n        # If the current character is a number\n        if test_str[i].isdigit():\n            # Update the last index of the number\n            num_end = i\n            # If the number count is equal to the number start index, move the numbers\n            if num_count == num_start:\n                # Loop through the string from right to left until the number end index\n                for j in range(num_start, num_end):\n                    # Swap the current character with the previous character\n                    test_str[j], test_str[j + 1] = test_str[j + 1], test_str[j]\n                # Increment the number count\n                num_count += 1\n            # Increment the number start index\n            num_start += 1\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    test_str = ''.join(num_list)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = [char for char in test_str if char.isdigit()]\n    if numbers:\n        return test_str.replace(numbers[0], '') + numbers[0] + test_str.replace(numbers[-1], '')\n    else:\n        return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list of numbers in descending order\n    a.sort(reverse=True)\n\n    # initialize variables for tracking the largest subset found so far and the current subset being considered\n    largest = 0\n    current_subset = 0\n\n    # iterate through the list of numbers\n    for num in a:\n        # if the current subset is less than or equal to 0, add the current number to the subset and update the largest subset found\n        if current_subset <= 0:\n            current_subset = 1\n            largest = current_subset\n\n        # if the current number is divisible by the current subset, increase the current subset by 1\n        elif num % current_subset == 0:\n            current_subset += 1\n\n        # if the current subset becomes greater than the largest subset found so far, update the largest subset found\n        if current_subset > largest:\n            largest = current_subset\n\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables\n    count = 0\n    max_count = 0\n    start = 0\n    end = 0\n    \n    # Iterate through the list and check if every pair is divisible\n    for i in range(1, len(a)):\n        if a[i] % a[start] == 0:\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i\n        else:\n            count = 0\n    \n    # Return the size of the largest subset\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a list of all possible pairs of numbers\n    pairs = [(x, y) for x in a for y in a]\n    # sort the list by the sum of the numbers in each pair\n    pairs.sort(key=lambda p: sum(p))\n    # initialize variables to keep track of the largest subset and its size\n    largest_subset = []\n    largest_size = 0\n    # iterate over the sorted list of pairs\n    for p in pairs:\n        # if the sum of the numbers in the pair is even, add the pair to the largest subset and update the size\n        if sum(p) % 2 == 0:\n            largest_subset.append(p)\n            largest_size = max(largest_size, len(largest_subset))\n    # return the largest size of any subset of the input list\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Define a function to check if two numbers are divisible by each other\n    def is_divisible(num1, num2):\n        return num1 % num2 == 0 and num2 % num1 == 0\n\n    # Define a function to find the size of a subset\n    def subset_size(subset):\n        count = 0\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                if is_divisible(a[i], a[j]) and i!= j:\n                    count += 1\n        return count\n\n    # Initialize the maximum size to 0\n    max_size = 0\n\n    # Loop over all possible subsets of the list\n    for i in range(len(a)+1):\n        for j in range(1, i+1):\n            subset = a[:i] + a[i:j] + a[j:]\n            subset_size_i = subset_size(subset[:i])\n            subset_size_j = subset_size(subset[j:])\n            max_size = max(max_size, subset_size_i + subset_size_j)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_subset_size = 0\n    current_subset_size = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_subset_size += 1\n            if current_subset_size > max_subset_size:\n                max_subset_size = current_subset_size\n        else:\n            current_subset_size = 1\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    size = 1\n    for i in range(1, n):\n        if a[i] % a[size-1] == 0:\n            size += 1\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_subset = 1\n    current_subset = 1\n    for i in range(n-1):\n        if a[i+1] % a[i] == 0:\n            current_subset += 1\n        else:\n            max_subset = max(max_subset, current_subset)\n            current_subset = 1\n    max_subset = max(max_subset, current_subset)\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] * a[i] % 2 == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables\n    largest = 1\n    current_size = 1\n    previous_number = a[0]\n    \n    # Iterate through the list\n    for i in range(1, len(a)):\n        # Check if the current number is divisible by the previous number\n        if a[i] % previous_number == 0:\n            current_size += 1\n        else:\n            # If the current number is not divisible by the previous number, update the largest subset\n            if current_size > largest:\n                largest = current_size\n            # Reset the current size and previous number\n            current_size = 1\n            previous_number = a[i]\n    \n    # Check if the list ends with a pair divisible by the previous number\n    if a[-1] % previous_number == 0:\n        current_size += 1\n    else:\n        # If the current number is not divisible by the previous number, update the largest subset\n        if current_size > largest:\n            largest = current_size\n    \n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    max_subset = 1\n    current_subset = 1\n    current_number = a[0]\n    largest_pair = [current_number, current_number]\n\n    # Iterate through the list\n    for number in a[1:]:\n        # Check if the current number is divisible by the current subset\n        if current_number % current_subset == 0:\n            # If it is, update the current subset and largest pair if necessary\n            if current_subset + 1 > max_subset:\n                max_subset = current_subset + 1\n                largest_pair = [current_number, current_number]\n            current_number = number\n            current_subset = 1\n        # If it is not, update the current subset\n        else:\n            current_subset += 1\n\n    # Add the last pair to the largest pair if necessary\n    if current_number % current_subset == 0:\n        if current_subset + 1 > max_subset:\n            max_subset = current_subset + 1\n            largest_pair = [current_number, current_number]\n\n    # Return the largest subset\n    return max_subset, largest_pair"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Calculate the median\n    mid_index = n // 2\n    if n % 2 == 0:\n        median = (merged_list[mid_index - 1] + merged_list[mid_index]) / 2\n    else:\n        median = merged_list[mid_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists of same size and returns their median.\n    If the lists are not of equal size, the function will return None.\n    '''\n\n    # check if the lists are of equal size\n    if len(arr1)!= len(arr2):\n        return None\n\n    # merge the two lists\n    merged_list = arr1 + arr2\n\n    # sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # find the median\n    if n % 2 == 0:\n        # if n is even, return the average of the middle two elements\n        median = (sorted_list[n//2] + sorted_list[(n//2)-1]) / 2\n    else:\n        # if n is odd, return the middle element\n        median = sorted_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    Args:\n    arr1 (list): A list of integers\n    arr2 (list): A list of integers\n    n (int): The size of the two lists\n\n    Returns:\n    float: The median of the two lists\n    \"\"\"\n\n    # Combine the two lists\n    combined = arr1 + arr2\n\n    # Sort the combined list\n    combined.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        # If the size of the combined list is even\n        median = (combined[n//2 - 1] + combined[n//2]) / 2\n    else:\n        # If the size of the combined list is odd\n        median = combined[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists\n    merged = sorted(arr1 + arr2)\n\n    # Get the length of the merged list\n    m = len(merged)\n\n    # Calculate the median based on the length of the merged list\n    if m % 2 == 0:\n        # If the length is even, take the average of middle elements\n        median = (merged[m//2-1] + merged[m//2]) / 2\n    else:\n        # If the length is odd, take the middle element\n        median = merged[m//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 0:\n        mid = n // 2\n        left_median = (arr1[mid - 1] + arr1[mid]) / 2.0\n        right_median = (arr2[mid - 1] + arr2[mid]) / 2.0\n    else:\n        mid = n // 2\n        left_median = arr1[mid]\n        right_median = arr2[mid]\n    return left_median, right_median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two sorted lists\n    combined_list = arr1 + arr2\n    combined_list.sort()\n    # find the length of the combined list\n    length = len(combined_list)\n    # check if the length is odd\n    if length % 2 == 1:\n        return combined_list[length // 2]\n    # check if the length is even\n    else:\n        # find the two middle numbers\n        mid = length // 2\n        return (combined_list[mid - 1] + combined_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        median = (min(arr1[n//2-1], arr2[n//2-1]) + max(arr1[n//2], arr2[n//2])) / 2\n    else:\n        median = max(arr1[n//2], arr2[n//2])\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        mid1 = n // 2\n        mid2 = n // 2\n        median = (arr1[mid1-1] + arr1[mid1] + arr2[mid2-1] + arr2[mid2]) / 4\n    else:\n        mid = n // 2\n        median = arr1[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    merged = arr1 + arr2\n    # sort the merged list\n    sorted_merged = sorted(merged)\n    # calculate the median index\n    mid = n // 2\n    if n % 2 == 0:\n        # if the list has an even number of elements, take the average of the two middle elements\n        median = (sorted_merged[mid-1] + sorted_merged[mid])/2\n    else:\n        # if the list has an odd number of elements, take the middle element\n        median = sorted_merged[mid]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Determine the length of the list\n    length = len(merged_list)\n\n    # If the length is odd, return the middle element\n    if length % 2 == 1:\n        return merged_list[length // 2]\n\n    # If the length is even, return the average of the middle two elements\n    else:\n        return (merged_list[length // 2 - 1] + merged_list[length // 2]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] **= n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert the string to uppercase\n    new_string = string.upper()\n    # check if the string is already uppercase\n    if string == new_string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check whether a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n\n    # Convert the string to uppercase\n    uppercase_string = string.upper()\n\n    # Check if the string is uppercase or not\n    if uppercase_string == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) >= 2: \n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else: \n        # If the list has less than two elements, return the same list\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    \n    # Check if the list has at least 2 elements\n    if length < 2:\n        return \"The list has less than 2 elements.\"\n        \n    # Swap the first and last elements\n    firstElement = newList[0]\n    newList[0] = newList[length-1]\n    newList[length-1] = firstElement\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the input list is not empty\n    if not newList:\n        return newList\n    \n    # Set the first and last element of the input list\n    first = newList[0]\n    last = newList[-1]\n    \n    # Interchange the first and last element of the input list\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"The list must contain at least two elements to swap them.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length of the list is less than 2\n    if length < 2:\n        return newList\n    \n    # Swap the first and last element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list is not empty\n    if len(newList) == 0: \n        return newList \n\n    # Find the first and last indices of the list\n    first_index = 0\n    last_index = len(newList) - 1\n\n    # Swap the first and last element of the list\n    newList[first_index], newList[last_index] = newList[last_index], newList[first_index]\n\n    return newList "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and swaps the first and last element of the list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # getting the length of the list\n    length = len(newList)\n    \n    # checking if the list has at least two elements\n    if length >= 2:\n        # swapping the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n        \n        return newList\n    else:\n        return \"List must have at least two elements.\""
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the radius of the semicircle\n    semicircle_radius = r + math.sqrt(2)\n    # Calculate the area of the largest triangle inscribed in the semicircle\n    max_area = (math.pi * (r ** 2)) / 4\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    min_area = (math.pi * (semicircle_radius ** 2)) / 4\n    # Return the area of the largest triangle inscribed in the semicircle\n    return max_area if min_area < max_area else min_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Formula for area of a triangle\n    # area = 0.5 * base * height\n    \n    # Formula for area of a semicircle\n    # area = \u03c0 * r^2\n    \n    # Calculate the area of the largest triangle\n    # Since the base of the largest triangle is equal to the radius, we can use this value for base\n    # The height of the largest triangle is the area of the semicircle minus the area of the largest triangle\n    area_largest_triangle = (3 * r ** 2) / (4 * (r ** 2) + 1)\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_largest_triangle_inscribed = (r ** 2) * (area_largest_triangle / r)\n    \n    return area_largest_triangle_inscribed\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1, 301):\n        s = (i * i) / (4 * r)\n        area = max(area, s)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # find the semi-perimeter\n    s = 2 * r\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    a = (3 * r * r) / (4 * s)\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle using Heron's formula\n    def heron_area(a, b, c):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    def largest_triangle_area(r):\n        a = (3 * r**2) / (4 * math.pi)\n        b = math.sqrt(3 * r**2 / 4)\n        c = a + b\n        \n        area_a = heron_area(a, b, c)\n        area_b = heron_area(b, c, a)\n        area_c = heron_area(c, a, b)\n        \n        if area_a > area_b and area_a > area_c:\n            return area_a\n        elif area_b > area_c:\n            return area_b\n        else:\n            return area_c\n    \n    area = largest_triangle_area(r)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the circle\n    s = 2 * r\n\n    # Calculate the area of a triangle using Heron's formula\n    area = (s * (s - r) * (s - 2 * r)) ** 0.5\n\n    # Return the calculated area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the largest triangle\n    s = math.sqrt(3) * r\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    a = math.pi * r ** 2\n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    b = (2 * math.pi * r) / 3\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    c = math.pi * r ** 2 / 3\n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    angle = 0\n    while angle < 2 * 3.14:\n        s = r * (2 * 3.14 - angle) / (2 * 3.14)\n        area = max(area, (1 - s) * r**2)\n        angle += 0.01\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    def find_largest_triangle_area(radius):\n        \"\"\"\n        Recursive function to find the area of the largest triangle inscribed in a semicircle with a given radius.\n        \"\"\"\n        if radius <= 0:\n            return 0\n        else:\n            a = 0\n            b = radius\n            c = radius * radius\n            s = (3 * a * b * c) / (4 * math.tan(math.acos(b/a)))\n            area = math.sqrt(s)\n            return area\n\n    def find_inscribed_area(radius, angle):\n        \"\"\"\n        Recursive function to find the area of the largest triangle inscribed in a semicircle with a given radius and angle.\n        \"\"\"\n        if angle <= 0:\n            return 0\n        else:\n            c = radius * math.sin(angle)\n            s = radius * math.sin(angle + 2 * math.pi / 3)\n            area = (3 * c * s) / (4 * math.tan(math.acos(s/c)))\n            return area + find_inscribed_area(radius, angle - 2 * math.pi / 3)\n\n    area = find_largest_triangle_area(r)\n    inscribed_area = find_inscribed_area(r, math.pi/6)\n    largest_area = max(area, inscribed_area)\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the area of a triangle with sides of length sqrt(3)r\n    area = (3**0.5) * r**2\n\n    # Find the area of the largest possible triangle that can be inscribed in the semicircle\n    max_area = (3*r)**0.5\n\n    # Return the maximum area\n    return max_area\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    # initialize variables for the start and end indices\n    if end is None:\n        end = len(array) - 1\n    # loop through the array until the end index is reached\n    for i in range(start, end + 1):\n        # if the current index is not equal to the previous index + 1, return the current index\n        if i!= array[i] - 1:\n            return array[i] - 1\n    # if no missing number is found, return the end index + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n        array: a sorted list of natural numbers\n        start: the starting index of the array (default 0)\n        end: the ending index of the array (default None)\n\n    Returns:\n        the smallest missing number from the array\n    '''\n\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if i!= array[i]:\n            return i\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if not array:\n        return None\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if array is empty\n    if len(array) == 0:\n        return None\n    \n    # Check if start and end are valid indices\n    if start >= len(array):\n        start = 0\n    if end is not None and end >= len(array):\n        end = len(array) - 1\n    \n    # Initialize missing number and its index\n    missing_num = start\n    missing_index = start\n    \n    # Traverse the array and find the missing number\n    for num in array:\n        if num!= missing_num:\n            missing_num += 1\n        else:\n            missing_index = array.index(num)\n            break\n    \n    # Return the missing number and its index\n    return missing_num, missing_index"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers, and returns the smallest missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n    return end + 1 + array[-1]"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers (array) as input and returns the smallest missing number.\n    The function uses the binary search algorithm to find the missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    ----------\n    array : list of int\n        A list of sorted natural numbers.\n\n    start : int\n        The starting index of the array.\n\n    end : int\n        The ending index of the array.\n\n    Returns:\n    --------\n    int\n        The smallest missing number from the array.\n    \"\"\"\n    # Check if the array is sorted\n    if not all(array[i] <= array[i + 1] for i in range(len(array) - 1)):\n        raise ValueError(\"The array is not sorted.\")\n\n    # Find the first missing number using binary search\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid + 1:\n            start = mid + 1\n        elif array[mid] < mid + 1:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n    It takes an array of natural numbers as input and returns the first missing number.\n    If no missing number is found, it returns None.\n    \"\"\"\n    # Check if the input array is sorted\n    if not all(array[i] < array[i+1] for i in range(len(array)-1)):\n        return None\n    \n    # Find the largest number in the array\n    max_num = max(array)\n    \n    # Find the first missing number\n    for i in range(start, max_num+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+dx, y+dy) for dx, dy in sub] if (x+dx, y+dy) not in sub else adjac((x+dx, y+dy), sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adj = []\n    for i in range(row-1, row+2):\n        for j in range(col-1, col+2):\n            if i!= row or j!= col:\n                if 0 <= i < len(sub) and 0 <= j < len(sub[0]):\n                    adj.append((i,j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x-1 >= 0 and y-1 >= 0:\n        adj.append((x-1, y-1))\n    if x-1 >= 0:\n        adj.append((x-1, y))\n    if x-1 >= 0 and y+1 < 10:\n        adj.append((x-1, y+1))\n    if x+1 < 10 and y-1 >= 0:\n        adj.append((x+1, y-1))\n    if x+1 < 10:\n        adj.append((x+1, y))\n    if x+1 < 10 and y+1 < 10:\n        adj.append((x+1, y+1))\n    if y-1 >= 0:\n        adj.append((x, y-1))\n    if y+1 < 10:\n        adj.append((x, y+1))\n    if len(sub) > 0:\n        for i in adj:\n            if i not in sub:\n                adj.append(i)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub:\n        return sub\n    elif ele[0] == 0:\n        return [(ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n    elif ele[0] == 2:\n        return [(ele[0], ele[1] + 1), (ele[0], ele[1] - 1), (ele[0] + 1, ele[1])]\n    elif ele[1] == 0:\n        return [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1])]\n    elif ele[1] == 2:\n        return [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] - 1)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = []\n    # Extracting all coordinates of the given element\n    for coord in ele: \n        for i in range(-1, 2): \n            for j in range(-1, 2): \n                if i == 0 and j == 0: \n                    continue \n                adjacent.append((coord[0] + i, coord[1] + j)) \n    return adjacent "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # initialize a set to store the adjacent coordinates\n    adj = set()\n    # iterate over the sub-lists of the coordinate tuple\n    for sublist in sub:\n        # iterate over the adjacent coordinates\n        for i in range(len(sublist)):\n            # check if the adjacent coordinate is not the same as the current element\n            if sublist[i]!= ele:\n                # add the adjacent coordinate to the set of adjacent coordinates\n                adj.add(sublist[i])\n    # return the set of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    if x > 0:\n        adjacent.append((x-1, y))\n    if x < 9:\n        adjacent.append((x+1, y))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if y < 9:\n        adjacent.append((x, y+1))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    if len(ele) == 2:\n        return [ele[0], ele[1]]\n\n    adj = []\n    for i in range(len(ele)):\n        if i == 0:\n            adj.append((ele[0]-1, ele[1]))\n        elif i == 1:\n            adj.append((ele[0]+1, ele[1]))\n        elif i == 2:\n            adj.append((ele[0], ele[1]-1))\n        elif i == 3:\n            adj.append((ele[0], ele[1]+1))\n\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # list of adjacent coordinates\n    adj = []\n    \n    # extract the adjacent x and y coordinates\n    x, y = ele\n    \n    # iterate over the eight cardinal directions\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # if the adjacent coordinate is within the bounds of the map\n            if 0 <= x + i < len(sub) and 0 <= y + j < len(sub[x + i]):\n                # add the adjacent coordinate to the list\n                adj.append((x + i, y + j))\n    \n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # split the string into words\n    words = text.split()\n    \n    # replace spaces with underscores\n    for i in range(len(words)):\n        if words[i] =='':\n            words[i] = '_'\n    \n    # replace underscores with spaces\n    for i in range(len(words)):\n        if words[i] == '_':\n            words[i] =''\n    \n    # join the words back into a string\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces =''\n    underscore = '_'\n    new_text = ''\n    for char in text:\n        if char == spaces:\n            new_text += underscore\n        elif char == underscore:\n            new_text += spaces\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    result = ''\n    for char in text:\n        if char.isspace():\n            result += '_'\n        elif char == '_':\n            result +=''\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    # Split the string into words\n    words = text.split()\n    # Iterate over each word\n    for i in range(len(words)):\n        # Replace spaces with underscores\n        if words[i] =='':\n            words[i] = '_'\n        # Replace underscores with spaces\n        elif words[i] == '_':\n            words[i] =''\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n\n    # Iterate through each word and replace spaces with underscores\n    for i in range(len(words)):\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n\n    # Iterate through each word and replace underscores with spaces\n    for i in range(len(words)):\n        if '_' in words[i]:\n            words[i] = words[i].replace('_','')\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for num in num_list:\n        if num!= 0:\n            num_list[count] = num\n            count += 1\n    while count < len(num_list):\n        num_list.pop()\n        count += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize a variable to keep track of the index of the last non-zero element\n    last_nonzero_index = -1\n    \n    # loop through the list starting from the end\n    for i in range(len(num_list)-1, -1, -1):\n        # if the current element is not zero\n        if num_list[i]!= 0:\n            # move it to the end of the list and update the last_nonzero_index\n            num_list[i], num_list[last_nonzero_index+1] = num_list[last_nonzero_index+1], num_list[i]\n            last_nonzero_index += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        num_list.pop(zero_index)\n        num_list.append(0)\n        return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeros = [x for x in num_list if x == 0]\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            del num_list[len(num_list)-1]\n        else:\n            break\n    return num_list + zeros"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = None\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index is not None:\n        for j in range(len(num_list)-1, zero_index, -1):\n            num_list[j], num_list[j-1] = num_list[j-1], num_list[j]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            if zero_count > 0:\n                temp = num_list[i]\n                for j in range(i, i+zero_count):\n                    num_list[j] = num_list[j+1]\n                num_list[i+zero_count] = temp\n            zero_count = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    # Create a new list without zeroes\n    new_list = [num for num in num_list if num!= 0]\n    # Append the zeroes to the end of the new list\n    new_list.extend([0] * len(num_list) - len(new_list))\n    # Return the new list\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers, one at the beginning and another at the end of the list\n    i = 0\n    j = len(num_list) - 1\n    \n    # While there are elements in the list that haven't been moved to their final positions, move the zeroes to the end\n    while i < j:\n        if num_list[i] == 0:\n            # Move the zero to the end of the list\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            j -= 1\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index.append(index)\n    \n    for i in zero_index[::-1]:\n        num_list.pop(i)\n        \n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_of_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_val = arr[i] ^ arr[j]\n            sum_of_xor += xor_val\n    return sum_of_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements in the list\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    # XOR of all pairs of elements in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    # XOR of all triplets of elements in the list\n    xor_sum = xor_sum ^ xor\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\n    Args:\n    arr: list of integers\n    n: integer\n\n    Returns:\n    integer: sum of xor of all pairs of numbers in the given list\n    \"\"\"\n    # xor of all elements of the list\n    xor_sum = sum(arr[i] ^ arr[i + 1] for i in range(n - 1))\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\n    Args:\n    arr: A list of integers\n    n: The length of the list\n\n    Returns:\n    An integer denoting the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements in the array\n    xor_sum = sum(arr[i] ^ arr[j] for i in range(n) for j in range(i+1, n))\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in a list of integers and the length of the list as arguments.\n    It returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_val = arr[i] ^ arr[j]\n            sum_xor += xor_val\n    return sum_xor"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a max heap from the given iterable\n    hq.heapify(iterable)\n\n    # Use the max heap to sort the given iterable in ascending order\n    while hq.heappop(iterable) is not None:\n        pass\n\n    # Return the sorted iterable\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while len(iterable) > 0:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # convert the list to a max heap\n    hq.heapify(iterable)\n\n    # extract the max element from the heap and append it to the sorted list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a heap sort algorithm.\n    '''\n    # Convert the iterable to a list so that we can use heapify.\n    lst = list(iterable)\n    # Build a max-heap from the list using heapify.\n    hq.heapify(lst)\n    # Use heapify to convert the list to a max-heap.\n    for _ in range(len(lst) // 2 - 1):\n        hq.heapify(lst)\n    # Extract the elements from the heap and add them to the sorted list.\n    while lst:\n        sorted_lst.append(lst[0])\n        lst.pop(0)\n    return sorted_lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    # Build the max heap\n    hq.heapify(lst)\n    # Pop the maximum element from the heap and append it to the sorted list\n    while lst:\n        sorted_lst.append(hq.heappop(lst))\n    # Convert the sorted list back to an iterable\n    return sorted(sorted_lst)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # sort the list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n        \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    n = len(heap)\n\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(heap, i, n)\n\n    for i in range(n-1, 0, -1):\n        hq.heapreplace(heap, heap[0])\n        hq.heapify(heap, 0, i)\n\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min-heap from the iterable\n    hq.heapify(iterable)\n    \n    # Create an empty list to store the sorted elements\n    sorted_list = []\n    \n    # Iterate over the heap and add the elements to the sorted list\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a max-heap.\n    '''\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n        hq.heappush(iterable, iterable[i])\n\n    return iterable\n\n\ndef heapify(heap, n, i):\n    '''\n    This function takes a heap and its length and an index and performs the heapify operation on the heap.\n    '''\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n\n    if left < n and heap[left] > heap[largest]:\n        largest = left\n\n    if right < n and heap[right] > heap[largest]:\n        largest = right\n\n    if largest!= i:\n        heap[i], heap[largest] = heap[largest], heap[i]\n        heapify(heap, n, largest)\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # Check if the profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return \"The amount has no profit and no loss.\"\n    elif actual_cost == sale_amount:\n        return \"The amount has no profit but has loss.\"\n    else:\n        return \"The amount has profit but no loss.\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return \"No profit and no loss\"\n    elif actual_cost - sale_amount == 0:\n        return \"No profit\"\n    elif actual_cost - sale_amount > 0:\n        return \"No loss\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    :param actual_cost: actual cost of the sale\n    :param sale_amount: amount paid by the customer\n    :return: True if no profit and no loss, False otherwise\n    \"\"\"\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True, \"Profitable\"\n    else:\n        return False, \"Unprofitable\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (float): The actual cost of the sale\n    sale_amount (float): The amount the customer bought\n    \n    Returns:\n    bool: True if the sale has no profit and no loss, otherwise False\n    \"\"\"\n    \n    # Check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount: \n        return False\n    \n    # Check if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        return True\n    \n    # If both conditions are not met, the sale has no profit and no loss\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t >= -5 and t <= 5:\n        w = (13.12 + 0.6215 * t + 11.37 * math.log(t) - 0.3965 * math.pow(t, 2) + 0.5623 * math.pow(t, 3) - 0.1642 * math.pow(t, 4)) / 24\n        if v >= 10 and v <= 15:\n            wc = w + ((w - 11.37) * (v - 10) / 5)\n        elif v > 15:\n            wc = w + ((w - 11.37) * (15 - 10) / 5)\n        else:\n            wc = w\n    else:\n        wc = 0\n    return int(math.ceil(wc))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate wind chill index\n    wci = (13.12 + 0.6215 * t) * (v / 10)\n    \n    # round to nearest integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 13.12 + 0.6215 * v - 11.37 * math.log(t) + 0.3965 * v**2 - 0.5623 * math.log(t)**2 + 0.00035 * t**2\n    if t <= 10:\n        index = round(c)\n    else:\n        index = round(c + 22.4)\n    return index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # convert to knots\n    v = v * 1.9438444924417298\n\n    # calculate the dew point temperature\n    dp = math.exp((17.625 * (t - 23.0)) / (t - 28.37))\n\n    # calculate the wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * math.log(dp) + 0.4275 * t\n\n    # round to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer for a given wind velocity and temperature.\n    \n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n    \n    Returns:\n    int: Wind chill index rounded to the next integer.\n    \"\"\"\n    \n    # Convert temperature to fahrenheit\n    t = (t * 1.8) + 32\n    \n    # Calculate the wind chill index\n    wc = 0.622 * (t - 273.15) * (v * 0.686) * math.exp((17.625 * (t - 273.15)) / (t - 237.3))\n    \n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Kelvin\n    kelvin = (t + 273.15) * math.pi / 180\n    # Calculate the dew point temperature using the dew point formula\n    dp = (v / 1000) * math.log((1000 + (v / 1000) * math.exp((216.65 / kelvin) * ((kelvin - 273.15) / (kelvin - 258.15)))) / ((1000 + (v / 1000) * math.exp((216.65 / kelvin) * ((kelvin - 273.15) / (kelvin - 258.15))))) + 1.1111)\n    # Calculate the wind chill index using the formula\n    wc = 35.74 + 0.6215 * t - 35.75 * math.log(dp) + 0.4275 * v\n    # Round the wind chill index to the nearest integer and return the result\n    return math.ceil(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t = (t * 1.8) + 32\n    \n    # Calculate the wind chill index\n    wci = 35.74 + (0.6215 * v) - (35.75 * math.log(t)) + (0.4275 * v ** 2)\n    \n    # Round the result to the nearest integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Parameters:\n    v: wind velocity in km/h\n    t: temperature in celsius\n    \n    Returns:\n    The wind chill index rounded to the next integer\n    '''\n    \n    # calculate the heat capacity of air at constant pressure\n    cp_air = 1005\n    \n    # calculate the heat capacity of air at constant volume\n    cp_water = 4186\n    \n    # calculate the specific heat of air at constant pressure\n    h_air = cp_air/2\n    \n    # calculate the specific heat of air at constant volume\n    h_water = cp_water/2\n    \n    # calculate the specific enthalpy of water at constant pressure\n    s_w = 226.2\n    \n    # calculate the specific enthalpy of air at constant pressure\n    s_a = 1850\n    \n    # calculate the density of air in kg/m^3\n    rho_air = 1.225\n    \n    # calculate the density of water in kg/m^3\n    rho_water = 1000\n    \n    # calculate the moisture content of air\n    moisture_air = (v/1000)*(t-32)*(1/9)*(rho_air/rho_water)\n    \n    # calculate the moisture content of water\n    moisture_water = (1000-v/1000)*(t-32)*(1/9)*(rho_air/rho_water)\n    \n    # calculate the heat transfer coefficient of air\n    alpha_air = 1.29e-3\n    \n    # calculate the heat transfer coefficient of water\n    alpha_water = 0.005\n    \n    # calculate the heat transfer rate of water\n    q_w = h_water*s_w/alpha_water\n    \n    # calculate the heat transfer rate of air\n    q_a = h_air*s_a/alpha_air\n    \n    # calculate the heat transfer coefficient of the mixture\n    alpha_mix = (alpha_air*alpha_water)/(alpha_air+alpha_water)\n    \n    # calculate the heat transfer rate of the mixture\n    q_mix = (q_a*moisture_air + q_w*moisture_water)/alpha_mix\n    \n    # calculate the moisture content of the mixture\n    moisture_mix = (moisture_air*alpha_air + moisture_water*alpha_water)/(alpha_air+alpha_water)\n    \n    # calculate the heat capacity of the mixture\n    cp_mix = cp_air*moisture_mix\n    \n    # calculate the heat transfer coefficient of the vapor\n    alpha_vapor = 0.25\n    \n    # calculate the heat transfer rate of the vapor\n    q_vapor = (h_air*s_a/alpha_air)*(1-moisture_mix/1000)\n    \n    # calculate the moisture content of the vapor\n    moisture_vapor = (1000-moisture_air*alpha_air)/(1-alpha_vapor)\n    \n    # calculate the heat capacity of the vapor\n    cp_vapor = cp_air*moisture_vapor\n    \n    # calculate the total heat transfer rate\n    q_total = q_mix+q_vapor\n    \n    # calculate the total heat capacity\n    cp_total = cp_mix+cp_vapor\n    \n    # calculate the specific enthalpy of the vapor\n    s_v = s_a*moisture_vapor\n    \n    # calculate the density of the vapor\n    rho_v = 1000*(1-moisture_vapor/1000)\n    \n    # calculate the specific enthalpy of the mixture\n    s_mix = s_a*moisture_mix\n    \n    # calculate the density of the mixture\n    rho_mix = 1000*(1-moisture_mix/1000)\n    \n    # calculate the moisture content of the vapor\n    moisture_vapor = (1000-moisture_air*alpha_air)/(1-alpha_vapor)\n    \n    # calculate the heat capacity of the vapor\n    cp_vapor = cp_air*moisture_vapor\n    \n    # calculate the total heat transfer rate\n    q_total = q_mix+q_vapor\n    \n    # calculate the total heat capacity\n    cp_total = cp_mix+cp_vapor\n    \n    # calculate the temperature difference between the air and water\n    T_diff = t-"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert celsius to fahrenheit\n    fahrenheit = (t * 1.8) + 32\n    # calculate the dewpoint temperature\n    dewpoint = ((10.0**((fahrenheit - 296.0) / 10.0)) / (10.0**((fahrenheit - 296.0) / 10.0) - 1.0)) - 273.15\n    # calculate the heat index\n    heat_index = (0.511 * v + 0.458 * t - 0.07 * dewpoint)\n    # calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * v - 11.37 * math.log(t) + 0.3965 * dewpoint - 0.114 * (t - 10.0)\n    # round the wind chill index to the nearest integer\n    wind_chill_rounded = math.ceil(wind_chill_index)\n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    celsius_to_fahrenheit = 1.8\n    celsius_to_kelvin = 273.15\n\n    # Convert wind velocity and temperature to knots and Kelvin\n    v_kts = v * 1.9438444924417293\n    t_kelvin = t + 273.15\n    \n    # Calculate the wind chill index\n    wci = 0.56 * t_kelvin + 32\n    \n    # Convert the wind chill index from kelvin to celsius and round to the nearest integer\n    wci_celsius = math.ceil(wci - 273.15)\n    \n    # Convert the wind chill index from celsius to Fahrenheit and round to the nearest integer\n    wci_fahrenheit = math.ceil(wci_celsius * celsius_to_fahrenheit)\n    \n    # Return the wind chill index rounded to the nearest integer\n    return wci_fahrenheit"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for name in sample_names:\n        if name[0].isupper():\n            name_lengths.append(len(name))\n    return sum(name_lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            filtered_names.append(name)\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper(): # check if the first character is uppercase\n            continue # skip this name\n        else:\n            sum_length += len(name) # add the length of the name to the sum\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #initialize a variable to store the sum of names' lengths\n    total_length = 0\n    \n    #loop through each name in the list\n    for name in sample_names:\n        #if the name starts with a lowercase letter, skip it and move on to the next name\n        if name[0].islower():\n            continue\n        #else, add the length of the name to the total_length variable\n        total_length += len(name)\n    \n    #return the total length of all names that don't start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # define regular expression pattern for parenthesis\n    pattern = re.compile(r'\\((.*?)\\)')\n    \n    # split the string based on parenthesis and replace with the matched item\n    result = pattern.sub(r'\\1', items)\n    \n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\(.*?\\))'  # regex pattern to match parenthesis\n    result = re.sub(pattern, '', items)  # substitute parenthesis with empty string\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis from the string using regular expression\n    items = re.sub(r'\\((.*?)\\)', r'\\1', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function removes the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the pattern for matching the parenthesis\n    pattern = re.compile(r'(\\([^)]+\\))')\n    \n    # Use the pattern to find all matches in the string\n    matches = pattern.findall(items)\n    \n    # Loop through each match and remove the parentheses and their content\n    for match in matches:\n        items = items.replace(match, '')\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function will remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile(r'\\([^)]+\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define the first nonagonal number as 1\n    nonagonal_number = 1\n    # Define the base for the next nonagonal number as the nth agonal number\n    next_nonagonal_number = n * (n + 1) / 2\n    # Check if the next nonagonal number is even or odd, and if so, add 1 to it\n    if next_nonagonal_number % 2 == 0:\n        next_nonagonal_number += 1\n    # Loop through the next nonagonal number until it's greater than or equal to n\n    while next_nonagonal_number >= n:\n        # If the current nonagonal number is equal to n, return True\n        if nonagonal_number == n:\n            return True\n        # Increment the nonagonal number\n        nonagonal_number += 1\n        # Calculate the next nonagonal number\n        next_nonagonal_number = nonagonal_number * (nonagonal_number + 1) // 2\n    # If we get here, the current nonagonal number is not equal to n, so return False\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer as input and returns True if it's a nonagonal number, otherwise False.\n    A nonagonal number is a number that is not a perfect square.\n    '''\n\n    if n == 1:\n        return False\n\n    # Check if n is a perfect square\n    square = 0\n    sqrt = n ** 0.5\n    while square ** 2 <= n:\n        square += 1\n    if square ** 2!= n:\n        return False\n\n    # Check if the sum of the squares of consecutive integers up to n is not a perfect square\n    sum_of_squares = 0\n    for i in range(1, n):\n        sum_of_squares += i ** 2\n    square = 0\n    sqrt = sum_of_squares ** 0.5\n    while square ** 2 <= sum_of_squares:\n        square += 1\n    if square ** 2!= sum_of_squares:\n        return False\n\n    return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n and returns True if it is a nonagonal number,\n    and False otherwise.\n    '''\n    if n < 1:\n        return False\n    \n    # Initialize two variables to store the sum of the squares of the previous two nonagonal numbers\n    a = 1\n    b = 1\n    \n    # Check if the sum of the squares of the previous two nonagonal numbers is greater than n\n    while (a**2 + b**2) <= n:\n        a += 1\n        b += 1\n    \n    # If the sum of the squares of the previous two nonagonal numbers is greater than n, then\n    # the nth nonagonal number is not a nonagonal number\n    if (a**2 + b**2) > n:\n        return False\n    \n    # Otherwise, the nth nonagonal number is a nonagonal number\n    return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    count = 1\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            num += 2\n        else:\n            num += 1\n        count += 1\n        if count == n:\n            return num - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    row = 1\n    col = 1\n    # Loop through the first n-1 rows\n    while row <= n-1:\n        # Loop through the columns of the current row\n        while col <= n-row:\n            # Increment the value of the nonagonal number\n            col += 1\n        # Increment the row number\n        row += 1\n    # Return the value of the nonagonal number\n    return col"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(1, n + 1):\n        a += b\n        b += 2 * a\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    nonagonal_number = 1\n    while i <= n:\n        nonagonal_number += j\n        i += 1\n        j += 2\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 2\n    c = 0\n    \n    # Loop through the numbers to find the nth nonagonal number\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            c = a + b\n        else:\n            c = a + b - 4\n        \n        # Update the values of a and b for the next iteration\n        a, b = b, c\n        \n    # Return the nth nonagonal number\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables for nonagonal number and row count\n    row = 0\n    nonagonal = 0\n    \n    # iterate through rows\n    for i in range(1, n+1):\n        # calculate nonagonal number\n        nonagonal = i*(2*row + 1)\n        \n        # check if nonagonal number is odd\n        if nonagonal % 2!= 0:\n            return True\n        \n        # increment row count\n        row += 1\n    \n    # if no nonagonal number is found, return False\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    nonagonal = 0\n    for i in range(1, n+1):\n        nonagonal += (2*i-1)\n    return nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Iterate over each word\n    for word in words:\n        # Check if the word starts or ends with 'z'\n        if word.startswith('z') or word.endswith('z'):\n            # If it does, return True\n            return True\n    # If we've made it this far, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?:z|Z)\\w*?[^zZ]\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\b'\n    match = re.search(pattern, text)\n    if match:\n        start, end = match.span()\n        z_count = text[start:end].count('z')\n        if z_count % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to match words that start and end with 'z'\n    pattern = r'\\b(z)\\w+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = re.compile(r'\\b(z)\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        start_idx = match.start()\n        end_idx = match.end()\n        return text[start_idx:end_idx]\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z0-9])z(?![a-zA-Z0-9])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = r'\\b[a-zA-Z]+\\b'\n    word_regex = re.compile(word_pattern)\n    words = word_regex.findall(text)\n    \n    for word in words:\n        if word[0] == 'z':\n            if word[-1] == 'z':\n                if word.count('z') == 1:\n                    return True\n        elif word[-1] == 'z':\n            if word[0] == 'z':\n                if word.count('z') == 1:\n                    return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?<!\\w)z(?!\\w)\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array\n    input.reverse()\n    # reverse the first k elements\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the index of the first occurrence of k in the array\n    index = input.index(k)\n    # Reverse the array upto the index\n    input[index:] = input[index:][::-1]\n    # Reverse the entire array\n    input[:] = input[:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses an array upto a given position.\n\n    Parameters:\n    input (list): the input array\n    k (int): the index at which the array is to be reversed\n\n    Returns:\n    None\n\n    \"\"\"\n\n    # Check if k is within range of the input array\n    if k < 0 or k >= len(input):\n        raise ValueError(\"Index out of range\")\n\n    # Reverse the array from the current position (0 to k-1)\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    \n    # Finding the index of the last k-1 elements\n    for i in range(n-1, k-1, -1):\n        # Finding the maximum value in the remaining part of the array\n        for j in range(i+1, n):\n            if input[j] > input[i]:\n                temp = input[i]\n                input[i] = input[j]\n                input[j] = temp\n                \n    # Reversing the first k elements\n    for i in range(0, k):\n        temp = input[i]\n        input[i] = input[n-1-i]\n        input[n-1-i] = temp\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the first element to the k-1th element\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k+1th element to the end\n    input[k:] = input[k:][::-1]\n    # Concatenate the reversed arrays\n    output = input[:k] + input[k:]\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a given position k and reverses the array upto that position.\n    '''\n    # Define the variable to store the reversed array\n    reversed_array = []\n    # Iterate over the input array from start to k-1\n    for i in range(k):\n        # Append the i-th element of the input array to the reversed array\n        reversed_array.append(input[i])\n    # Iterate over the input array from k to the end\n    for i in range(k, len(input)):\n        # Append the i-th element of the input array to the reversed array\n        reversed_array.append(input[i])\n    # Return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k as input and returns the array with elements from position k to the end of the array reversed.\n    \"\"\"\n    # initialize the starting index of the reversed array\n    reversed_index = k - 1\n    \n    # reverse the elements from k to the end of the array\n    while reversed_index >= 0:\n        # swap the current element with the element at the reversed index\n        input[k], input[reversed_index] = input[reversed_index], input[k]\n        # move the starting index of the reversed array to the previous index\n        reversed_index -= 1\n    \n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        raise ValueError(\"Invalid input: k should be less than the length of the array.\")\n    \n    # Swap elements from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    \n    # Reverse the remaining elements\n    input[:k] = input[:k][::-1]\n    \n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n\n    Args:\n        test_tup (tuple): the tuple to add the dictionary to.\n        test_dict (dict): the dictionary to add to the tuple.\n\n    Returns:\n        tuple: the updated tuple with the dictionary added.\n    \"\"\"\n    return tuple(test_tup + [test_dict])"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = tuple(test_tup)\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = ()\n    for key, value in test_dict.items():\n        new_tuple += (key, value)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_dict[\"key\"] = \"value\"\n    new_tup = test_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new tuple with the original tuple and the dictionary added\n    new_tup = tuple(test_tup)\n    new_tup += tuple(test_dict.items())\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with key-value pairs from the input dictionary\n    new_dict = {**test_dict}\n    # Convert the new dictionary to a tuple\n    new_tuple = tuple(new_dict.values())\n    # Concatenate the input tuple with the new tuple and return the result\n    return test_tup + new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    max_avg = 0\n    \n    # Finding the maximum average of a path\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                avg = cost[i][j]\n            elif i == 0:\n                avg = cost[i][j] + max_avg + max_avg\n            elif j == 0:\n                avg = cost[i][j] + max_avg\n            else:\n                avg = cost[i][j] + max_avg + max_avg + max_avg + max_avg\n            max_avg = max(avg, max_avg)\n            \n    return max_avg/((N*N-1))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # initialize variables to store the max average and the current path with the maximum average\n    max_avg = float('-inf')\n    path = []\n    # iterate over all possible paths (from the top-left to bottom right)\n    for i in range(N):\n        for j in range(N):\n            # initialize variables to store the cost of the current cell and the visited cells in the current path\n            curr_cost = cost[i][j]\n            visited = set()\n            visited.add((i, j))\n            # check if the current path can be extended to the next cell (right or down)\n            while 0 <= i < N and 0 <= j < N and (i, j) not in visited:\n                visited.add((i, j))\n                if i+1 < N:\n                    curr_cost += cost[i+1][j]\n                if j+1 < N:\n                    curr_cost += cost[i][j+1]\n                # update the max average if the current path has a higher average cost\n                if curr_cost / (i+1) > max_avg:\n                    max_avg = curr_cost / (i+1)\n                    path = [(i, j)]\n                # move to the next cell\n                if i+1 < N:\n                    i += 1\n                if j+1 < N:\n                    j += 1\n    # return the path with the maximum average\n    return path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    visited = [[0 for _ in range(N)] for _ in range(N)]\n    \n    def dfs(i, j, path):\n        if i == N-1 and j == N-1:\n            total_cost = sum(cost[i][j])\n            visited[i][j] = 1\n            return total_cost\n        \n        if visited[i][j] == 1:\n            return 0\n        \n        visited[i][j] = 1\n        total_cost = cost[i][j] + max(dfs(i+1, j, path), dfs(i, j+1, path))\n        visited[i][j] = 0\n        return total_cost\n    \n    for i in range(N):\n        for j in range(N):\n            if visited[i][j] == 0:\n                max_avg = max(max_avg, dfs(i, j, []))\n    \n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize variables\n    max_avg = 0\n    current_avg = 0\n    max_path = []\n    current_path = []\n    total_cost = 0\n    visited_cells = set()\n    \n    # iterate through each cell\n    for row in cost:\n        for cell in row:\n            # calculate the cost of the cell and add it to the total cost\n            total_cost += cell\n            \n            # check if the cell is already visited\n            if (row, cell) in visited_cells:\n                continue\n            \n            # if the cell has not been visited, add it to the visited set and add it to the current path\n            visited_cells.add((row, cell))\n            current_path.append((row, cell))\n            \n            # if the path has ended, calculate the average and check if it is greater than the current max\n            if (len(current_path) == len(cost)*len(cost[0]) and (row, cell) == (len(cost)-1, len(cost[0])-1)):\n                current_avg = total_cost/len(current_path)\n                if current_avg > max_avg:\n                    max_avg = current_avg\n                    max_path = current_path\n            \n            # if the path is not yet complete, move to the next cell\n            elif (len(current_path) < len(cost)*len(cost[0])):\n                row += 1\n                if (row, cell) == (len(cost)-1, len(cost[0])-1):\n                    row -= 1\n                    \n            # if the path is already complete, move to the next row\n            else:\n                cell += 1\n                if (row, cell) == (len(cost)-1, len(cost[0])-1):\n                    cell -= 1\n    \n    # return the maximum average path\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Get the dimensions of the matrix\n    N = len(cost)\n\n    # Initialize variables for the maximum average and total number of cells visited\n    max_avg = float('-inf')\n    total_cells_visited = 0\n\n    # Initialize variables for the current row and column\n    row, col = 0, 0\n\n    # Initialize variables for the current cell's average and visited cells\n    current_cell_avg = cost[row][col]\n    visited_cells = 1\n\n    # Initialize variables for the maximum visited cells and the current visited cells\n    max_visited_cells = visited_cells\n    current_visited_cells = 1\n\n    # Initialize variables for the directions to move\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Loop through each cell in the matrix\n    for i in range(N * N):\n        # Find the next cell in the matrix and its direction to move\n        next_row, next_col = (row + directions[i][0], col + directions[i][1]) % N, (col + directions[i][1]) % N\n\n        # If the next cell is within the bounds of the matrix and not the same as the current cell, compute its average and visited cells\n        if 0 <= next_row < N and 0 <= next_col < N and cost[next_row][next_col]!= cost[row][col]:\n            next_cell_avg = (cost[next_row][next_col] + current_cell_avg) / 2\n            next_visited_cells = visited_cells + 1\n\n            # Update the maximum average, maximum visited cells, and total number of cells visited\n            if next_cell_avg > max_avg:\n                max_avg = next_cell_avg\n                max_visited_cells = next_visited_cells\n                total_cells_visited = next_visited_cells\n\n            # Update the current average and visited cells\n            current_cell_avg = next_cell_avg\n            visited_cells = next_visited_cells\n\n            # Update the current visited cells\n            current_visited_cells = next_visited_cells\n\n        # Move to the next cell\n        row, col = next_row, next_col\n\n    # Return the maximum average and total number of cells visited\n    return max_avg, total_cells_visited"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n\n    # Initialize the maximum average value and its corresponding path\n    max_avg = 0.0\n    max_path = [[0, 0]]\n\n    # Loop through all possible paths starting from the top-left cell\n    for i in range(N):\n        for j in range(N):\n            # Check if the current cell is a valid cell\n            if 0 <= i < N and 0 <= j < N:\n                # Add the current cell cost to the total cost\n                total_cost = cost[i][j]\n\n                # Check if the current cell is the bottom right cell\n                if i == N - 1 and j == N - 1:\n                    # If it is, update the maximum average value and path\n                    max_avg = total_cost / (N * N)\n                    max_path = [[i, j]]\n                else:\n                    # Otherwise, check if the current cell can be reached by moving down or right\n                    if i < N - 1 and j < N - 1:\n                        # If it can, add the current cell cost to the total cost and add it to the path\n                        total_cost += cost[i + 1][j]\n                        max_path.append([i + 1, j])\n                    if i < N - 1 and j == N - 1:\n                        # If it can, add the current cell cost to the total cost and add it to the path\n                        total_cost += cost[i + 1][j]\n                        max_path.append([i + 1, j])\n                    if i == N - 1 and j < N - 1:\n                        # If it can, add the current cell cost to the total cost and add it to the path\n                        total_cost += cost[i + 1][j]\n                        max_path.append([i + 1, j])\n\n    # Return the maximum average and path\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    def is_valid_path(i, j, visited):\n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            return True\n        if (i, j) in visited or (i + j) % 2 == 0:\n            return False\n        return True\n\n    def helper(i, j, visited):\n        if is_valid_path(i, j, visited):\n            visited.add((i, j))\n            average = 0\n            num_cells = 1\n            for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                new_i, new_j = i + di, j + dj\n                if new_i >= 0 and new_i < len(cost) and new_j >= 0 and new_j < len(cost[0]):\n                    average += cost[new_i][new_j]\n                    num_cells += 1\n                    average += helper(new_i, new_j, visited)\n            return num_cells - 1, average / num_cells\n        else:\n            return 0, 0\n\n    max_avg, max_cells = 0, 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            visited = set()\n            num_cells, avg = helper(i, j, visited)\n            if num_cells > max_cells:\n                max_cells = num_cells\n                max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize variables\n    max_cost = float('-inf')\n    max_path = None\n    \n    # loop through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # check if current cell is part of a path\n            if (i > 0 or j > 0) and (i < len(cost) - 1 or j < len(cost[0]) - 1):\n                # compute average cost of the path\n                total_cost = sum(cost[i][j:j+4]) + sum(cost[i+1][j:j+4]) + sum(cost[i+2][j:j+4]) + sum(cost[i+3][j:j+4])\n                num_cells = 4\n                # update max path if current path has higher average\n                if total_cost > max_cost:\n                    max_cost = total_cost\n                    max_path = [i, j, i+1, j+1, i+2, j+2, i+3, j+3]\n                # update max cost and path if current path has the same average as max path\n                elif total_cost == max_cost and max_path is not None:\n                    if num_cells > max_path[9]:\n                        max_path[9] = num_cells\n                        max_path[10] = total_cost\n    \n    # compute average of max path\n    if max_path is not None:\n        total_cost = sum(cost[max_path[0]][max_path[1]:max_path[1]+4]) + sum(cost[max_path[0]+1][max_path[1]:max_path[1]+4]) + sum(cost[max_path[0]+2][max_path[1]:max_path[1]+4]) + sum(cost[max_path[0]+3][max_path[1]:max_path[1]+4])\n        num_cells = 4\n        for i in range(len(max_path)-1):\n            total_cost += cost[max_path[i]][max_path[i+1]]\n        return total_cost / num_cells\n    else:\n        return float('nan')"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def findPath(i, j, visited, total_cost, max_avg, path):\n        if i == N - 1 and j == N - 1:\n            visited.append((i, j))\n            avg = total_cost / len(visited)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path.copy()\n            visited.pop()\n            return\n\n        if i < N and not visited[i][j]:\n            visited[i][j] = True\n            path.append((i, j))\n            findPath(i + 1, j, visited, total_cost + cost[i][j], max_avg, path)\n            path.pop()\n            visited[i][j] = False\n\n        if j < N and not visited[i][j]:\n            visited[i][j] = True\n            path.append((i, j))\n            findPath(i, j + 1, visited, total_cost + cost[i][j], max_avg, path)\n            path.pop()\n            visited[i][j] = False\n\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n    max_avg = float('-inf')\n    max_path = []\n    findPath(0, 0, visited, 0, max_avg, max_path)\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Get dimensions of matrix\n    N = len(cost)\n\n    # Initialize variables\n    max_avg = 0\n    current_avg = 0\n    current_cost = 0\n    current_path = []\n\n    # Iterate through matrix\n    for i in range(N):\n        for j in range(N):\n            # Check if current cell is part of the path\n            if i == 0 and j == 0:\n                current_avg += cost[i][j]\n                current_cost += cost[i][j]\n                current_path.append(cost[i][j])\n            else:\n                # If not, move in the right direction and update average\n                if i < N-1 and cost[i+1][j] < cost[i][j]:\n                    current_avg += cost[i+1][j]\n                    current_cost += cost[i+1][j]\n                    current_path.append(cost[i+1][j])\n                elif i > 0 and cost[i-1][j] < cost[i][j]:\n                    current_avg += cost[i-1][j]\n                    current_cost += cost[i-1][j]\n                    current_path.append(cost[i-1][j])\n                else:\n                    current_avg += cost[i][j]\n                    current_cost += cost[i][j]\n                    current_path.append(cost[i][j])\n\n            # Check if current average is greater than previous maximum\n            if current_avg > max_avg:\n                max_avg = current_avg\n                max_path = current_path\n\n    # Divide max_avg by number of cells to get final average\n    avg = max_avg / len(max_path)\n\n    return avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # create a list of tuples containing student name and height and weight\n    data_list = [(name, height, weight) for name, (height, weight) in students.items()]\n\n    # filter out the students who have height and weight below the minimum\n    filtered_data = [item for item in data_list if item[1] > h and item[2] > w]\n\n    # create a dictionary with student names as keys and filtered data as values\n    result = {item[0]: item[1:] for item in filtered_data}\n\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter the students based on their height and weight\n    filtered_students = {k: v for k, v in students.items() if v[0] > h and v[1] > w}\n\n    # Return the filtered students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    result = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            result[name] = info\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[student] = values\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    result = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            result += 1\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Create a dictionary to store the count of each element in nums1\n    element_count = {}\n    for num in nums1:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n\n    # Initialize a counter variable to keep track of the count of same pairs\n    count = 0\n\n    # Iterate through nums2 and check if each element is present in element_count\n    for num in nums2:\n        if num in element_count:\n            # If the element is present, increment the counter\n            element_count[num] -= 1\n            if element_count[num] == 0:\n                # If the count of the element becomes zero, remove it from the dictionary\n                del element_count[num]\n            else:\n                # If the count is still greater than zero, increment the count\n                count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length.')\n\n    # create a dictionary to store the counts\n    counts = {}\n\n    # loop over the indices and add the values to the dictionary\n    for i in range(len(nums1)):\n        counts[nums1[i]] = counts.get(nums1[i], 0) + 1\n\n    # loop over the indices and count the same values in the dictionary\n    same_indices = []\n    for i in range(len(nums1)):\n        if nums2[i] in counts:\n            same_indices.append(i)\n            counts[nums1[i]] -= 1\n            if counts[nums2[i]] == 0:\n                del counts[nums2[i]]\n\n    # return the list of same indices\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # use the built-in set() function to remove duplicates from each list\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n\n    # compare the two sets to see if they have any elements in common\n    if nums1_set.intersection(nums2_set):\n        # iterate through the indices of the lists\n        for i in range(len(nums1)):\n            # compare the corresponding elements of the lists\n            if nums1[i] == nums2[i]:\n                # if they are the same, add the index to the result list\n                result.append(i)\n\n    # return the result list\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    num = base\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num //= 10\n    return total ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Calculate the sum of digits to the power of the specified power\n    total = sum([int(digit)**power for digit in base_str])\n\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable\n    total_sum = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the total sum\n        total_sum += int(digit)\n    # Calculate the final sum by multiplying the total sum by the power\n    final_sum = total_sum ** power\n    # Return the final sum\n    return final_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # calculate the sum of digits of the base\n    total = 0\n    while base!= 0:\n        total += base % 10\n        base //= 10\n    # calculate the sum of digits raised to the power\n    power_sum = 0\n    for i in range(1, power+1):\n        power_sum += total ** i\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += base % 10\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # calculate the sum of all digits of the base\n    base_sum = sum(int(digit) for digit in str(base))\n    # calculate the sum of the base raised to the power\n    power_sum = base ** power\n    # return the sum of the two\n    return power_sum - base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string\n    base_str = str(base)\n    # convert power to an integer\n    power_int = int(power)\n    # initialize sum variable\n    sum = 0\n    # iterate through the digits of the base and add to sum if the digit is greater than or equal to 2 (since 1^0 = 1 and 1^1 = 1)\n    for digit in base_str:\n        if int(digit) >= 2:\n            sum += int(digit) ** power_int\n    # return sum\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"(.*?)\"'\n\n    # Use re.findall() method to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text1)\n\n    # Join all the matches into a single string separated by commas\n    result = ', '.join(matches)\n\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    # Use regular expression to match the pattern of quotation marks\n    pattern = r'(?<=\")(.*?)(?=\")'\n    \n    # Use re.findall() method to extract all the matches of the pattern\n    matches = re.findall(pattern, text1)\n    \n    # Return the extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n\n    # Define the regular expression pattern to match quotation marks\n    pattern = r'(?<=\")(.*?)(?=\")'\n\n    # Use the re.findall() function to extract all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'  # define a regex pattern to match quotation marks\n    matches = re.findall(pattern, text)  # find all occurrences of the pattern in the text\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\\\"([^\\\"]*)\\\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of all the values between quotation marks \" \".\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the result tuple with the first element of the input tuple\n    result_tup = (test_tup[0],)\n    # loop through the input tuple starting from the second element and multiply each element with the previous element\n    for i in range(1, len(test_tup)):\n        result_tup += (test_tup[i] * test_tup[i-1],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3])\n    for i in range(3, N):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Get the length of the input tuple\n    N = len(test_tup)\n    # Initialize an empty list to store the multiplied elements\n    result = []\n    # Loop through the input tuple and multiply each element with the next one\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    # Return the result as a tuple of length N\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Get the length of the input tuple\n    N = len(test_tup)\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Loop through the input tuple and multiply each element with the next one\n    for i in range(N-1):\n        results.append(test_tup[i] * test_tup[i+1])\n\n    # Return the resulting tuple\n    return tuple(results)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n\n    # Initialize an empty list to store the sum\n    result = []\n\n    # Iterate through the two input lists simultaneously\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    # Return the final sum list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n\n    Args:\n    nums (list): The list to remove consecutive duplicates from.\n\n    Returns:\n    list: The list with consecutive duplicates removed.\n    \"\"\"\n    grouped = groupby(nums)\n    return [next(g)[0] for g in grouped]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # Remove consecutive duplicates by grouping the list by their first occurrence and comparing the length of each group\n    return [num for num, group in groupby(sorted(nums)) if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped_nums = groupby(nums)\n    result = []\n    for key, group in grouped_nums:\n        if len(list(group)) > 1:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Use itertools.groupby to group the numbers by the sum of the previous group's values\n    for key, group in groupby(enumerate(nums), lambda x: sum(map(int, x[1]))):\n        # Use itertools.grouper to filter out the duplicates and get the groups as a list\n        groups = list(grouper(group, 2))\n        # Use itertools.chain to merge the groups and return the unique values\n        for g in groups:\n            yield from g[1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i, group in groupby(nums):\n        if len(list(group)) > 1:\n            for j, num in enumerate(group, 1):\n                if j == len(group) - 1:\n                    yield num\n                else:\n                    yield num, j"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def consecutive_groups(nums):\n        return list(groupby(sorted(nums), lambda x: x))\n    \n    def remove_consecutive_duplicates(nums):\n        groups = consecutive_groups(nums)\n        result = []\n        for group in groups:\n            if len(list(group)) == 1:\n                result.append(list(group)[0])\n            else:\n                result.append(group[0])\n        return result\n    \n    return remove_consecutive_duplicates(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list of numbers.\n    '''\n    return list(filter(lambda x: len(list(x)) == 1, groupby(nums)))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi*(r**2)*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * (r**2 + h**2)\n    return lateral_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Convert height to meters\n    h = h*1000\n    \n    # Calculate lateral surface area of cone\n    lateral_surface_area = 2*math.pi*r*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using Heron's formula\n    s = 0.5 * r * h * math.sqrt(3)\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the area of the cone using the formula: A = pi * r^2\n    A = math.pi * r ** 2\n    # calculate the lateral surface area using the formula: S = 2 * h * A\n    S = 2 * h * A\n    # return the lateral surface area\n    return S"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the half-height of the cone\n    h_half = h/2\n\n    # calculate the lateral surface area of the cone using the formula:\n    # lateral surface area = pi * r^2 * h_half^2\n    # where pi is a mathematical constant\n    lateral_area = math.pi * r**2 * h_half**2\n\n    # return the lateral surface area of the cone\n    return lateral_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s+|,|\\.')\n    result = pattern.sub(':', text)\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+|,+|\\.+|:+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    text = re.sub(r'\\s+',':',text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+','', text) # replace multiple spaces with one\n    text = re.sub(r'\\.\\s+', ':', text) # replace multiple dots with one\n    text = re.sub(r'\\,\\s+', ',', text) # replace multiple commas with one\n    text = re.sub(r'\\s+','', text) # remove multiple spaces\n    text = re.sub(r'\\s', '', text) # remove spaces at the beginning or end of the text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\,\\s+', ':', text)\n    text = re.sub(r'\\.\\s+', ':', text)\n    text = re.sub(r'\\s+,', ':', text)\n    text = re.sub(r'\\s+\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[\\s,\\.]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"[\\s,.]\", \":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', ':', text)\n    text = re.sub(r'\\,', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern to find all occurrences of spaces, commas, or dots\n    pattern = r'[,.]'\n    # Use re.sub() function to replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^A-Za-z0-9]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize a flag variable to keep track of whether x is present in the array or not\n    flag = False\n    \n    # Loop through the array from left to right\n    for i in range(len(A)):\n        # If x is equal to the current element in the array, set the flag variable to True and break out of the loop\n        if A[i] == x:\n            flag = True\n            break\n    \n    # If x is not present in the array, return -1\n    if not flag:\n        return -1\n    \n    # Loop through the array from right to left and keep track of the index of the first occurrence of x\n    first_occurrence = len(A) - 1\n    \n    for j in range(len(A) - 2, -1, -1):\n        # If x is equal to the current element in the array, set the flag variable to True and break out of the loop\n        if A[j] == x:\n            flag = True\n            first_occurrence = j\n            break\n    \n    # Return the index of the first occurrence of x\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the leftmost index that A[i] is greater than or equal to x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # A[mid] == x\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize left and right pointers to the beginning and end of the array respectively\n    left, right = 0, len(A) - 1\n    # Initialize the result pointer to -1\n    result = -1\n    # Iterate through the array until the left pointer is greater than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index of the current segment\n        mid = (left + right) // 2\n        # If the middle element is equal to the given number, compare it with the left element\n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            # If it is the left element, return the result\n            result = mid\n            break\n        # If the middle element is less than the given number, search the right half of the array\n        elif A[mid] < x:\n            left = mid + 1\n        # If the middle element is greater than the given number, search the left half of the array\n        else:\n            right = mid - 1\n    # Return the result\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # Initialize the left and right pointers of the array\n    left = 0\n    right = len(A) - 1\n\n    # Iterate through the array until the first occurrence is found or until the left pointer is greater than the right pointer\n    while left <= right:\n        # Calculate the middle index of the current subarray\n        middle = (left + right) // 2\n\n        # If the middle element is equal to the given number, compare it with the next element to find the first occurrence\n        if A[middle] == x and (middle == 0 or A[middle - 1]!= x):\n            first_occurrence_index = middle\n            break\n\n        # If the middle element is less than the given number, move the left pointer to the right\n        elif A[middle] < x:\n            left = middle + 1\n\n        # If the middle element is greater than the given number, move the right pointer to the left\n        else:\n            right = middle - 1\n\n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) - 1 and A[i] <= x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): sorted list of integers\n        x (int): integer to search for\n\n    Returns:\n        int: index of the first occurrence of x in A or -1 if x is not found in A\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes two arguments:\n    - A: A sorted array.\n    - x: The number to find the first occurrence of in A.\n    \"\"\"\n    # Initialize the index variable to -1\n    index = -1\n    # Loop through the array\n    for i in range(len(A)):\n        # Check if the current element is equal to the target element\n        if A[i] == x:\n            # If it is, update the index variable to the current index\n            index = i\n            # Break out of the loop since we've found the first occurrence\n            break\n    # Return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize index of first occurrence as -1\n    index = -1\n\n    # loop through array A\n    for i in range(len(A)):\n        # check if element at current index is equal to x\n        if A[i] == x:\n            # if it is, set index of first occurrence to current index\n            index = i\n            # break out of loop since we found the first occurrence\n            break\n\n    # return index of first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += arr[j] * dp[j]\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def sum_of_products(arr, start, end):\n        if start == end:\n            return 0\n        return arr[start] * sum_of_products(arr, start+1, end)\n\n    def sum_of_sublists(arr, n):\n        if n == 1:\n            return sum_of_products(arr, 0, n)\n        return sum_of_sublists(arr, n-1) + sum_of_products(arr, 0, n)\n\n    n = len(arr)\n    return sum_of_sublists(arr, n)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    prod_sum = 0\n    for i in range(n):\n        prod_sum += arr[i]\n        for j in range(i+1, n+1):\n            subarr = arr[i:j]\n            prod_sum -= subarr[0]\n            prod_sum *= subarr[-1]\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of products of all possible sublists of the list.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of products of all possible sublists of the input list.\n    \"\"\"\n    # Initialize an empty list to store the products of subarrays\n    products = []\n\n    # Calculate the products of all possible subarrays and store them in the products list\n    for i in range(1, len(arr)+1):\n        for j in range(len(arr)-i+1):\n            products.append(1)\n            for k in range(i):\n                products[-1] *= arr[j+k]\n\n    # Calculate the sum of products of subarrays\n    subarray_sum = sum(products)\n\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Base case\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Recursive case\n    else:\n        # Find sum of products of all possible sublists of the first element\n        first = sum_Of_Subarray_Prod(arr[1:])\n        \n        # Find sum of products of all possible sublists of the second element\n        second = sum_Of_Subarray_Prod(arr[2:])\n        \n        # Return sum of products of all possible sublists\n        return first + second"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Create a list to store the products of all subarrays\n    prod_list = []\n\n    # Initialize the product of the empty subarray to 1\n    prod_list.append(1)\n\n    # Create a list to store the sum of products of subarrays of length 1\n    subarray_sum_list = [1] * n\n\n    # Fill the list with the sum of products of subarrays of length i\n    for i in range(1, n):\n        subarray_sum_list[i] = subarray_sum_list[i-1] + arr[i-1]\n\n    # Calculate the products of all possible sublists of length i\n    for i in range(n):\n        for j in range(i, n):\n\n            # Calculate the product of the subarray\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n\n            # Add the product to the product list\n            prod_list.append(prod)\n\n    # Initialize the sum of products to 0\n    sum_prod = 0\n\n    # Calculate the sum of products of all subarrays\n    for prod in prod_list:\n        sum_prod += prod\n\n    # Return the sum of products of all subarrays\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    MOD = 1000000007\n\n    dp = [0] * (n+1)\n    for i in range(n+1):\n        dp[i] = 1\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            dp[j] = (dp[j] * (arr[j-1]%MOD)) % MOD\n\n    return sum(dp)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product_arr = [1] * n\n    max_product = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            product_arr[j] *= arr[j]\n            max_product = max(max_product, product_arr[j])\n    sum_of_products = 0\n    for i in range(n):\n        sum_of_products += product_arr[i]\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 1000000007\n\n    # Find the maximum subarray length\n    max_len = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_len += 1\n        else:\n            max_len = 1\n    \n    # Initialize the dp array with 0s\n    dp = [0] * max_len\n    \n    # Calculate the product of each subarray and update the dp array\n    for i in range(1, n):\n        for j in range(max_len):\n            if j == 0:\n                dp[j] = arr[i]\n            elif j == max_len-1:\n                dp[j] = arr[i] * dp[j-1]\n            else:\n                dp[j] = max(arr[i]*dp[j], arr[i]*dp[j-1], dp[j-1])\n                \n    # Initialize the final result variable with 0\n    result = 0\n    \n    # Calculate the sum of products of all possible sublists\n    for i in range(max_len):\n        result = (result + dp[i]) % mod\n        \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Initialize variables\n    sum_product = 0\n    prefix_product = 1\n    suffix_product = 1\n\n    # Iterate through the array and calculate the products of subarrays\n    for i in range(n):\n        sum_product += arr[i]\n        prefix_product *= arr[i]\n        suffix_product *= arr[i]\n\n    # Calculate the sum of products of subarrays\n    sum_subarray_product = sum_product * suffix_product\n\n    return sum_subarray_product"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # set the first and last bits to 0\n    n = n & ~(1 << 0) & ~(1 << (n.bit_length() - 1))\n\n    # iterate over the middle bits and toggle them\n    for i in range(1, n.bit_length() // 2):\n        n = n ^ (1 << i)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n\n    # Get the binary representation of the number\n    binary = bin(n)[2:]\n\n    # Remove the first and the last bit\n    binary = binary[1:-1]\n\n    # Iterate through the bits and toggle them\n    new_binary = \"\"\n    for bit in binary:\n        if bit == \"0\":\n            new_binary += \"1\"\n        else:\n            new_binary += \"0\"\n\n    # Convert the binary representation back to an integer\n    new_number = int(new_binary, 2)\n\n    return new_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Initialize a mask with only one bit set to 1\n    mask = 1 << 1\n\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate over the bits of the number, starting from the second bit (i.e., from 1)\n    for i in range(1, len(bin(n)) - 2, 2):\n        # Check if the current bit is set to 1\n        if n & mask:\n            # Toggle the current bit\n            result |= mask\n\n        # Shift the mask to the right\n        mask >>= 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize variables to store the middle bits and the first and last bits\n    mid_bits = 0\n    first_bit = n & 1  # Get the value of the first bit\n    last_bit = n & (2 ** (8 * (len(bin(n)[2:]) - 1)))  # Get the value of the last bit\n\n    # Toggle the middle bits\n    mid_bits = (n & ~(1 << i) | (n & (1 << i)) ^ 1) & ((1 << (i + 1)) - 1) for i in range(7) if i!= 4 and i!= len(bin(n)[2:]) - 2\n\n    # Combine the first and last bits with the middle bits\n    result = (mid_bits << 1) | last_bit | first_bit\n\n    # Return the final result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Find the position of the first and last set bits\n    first_set_bit = 31 - n.bit_length()\n    last_set_bit = n.bit_length() - 1\n    \n    # Extract the first and last bits\n    first_bit = n & (1 << first_set_bit)\n    last_bit = n & (1 << last_set_bit)\n    \n    # Toggle the middle bits\n    middle_bits = n ^ (first_bit | last_bit)\n    \n    # Combine the first and last bits and the middle bits\n    result = first_bit | middle_bits | last_bit\n    \n    # Return the resulting number\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n\n    # get the first and last bits of n\n    bit0 = (n & 1)\n    bitN = (n >> 31) & 1\n\n    # calculate the middle bits\n    middle_bits = ((bitN ^ bit0) & 1) << 1\n    return n ^ middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Calculate the position of the last and first bit\n    last_bit_pos = 0\n    while n & (1 << last_bit_pos) == 0:\n        last_bit_pos += 1\n    first_bit_pos = last_bit_pos\n    while n & (1 << first_bit_pos)!= 0:\n        first_bit_pos -= 1\n    \n    # Toggle all bits except the first and the last bit\n    mask = ~(1 << first_bit_pos) & ~(1 << last_bit_pos)\n    for i in range(first_bit_pos + 1, last_bit_pos):\n        mask |= 1 << i\n    \n    # Apply the mask to the number\n    return n ^ mask"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize a variable to store the result\n    result = 0\n    \n    # get the last two bits of the number\n    last_two_bits = n & 3\n    \n    # toggle the first and last bits and then add them back to the result\n    result = last_two_bits ^ 3 ^ 2 ^ 1\n    \n    # toggle the middle bits\n    for i in range(5):\n        result ^= 1 << i\n    \n    # add the last two bits back to the result\n    result |= last_two_bits\n    \n    # return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the number to binary\n    binary = bin(n)[2:]\n    # Find the length of binary\n    length = len(binary)\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # If even, toggle the middle bits\n        middle = length // 2\n        for i in range(middle, length - 1):\n            binary[i] = '0' if binary[i] == '1' else '1'\n    else:\n        # If odd, toggle the middle bit and the last bit\n        middle = length // 2\n        binary[middle] = '0' if binary[middle] == '1' else '1'\n        binary[length - 1] = '0' if binary[length - 1] == '1' else '1'\n    # Convert the binary back to integer\n    return int(binary, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = (n & 1) ^ 1  \n    second_bit = ((n >> 1) & 1) ^ 1  \n    third_bit = ((n >> 2) & 1) ^ 1  \n    fourth_bit = ((n >> 3) & 1) ^ 1  \n    fifth_bit = ((n >> 4) & 1) ^ 1  \n    sixth_bit = ((n >> 5) & 1) ^ 1  \n    seventh_bit = ((n >> 6) & 1) ^ 1  \n    eighth_bit = ((n >> 7) & 1) ^ 1  \n    return (first_bit << 6) | (second_bit << 5) | (third_bit << 4) | (fourth_bit << 3) | (fifth_bit << 2) | (sixth_bit << 1) | (seventh_bit << 0) | (eighth_bit >> 1)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return index + 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the insertion point for x in a\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # Return the index where x should be inserted\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Step 1: Binary search the left half of the array for the insertion point\n    index = bisect.bisect_left(a, x)\n    # Step 2: Check if the insertion point is the leftmost or not\n    if index == 0:\n        return 0\n    # Step 3: Binary search the right half of the array for the insertion point\n    index_right = bisect.bisect_right(a[index:], x)\n    return index + index_right"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect.bisect_left to find the index where the element should be inserted\n    index = bisect.bisect_left(a, x)\n    # Check if the element is already present in the list\n    if index!= len(a) and a[index] == x:\n        # If the element is already present, return the index\n        return index\n    else:\n        # If the element is not present, return the index where it should be inserted\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        a (list): A list of integers in sorted order.\n        x (int): The value to be inserted.\n\n    Returns:\n        int: The left insertion point for the specified value in sorted order.\n\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index > 0 and a[index - 1] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x) - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string):\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n\n    if pattern.match(string):\n        print(\"The string is starting with a vowel.\")\n    else:\n        print(\"The string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    max_triangular = 10**(n-1)\n    min_triangular = 0\n\n    for i in range(n):\n        triangular = min_triangular + max_triangular\n        min_triangular = triangular - (10**(n-i-1))\n        max_triangular = triangular\n        print(i, triangular)\n\n    return min_triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function finds the index of the smallest triangular number with n digits using the Sieve of Eratosthenes algorithm. \n    '''\n\n    # Create a list of prime numbers up to the square root of n\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    \n    # Find the smallest prime number greater than or equal to sqrt(n)\n    sqrt_n = int(math.sqrt(n))\n    index = 0\n    while primes[index] and index <= sqrt_n:\n        index += 1\n    \n    # Compute the number of digits of the smallest prime number\n    primes_count = 0\n    while index ** 2 <= n:\n        if primes[index]:\n            primes_count += 1\n        index += 1\n    \n    # Compute the smallest triangular number with n digits\n    smallest_triangular = (10**primes_count - 1) // (2 * index - 1)\n    \n    return smallest_triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Maximum value of n\n    max_n = 10**n\n    \n    # Initialize an array to store the smallest triangular numbers\n    smallest_numbers = [0]*max_n\n    \n    # Initialize a variable to store the smallest triangular number\n    smallest_number = math.sqrt(max_n)*2 - 1\n    \n    # Initialize an index variable to store the index of the smallest triangular number\n    index = 1\n    \n    # Loop through the array\n    while index < max_n:\n        # Initialize a variable to store the current triangular number\n        triangular_number = 0\n        \n        # Calculate the current triangular number\n        for i in range(index):\n            triangular_number += smallest_numbers[i]\n        \n        # Check if the current triangular number is the smallest number found so far\n        if triangular_number < smallest_number:\n            smallest_number = triangular_number\n            index = i+1\n            \n        # Update the array with the current triangular number\n        smallest_numbers[i+1] = triangular_number\n        \n        # Increment the index\n        index += 1\n    \n    # Return the index of the smallest triangular number\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n\n    triangular_numbers = [0]\n    while len(str(triangular_numbers[-1])) < n:\n        triangular_numbers.append(triangular_numbers[-1] + 1)\n    \n    min_index = len(str(triangular_numbers[-1]))\n    for i in range(len(triangular_numbers)-1, -1, -1):\n        if len(str(triangular_numbers[i])) < min_index:\n            min_index = len(str(triangular_numbers[i]))\n\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    num = 1\n    count = 1\n    \n    while count <= n:\n        num *= 10\n        count += 1\n        \n    triangular_num = 0\n    index = 1\n    \n    while True:\n        triangular_num = num * index\n        index += 1\n        \n        if triangular_num % 10 == n:\n            return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    # find the maximum value of n-1 digits\n    max_val = int('9' * (n-1))\n\n    # loop through all possible values of n digits\n    for i in range(max_val, 0, -1):\n        # loop through all possible values of i digits\n        for j in range(1, i+1):\n            # calculate the triangular number\n            num = i * j\n            # check if the triangular number has n digits\n            if str(num)[-n:].isdigit():\n                return num\n\n    # if no triangular number with n digits is found, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Calculate the maximum number of digits in a triangular number\n    max_digits = int(math.log10(n * (n + 1)) + 1)\n\n    # Loop through each digit in the triangular sequence\n    for i in range(max_digits):\n        # Calculate the smallest triangular number with n digits\n        triangular = i * (i + 1)\n\n        # Check if the smallest triangular number has n digits\n        if len(str(triangular)) == n:\n            # Calculate the index of the smallest triangular number\n            index = triangular - i * (i + 1) // 2\n\n            # Return the index of the smallest triangular number with n digits\n            return index\n\n    # If no triangular number with n digits is found, return None\n    return None"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the smallest number with n digits\n    num = 10**n\n    triangular_num = 1\n\n    # check if triangular number with n digits exists\n    while triangular_num < num:\n        triangular_num = triangular_num + 10**n\n\n    # calculate the index of the smallest triangular number with n digits\n    index = math.ceil(math.log10(triangular_num))\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = [1]\n    for i in range(n-1):\n        triangular_numbers.append(i*triangular_numbers[i])\n    index = triangular_numbers.index(min(triangular_numbers))\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n\n    # find the length of the triangular number \n    length = int(math.log10(5 * n + 1))\n\n    # initialize the smallest triangular number with n digits \n    smallest_triangular = int('1' * n)\n\n    # loop through each digit of the triangular number \n    for i in range(length):\n\n        # find the next triangular number with n digits \n        triangular = smallest_triangular + i * (n + 1)\n\n        # check if the triangular number is the smallest with n digits \n        if triangular < smallest_triangular:\n            smallest_triangular = triangular\n\n    # return the index of the smallest triangular number with n digits \n    return length - 1 - math.log10(smallest_triangular)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    my_dict = {}\n    # Loop through the given tuple and add adjacent elements as keys and values to the dictionary\n    for i in range(0, len(test_tup)-1, 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    test_dict = {}\n    \n    # Iterate through the tuple elements\n    for i in range(len(test_tup) - 1):\n        # Add the key-value pair to the dictionary\n        test_dict[test_tup[i]] = test_tup[i+1]\n        \n    # Return the dictionary\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # Convert the tuple to a list\n    tup_list = list(test_tup)\n    # Create an empty dictionary\n    dict_obj = {}\n    # Iterate over the list and add the adjacent elements as a key-value pair to the dictionary\n    for i in range(len(tup_list)-1):\n        key = tup_list[i]\n        value = tup_list[i+1]\n        dict_obj[key] = value\n    # Return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n    # iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # add the pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    new_dict = {}\n    # iterate over the tuple using indexing\n    for i in range(len(test_tup)):\n        # add the current element as the key and the next element as the value\n        new_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    dict_obj = {}\n    # Loop through the tuple and add each pair of adjacent elements as a key-value pair\n    for i in range(len(test_tup)-1):\n        key = str(test_tup[i]) + str(test_tup[i+1])\n        value = test_tup[i+2]\n        # Add the key-value pair to the dictionary\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize the first character of the string\n    first_char = s[0]\n    # Loop through all the characters of the string\n    for char in s:\n        # If the current character is not equal to the first character, return False\n        if char!= first_char:\n            return False\n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # create a set of unique characters in the string\n    unique_chars = set(s)\n\n    # check if the length of the set is 1\n    if len(unique_chars) == 1:\n        return True\n\n    # if the length is greater than 1, then all characters are not same\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initializing a variable to store the first character of the string\n    first_char = s[0]\n    \n    # looping through the rest of the characters in the string\n    for char in s[1:]:\n        # checking if the current character is equal to the first character\n        if char!= first_char:\n            # if not, then all the characters are not the same\n            return False\n    \n    # if all the characters are the same, then all_Characters_Same() returns True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    if len(s) < 2:\n        return True\n\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a given string are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # creating a dictionary to store the frequency of characters\n    freq = {}\n    # iterating over each character in the string\n    for char in s:\n        # if the character is already present in the dictionary\n        if char in freq:\n            # updating its frequency by 1\n            freq[char] += 1\n        # if the character is not present in the dictionary\n        else:\n            # adding it to the dictionary with frequency 1\n            freq[char] = 1\n    # iterating over the dictionary and checking if all the frequencies are same\n    for freq in freq.values():\n        if freq!= freq[0]:\n            return False\n    # if all the frequencies are same, then all characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return False if s[0]!= s[-1] else all_Characters_Same(s[1:-1])"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/3 * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron given its base side.\n    '''\n    return (1/6) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(1 + (1/3) + (1/3) + (1/3)) * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the semi-perimeter of the tetrahedron\n    sp = (side**2 + side**2 + side**2 + side**2) ** 0.25\n\n    # calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(sp * (sp - side) * (sp - side) * (sp - side) * (sp - side))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the half perimeter of the tetrahedron\n    half_perimeter = side / 2\n    \n    # calculate the area using Heron's formula\n    area = (1/3) * (half_perimeter ** 2)\n    \n    # return the calculated area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return math.sqrt(3) * side ** 2\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:n] = list[m:n], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n # To ensure m is within the range of 0 to n-1\n    list.extend(list[:m]) # Copy the first m items from the list\n    list[:m] = [] # Now m items are at the end of the list\n    list.extend(list[m:]) # Copy the last n-m items from the list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Check if list is not empty\n    if not list:\n        return list\n\n    # Find length of the list\n    n = len(list)\n\n    # Check if the rotation amount is greater than the length of the list\n    if m > n:\n        return list\n\n    # Reverse the list\n    list = list[::-1]\n\n    # Find the index of the last element\n    i = m - 1\n\n    # Move the first element to the end of the list\n    list[i], list[0] = list[0], list[i]\n\n    # Reverse the second last element to the first element\n    j = n - 2\n    while j!= i:\n        list[j], list[i] = list[i], list[j]\n        j -= 1\n\n    # Reverse the entire list\n    list = list[::-1]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    This function rotates a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # Calculate the number of items to rotate to the right\n    n = len(list)\n    m = m % n\n\n    # Reverse the entire list\n    list = list[::-1]\n\n    # Reverse the first m items of the list\n    list[:m] = list[:m][::-1]\n\n    # Reverse the remaining items of the list\n    list[m:] = list[m:][::-1]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[m:], list[:m] = list[:m], list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    k = n - m\n    # Move the last m elements to the front of the list\n    list = list[-k:] + list[:-k]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m %= n\n    list = list[-n:] + list[:-n]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Find the length of the list\n    n = len(list)\n    # Calculate the new index\n    new_index = (n - m) % n\n    # Reverse the first m elements of the list\n    list[:m] = list[:m][::-1]\n    # Reverse the last n-m elements of the list\n    list[m:] = list[m:][::-1]\n    # Reverse the first m elements of the rotated list\n    list[:m] = list[:m][::-1]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for item in test_tup:\n        if item is None:\n            none_count += 1\n    return none_count == len(test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if the tuple has any none value, else False.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if int(digit) % int(digit)!= 0:\n                return False\n        return True\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))\n\nstartnum = 100\nendnum = 1000\nresult = divisible_by_digits(startnum, endnum)\nprint(result)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # function to check if a number is divisible by all its digits\n    is_divisible = lambda n: all(map(lambda x: n % x == 0, range(10)))\n    \n    # create a list of numbers within the given range\n    nums = list(range(startnum, endnum+1))\n    \n    # filter the numbers that are divisible by all their digits\n    result = list(filter(is_divisible, nums))\n    \n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum: int, the start of the range from which to find numbers.\n        endnum: int, the end of the range from which to find numbers.\n\n    Returns:\n        list, a list of numbers within the given range where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n            if num % digit!= 0:\n                return False\n        return True\n\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digit(num):\n            divisible_numbers.append(num)\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    # Function to check if a number is divisible by a digit\n    def is_divisible(num):\n        return all(int(digit) % num == 0 for digit in str(num))\n\n    # Filter the numbers within the given range that are divisible by every digit\n    filtered_numbers = filter(lambda num: is_divisible(num), range(startnum, endnum+1))\n\n    return list(filtered_numbers)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    def is_divisible_by_digit(num):\n        digits_sum = sum(int(digit) for digit in str(num))\n        return digits_sum == 0\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digit(num)]\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(d in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(d) % int(n) == 0 for d in str(x)), range(startnum, endnum+1))\n\nprint(divisible_by_digits(100, 999)) # Output: [900, 700, 500, 300, 100]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_every_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        return all(d % 9 == 0 for d in digits)\n\n    return filter(is_divisible_by_every_digit, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = set()\n    for num in range(startnum, endnum+1):\n        for digit in str(num):\n            digits.add(digit)\n\n    def is_divisible(num):\n        for digit in str(num):\n            if digit not in digits:\n                return False\n        return True\n\n    result = [num for num in range(startnum, endnum+1) if is_divisible(num)]\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is less than or equal to 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate area of sector using Heron's formula\n    area = (3 * r ** 2 * math.sin(math.radians(a)) ** 2) / (4 * math.tan(math.radians(a / 2)))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    s = math.sin(math.radians(a/2))\n    area = r*r*s\n    \n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n\n    # convert angle to radians\n    angle = math.radians(a)\n\n    # calculate area\n    area = math.pi * r**2 * angle\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    lcs = []\n    i, j = n, m\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for i in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n                \n    return X[:p[n][m]]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # creating a 2D table to store lengths of subsequences\n    L = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # filling the first row and column of the table\n    for i in range(m+1):\n        L[i][0] = 0\n    for j in range(p+1):\n        L[0][j] = 0\n\n    # filling the rest of the table\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # backtracking the LCS string\n    i = m\n    j = p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(lcs[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of LCS of subarrays of lengths 0 to m and 0 to n\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # fill the table in bottom-up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # initialize variables to store the LCS and its length\n    lcs = ''\n    lcs_len = 0\n\n    # backtrack to construct the LCS\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            lcs_len += 1\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs, lcs_len"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Create a 3x3 matrix to store the lengths of LCS subsequences\n    m = [[0 for _ in range(3)] for _ in range(3)]\n\n    # Fill the matrix in a bottom-up fashion\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                if X[i] == Y[j] and Y[j] == Z[k]:\n                    m[i][j] = m[i-1][j-1] + 1\n\n    # Backtrack to find the actual LCS subsequence\n    i, j, k = len(X)-1, len(Y)-1, len(Z)-1\n    lcs = []\n    while i >= 0 and j >= 0 and k >= 0:\n        if X[i] == Y[j] and Y[j] == Z[k]:\n            lcs.append(X[i])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif m[i][j] > m[i+1][j] and m[i][j] > m[i][j+1]:\n            i -= 1\n        elif m[j][k] > m[i][j+1] and m[j][k] > m[i+1][j]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n\n    This function uses dynamic programming approach. The idea is to fill a table of size (m+1) x (n+1) where m and n are the lengths of the three given strings. The table will store the length of the longest common subsequence ending at each position in the three strings. We will fill the table in bottom-up fashion.\n\n    Time Complexity: O(mn)\n\n    Args:\n    - X: First string.\n    - Y: Second string.\n    - Z: Third string.\n\n    Returns:\n    - The length of the longest common subsequence.\n    \"\"\"\n\n    # Find lengths of strings\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common subsequences ending at each position in the three strings\n    table = [[0 for _ in range(o+1)] for _ in range(m+1)]\n\n    # Fill the table in bottom-up fashion\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j] = table[i-1][j-1] + 1\n                else:\n                    table[i][j] = max(table[i-1][j], table[i][j-1], table[i-1][j-1])\n\n    # Return the length of the longest common subsequence\n    return table[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence (LCS) for the given three string sequences X, Y, and Z.\n    \n    It uses dynamic programming to find the length of the LCS for each subsequence of X, Y, and Z.\n    The LCS for three sequences is defined as the length of the longest subsequence that is common to all three sequences.\n    \n    The function returns a tuple containing the length of the LCS for each subsequence.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    # Create a table to store the length of LCS for each subsequence\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n    \n    # Fill the table in bottom-up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    # Print the table for debugging purposes\n    # for i in range(m + 1):\n    #     for j in range(n + 1):\n    #         for k in range(p + 1):\n    #             print(dp[i][j][k], end=' ')\n    #     print()\n    \n    # Find the length of the LCS for each subsequence\n    LCS1 = dp[m][n][p]\n    LCS2 = dp[m - 1][n][p]\n    LCS3 = dp[m][n - 1][p]\n    \n    # Return the length of the LCS for each subsequence\n    return (LCS1, LCS2, LCS3)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n    # Backtrack to get the LCS string\n    lcs = \"\"\n    i, j = n, m\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i, j = i-1, j-1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Function to find the length of the longest common subsequence of two strings\n    def len_lcs(X, Y):\n        m = len(X)\n        n = len(Y)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if X[i - 1] == Y[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[m][n]\n\n    # Function to find the longest common subsequence of three strings\n    def lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n        dp = [[[0] * (o + 1) for _ in range(2)] for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                for k in range(1, o + 1):\n                    if X[i - 1] == Y[j - 1]:\n                        if Z[k - 1] == X[i - 1]:\n                            dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                        else:\n                            dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k])\n                    else:\n                        dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k])\n\n        # Find the length of the longest common subsequence\n        lcs_len = 0\n        for i in range(m + 1):\n            for j in range(n + 1):\n                for k in range(o + 1):\n                    if dp[i][j][k] == dp[i][j - 1][k]:\n                        lcs_len = max(lcs_len, dp[i][j][k])\n\n        # Initialize a 2D array to store the longest common subsequence\n        lcs_table = [[None] * (o + 1) for _ in range(m + 1)]\n        i = m\n        j = n\n        k = o\n\n        while i > 0 and j > 0 and k > 0:\n            if X[i - 1] == Y[j - 1]:\n                if Z[k - 1] == X[i - 1]:\n                    lcs_table[i][j] = lcs_table[i - 1][j - 1] + 1\n                    i -= 1\n                    j -= 1\n                    k -= 1\n                else:\n                    if dp[i - 1][j][k] == dp[i - 1][j][k - 1]:\n                        i -= 1\n                    else:\n                        j -= 1\n            else:\n                if dp[i - 1][j][k] == dp[i][j - 1][k]:\n                    j -= 1\n                else:\n                    k -= 1\n\n        # Extract the longest common subsequence\n        lcs_seq = []\n        while i > 0 and j > 0 and k > 0:\n            if X[i - 1] == Y[j - 1]:\n                if Z[k - 1] == X[i - 1]:\n                    lcs_seq.append(X[i - 1])\n                    i -= 1\n                    j -= 1\n                    k -= 1\n                else:\n                    if dp[i - 1][j][k] == dp[i - 1][j][k - 1]:\n                        i -= 1\n                    else:\n                        j -= 1\n            else:\n                if dp[i - 1][j][k] == dp[i][j - 1][k]:\n                    j -= 1\n                else:\n                    k -= 1\n\n        # Reverse the sequence to get the correct LCS\n        lcs_seq.reverse()\n\n        return lcs_seq"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    lcs = [[0] * (p + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into words\n    words = str1.split()\n\n    # Initialize an empty string to store the modified words\n    modified_words = []\n\n    # Loop through each word\n    for word in words:\n        # Check if the first letter of the word is capital\n        if word[0].isupper():\n            # Remove the first letter of the word and add a space to the modified words list\n            modified_words.append(\" \" + word[1:])\n        else:\n            # Otherwise, simply add the word to the modified words list\n            modified_words.append(word)\n\n    # Join the modified words into a single string and return it\n    return \"\".join(modified_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Loop through the words and capitalize the first letter\n    result = [word[0].upper() + word[1:].lower() for word in words]\n    # Join the words with spaces\n    result =''.join(result)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words and store them in a list\n    words = str1.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the word starts with a capital letter, insert a space before it\n        if words[i][0].isupper():\n            words[i] = \" \" + words[i]\n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    new_str = \"\"\n    for word in words:\n        if word.istitle():\n            new_str += \" \" + word\n        else:\n            new_str += word\n    return new_str.strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Initialize an empty list to store the modified words\n    modified_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the first character of the word is capitalized\n        if word[0].isupper():\n            # If it is, add a space before it\n            modified_words.append(word)\n        else:\n            # If it's not, just add the word to the list as is\n            modified_words.append(word)\n    # Join the modified words back into a string and return it\n    return''.join(modified_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the given string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Join the words with spaces\n    new_str =''.join(words)\n    \n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b\\w')\n    # split the string into words\n    words = pattern.split(str1)\n    # join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to match words with capital letters at the beginning\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Join the words with spaces\n    words_with_spaces =''.join(words)\n    \n    # Return the modified string\n    return words_with_spaces"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Remove all non-alphanumeric characters except underscores and spaces\n    str1 = re.sub('[^a-zA-Z0-9 _]', '', str1)\n    # Split the string into words using the split() method\n    words = str1.split()\n    # Create an empty list to store the capitalized words\n    capitalized_words = []\n    # Loop through each word and capitalize the first letter if it is capitalized\n    for word in words:\n        if word[0].isupper():\n            capitalized_word = word[0].upper() + word[1:]\n        else:\n            capitalized_word = word\n        # Add the capitalized word to the list\n        capitalized_words.append(capitalized_word)\n    # Join the words in the list with spaces\n    capitalized_str =''.join(capitalized_words)\n    # Return the capitalized string\n    return capitalized_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Create a list to store the modified words\n    modified_words = []\n    \n    # Iterate over the words\n    for word in words:\n        # Check if the first character is a capital letter\n        if word[0].isupper():\n            # If it is, add a space between the words\n            modified_words.append(''+ word)\n        else:\n            # If it's not, just add the word as is\n            modified_words.append(word)\n    \n    # Join the modified words together into a string and return it\n    return''.join(modified_words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n\n    nums.sort()\n\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        num = 0\n        for char in num_str:\n            num = num*10 + int(char)\n        nums.append(num)\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    # convert the strings to float and then sort them\n    nums_float = [float(num) for num in nums_str]\n    nums_float.sort()\n    return nums_float"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings in the list to float values\n    nums = [float(num) for num in nums_str]\n    # Sort the float values in ascending order\n    nums.sort()\n    # Convert the sorted float values back to strings\n    sorted_nums = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert each string to a float and sort them\n    nums = sorted([float(num) for num in nums_str])\n    # Convert the sorted list back to strings and join them into a string\n    return ''.join([str(num) for num in nums])"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all the numbers to floats\n    nums = [float(num) for num in nums_str]\n    # sort the list of numbers in ascending order\n    nums.sort()\n    # convert the sorted list of numbers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    # return the sorted list of numbers as a string\n    return ''.join(sorted_nums_str)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n\n    :param nums_str: list of strings of numbers\n    :return: sorted list of strings of numbers\n    \"\"\"\n    # split the input list into a list of lists, where each inner list contains a single string\n    nums_list = [[str(num)] for num in nums_str]\n    # convert the list of lists to a list of strings, where each string contains all the numbers separated by spaces\n    nums_str_list = [\"\".join(num) for num in nums_list]\n    # sort the list of strings using the built-in `sorted` function\n    nums_str_sorted = sorted(nums_str_list)\n    # convert the list of sorted strings back to a list of lists, where each inner list contains a single string\n    nums_list_sorted = [[int(num)] for num in nums_str_sorted]\n    # convert the list of lists to a list of strings, where each string contains all the numbers separated by spaces\n    nums_str_list_sorted = [\"\".join(num) for num in nums_list_sorted]\n    # return the sorted list of strings\n    return nums_str_list_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all the strings to numeric values using the try-except block\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue\n    \n    # Sort the numeric values in ascending order\n    nums.sort()\n    \n    # Convert the sorted numeric values back to strings and return the result\n    return [str(num) for num in nums]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # add the tuple to the list\n    test_list.append(test_tup)\n    # return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Loop through the list and add each element to the tuple\n    for item in test_list:\n        test_tup = tuple(map(lambda x, y: x + y, item, test_tup))\n    return test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n        for item2 in test_tup:\n            if item == item2:\n                test_list.remove(item)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2*i+1] and arr[i] < arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if it represents a min heap, else False.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # base case\n    if i >= len(arr) // 2:\n        return True\n\n    # check if the left child is smaller\n    if i * 2 + 1 < len(arr) and arr[i * 2 + 1] > arr[i]:\n        return False\n\n    # check if the right child is smaller\n    if i * 2 + 2 < len(arr) and arr[i * 2 + 2] > arr[i]:\n        return False\n\n    # if all checks pass, then the node at index i is a minimum heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. \n    '''\n    if i < 0:\n        return True\n\n    parent = (i - 1) // 2\n    if arr[i] >= arr[parent]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)\n\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function takes the array and its index as input and returns True if the given array represents a min heap and False otherwise.\n    '''\n    if i > 0:\n        if arr[i] < arr[i//2]:\n            return False\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i > 0:\n        parent = (i - 1) // 2\n        if arr[i] < arr[parent]:\n            return False\n    if i * 2 + 1 <= len(arr) - 1:\n        left_child = 2 * i + 1\n        if arr[i] > arr[left_child]:\n            return False\n    if i * 2 + 2 <= len(arr) - 1:\n        right_child = 2 * i + 2\n        if arr[i] > arr[right_child]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    \"\"\"\n    \n    # Base case\n    if i >= len(arr) // 2:\n        return True\n    \n    # Check if left and right child are smaller than parent\n    if arr[i] < arr[2 * i] or arr[i] < arr[2 * i + 1]:\n        return False\n    \n    # Recursively check left and right child\n    return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_min_heap(arr):\n    \"\"\"\n    Check if a given array represents a min heap or not.\n    A min heap is a binary tree where each parent node is smaller than its children.\n    The function returns True if the given array represents a min heap, else False.\n    \"\"\"\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if arr[i] > arr[0]:\n            return False\n    for i in range(len(arr) // 2, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n    This function takes an array arr and an index i as input and returns True if the array represents a min heap and False otherwise.\n\n    The array represents a min heap if and only if:\n    - The parent of node i is smaller than or equal to its children.\n    - All nodes from index 1 to i-1 are greater than or equal to the nodes at index i.\n\n    This function uses the inorder traversal of the binary tree to check if the array represents a min heap.\n    '''\n\n    if i == 0:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n\n    return check_min_heap_helper(arr, i//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    # If left child is smaller than root\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    # If right child is smaller than smallest so far\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    # If smallest is not root\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0:\n        return True\n\n    if arr[i] > arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + 3"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_lst = [0, 1]\n    for i in range(2, n):\n        jacobsthal_lst.append(jacobsthal_lst[i-1] + jacobsthal_lst[i-2])\n    return jacobsthal_lst[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number. \n    \"\"\"\n    # Initialize variables\n    jacobsthal_list = [0, 1]\n\n    # Calculate the Jacobsthal numbers up to n\n    for i in range(2, n + 1):\n        jacobsthal_num = (jacobsthal_list[i - 1] + jacobsthal_list[i - 2]) % 1000000\n        jacobsthal_list.append(jacobsthal_num)\n\n    return jacobsthal_list[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*jacobsthal_num(n/2) - 1\n    else:\n        return 2*jacobsthal_num((n-1)//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # Initialize the first few jacobsthal numbers\n    jacobsthal_numbers = [0, 1, 1]\n    for i in range(3, n):\n        # Calculate the next jacobsthal number by adding the previous two numbers\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2])\n    # Return the nth jacobsthal number\n    return jacobsthal_numbers[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth Jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    while n > 1:\n        if n % 2 == 0:\n            j += 1\n            n //= 2\n        else:\n            n -= 1\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        a = 0\n        b = 1\n        c = 1\n        for i in range(2, n+1): \n            c = (a + b) % 10 \n            a = b \n            b = c \n        return c"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the tuple list by first element (first column)\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a variable to store the minimum value\n    min_val = float('inf')\n\n    # Iterate through the sorted tuple list and check if the current value is less than min_val\n    for i in range(min(K, len(test_list))):\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n    Args:\n    test_list: List of tuples containing user-defined data.\n    K: Integer value representing the number of records to be returned.\n\n    Returns:\n    A list of tuples containing the K smallest records from the input list.\n    '''\n\n    # Sort the list of tuples based on the second element (i.e., the second element of each tuple).\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize an empty list to store the K smallest records.\n    min_records = []\n\n    # Iterate over the first K elements of the sorted list and add them to the min_records list.\n    for i in range(K):\n        min_records.append(test_list[i])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the input list by the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize variables to store the minimum k records and the indices of the minimum k records\n    min_k_records = []\n    min_k_indices = []\n\n    # Iterate over the sorted list\n    for i in range(K):\n        # If the current index has already been used, move on to the next one\n        if i in min_k_indices:\n            continue\n\n        # If the current index has not been used yet, add its value to min_k_records and add its index to min_k_indices\n        min_k_records.append(sorted_list[i])\n        min_k_indices.append(i)\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    min_list = []\n    count = 0\n    for item in test_list:\n        if count < K:\n            min_list.append(item)\n            count += 1\n        elif count == K:\n            if item[1] < min_list[0][1]:\n                min_list = [item]\n            elif item[1] == min_list[0][1]:\n                if item[0] < min_list[0][0]:\n                    min_list[0] = item\n        elif count > K:\n            if item[1] < min_list[-1][1]:\n                min_list.pop()\n                min_list.insert(0, item)\n                count -= 1\n            elif item[1] == min_list[-1][1]:\n                if item[0] < min_list[-1][0]:\n                    min_list[-1] = item\n                    count -= 1\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list of tuples in ascending order of second element\n    test_list.sort(key=lambda x: x[1])\n\n    # initialize minimum k to infinity\n    minimum = float('inf')\n\n    # iterate over the first K elements of the sorted list\n    for i in range(K):\n        # if current record is less than minimum, update minimum\n        if test_list[i][1] < minimum:\n            minimum = test_list[i][1]\n\n    return minimum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    test_list.sort()\n    count = 0\n    result = []\n    for i in range(len(test_list)):\n        if count < K:\n            if count == 0:\n                result = test_list[i]\n            else:\n                if test_list[i] < result:\n                    result = test_list[i]\n            count += 1\n        else:\n            break\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize the minimum count as infinity\n    min_count = float('inf')\n\n    # Initialize the count of minimum k records as zero\n    count = 0\n\n    # Iterate through the list\n    for i in range(K):\n        # Check if the current count of minimum k records is less than the minimum count\n        if count < min_count:\n            # If yes, update the minimum count and count of minimum k records\n            min_count = count\n            count = 1\n        else:\n            # If no, increment the count of minimum k records\n            count += 1\n\n    # Return the minimum count of minimum k records\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    # Sort the list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initialize the minimum k value as infinity and the count of minimum k value as zero\n    min_k_value = float('inf')\n    count_min_k = 0\n    \n    # Iterate over the sorted list and keep adding the minimum k value and incrementing the count of minimum k value\n    for i in range(len(sorted_list)):\n        if count_min_k < K:\n            min_k_value = min(min_k_value, sorted_list[i][1])\n            count_min_k += 1\n        else:\n            break\n    \n    return min_k_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    This function takes a tuple list (test_list) and an integer K as input and\n    returns the minimum K records from the list. If there are less than K records\n    in the list, all the records are returned. If there are not enough records,\n    the function raises a ValueError.\n\n    Example:\n    >>> test_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    >>> min_k(test_list, 3)\n    [(1, 2), (3, 4), (5, 6)]\n\n    If there are less than K records in the list:\n    >>> test_list = [(1, 2), (3, 4), (5, 6)]\n    >>> min_k(test_list, 3)\n    [(1, 2), (3, 4), (5, 6)]\n\n    If there are not enough records:\n    >>> test_list = [(1, 2), (3, 4)]\n    >>> min_k(test_list, 3)\n    ValueError: There are not enough records to find minimum 3 records.\n    '''\n\n    if len(test_list) < K:\n        raise ValueError(\"There are not enough records to find minimum %d records.\" % K)\n\n    min_records = sorted(test_list)[:K]\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list = sorted(test_list, key=lambda x: x[0])\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        elif test_list[i][0] < min_list[0][0]:\n            min_list.pop(0)\n            min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            common_elements.append(l1[index])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # initialize an empty list to store the common elements\n    common = []\n    \n    # loop over all indices in the lists\n    for i in range(len(l1)):\n        # check if the current index is empty in any of the lists\n        if l1[i] is None or l2[i] is None or l3[i] is None:\n            # if it is, skip to the next index\n            continue\n        # check if the current index is the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # if it is, add the element to the common list\n            common.append(l1[i])\n    \n    # return the common elements list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_set = set()\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            index_set.add(i)\n    return list(index_set)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_elements:\n            continue\n        elif l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        elif l1[i] in l2 and l1[i] not in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        elif l1[i] in l3 and l1[i] not in l2 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    if len(numbers) < 2:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = numbers[0]\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Return the second element of the sorted list\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return \"There must be at least two numbers in the list.\"\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?<=a)b.*?'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.findall(pattern, text)\n    return match\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a\\w*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?=.*[ab])(?=.*[b]).*'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n\n    Input:\n        text (str): The input string to be matched.\n\n    Output:\n        bool: True if the input string matches the pattern, False otherwise.\n    '''\n\n    pattern = r'a.*?b'\n\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function takes a string as input and returns True if it matches the given pattern and False otherwise.\n    '''\n    pattern = r'a(b*)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    result = re.search(pattern, text)\n    if result:\n        print(\"The text contains the pattern 'a[b]*' in the text.\")\n    else:\n        print(\"The text does not contain the pattern 'a[b]*' in the text.\")"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    # Sort the input list in reverse alphabetical order\n    test_list = sorted(test_list, reverse=True)\n\n    # Initialize variables to keep track of the current count of pairs and the length of the current pair\n    pair_count = 0\n    current_pair_length = 0\n\n    # Iterate over the sorted list\n    for i in range(len(test_list)):\n        # If the current substring is the same as the next substring, increment the pair count and reset the current pair length\n        if test_list[i] == test_list[i+1]:\n            current_pair_length += 2\n            pair_count += 1\n            # If the current pair length is greater than the length of the previous pair, increment the pair count\n            if current_pair_length > i - current_pair_length + 1:\n                pair_count += 1\n        # Otherwise, reset the current pair length\n        else:\n            current_pair_length = 1\n\n    return pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    # initialize variables to store the count and length of the strings\n    count = 0\n    len_list = []\n\n    # loop through the list of strings\n    for string in test_list:\n        # reverse the string\n        reversed_string = string[::-1]\n        # add the length of the reversed string to the list\n        len_list.append(len(reversed_string))\n\n        # loop through the previous strings in the list and compare them with the current string\n        for i in range(len(len_list) - 1):\n            # if the previous string is a reverse of the current string, increment the count\n            if len_list[i] == len(reversed_string) and reversed_string[i:i+len_list[i]] == string[len_list[i]:]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(str):\n    return str == str[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            reverse_str = test_list[j][::-1]\n            if reverse_str in reverse_dict:\n                count += 1\n            else:\n                reverse_dict[test_list[i]] = 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the strings are reverse of each other\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] or test_list[j][::-1] == test_list[i]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:] and test_list[j][::-1] in test_list[i:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize variables to store the count of reverse pairs and the current reverse string\n    count = 0\n    current_reverse = \"\"\n    # Loop through the given list of strings\n    for string in test_list:\n        # If the string is already a reverse string, add the count to the count variable\n        if string == current_reverse[::-1]:\n            count += 1\n        # If the string is not a reverse string, check if it is a reverse of the current_reverse string\n        elif string[::-1] in current_reverse:\n            # If it is, add the count to the count variable and update the current_reverse string with the new reverse string\n            count += current_reverse.count(string[::-1])\n            current_reverse = string\n    # Return the count of reverse pairs\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    count = {}\n    for item in list1:\n        if type(item) == tuple:\n            if item in list2:\n                count[item] += 1\n            else:\n                count[item] = 1\n                list2.append(item)\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    counts = {}\n    # Loop through each element in the list\n    for i in list1:\n        # Convert the element to a tuple\n        t = tuple(i)\n        # Check if the tuple is already in the dictionary\n        if t in counts:\n            # Increment the count of the tuple by 1\n            counts[t] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[t] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = list(set(list1))\n    result = {}\n    for sublist in list2:\n        count = list1.count(sublist)\n        result[tuple(sublist)] = count\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the counts of unique sublists\n    counts = {}\n    # Loop through the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already a key in the dictionary\n        if sublist_tuple in counts:\n            # Increment the count for the tuple\n            counts[sublist_tuple] += 1\n        else:\n            # Add the tuple as a new key to the dictionary with a count of 1\n            counts[sublist_tuple] = 1\n    # Return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist not in count_dict:\n            count_dict[sublist] = 1\n        else:\n            count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublists[tuple(sublist)] = sublists.get(tuple(sublist), 0) + 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_lists = {}\n    for item in list1:\n        # convert each list to a tuple\n        key = tuple(item)\n        if key in unique_lists:\n            # increment the count of the tuple\n            unique_lists[key] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            unique_lists[key] = 1\n    return unique_lists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate through the list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in counts:\n            # If it is, increment its count by 1\n            counts[sublist_tuple] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            counts[sublist_tuple] = 1\n            \n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list and counts the number of unique sublists in the list.\n    \"\"\"\n    # Creating a dictionary to store the count of unique sublists\n    count_dict = {}\n\n    # Looping through the list and converting each element to a tuple\n    for item in lst:\n        count_dict[tuple(item)] = count_dict.get(tuple(item), 0) + 1\n\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if abs(num - int(num)) < 0.01:\n            return True\n    except ValueError:\n        pass\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    # check if num is a string\n    if not isinstance(num, str):\n        return False\n    \n    # initialize sum to 0 and decimal count to 0\n    decimal_count = 0\n    sum = 0\n    \n    # loop through each character in the string\n    for char in num:\n        # if character is a decimal point, increment decimal count\n        if char == \".\":\n            decimal_count += 1\n        # if character is a digit, add to sum\n        elif char.isdigit():\n            sum += int(char)\n    \n    # check if sum is a multiple of 10 (e.g. 50.00, 123.45)\n    if decimal_count < 2:\n        return False\n    elif sum % 10!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.strip()\n    if num.count('.')!= 1:\n        return False\n    digits = [int(digit) for digit in num.split('.')]\n    if len(digits[0]) > 1 or len(digits[1]) > 2:\n        return False\n    if len(digits[0]) == 1 and digits[0] == 0:\n        return False\n    if len(digits[1]) == 2 and digits[1]!= '00':\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n    # Check if the input string has a length of 2 and if the first and last characters are digits\n    if len(num) == 2 and num[0].isdigit() and num[-1].isdigit():\n        # Check if the input string is a decimal number with a precision of 2\n        decimal_num = int(num)\n        if decimal_num % 10 == 0:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input string contains only digits and a decimal point\n    if not num.replace('.', '', 1).isdigit():\n        return False\n    \n    # Split the input string into integer and decimal parts\n    integer_part, decimal_part = num.split('.')\n    \n    # Check if the integer part is an integer between -2^31 and 2^31-1\n    if not integer_part.isdigit() or (len(integer_part) > 11 and integer_part[0] == '0'):\n        return False\n    \n    # Check if the decimal part is a decimal between 0 and 99\n    if decimal_part.isdigit() and int(decimal_part) >= 0 and int(decimal_part) <= 99:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    # Split the string by the decimal point\n    parts = num.split('.')\n    # Check if the number of parts is 2\n    if len(parts)!= 2:\n        return False\n    # Check if the first part is non-empty\n    if not parts[0]:\n        return False\n    # Check if the second part is non-empty and has 2 digits\n    if not parts[1] or len(parts[1])!= 2:\n        return False\n    # Check if the integer part has no non-zero digits\n    for digit in parts[0]:\n        if digit!= '0':\n            return False\n    # Check if the integer part has at least 1 non-zero digit\n    if not any(char!= '0' for char in parts[0]):\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    # Check if the given number is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the given number contains only digits and a decimal point\n    if '.' not in num or not num.replace('.', '').isdigit():\n        return False\n    \n    # Split the number into integer and decimal parts\n    integer_part = num.split('.')[0]\n    decimal_part = num.split('.')[1]\n    \n    # Check if the decimal part has a precision of 2\n    if len(decimal_part)!= 2:\n        return False\n    \n    # Check if the integer part contains only digits\n    if not integer_part.isdigit():\n        return False\n    \n    # Convert the integer and decimal parts to integers\n    integer_part = int(integer_part)\n    decimal_part = int(decimal_part)\n    \n    # Check if the decimal part is between 0 and 9\n    if decimal_part < 0 or decimal_part > 9:\n        return False\n    \n    # Check if the sum of the integer and decimal parts is a multiple of 10\n    if integer_part + decimal_part % 10!= 0:\n        return False\n    \n    # If all checks pass, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    if '.' not in num:\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if '.' in num:\n            parts = num.split('.')\n            if len(parts)!= 2:\n                return False\n            if len(parts[0]) > 1 or len(parts[1]) > 2:\n                return False\n            if len(parts[0]) == 1 and parts[0] == '0':\n                return False\n            try:\n                float(parts[1])\n            except ValueError:\n                return False\n            else:\n                if len(parts[1]) == 0:\n                    return False\n                elif len(parts[1]) == 1 and parts[1] == '0':\n                    return False\n                else:\n                    for digit in parts[1]:\n                        if not digit.isdigit():\n                            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the input is an empty string\n    if num == \"\":\n        return False\n\n    # Check if the string contains any non-numeric characters\n    if any(char.isdigit() == False for char in num):\n        return False\n\n    # Check if the string contains more than one decimal point\n    if num.count('.') > 1:\n        return False\n\n    # Split the string into integer and decimal parts\n    integer_part = \"\"\n    decimal_part = \"\"\n    dot_index = num.find('.')\n    if dot_index!= -1:\n        integer_part = num[:dot_index]\n        decimal_part = num[dot_index + 1:]\n    else:\n        integer_part = num\n\n    # Check if the integer part is less than 10 or greater than 99\n    if integer_part.isdigit() == False or (integer_part!= \"\" and int(integer_part) < 10) or (integer_part!= \"\" and int(integer_part) > 99):\n        return False\n\n    # Check if the decimal part has at most 2 digits\n    if decimal_part!= \"\" and len(decimal_part) > 2:\n        return False\n\n    # Check if the decimal part has only one leading zero\n    if decimal_part!= \"\" and decimal_part[0] == '0':\n        return False\n\n    # Check if the decimal part has only one trailing zero\n    if decimal_part!= \"\" and decimal_part[-1] == '0':\n        return False\n\n    # If all checks passed, return True\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return False\n\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if i!= j and arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    if len(unique) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) > 1:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Check if the list is empty or not\n    if len(arr) == 0:\n        return True\n    \n    # Initialize two variables to keep track of the distinct elements\n    distinct_elements = set()\n    # Iterate over the elements in the list\n    for element in arr:\n        # If the element is already in the set of distinct elements, return False\n        if element in distinct_elements:\n            return False\n        # Otherwise, add the element to the set of distinct elements\n        else:\n            distinct_elements.add(element)\n    # If we make it through the loop without returning False, return True\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    if unique:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes in a list of numbers as input and returns True if all elements in the list are distinct, and False otherwise.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # check if the given month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number. Month numbers are from 1 to 12.\"\n\n    # calculate the number of days in the given month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2 and is_leap_year(year):\n        days_in_month[1] = 29\n\n    # check if the given month number contains 30 days\n    if monthnum3 in days_in_month:\n        return \"The month number contains 30 days.\"\n    else:\n        return \"The month number does not contain 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    elif monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n    if monthnum3 in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        print(monthnum3, \"contains 30 days\")\n    else:\n        print(monthnum3, \"does not contain 30 days\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n    \"\"\"\n    if monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum % 2 == 0 and monthnum % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 % 3 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_dict = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum3 in month_dict:\n        if month_dict[monthnum3] == 30:\n            print(\"The given month number contains 30 days\")\n        else:\n            print(\"The given month number doesn't contain 30 days\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum % 3 == 0 and monthnum % 100!= 0 or monthnum % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in range(1,13):\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and its length n as input and returns the minimum difference between any two elements in the array.\n    \n    The function iterates through the array and compares each element with all the other elements in the array.\n    It then calculates the absolute difference between the current element and the next element and updates the minimum difference if necessary.\n    \n    Args:\n    arr (list of int): An array of integers.\n    n (int): The length of the array.\n    \n    Returns:\n    int: The minimum difference between any two elements in the array.\n    \n    Example:\n    >>> arr = [1, 2, 3, 4, 5]\n    >>> n = len(arr)\n    >>> find_min_diff(arr, n)\n    1\n    \"\"\"\n    min_diff = float('inf')  # initialize the minimum difference to infinity\n    \n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference to be the difference between the first and second element\n    min_diff = arr[1] - arr[0]\n\n    # Iterate over the array starting from the third element\n    for i in range(2, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i-1]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    # sorting the array\n    arr.sort()\n    # finding the minimum difference\n    min_diff = arr[n-1] - arr[0]\n    # iterating through the array and checking for the minimum difference\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    # printing the minimum difference\n    print(\"Minimum difference between any two elements in the array:\", min_diff)\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sorting the array in ascending order\n\n    min_diff = arr[1] - arr[0]  # The minimum difference between any two elements is the difference between the second and first element\n\n    for i in range(1, n - 1):\n        curr_diff = arr[i + 1] - arr[i]  # The current difference between any two elements is the difference between the next element and the current element\n\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize two pointers at the beginning and end of the array\n    i, j = 0, n - 1\n\n    # initialize the minimum difference found so far to infinity\n    min_diff = float('inf')\n\n    # iterate over the sorted array\n    while i < j:\n        # calculate the difference between the current pair of elements\n        diff = arr[j] - arr[i]\n\n        # update the minimum difference if the current pair is closer than the current minimum\n        if diff < min_diff:\n            min_diff = diff\n\n        # move the pointer of the smaller element to the right\n        if arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference\n    min_diff = arr[1] - arr[0]\n    \n    # Loop through the array starting from the second element\n    for i in range(1,n):\n        # Calculate the difference between current element and the next element\n        diff = arr[i+1] - arr[i]\n        \n        # Check if the current difference is smaller than the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its size and returns the minimum difference between any two elements in the array.\n\n    :param arr: an array of integers\n    :param n: the size of the array\n    :return: the minimum difference between any two elements in the array\n    \"\"\"\n    if n < 2:\n        return \"Array must have at least two elements\"\n\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input\n    and returns the minimum difference between any two elements in the array.\n\n    Parameters:\n    arr (list): List of integers.\n    n (int): Length of the array.\n\n    Returns:\n    int: Minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference to positive infinity\n    min_diff = float('inf')\n\n    # Traverse the array and compare adjacent elements\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize min_diff to a very large number\n    min_diff = float('inf')\n\n    # loop through all pairs of elements in the array\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes in an array of integers and its size n.\n    It finds the minimum difference between any two elements in the array and returns the result.\n    '''\n    # Sorting the array\n    arr.sort()\n    \n    # Initializing minimum difference to the value of the first element\n    min_diff = abs(arr[1] - arr[0])\n    \n    # Iterating through the array from index 2 to n-1\n    for i in range(2, n):\n        # Calculating the difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n        \n        # Updating the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n            \n    # Returning the minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    def nth_polite(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 5\n        if n % 2 == 0:\n            return 3 * nth_polite(n // 2) + 1\n        return 5 * nth_polite((n - 1) // 2) + 3\n\n    return nth_polite(n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function checks if a given number is a polite number or not.\n\n    Args:\n        n (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is a polite number, False otherwise.\n    \"\"\"\n\n    # check if the number is negative\n    if n < 0:\n        return False\n\n    # check if the number is less than 1000\n    if n < 1000:\n        return True\n\n    # check if the number is divisible by 100\n    if n % 100 == 0:\n        return False\n\n    # check if the number is divisible by 10\n    if n % 10 == 0:\n        return False\n\n    # calculate the number of digits in the number\n    num_digits = len(str(n))\n\n    # calculate the number of digits divisible by 2\n    num_divisible_by_2 = 0\n    for i in range(1, num_digits + 1):\n        if n % 10 == 0:\n            num_divisible_by_2 += 1\n\n    # check if the number is divisible by 2 and has a polite number of digits divisible by 2\n    if num_divisible_by_2 >= 1 and num_digits % 2 == 1:\n        return True\n\n    # check if the number is divisible by 2 and has a polite number of digits divisible by 2\n    if num_divisible_by_2 >= 2 and num_digits % 2 == 0:\n        return True\n\n    # check if the number is divisible by 3 and has a polite number of digits divisible by 2\n    if num_divisible_by_2 >= 1 and num_digits % 3 == 0:\n        return True\n\n    # check if the number is divisible by 3 and has a polite number of digits divisible by 2\n    if num_divisible_by_2 >= 2 and num_digits % 3 == 1:\n        return True\n\n    # check if the number is divisible by 5 and has a polite number of digits divisible by 2\n    if num_divisible_by_2 >= 1 and num_digits % 5 == 0:\n        return True\n\n    # check if the number is divisible by 5 and has a polite number of digits divisible by 2\n    if num_divisible_by_2 >= 2 and num_digits % 5 == 1:\n        return True\n\n    # check if the number is divisible by 7 and has a polite number of digits divisible by 2\n    if num_divisible_by_2 >= 1 and num_digits % 7 == 0:\n        return True\n\n    # check if the number is divisible by 7 and has a polite number of digits divisible by 2\n    if num_divisible_by_2 >= 2 and num_digits % 7 == 1:\n        return True\n\n    # check if the number is divisible by 11 and has a polite number of digits divisible by 2\n    if num_divisible_by_2 >= 1 and num_digits % 11 == 0:\n        return True\n\n    # check if the number is divisible by 11 and has a polite number of digits divisible by 2\n    if num_divisible_by_2 >= 2 and num_digits % 11 == 1:\n        return True\n\n    # if none of the conditions are met, the number is not a polite number\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to check if a number is polite\n    def is_polite_number(num):\n        if not is_prime(num):\n            return False\n        if num % 2 == 0:\n            return False\n        if num % 10 == 0:\n            return True\n        return False\n\n    # Find the nth polite number\n    polite_count = 0\n    for i in range(1, n+1):\n        if is_polite_number(i):\n            polite_count += 1\n        if polite_count == n:\n            return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    polite_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return polite_numbers[n-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the nth polite number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        This function takes an integer n and returns True if n is prime, else False.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if n is a prime number\n    if not is_prime(n):\n        return \"Not a prime number.\"\n\n    # Initialize variables\n    a = 0\n    b = 1\n    count = 0\n\n    # Use Newton's method to find the nth polite number\n    while count < n:\n        a, b = b, a + b\n        count += 1\n\n    return a"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # initialize a list of polite numbers\n    polite_numbers = [1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    \n    # find the nth polite number\n    if n < 1 or n > len(polite_numbers):\n        return None\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    A function to check if a number is polite or not.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be greater than or equal to 1\")\n\n    # Initialize the sum of polite numbers\n    polite_sum = 0\n\n    # Check if the number is a prime number\n    if n == 1 or n == 2:\n        return True\n\n    # Iterate through the range of numbers from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # Check if the number is divisible by i\n        if n % i == 0:\n            # If it is, then it's not polite\n            return False\n\n        # Check if the number is greater than i\n        if n > i:\n            # If it is, then add it to the sum of polite numbers\n            polite_sum += i\n\n    # If the loop completes without finding a divisor, then it's polite\n    if polite_sum == 0:\n        return True\n\n    # Check if the remaining number is greater than 1\n    if n > polite_sum:\n        return True\n\n    # If none of the above conditions are met, then it's not polite\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize first polite number to 2\n    first_polite = 2\n    # Initialize second polite number to 2\n    second_polite = 2\n    # Initialize count to 1\n    count = 1\n    # Loop until nth polite number is found\n    while count < n:\n        # Check if second polite number is odd\n        if second_polite % 2 == 1:\n            # If odd, increment the count and calculate the next polite number\n            count += 1\n            second_polite = 4 * second_polite + 1\n        # If even, double the second polite number and increment the count\n        else:\n            count += 1\n            second_polite = second_polite * 2\n        # Check if first polite number is odd\n        if first_polite % 2 == 1:\n            # If odd, increment the count and calculate the next polite number\n            count += 1\n            first_polite = 4 * first_polite + 1\n        # If even, double the first polite number and increment the count\n        else:\n            count += 1\n            first_polite = first_polite * 2\n    # Return the nth polite number\n    return first_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def nth_polite(n):\n        count = 0\n        num = 1\n        while count < n:\n            num += 1\n            count += 1\n            if is_prime(num):\n                break\n        return num\n    \n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n                \n    polite_numbers = [i for i in range(n+1) if primes[i]]\n    \n    return polite_numbers[n-1]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Initialize an empty list to store the pairs\n    pairs = []\n    # Loop through each item in the list\n    for i in range(len(l1)-1):\n        # Append the current item to the pairs list\n        pairs.append(l1[i])\n        # If there are at least two more items left, append the next item to the pairs list\n        if i < len(l1)-2:\n            pairs.append(l1[i+1])\n    # Return the pairs list\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the input sum.\n    '''\n    count = 0\n    n = len(arr)\n\n    # Traverse through all possible pairs of numbers in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    # Initialize count to zero\n    count = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Loop through the remaining array elements\n        for j in range(i+1, len(arr)):\n            # If the sum of the elements is equal to the target sum, increment the count\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains all the elements that are present in the first list but not in the second list.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements of the first list that are not present in the second list.\n    '''\n    # Creating a set to store the elements of the second list\n    set2 = set(li2)\n    # Using a set-subtraction operation to find the elements of the first list that are not present in the second list\n    diff = li1 - set2\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Using set() function to remove duplicates from both lists\n    set1 = set(li1)\n    set2 = set(li2)\n    \n    # Using difference() function to get the difference between both sets\n    diff_set = set1.difference(set2)\n    \n    # Converting the difference set to a list and returning it\n    return list(diff_set)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 1\n    sum_of_powers = 0\n    while count <= n:\n        if count % 2 == 1:\n            sum_of_powers += count ** 4\n        count += 1\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1):\n        sum_of_powers += i**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = [i for i in range(1, n+1, 2)]\n    fourth_power_sum = sum([odd_num ** 4 for odd_num in odd_nums])\n    return fourth_power_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of fourth power of odd numbers\n    sum_of_fourth_powers = 0\n    # loop through the first n odd natural numbers\n    for i in range(n):\n        # add the fourth power of the current odd number to the sum of fourth power of odd numbers\n        sum_of_fourth_powers += i ** 4\n    # return the sum of fourth power of odd numbers\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 2\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_odd_fourth_power = 0\n    for i in range(1, n+1, 2):\n        sum_odd_fourth_power += i ** 4\n    return sum_odd_fourth_power\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n\n        # Check if the current number is odd\n        if i % 2 == 1:\n\n            # Calculate the fourth power of the current number\n            num_fourth_power = i ** 4\n\n            # Add the fourth power to the sum\n            sum += num_fourth_power\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. \n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            index = stack.pop()\n            if index % 2 == 0:\n                return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '[', '{']:\n                if char!= top_char:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char.isdigit():\n            num_of_chars = len(char)\n            for _ in range(num_of_chars):\n                stack.append(char)\n        elif char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= \"(\":\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n\n    if len(stack)!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char == ')' and last_char == '(':\n                continue\n            elif char == '}' and last_char == '{':\n                continue\n            elif char == ']' and last_char == '[':\n                continue\n            else:\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_parentheses = ['(', '{', '[']\n    closing_parentheses = [')', '}', ']']\n\n    for char in exp:\n        if char in opening_parentheses:\n            stack.append(char)\n        elif char in closing_parentheses:\n            if not stack:\n                return False\n            if stack[-1] in opening_parentheses:\n                if char == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif char == '}' and stack[-1] == '{':\n                    stack.pop()\n                elif char == ']' and stack[-1] == '[':\n                    stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            last_open = stack.pop()\n\n    if stack:\n        return False\n\n    return True\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    i = 0\n    while i < len(words):\n        if len(words[i]) == K:\n            words.pop(i)\n        else:\n            i += 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words with length greater than K\n    length_greater_than_K = []\n\n    # Loop through each word\n    for word in words:\n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            # Add the word to the length_greater_than_K list\n            length_greater_than_K.append(word)\n\n    # Join the length_greater_than_K list into a string and return it\n    return''.join(length_greater_than_K)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            print(\"Match:\", match.group(), \"at position:\", match.start())\n        return matches"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    if not pattern:\n        return None\n\n    matches = re.findall(pattern, text)\n\n    if not matches:\n        return None\n\n    positions = [match.start() for match in matches]\n\n    return matches, positions"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Compile the regular expression pattern\n    pattern_object = re.compile(pattern)\n\n    # Find all the occurrences of the pattern in the string\n    occurrences = pattern_object.findall(text)\n\n    # Return None if there are no occurrences\n    if not occurrences:\n        return None\n\n    # Find the position of the first occurrence\n    position = text.find(occurrences[0])\n\n    # Loop through all occurrences and find their positions\n    for i in range(1,len(occurrences)):\n        position = text.find(occurrences[i],position+1)\n\n    # Create a dictionary to store the occurrences and their positions\n    occurrence_dict = {}\n    for i in range(len(occurrences)):\n        occurrence_dict[occurrences[i]] = position\n        position += len(occurrences[i])\n\n    # Return the dictionary of occurrences and their positions\n    return occurrence_dict"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end(), match.group())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        m = re.search(pattern, text)\n        if m:\n            return m.group(), m.start()\n        else:\n            return None\n    except re.error:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            print(f\"Substring found at position {start}, length {end}\")\n        return None\n    else:\n        return \"No match found\""
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Compile the regular expression pattern\n    pattern_obj = re.compile(pattern)\n    # Find all occurrences of the pattern in the text\n    matches = pattern_obj.findall(text)\n    if len(matches) == 0:\n        # If no matches found, return None\n        return None\n    # Initialize an empty list to store the results\n    result = []\n    # Loop through each match and append its position and length to the result list\n    for i in range(len(matches)):\n        result.append((matches[i], text.find(matches[i]), len(matches[i])))\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not all(num % 2 == 1 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                count += 1\n    return count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_count += 1\n            if odd_count == i+1:\n                return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:  # check if the index is odd\n            if i < len(nums) // 2:  # check if the index is less than the middle of the list\n                if not nums[i] % 2 == 1:  # check if the number at the odd index is odd\n                    return False  # if the condition is not met, return False\n    return True  # if the loop completes without finding any odd numbers, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    odd_count = 0\n    \n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                odd_count += 1\n    \n    return odd_count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            odd_count += 1\n            if odd_count == 2:\n                return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            count = 0\n            for num in nums:\n                if num % 2!= 0:\n                    count += 1\n                else:\n                    break\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(1, len(test_str) - 1):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    \n    # Initialize the sum variable to 0\n    total = 0\n    \n    # Iterate over the frequency dictionary and add up the elements with a frequency of 1\n    for elem, count in freq.items():\n        if count == 1:\n            total += elem\n    \n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n    # Initialize the sum to zero\n    total_sum = 0\n    # Iterate through the set and add each element to the total sum\n    for element in unique_set:\n        total_sum += element\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a set to store the elements in the list.\n    unique_elements = set(arr)\n    \n    # Initialize a variable to store the sum of the elements.\n    sum_of_elements = 0\n    \n    # Iterate over the unique elements in the list and add their value to the sum.\n    for element in unique_elements:\n        sum_of_elements += element\n    \n    return sum_of_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the elements of the list\n    freq = {}\n    \n    # Iterate over the elements of the list and update the frequency count of each element\n    for element in arr:\n        freq[element] = freq.get(element, 0) + 1\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    \n    # Iterate over the frequency count of each element in the list\n    for element, count in freq.items():\n        # If the count of the element is 1, add it to the sum of non-repeated elements\n        if count == 1:\n            sum_non_repeated += element\n    \n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Removing duplicates from the list\n    arr = list(set(arr))\n    # Initializing the sum variable to zero\n    sum_of_non_repeated = 0\n    # Iterating over the list and adding the non-repeated elements to the sum variable\n    for i in arr:\n        sum_of_non_repeated += i\n    # Returning the sum of non-repeated elements\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list of integers as input and returns the sum of the \n    non-repeated elements in the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(arr)\n\n    # Calculate the sum of the unique elements\n    unique_sum = sum(unique_elements)\n\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # iterate through the given list and add unique elements to the set\n    for element in arr:\n        unique_set.add(element)\n\n    # convert the set back to a list and sum its elements\n    sum_list = list(unique_set)\n    return sum(sum_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    # Convert the set back to a list and sum it\n    return sum(list(unique_set))"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of non-repeated elements in the list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Sum up the unique set\n    unique_sum = sum(unique_set)\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to keep track of the occurrences of each element\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # initialize the sum to 0\n    sum_non_repeated = 0\n    \n    # iterate through the dictionary and add the non-repeated elements to the sum\n    for num, count in freq.items():\n        if count == 1:\n            sum_non_repeated += num\n    \n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Use itertools.groupby() to group the list by consecutive duplicates\n    grouped = groupby(enumerate(list1), lambda x: x[1] == x[0]-1)\n\n    # Convert the grouped iterator to a list of sublists\n    sublists = list(grouped)\n\n    # Return the sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for item, group in groupby(list1):\n        if item == next(group):\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [''.join(c) for k, c in groupby(lst) if k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    group = []\n    for i, item in enumerate(list1):\n        if i == 0 or item!= list1[i-1]:\n            if group:\n                result.append(list(group))\n            group = [item]\n        else:\n            group.append(item)\n    if group:\n        result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the elements by their indices\n    grouped_indices = groupby(enumerate(list1), lambda x: x[0] == x[1])\n\n    # Create a list to store the packed sublists\n    packed_list = []\n\n    # Iterate over the grouped indices and pack consecutive duplicates into sublists\n    for (idx, is_consecutive), group in grouped_indices:\n        if is_consecutive:\n            # Add the current group to the packed list\n            packed_list.append(list(group))\n\n    # Return the packed list\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Group the list elements by the key function and return the keyed groups\n    grouped_list = groupby(list1, lambda x: x)\n\n    # Use a list comprehension to convert the grouped list into sublists of consecutive duplicates\n    sublists = [list(group) for key, group in grouped_list if key]\n\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_count = {}\n    for sublist in list1:\n        if tuple(sublist) in list_count:\n            list_count[tuple(sublist)] += 1\n        else:\n            list_count[tuple(sublist)] = 1\n    return list_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Define an empty dictionary to store the count of unique lists\n    unique_list_counts = {}\n\n    # Iterate over the sublists of list1\n    for sublist in list1:\n        # Turn the sublist into a tuple to compare it to previously seen sublists\n        sublist_tuple = tuple(sublist)\n\n        # If the sublist has not been seen before, add it to the dictionary and set its count to 1\n        if sublist_tuple not in unique_list_counts:\n            unique_list_counts[sublist_tuple] = 1\n        # Otherwise, increment the count of the sublist in the dictionary\n        else:\n            unique_list_counts[sublist_tuple] += 1\n\n    # Return the dictionary of unique list counts\n    return unique_list_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            unique_list.append(tuple(list1[i:j]))\n    count = {}\n    for item in unique_list:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for i in list1:\n        if tuple(sorted(i)) not in unique_list:\n            unique_list.append(tuple(sorted(i)))\n    count = {}\n    for i in unique_list:\n        count[i] = list1.count(i)\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create a dictionary to store the counts\n    count_dict = {}\n    \n    # Iterate over each list in the original list\n    for sublist in list1:\n        \n        # Convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            \n            # If it is, increment the count\n            count_dict[sublist_tuple] += 1\n            \n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[sublist_tuple] = 1\n    \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        sublist_dict[tuple(list1[i])] = sublist_dict.get(tuple(list1[i]), 0) + 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    # Create an empty dictionary to store the counts of sublists\n    counts = {}\n    \n    # Loop through the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the dictionary\n        counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    \n    # Return the dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    Count the number of unique sublists in a given list\n    '''\n    lst_tuples = [(tuple(sublist), len(sublist)) for sublist in lst]\n    unique_tuples = set(lst_tuples)\n    result = {tuple:count for (tuple, count) in unique_tuples}\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate through each list in the original list\n    for sublist in list1:\n        # Convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in counts:\n            # Increment the count for the tuple\n            counts[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[sublist_tuple] = 1\n\n    # Return the dictionary with the counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create an empty dictionary to store the counts of unique sublists\n    counts = {}\n    # iterate over the input list\n    for sublist in list1:\n        # turn the sublist into a tuple and check if it's already in the dictionary\n        if tuple(sublist) in counts:\n            # increment the count for this tuple\n            counts[tuple(sublist)] += 1\n        else:\n            # otherwise, add the sublist to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combos = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            combos.append(combo)\n    return combos"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    def find_combinations_helper(combination_list, current_sum, target_sum):\n        if current_sum == target_sum:\n            return [combination_list]\n        if current_sum > target_sum:\n            return []\n        \n        result = []\n        for i, tup in enumerate(test_list):\n            if tup[0] == tup[1]:\n                new_combination = list(combination_list)\n                new_combination.append(tup)\n                result.extend(find_combinations_helper(new_combination, current_sum + tup[0], target_sum))\n        return result\n    \n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            result.extend(find_combinations_helper([], test_list[i][0] + test_list[j][0], test_list[i][0] + test_list[j][1]))\n            result.extend(find_combinations_helper([], test_list[i][1] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n            result.extend(find_combinations_helper([], test_list[i][0] + test_list[j][1], test_list[i][0] + test_list[j][0]))\n            result.extend(find_combinations_helper([], test_list[i][1] + test_list[j][1], test_list[i][1] + test_list[j][0]))\n    \n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for tup in test_list:\n        sum_list.extend(tup)\n    return list(combinations(sum_list, len(sum_list)))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    def find_combinations_helper(combinations_list, current_sum, test_list, n, target_sum):\n        if current_sum == target_sum:\n            print(combinations_list)\n            return\n        for i in range(n, len(test_list)):\n            if current_sum + test_list[i] <= target_sum:\n                combinations_list.append(test_list[i])\n                find_combinations_helper(combinations_list, current_sum + test_list[i], test_list, n+1, target_sum)\n                combinations_list.pop()\n\n    combinations_list = []\n    find_combinations_helper(combinations_list, 0, test_list, 0, sum(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(test_list[i:j]) == 0:\n                print(\" \".join(map(str, test_list[i:j])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(2, n+1):\n        for subset in combinations(test_list, i):\n            total = sum(subset)\n            if total in test_list:\n                print(subset)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                print(\"The combination is:\", test_list[i], test_list[j])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    comb = []\n    for i in range(1,len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == sum(test_list):\n                comb.append(tuple(j))\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get the length of the tuple list\n    length = len(test_list)\n\n    # Initialize an empty set to store the combinations of sums\n    combinations_set = set()\n\n    # Iterate over all possible pairs of indices\n    for i in range(length):\n        for j in range(i+1, length):\n            # Get the current pair of indices\n            pair = (i,j)\n            # Get the current pair of tuples\n            pair_tuples = tuple(test_list[i:j+1])\n            # Calculate the sum of the current pair of tuples\n            sum_pair = sum(pair_tuples)\n            # Check if the sum is in the test_list\n            if sum_pair in test_list:\n                # Add the current combination to the set\n                combinations_set.add(pair)\n\n    # Return the set of combinations\n    return combinations_set"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                print(test_list[i], test_list[j])\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]):\n                    print(test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function calculates the count of divisors of a number n.\n    It uses the math module to calculate the number of factors of n.\n    '''\n    factors = math.factorial(n)\n    divisors = math.sqrt(factors)\n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even and False otherwise.\n    '''\n    count = math.factorial(n)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]\n    return (len(divisors) % 2) == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    if n > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n    if n > 1:\n        divisors.append(n)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns the count of divisors of n.\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 2\n            i += 1\n    if n > 1:\n        count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    \n    count = 0\n    divisor = 1\n    divisors_sum = 1\n    \n    while divisor <= n:\n        if n % divisor == 0:\n            count += 1\n            divisors_sum += divisor\n        divisor += 1\n    \n    if divisors_sum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i!= n // i:\n                divisors.append(i)\n                divisors.append(n // i)\n    if len(divisors) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n\n    # Find the sum of all subarrays of odd length\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i) % 2 == 1: # Check if subarray length is odd\n                sub_arr = arr[i:j+1] # Extract subarray\n                total_sum += sum(sub_arr) # Add subarray sum to the total sum\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of odd length subarrays\n    sum = 0\n    # Iterate over the array and check if the current subarray has an odd length\n    for i in range(len(arr)):\n        # Check if the current subarray has an odd length\n        if i % 2 == 1:\n            # Calculate the sum of the current subarray\n            subarray_sum = sum(arr[i:i+2])\n            # Add the sum to the total sum\n            sum += subarray_sum\n    # Return the total sum of odd length subarrays\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        if arr[0] % 2 == 1:\n            return arr[0]\n        else:\n            return 0\n    elif n == 2:\n        if arr[0] % 2 == 1 and arr[1] % 2 == 1:\n            return arr[0] + arr[1]\n        else:\n            return odd_length_sum(arr[1:])\n    else:\n        total = 0\n        for i in range(1, n - 1):\n            if arr[i] % 2 == 1:\n                total += arr[i]\n        total += odd_length_sum(arr[1:])\n        return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    odd_sum = 0\n    for i in range(n):\n        # calculate the sum of odd length subarrays from index i to n-1\n        if (i+1) % 2 == 0:\n            odd_sum += arr[i]\n        else:\n            odd_sum -= arr[i]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j-i+1%2!= 0:\n                total_sum += sum(arr[i:j+1])\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of odd length subarrays\n    total_sum = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # If the current element is odd, sum the sum of the previous two subarrays\n        if arr[i] % 2!= 0:\n            if i > 0 and i < len(arr) - 1:\n                total_sum += arr[i - 1] + arr[i + 1]\n\n    # Return the total sum of odd length subarrays\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n\n    for i in range(n-1):\n        left = i\n        right = i+2\n        while left >= 0 and right < n and left < right:\n            result += arr[left] + arr[right]\n            left -= 1\n            right += 1\n\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum_odd = 0\n    # Loop through all subarrays of odd length and add their sum to the sum_odd variable\n    for i in range(1, n+1, 2):\n        sum_odd += sum(arr[i-1:i+1])\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Calculate the sum of all odd length subarrays in an array.\n    \"\"\"\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_odd += arr[j-2]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum of odd length subarrays to zero\n    odd_sum = 0\n    # Initialize the sum of all subarrays to zero\n    all_sum = 0\n    # Traverse through the array\n    for i in range(n):\n        # Check if the current element is odd\n        if arr[i] % 2!= 0:\n            # If the current element is odd, add it to the sum of odd length subarrays\n            odd_sum += arr[i]\n        # If the current element is even, add it to the sum of all subarrays\n        all_sum += arr[i]\n    # Return the sum of all subarrays\n    return all_sum - odd_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert the RGB values to float\n    r, g, b = float(r), float(g), float(b)\n\n    # Find the minimum and maximum values of the RGB values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate the delta value\n    delta = max_val - min_val\n\n    # Calculate the hue value\n    if delta == 0:\n        hue = 0\n    elif r == max_val:\n        hue = ((g - b) / delta) % 6\n    elif g == max_val:\n        hue = ((b - r) / delta) + 2\n    else:\n        hue = ((r - g) / delta) + 4\n\n    # Normalize the hue value\n    if hue < 0:\n        hue += 6\n\n    # Calculate the saturation value\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Calculate the value value\n    value = max_val\n\n    # Return the hsv values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n    '''\n    r, g, b = r/255, g/255, b/255  # scale from [0, 1] to [0, 1]\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    h *= 60\n    if h < 0:\n        h += 360\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0\n    s = 0\n    v = max_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g-b)/delta\n    elif max_val == g:\n        h = (b-r)/delta + 2\n    else:\n        h = (r-g)/delta + 4\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta/max_val\n    \n    if s == 0:\n        h = 0\n    \n    h = round(h*60)\n    if h < 0:\n        h += 360\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0\n    s = 0\n    \n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h = h * 60\n    if h < 0:\n        h += 360\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    return (h, s, max_val)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert r, g, b to floats\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n    \n    # Calculate max and min values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate delta value\n    delta = max_val - min_val\n    \n    # If max_val is zero, delta is 0, and h is undefined\n    if max_val == 0:\n        h = 0\n    # If r is max_val, h = (g - b) / delta\n    elif r == max_val:\n        h = (g - b) / delta\n    # If g is max_val, h = 2 + (b - r) / delta\n    elif g == max_val:\n        h = 2 + (b - r) / delta\n    # If b is max_val, h = 4 + (r - g) / delta\n    elif b == max_val:\n        h = 4 + (r - g) / delta\n    \n    # Convert h from degrees to radians\n    h = h * 60\n    \n    # If h < 0, convert it to h + 360\n    if h < 0:\n        h += 360\n    \n    # Calculate hsv values\n    hsv_vals = [h, delta, max_val]\n    \n    return hsv_vals"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    \n    # Calculate the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the delta value\n    delta = max_val - min_val\n    \n    # Calculate the hue value\n    if max_val == min_val:\n        h = 0\n    elif r == max_val:\n        h = 60 * ((g - b) / delta)\n    elif g == max_val:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n    \n    # Calculate the saturation value\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    # Calculate the value value\n    v = max_val\n    \n    # Convert the hsv values to a list\n    hsv = [h, s, v]\n    \n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in three integer values representing the red, green, and blue\n    components of an RGB color and returns a tuple of three floats representing\n    the hue, saturation, and value components of the HSV color model.\n    \"\"\"\n\n    # Convert the RGB components to floating point values between 0 and 1\n    r_f, g_f, b_f = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the maximum and minimum values of R, G, and B\n    max_val = max(r_f, g_f, b_f)\n    min_val = min(r_f, g_f, b_f)\n\n    # Calculate the difference between the maximum and minimum values of R, G, and B\n    diff = max_val - min_val\n\n    # If the maximum value is 0 (black or white), then HSV components are undefined\n    if max_val == 0:\n        h, s, v = 0, 0, max_val\n\n    # If the maximum value is not 0, then calculate the HSV components\n    else:\n        # Calculate the Hue by finding the position of the maximum value in the RGB color wheel\n        if r_f == max_val:\n            h = (g_f - b_f) / diff\n        elif g_f == max_val:\n            h = 2 + (b_f - r_f) / diff\n        else:\n            h = 4 + (r_f - g_f) / diff\n\n        # Convert the Hue to degrees from 0 to 360\n        h *= 60\n\n        # If the Hue is negative, then add 360 to it\n        if h < 0:\n            h += 360\n\n        # Calculate the Saturation by dividing the sum of squared differences by the square of the sum of the\n        # differences\n        s = diff / (max_val + diff) if max_val!= 0 else 0\n\n        # Calculate the Value by dividing the sum of squared differences by the square of the sum of the\n        # differences\n        v = max_val\n\n    # Return a tuple of the HSV components\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h, s, v = 0, 0, 0\n    r, g, b = r/255, g/255, b/255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    if max_val == min_val:\n        h, s = 0, 0\n    else:\n        delta = max_val - min_val\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h * 60\n        if h < 0:\n            h += 360\n        s = delta / max_val\n    v = max_val\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert rgb to r, g, b values to float\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the delta between max and min values\n    delta = max_val - min_val\n\n    # If max_val is 0, then r, g, and b are all 0 and we can return 0, 0, and 0\n    if max_val == 0:\n        h = 0\n        s = 0\n        v = max_val\n    # If max_val is 1, then r, g, and b are all 1 and we can return 0, 0, and 0\n    elif max_val == 1:\n        h = 0\n        s = 0\n        v = max_val\n    # If delta is 0, then r, g, and b are all the same color and we can return 0, 0, and 0\n    elif delta == 0:\n        h = 0\n        s = 0\n        v = max_val\n    # If r, g, and b are different colors, then calculate h, s, and v values\n    else:\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        # Calculate the saturation and value\n        s = delta / max_val\n\n        if s == 0:\n            v = max_val\n        else:\n            v = max_val\n\n        # Convert the values to integers\n        h = int(h * 65535)\n        s = int(s * 65535)\n        v = int(v * 65535)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to float type\n    r, g, b = float(r), float(g), float(b)\n    \n    # Find maximum and minimum values in RGB\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find difference between maximum and minimum values\n    delta = max_val - min_val\n    \n    # If maximum and minimum values are equal\n    if delta == 0:\n        h = 0\n    else:\n        # Find hue based on the given color model\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        # Convert hue to degrees\n        if h < 0:\n            h += 6\n        \n        # Normalize hue\n        h *= 60\n    \n    # Find saturation\n    if delta == 0:\n        s = 0\n    else:\n        if max_val == 0:\n            s = 0\n        else:\n            s = delta / max_val\n    \n    # Find value\n    v = max_val\n    \n    # Return hsv values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # initialize the variables\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    # loop through the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            even_count += 1\n            # check if it's the first even number\n            if even_count == 1:\n                product = num\n            # multiply the product by the even number\n            else:\n                product *= num\n        # check if the number is odd\n        else:\n            odd_count += 1\n            # check if it's the first odd number\n            if odd_count == 1:\n                product = num\n            # multiply the product by the odd number\n            else:\n                product *= num\n\n    # return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_sum = odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the product of first even and odd number of the list.\n    \"\"\"\n    product = 1\n    even_count = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= min(even_count, odd_count)\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    product = even_sum * odd_sum\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            if i == 0:\n                odd = lst[i+1]\n            else:\n                odd = lst[i]\n        else:\n            if i == 0:\n                even = lst[i+1]\n            else:\n                even = lst[i]\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            break\n\n    for num in lst:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            break\n            \n        product *= num\n        \n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count += 1\n            if count == 2:\n                return i * list1[count-1]"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # convert string to tuple of integers\n        return tuple(int(s) for s in test_str.split(','))\n    except ValueError:\n        # if conversion fails, return empty tuple\n        return ()"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(x) for x in test_str.split()])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of words\n    words = test_str.split()\n    # create an empty list to store the integer values\n    int_list = []\n    # iterate over the list of words\n    for word in words:\n        # convert the word to an integer\n        int_val = int(word)\n        # add the integer value to the list\n        int_list.append(int_val)\n    # convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    # return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the input string into a list of strings\n    str_list = test_str.split(',')\n\n    # create an empty list to store the converted integers\n    int_list = []\n\n    # loop through each string in the list\n    for s in str_list:\n        # check if the string is a valid integer\n        try:\n            # if it is, convert it to an integer and append it to the list\n            int_list.append(int(s))\n        except ValueError:\n            # if it isn't, print an error message\n            print(f\"Error: {s} is not a valid integer.\")\n\n    # return the list of converted integers as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple of strings into an integer tuple\n    test_tuple = tuple(map(int, test_str))\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of strings\n    str_list = test_str.split()\n    # initialize an empty list to store the integer tuples\n    int_list = []\n    # loop through the list of strings and convert each string to an integer\n    for str in str_list:\n        int_list.append(int(str))\n    # return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    Args:\n        test_str (str): A string representing a tuple of integers separated by commas.\n\n    Returns:\n        A tuple of integers.\n    \"\"\"\n    return tuple(int(x) for x in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Split the string into a tuple of strings\n        str_tuple = tuple(test_str.split(','))\n        # Convert the strings to integers\n        int_tuple = tuple(int(i) for i in str_tuple)\n        # Return the converted tuple\n        return int_tuple\n    except ValueError:\n        # If there's an error, return None\n        return None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    \n    if a[index] == x:\n        return index\n    \n    return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        return -1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the rightmost index of the sorted portion of the array\n    right = len(a) - 1\n\n    while right >= 0 and a[right] < x:\n        right -= 1\n\n    # Return the insertion index\n    return right + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the right index where the value can be inserted\n    i = bisect.bisect_right(a, x)\n\n    # If the value is already present, return the current index\n    if a[i-1] == x:\n        return i\n\n    # If the value needs to be inserted in the left half of the list\n    elif x < a[i-1]:\n        return bisect.bisect_left(a[:i], x) + i\n\n    # If the value needs to be inserted in the right half of the list\n    else:\n        return bisect.bisect_right(a[i:], x) + i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return a[index-1] + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        # Insert x into the sorted sequence a\n        a.insert(i, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.match(text)\n    if match:\n        return 'Match found'\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=.*b){3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba\\b.*?b\\b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{2}b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the two lists into a new tuple\n    new_tup = (test_list, test_str)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # combine the two lists and the string into a tuple\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    # Combine the list and the string into a single tuple\n    new_tuple = (char_list, test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the list and string into a single string\n    new_string = test_str +'' + str(test_list)\n    \n    # Convert the concatenated string into a tuple\n    new_tuple = tuple(new_string)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the two lists into a single list of tuples\n    combined_list = list(zip(test_list, test_str))\n    \n    # Return the new tuple\n    return tuple(combined_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_list + test_str, test_list + test_str)\n    return new_tup\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_list) + (test_str,)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    return tuple(test_list + [test_str])"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[j] for j in range(i, i+len(nums), 2)])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    even_count = 0\n    \n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            \n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1: # Check if the index is odd\n            if nums[i] % 2!= 0: # Check if the number in the odd index is even\n                return False # If the number in the odd index is not even, return False\n    return True # If all even indices contain even numbers, return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:  # check if index is even\n            if len([x for x in nums[i:] if x % 2 == 0]) % 2 == 1:  # check if even numbers follow\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if any(num % 2!= 0 for num in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count > 0:\n                break\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    def remove_nested_helper(inner_tup):\n        if isinstance(inner_tup, tuple):\n            return [inner_tup]\n        else:\n            return inner_tup\n\n    flattened_tup = tuple(remove_nested_helper(item) for item in test_tup)\n    return flattened_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_tup = [item for sublist in test_tup for item in sublist]\n    return flat_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup if type(x)!= tuple]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup += item\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for nested_item in item:\n                new_tup.append(nested_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Loop through each element of the tuple\n    for elem in test_tup:\n        # If the element is a tuple, remove it and continue the loop\n        if isinstance(elem, tuple):\n            test_tup.remove(elem)\n            continue"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_lists(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n        else:\n            count += 0\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments: the sorted array and the element to be searched.\n    It returns the last position of the element in the array.\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the index of the first element greater than or equal to x\n    index = bisect_right(arr, x)\n    # If the element is not present, return -1\n    if index == len(arr):\n        return -1\n    # If the element is present, return the index of the last occurrence of the element\n    else:\n        return arr.index(x, index-1)"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    This function takes in two arguments: the sorted array and the element we're looking for.\n    It returns the last position of the element in the array, or -1 if it doesn't exist.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left and right indices of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the last position of the element\n    last_pos = -1\n\n    # Traverse the array using two pointers approach\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the element is present at the middle\n        if arr[mid] == x:\n            # If the left half of the array is sorted, then the last position is the mid index plus 1\n            if left == 0 or arr[left-1] < x:\n                last_pos = mid + 1\n                right = mid - 1\n            # If the right half of the array is sorted, then the last position is the mid index\n            else:\n                last_pos = mid\n                left = mid + 1\n\n        # If the element is smaller than the mid element\n        elif arr[mid] < x:\n            # If the left half of the array is sorted\n            if left == 0 or arr[left-1] < x:\n                last_pos = mid + 1\n                right = mid - 1\n            # If the right half of the array is not sorted\n            else:\n                left = mid + 1\n\n        # If the element is greater than the mid element\n        else:\n            # If the left half of the array is not sorted\n            if left == 0 or arr[left-1] < x:\n                left = mid + 1\n            # If the right half of the array is sorted\n            else:\n                last_pos = mid\n                right = mid - 1\n\n    # Return the last position of the element\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate through the array until the left pointer is greater than or equal to the right pointer\n    while left < right:\n        # Calculate the midpoint of the current range\n        mid = (left + right) // 2\n\n        # If the mid element is greater than x, update the right pointer to mid - 1\n        if arr[mid] > x:\n            right = mid - 1\n\n        # If the mid element is less than or equal to x, update the left pointer to mid + 1\n        else:\n            left = mid + 1\n\n    # If the left pointer is still less than the right pointer, it means that x was not found in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list.\n    x (any): The element to find the last position of.\n\n    Returns:\n    int: The last position of the element in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the start and end pointers\n    start = 0\n    end = len(arr) - 1\n\n    # While the start pointer is less than the end pointer\n    while start < end:\n        # Calculate the mid point\n        mid = (start + end) // 2\n\n        # If the element at the mid point is greater than the target element\n        if arr[mid] > x:\n            # Update the end pointer\n            end = mid\n        # If the element at the mid point is less than the target element\n        else:\n            # Update the start pointer\n            start = mid + 1\n\n    # If the element is found, return the end pointer\n    if arr[start] == x:\n        return start\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Finds the last position of an element in a sorted array.\n\n    Args:\n        arr (list): sorted array of integers\n        x (int): integer to find last position of\n\n    Returns:\n        int: last position of x in arr, or -1 if x is not in arr\n    \"\"\"\n    i = 0\n    while i < len(arr) and arr[i] < x:\n        i += 1\n    if i == len(arr):\n        return -1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<![a-zA-Z0-9])([a-z]+)([a-zA-Z0-9])(?![a-zA-Z0-9])b(?![a-zA-Z0-9])'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'\\ba[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?P<start>a)([^\\s]*)(b)'\n    match = re.search(pattern, text)\n    if match:\n        start_match = match.group('start')\n        middle_match = match.group(2)\n        end_match = match.group(3)\n        return start_match, middle_match, end_match\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dict:\n        sum_of_items += dict[item]\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize variables\n    sum_odd_numbers = 0\n    l = 1\n    r = n\n\n    # iterate through odd numbers between l and r\n    while l <= r:\n        if l % 2 == 1:\n            sum_odd_numbers += l\n        l += 2\n\n    # return sum of odd numbers\n    return sum_odd_numbers"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Take input from user\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    \n    # Initialize variables\n    sum_odd = 0\n    \n    # Loop through range and add odd numbers to sum_odd\n    for i in range(l, r+1, 2):\n        sum_odd += i\n        \n    # Print the sum\n    print(\"The sum of odd numbers between\", l, \"and\", r, \"is\", sum_odd)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 0, n\n    if l % 2 == 0:\n        l += 1\n    return sum(x for x in range(l, r+1) if x % 2!= 0)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    \n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    \n    print(\"The sum of odd natural numbers between\", l, \"and\", r, \"is\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum = 0\n    \n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n            \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # iterate through the array and add each element to the sum\n    for i in arr:\n        sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    This function takes in an array as an argument and returns the sum of all elements in the array.\n    '''\n    # initialize sum variable to 0\n    total = 0\n\n    # loop through array and add each element to sum\n    for num in arr:\n        total += num\n\n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum variable\n    total = 0\n    # iterate through the array\n    for i in arr:\n        # add the current element to the sum variable\n        total += i\n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_array(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to a binary string\n    binary_string = format(n, '032b')\n    \n    # Calculate the number of bits to shift\n    shift_bits = d % 32\n    \n    # Calculate the number of times to rotate the bits\n    rotate_times = d // 32\n    \n    # Calculate the first bit to rotate\n    first_bit = binary_string[shift_bits]\n    \n    # Rotate the remaining bits\n    remaining_bits = binary_string[shift_bits:32]\n    rotated_bits = first_bit + remaining_bits\n    \n    # Convert the rotated bits back to an integer\n    rotated_number = int(rotated_bits, 2)\n    \n    # Return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Take the absolute value of the number\n    n = abs(n)\n\n    # Get the number of bits required to represent n\n    num_bits = len(bin(n)[2:])\n\n    # Calculate the number of bits required to rotate left by d bits\n    rotation_bits = d % num_bits\n\n    # Shift the number to the left by rotation_bits bits\n    rotated_n = n << rotation_bits\n\n    # Return the rotated number\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # convert number to binary string\n    binary = bin(n)[2:]\n    \n    # calculate number of bits to rotate\n    rotation_bits = len(binary) - d\n    \n    # calculate rotation mask\n    rotation_mask = (1 << rotation_bits) - 1\n    \n    # rotate the binary string\n    rotated_binary = (binary[rotation_bits:] + binary[:rotation_bits]) & rotation_mask\n    \n    # convert binary string back to integer\n    rotated_number = int(rotated_binary, 2)\n    \n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate\n    num_bits = 32\n    d %= num_bits\n    \n    # Calculate the number of bits to be rotated in the number itself\n    num_bits_to_rotate = n.bit_length() - d\n    \n    # Calculate the mask to rotate the number\n    mask = (1 << num_bits_to_rotate) - 1\n    \n    # Shift the bits to the left and add the carry to the result\n    result = ((n >> d) & mask) | ((n << (num_bits - d)) & ((1 << num_bits) - 1))\n    \n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Initialize the result variable\n    result = 0\n    \n    # Calculate the number of bits to be shifted\n    num_bits = 32 - d\n    \n    # Reverse the bits of the number\n    reversed_bits = bin(n)[2:].zfill(32)[::-1]\n    \n    # Extract the first d bits from the reversed bits\n    first_d_bits = reversed_bits[:d]\n    \n    # Extract the last d+num_bits bits from the reversed bits\n    last_d_num_bits_bits = reversed_bits[d:][::-1][:num_bits]\n    \n    # Combine the first d+num_bits bits with the last d bits\n    result = int(first_d_bits + last_d_num_bits_bits, 2)\n    \n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates the bits left by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of bits to be rotated\n    n_bits = len(bin(n)[2:])\n    d_bits = d % n_bits\n\n    # Rotate the bits\n    rotated_bits = n >> d_bits\n\n    # Return the rotated number\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & ((1 << 32) - 1)\n    d = d % 32\n    if d == 0:\n        return n\n    else:\n        return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Create a mask of the least significant d bits\n    mask = (1 << d) - 1\n\n    # Shift the number to the left by d bits\n    n = (n << d) & mask\n\n    # Shift the number to the right by (32 - d) bits\n    n = n | ((n >> (32 - d)) & ((1 << d) - 1))\n\n    # Return the rotated number\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Extract the last d bits\n    mask = (1 << d) - 1\n    last_d_bits = (n >> (32 - d)) & mask\n    \n    # Rotate the first d bits to the right\n    rotated_bits = (n << d) & 0xFFFFFFFF\n    \n    # Combine the last d bits and the rotated bits\n    result = last_d_bits | rotated_bits\n    \n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Rotate the bits to the left by d bits\n    n = (n << d) | (n >> (32 - d))\n    # Return the rotated bits\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all spaces\n    text = re.sub(r'\\s+','', text)\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regex to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    # use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regex to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    # Return the modified string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n\n    # Using regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            if i == j:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n\n    for i in range(max(x,y,z), min(x,y,z)):\n        if i == x:\n            count += 1\n        elif i == y:\n            count += 1\n        elif i == z:\n            count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for num in (x, y, z):\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count -= 1\n    if y == z == x:\n        count -= 1\n    if z == y == x:\n        count -= 1\n    if x == z == y:\n        count -= 1\n    if y == x == z:\n        count -= 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # find the smallest element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # find the largest element in the array\n    max_element = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_element:\n            max_element = arr[i]\n\n    # find the mid-point of the array\n    mid_point = (min_element + max_element) // 2\n\n    # create a new array with the mid-point as the first and last elements\n    new_arr = [mid_point] + arr + [mid_point]\n\n    # count the number of rotations required\n    count = 0\n    while not is_sorted(new_arr):\n        count += 1\n        new_arr = rotate_right(new_arr)\n\n    return count\n\n\ndef is_sorted(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\n\ndef rotate_right(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i]\n    return arr"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the count of rotations\n    count = 0\n    # Initialize the minimum value of the array\n    min_val = arr[0]\n    # Loop through the array\n    for i in range(1, n):\n        # If the current element is greater than the minimum value, increment the count and update the minimum value\n        if arr[i] > min_val:\n            count += 1\n            min_val = arr[i]\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[n-i-1]:\n            count += 1\n            n = n - i - 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            return n - i - 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # if the array is already sorted\n    if sorted(arr) == arr:\n        return 0\n\n    # create a set to keep track of elements seen before\n    seen = set()\n    # count the number of rotations required\n    count = 0\n\n    # iterate over the array\n    for i in range(len(arr)):\n        # if the current element is not in the set\n        if arr[i] not in seen:\n            # add it to the set and increment the count\n            seen.add(arr[i])\n            count += 1\n        # else if the current element is in the set and not at the end of the array\n        elif i < len(arr) - 1:\n            # remove the first element from the set and increment the count\n            seen.remove(arr[i])\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # Bubble Sort to find the minimum value\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    # Counting Sort to count the number of rotations\n    count = [0] * 10\n    for i in range(n):\n        count[arr[i]-min_val] += 1\n\n    # Count the number of rotations required to generate the sorted array\n    ans = 0\n    for i in range(1, 10):\n        if count[i] > 0:\n            ans += count[i] - 1\n\n    return ans"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n and arr[j] > arr[j+1]:\n            j += 1\n        if j < n:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. \n    \"\"\"\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            return i\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # initialize variables to keep track of the left and right indices of the array\n    left = 0\n    right = n - 1\n    # initialize variables to keep track of the count of rotations\n    count = 0\n    # while the left index is less than the right index\n    while left < right:\n        # if the left element is greater than the right element, swap them\n        if arr[left] > arr[right]:\n            arr[left], arr[right] = arr[right], arr[left]\n            # increment the count of rotations\n            count += 1\n        # increment the left index\n        left += 1\n        # decrement the right index\n        right -= 1\n    # return the count of rotations\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n and returns True if it is a perfect square or False otherwise. \n    A perfect square is a positive integer that is the square of an integer, and has no positive integer \n    divisors other than 1 and itself. For example, 16 is a perfect square because 16 = 4^2. \n    \"\"\"\n    # check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n    # iterate from 1 to sqrt(n)\n    for i in range(1, int(n**0.5) + 1):\n        # check if n is divisible by i\n        if n % i == 0:\n            return False\n    # if n is divisible by any number between 1 and sqrt(n), then it is not a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # Check if the number is negative\n    if n < 0:\n        return False\n    \n    # Initialize the loop counter\n    i = 0\n    \n    # Initialize the square root to 0\n    square_root = 0\n    \n    # Find the square root of the given number\n    while square_root**2 <= n:\n        i += 1\n        square_root += 1\n    \n    # Check if the square root is an integer\n    if square_root == int(square_root):\n        return True\n    \n    # Return False if the square root is not an integer\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    low, high = 0, n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    import math\n    \n    sqrt_n = math.sqrt(n)\n    return sqrt_n == int(sqrt_n)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        True if n is a perfect square, False otherwise.\n    \"\"\"\n\n    # if the number is less than 2, it is not a perfect square\n    if n < 2:\n        return False\n\n    # initialize the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n\n    # loop through all numbers from 1 to sqrt_n\n    for i in range(1, sqrt_n+1):\n\n        # check if i*i is equal to n\n        if i * i == n:\n            return True\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 1:\n        return True\n    else:\n        i = 1\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        elif n % i == 0:\n            return False\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, else False.\n    \"\"\"\n    # Use the Babylonian method to check if the number is a perfect square\n    # The basic idea is to iterate from 1 to sqrt(n) and check if the square of each number is equal to n\n    # If we find a number that is not a perfect square, we can return False\n\n    # Calculate the square root of n\n    sqrt_n = n ** 0.5\n\n    # Check if the square root is an integer\n    if sqrt_n.is_integer():\n        return True\n\n    # Iterate from 1 to sqrt(n)\n    for i in range(1, sqrt_n + 1):\n        # Calculate the square of i\n        square_i = i ** 2\n\n        # If the square of i is equal to n, return True\n        if square_i == n:\n            return True\n\n    # If we get here, n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        i += 1\n    if n % i == 0:\n        return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check for base cases\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    \n    # Check for even squares\n    if n % 2 == 0:\n        return False\n    \n    # Check for odd squares\n    sqrt_n = int(n**0.5) + 1\n    for i in range(2, sqrt_n):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    if all(num % 2 == 0 for num in arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize the product variable with the first element of the list\n    product = arr[0]\n    \n    # Loop through the remaining elements of the list\n    for i in range(1, len(arr)):\n        \n        # Calculate the product of the current element and the previous product\n        product *= arr[i]\n        \n        # If the product is odd, return False\n        if product % 2!= 0:\n            return False\n    \n    # If the loop completes without returning False, the product is even and the function returns True\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of numbers as input and checks whether the product of the numbers in the list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n    # Initialize a variable to store the index of the maximum sum\n    max_index = []\n    # Loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # Initialize a variable to store the current sum\n        current_sum = 0\n        # Loop through each element in the current list\n        for j in lists[i]:\n            # Add the current element to the current sum\n            current_sum += j\n        # If the current sum is greater than the maximum sum, update the maximum sum and index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = [i]\n        # If the current sum is equal to the maximum sum, add the index to the list of indices\n        elif current_sum == max_sum:\n            max_index.append(i)\n    # Return the list of lists that have the maximum sum\n    return [lists[i] for i in max_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        sum_lst = sum(lst)\n\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    # Initialize variables\n    max_sum = 0\n    max_list = None\n\n    # Iterate through each list in the input list of lists\n    for lst in lists:\n        # Initialize variables\n        curr_sum = 0\n\n        # Iterate through each element in the list\n        for num in lst:\n            # Add the element to the current sum\n            curr_sum += num\n\n            # Check if the current sum is greater than the maximum sum\n            if curr_sum > max_sum:\n                # Update the maximum sum and list\n                max_sum = curr_sum\n                max_list = lst\n\n    # Return the maximum sum and list\n    return max_sum, max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    for list in lists:\n        total_sum = sum(list)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            result = list\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n\n    Parameters:\n    lists (list of lists): a list of lists of integers\n\n    Returns:\n    list of lists: a list of lists of integers that contains the list in a list of lists with the highest sum of elements.\n    \"\"\"\n\n    # initialize variables to keep track of the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = []\n\n    # loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # loop through each element in the current list\n        for j in range(len(lists[i])):\n            # add the current element to the running sum and check if it's greater than the maximum sum\n            running_sum = lists[i][j]\n            for k in range(j+1, len(lists[i])):\n                running_sum += lists[i][k]\n                if running_sum > max_sum:\n                    # update the maximum sum and the list with the maximum sum\n                    max_sum = running_sum\n                    max_list = lists[i][:k+1]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    max_lists = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                max_sum.append(lists[i][j])\n            else:\n                max_sum.append(max_sum[-1] + lists[i][j])\n            if j == 0 or max_sum[-1] > max_sum[-2]:\n                max_lists.append(lists[i])\n        if max_sum[-1] == max_sum[-2]:\n            max_lists.append(lists[i])\n    if len(max_lists) == 1:\n        return max_lists[0]\n    else:\n        return max_lists\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for i, list1 in enumerate(lists):\n        for j, list2 in enumerate(lists):\n            if i == j:\n                continue\n            current_sum = sum(list1) + sum(list2)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [list1, list2]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max sum variable and max sum list variable\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    # Loop through each list in the lists\n    for list in lists:\n        # Initialize a variable to hold the sum of elements in the list\n        sum_list = 0\n\n        # Loop through each element in the list\n        for element in list:\n            # Add the element to the sum_list\n            sum_list += element\n\n        # Check if the current sum_list is greater than the max_sum\n        if sum_list > max_sum:\n            # If it is, update the max_sum and max_sum_list variables\n            max_sum = sum_list\n            max_sum_list = list\n\n    # Return the max_sum_list\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # loop through each list in the list of lists\n    for sublist in lists:\n        # loop through each element in the sublist\n        for element in sublist:\n            # add the element to the current sum\n            current_sum += element\n            \n            # if the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                \n        # reset the current sum to 0 after each sublist is processed\n        current_sum = 0\n    \n    # return the list in the list of lists whose sum of elements is the highest\n    return lists[lists.index(max(lists, key=len)) - 1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables to keep track of current run and maximum run\n    current_run = 1\n    max_run = 1\n\n    # Iterate over each character in the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase and the previous character was lowercase, increment current run\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            current_run += 1\n        # If the current character is not uppercase or the previous character was uppercase, reset current run to 1\n        else:\n            current_run = 1\n\n        # If the current run is greater than the maximum run, update max_run\n        if current_run > max_run:\n            max_run = current_run\n\n    # Return the maximum run found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    uppercase_count = 0\n    uppercase_run = 0\n    max_uppercase_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            if uppercase_count > max_uppercase_run:\n                max_uppercase_run = uppercase_count\n                uppercase_run = 1\n            else:\n                uppercase_run += 1\n        else:\n            uppercase_count = 0\n\n    return max_uppercase_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    count = 1\n    prev =''\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            if prev.isupper():\n                count += 1\n            else:\n                max_run = max(max_run, count)\n                count = 1\n            prev = test_str[i]\n        else:\n            count = 1\n    max_run = max(max_run, count)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables for the maximum run and current run length\n    max_run = 0\n    run_length = 0\n    \n    # iterate through the string\n    for char in test_str:\n        # check if the current character is uppercase\n        if char.isupper():\n            # if it is, add 1 to the current run length and check if it's longer than the maximum run length\n            if run_length + 1 > max_run:\n                max_run = run_length + 1\n        else:\n            # if it isn't, reset the current run length to 0\n            run_length = 0\n    \n    # return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    count = 0\n    start = 0\n\n    # Loop through the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase and the previous one was not\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            count += 1\n        else:\n            # If the count is greater than the current max_run, update the max_run and start index\n            if count > max_run:\n                max_run = count\n                start = i - max_run + 1\n            # Reset the count\n            count = 0\n\n    # If the string ends with an uppercase character, update the max_run and start index\n    if test_str[-1].isupper():\n        max_run += 1\n        start = len(test_str) - max_run\n\n    return test_str[start:start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start_index = 0\n    current_run = 1\n    for index, char in enumerate(test_str):\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                start_index = index - current_run + 1\n            current_run = 1\n    if current_run > max_run:\n        max_run = current_run\n        start_index = len(test_str) - max_run + 1\n    return max_run, start_index\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    current_run = 0\n    max_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            \n        if i == len(test_str) - 1:\n            if current_run > max_run:\n                max_run = current_run\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    count = 0\n    prev_char = None\n    # iterate over the string\n    for char in test_str:\n        # if the character is uppercase\n        if char.isupper():\n            # increment count and update max_run if needed\n            count += 1\n            if count > max_run:\n                max_run = count\n            # update prev_char\n            prev_char = char\n        # if the character is not uppercase\n        else:\n            # if count is greater than 0, increment it\n            if count > 0:\n                count += 1\n            # if count is still greater than max_run, update max_run\n            elif count > max_run:\n                max_run = count\n            # update prev_char\n            prev_char = char\n    # return max_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # initialize variables\n    current_run = 0\n    max_run = 0\n\n    # iterate through the string\n    for i in range(len(test_str)):\n\n        # if the character is uppercase, increment the current run\n        if test_str[i].isupper():\n            current_run += 1\n\n            # if the current run is greater than the maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            # if the character is not uppercase, reset the current run\n            current_run = 0\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = i - count + 1\n        else:\n            count = 0\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return \"None\""
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K <= len(test_tup):\n        return all(elem in test_tup for elem in test_tup[:K])\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two tuples and a value K and returns True if any of the tuples contain K,\n    otherwise it returns False.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function takes a tuple of tuples as input and a number K as input.\n    The function returns a boolean value indicating whether or not the tuple contains the number K.\n    \"\"\"\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a k value as input and returns True if the tuple contains the k\n    and False otherwise.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n            \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # check if each element of the second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    # if no errors were found, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of equal length.\")\n        return\n    \n    # check if the tuples are empty\n    if len(test_tup1) == 0:\n        print(\"The two tuples are empty.\")\n        return\n    \n    # check if the first tuple is empty\n    if len(test_tup1) == 1:\n        if test_tup1[0] < test_tup2[0]:\n            print(\"The second tuple is smaller than the first tuple.\")\n        else:\n            print(\"The second tuple is not smaller than the first tuple.\")\n        return\n    \n    # check if the first tuple has more than one element\n    for i in range(len(test_tup1)-1):\n        if test_tup1[i] < test_tup2[i]:\n            print(\"The second tuple is smaller than the first tuple.\")\n            return\n    else:\n        print(\"The second tuple is not smaller than the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Length of tuples are not equal.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    }
]