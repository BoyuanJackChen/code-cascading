[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # initialize an empty list to store the shared elements\n    shared_list = []\n    # loop through the first list\n    for element in test_tup1:\n        # check if the element is present in the second list\n        if element in test_tup2:\n            # if it is, add it to the shared list\n            shared_list.append(element)\n    # return the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    # Compare the first elements of the two tuples\n    if test_tup1[0] == test_tup2[0]:\n        shared_elements.append(test_tup1[0])\n    # Compare the second elements of the two tuples\n    if test_tup1[1] == test_tup2[1]:\n        shared_elements.append(test_tup1[1])\n    # Compare the third elements of the two tuples\n    if test_tup1[2] == test_tup2[2]:\n        shared_elements.append(test_tup1[2])\n    # Compare the fourth elements of the two tuples\n    if test_tup1[3] == test_tup2[3]:\n        shared_elements.append(test_tup1[3])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the input tuples to lists and sort them\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    lst1.sort()\n    lst2.sort()\n\n    # Initialize an empty list to store the shared elements\n    shared_elements = []\n\n    # Loop through the first list\n    for i in range(len(lst1)):\n        # If the current element is present in the second list, add it to the shared list\n        if lst1[i] in lst2:\n            shared_elements.append(lst1[i])\n\n    # Return the shared elements\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared.append(test_tup1[i])\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # create sets to store the elements in each list\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    shared = set1.intersection(set2)\n    # convert the intersection back to a list and return it\n    return list(shared)\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n and returns True if n is not a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks if a given number is not a prime number or not.\n    \"\"\"\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n        \n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Determine if a given integer is prime or not.\n\n    Parameters:\n    n (int): A non-negative integer.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number n as input and returns True if n is a prime number, False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max-heap from the input list\n    heap = [-num for num in nums]\n    hq.heapify(heap)\n    \n    # extract the n largest numbers from the heap and return them in descending order\n    return [-num for num in hq.nlargest(n, heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert list to max heap\n    hq.heapify(nums)\n\n    # Remove the smallest element and add it to the result list\n    result = []\n    while len(result) < n:\n        result.append(hq.heappop(nums))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n    nums: A list of integers representing the numbers to be sorted.\n    n: An integer representing the number of largest integers to be found.\n\n    Returns:\n    A list of the n largest integers from the given list of numbers.\n    \"\"\"\n    # Convert the input list of integers into a min heap\n    heap = nums[:n]\n    heapq.heapify(heap)\n\n    # Remove the smallest elements from the heap and add the next largest element\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums[i])\n\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a max heap with -ve sign to find the largest n numbers\n    hq.heapify(-nums)\n    # Extract the largest n numbers and append them to a list\n    largest_nums = [hq.heappop(-nums) for _ in range(n)]\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min heap to store the n largest integers\n    max_heap = []\n    \n    # Iterate over the list and add the largest integers to the heap\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, -num)\n        else:\n            if -num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, -num)\n    \n    # Return the n largest integers in descending order\n    return [-x for x in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    min_heap = [-num for num in nums]\n    hq.heapify(min_heap)\n    \n    # Pop the smallest n elements from the min heap and return them in descending order\n    return [num * -1 for num in hq.nlargest(n, min_heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, -num)\n        # Pop the minimum element if the size of the heap is greater than n\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Convert the min heap to a list\n    largest_nums = []\n    for _ in range(n):\n        largest_nums.append(-heapq.heappop(min_heap))\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if not max_heap or num > max_heap[0]:\n            hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes a positive integer x and returns True if it is a power of 2, else False.\n    A positive integer n is a power of 2 if and only if 2^k for some integer k is less than or equal to n.\n\n    Examples:\n    >>> is_Power_Of_Two(1)\n    True\n    >>> is_Power_Of_Two(2)\n    True\n    >>> is_Power_Of_Two(3)\n    False\n    >>> is_Power_Of_Two(4)\n    True\n    \"\"\"\n    # Check if x is a power of 2 by finding the last set bit\n    last_set_bit = 0\n    while x & (1 << last_set_bit):\n        last_set_bit += 1\n\n    # If the last set bit is 0, then x is not a power of 2\n    if last_set_bit == 0:\n        return False\n\n    # Check if the last set bit differs from the rightmost set bit in x\n    mask = (1 << last_set_bit) - 1\n    return (x & mask) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    elif (x & (x-1)) == 0:\n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer as input and returns True if the number differ at one bit position only, False otherwise.\n    '''\n    while x!= 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0:\n        x &= (x-1)\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert x to binary string and check if all 1s are at the same position\n    if bin(x)[2:].count('1') == len(bin(x)[2:]) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Convert the input number to binary format\n    binary_format = bin(x)[2:]\n\n    # Check if the binary format has only one '1' in it\n    if len(binary_format) == 1:\n        return True\n\n    # Check if the binary format has two or more '1' in it\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if the input is a positive integer\n    if type(x)!= int or x < 0:\n        return False\n\n    # Convert the input to binary and check for all 0s except one at the position of the difference\n    binary_x = bin(x)[2:]\n    for i in range(len(binary_x)-1):\n        if binary_x[i] == binary_x[i+1]:\n            return False\n\n    # If all 0s except one at the position of the difference are found, the input is a power of two\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # convert the integer to binary\n    binary = bin(x)[2:]\n\n    # check whether the length of the binary is odd or even\n    if len(binary) % 2 == 0:\n        # if the length is even, check whether the last bit is 0 or 1\n        if binary[-1] == '0' or binary[-1] == '1':\n            return True\n        else:\n            return False\n    else:\n        # if the length is odd, check whether the last two bits are 0 or 1\n        if binary[-2] == '0' or binary[-2] == '1':\n            return True\n        else:\n            return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    words = re.findall(pattern, text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return a list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expressions to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the list of words that are at least 4 characters long\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'  # matches words with at least 4 characters long\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into a list of words\n    words = text.split()\n    \n    # Create an empty list to store the words which are at least 4 characters long\n    long_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the word has at least 4 characters\n        if len(word) >= 4:\n            # If the word is at least 4 characters long, append it to the list\n            long_words.append(word)\n    \n    # Return the list of words which are at least 4 characters long\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Splitting the text into words using regular expression\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    return [num*num for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the minimum count of each character in the string\n    min_count = {}\n    for char in char_count:\n        min_count[char] = min(char_count[char], char_count.get(char, 0))\n    \n    # find the minimum number of rotations required to get the same string\n    min_rotations = len(str)\n    for i in range(1, len(str)+1):\n        for char in char_count:\n            if char_count[char] >= min_count[char]:\n                if char_count[char] == min_count[char]:\n                    new_count = char_count[char] + (i - 1)\n                else:\n                    new_count = char_count[char] - (min_count[char] - 1)\n                if new_count >= min_count[char]:\n                    if min_rotations > i:\n                        min_rotations = i\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n\n    # Calculate the length of the input string\n    n = len(str)\n\n    # Initialize the two pointers i and j to start at the first character of the string\n    i = 0\n    j = n - 1\n\n    # While i and j are not at the same position\n    while i!= j:\n\n        # Swap the characters at positions i and j\n        str[i], str[j] = str[j], str[i]\n\n        # Move the pointers to the next positions\n        i += 1\n        j -= 1\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n\n    # Iterate through the string to count the number of rotations required\n    for i in range(n):\n        if str[i]!= str[n - i - 1]:\n            min_rotations += 1\n\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Initialize two variables to store the length of the string and its reverse\n    length = len(str)\n    reverse_length = 0\n    \n    # Traverse the string and calculate the length of its reverse\n    for i in range(length):\n        reverse_length += 1\n    \n    # If the length is even, find the number of rotations required to get the same string\n    if length % 2 == 0:\n        rotations = 0\n        for i in range(length//2):\n            if str[i]!= str[length-i-1]:\n                rotations += 1\n                break\n        return rotations\n    \n    # If the length is odd, find the number of rotations required to get the same string\n    else:\n        rotations = 0\n        for i in range(length//2):\n            if str[i]!= str[length-i-1]:\n                rotations += 1\n                break\n        return rotations + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Convert the given string into a set of characters\n    chars = set(str)\n\n    # Initialize the count of rotations required\n    count = 0\n\n    # Loop through all possible rotations of the characters\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            # Calculate the common prefix length\n            prefix_len = 0\n            while chars.isdisjoint(chars.symmetric_difference(set(str[i:j]))) and prefix_len < len(str) - i - j:\n                prefix_len += 1\n\n            # If the common prefix length is greater than 0, increment the count\n            if prefix_len > 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            if str[i] == str[j]: \n                count += 1 \n                str = str[j:] + str[:j] \n                break \n    return count "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Converting the string to a list of characters\n    str_list = list(str)\n    \n    # Initializing the minimum number of rotations to infinity\n    min_rotations = float('inf')\n    \n    # Iterating through all possible rotations\n    for i in range(len(str_list)):\n        # Initializing the current rotation to 1\n        current_rotation = 1\n        \n        # Iterating through the remaining characters in the string\n        for j in range(i+1, len(str_list)):\n            # Swapping the characters at positions i and j\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            \n            # Checking if the rotated string is equal to the original string\n            if ''.join(str_list) == str:\n                # Updating the minimum number of rotations if required\n                min_rotations = min(min_rotations, current_rotation)\n            \n            # Reversing the order of the characters back to their original positions\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            \n            # Incrementing the current rotation\n            current_rotation += 1\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n // 2):\n        if str[i]!= str[n - i - 1]:\n            return i + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                left, right = j, n - 1\n                while left < right:\n                    if str[left] == str[right]:\n                        left += 1\n                        right -= 1\n                    elif str[left] < str[right]:\n                        left += 1\n                    else:\n                        right -= 1\n                rotations = right - left\n                if rotations < min_rotations:\n                    min_rotations = rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Initialize the count and rotation count\n    count = 0\n    rotations = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Initialize the current character and its index\n        current_char = str[i]\n        current_index = i\n        \n        # Check if the current character is the last character in the string\n        if i == len(str)-1:\n            # If it is, check if there are any other characters that need to be rotated\n            for j in range(i):\n                # Check if the character at the current index is equal to the character at the next index\n                if str[j]!= str[i+1]:\n                    # If it is not, add one to the rotation count and break out of the loop\n                    rotations += 1\n                    break\n            \n            # Check if the current character is the only character in the string\n            if i == 0:\n                # If it is, there are no rotations required\n                rotations = 0\n            break\n        \n        # Loop through the next characters in the string\n        for j in range(current_index+1, len(str)):\n            # Check if the character at the next index is equal to the current character\n            if str[j] == current_char:\n                # If it is, remove the current character from the string\n                str = str[:i] + str[i+1:] + str[j+1:]\n                # Add one to the count and break out of the inner loop\n                count += 1\n                break\n        \n        # If no rotations are required, break out of the outer loop\n        if count == 0:\n            break\n        \n        # Reset the count and start the loop again\n        count = 0\n        current_char = str[i]\n        current_index = i\n    \n    # Return the minimum number of rotations required\n    return rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of the character\n    while s.find(ch)!= -1:\n        s = s.replace(ch,'',1)\n    # remove last occurrence of the character\n    while s.rfind(ch)!= -1:\n        s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    index = s.find(ch)\n    if index!= -1:\n        s = s[:index] + s[(index+1):]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0: #if character is not present in the string\n        return \"Character not present in the string\"\n    else:\n        return s.replace(ch, '', 1).replace(ch, '', -1) #replace first and last occurrence of the character with empty string"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) < 2:\n        return \"\"\n    if ch in s:\n        if s.index(ch) == 0:\n            return s[1:]\n        elif s.index(ch) == len(s)-1:\n            return s[:-1]\n        else:\n            return s[1:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is present in the string\n    if ch in s:\n        # Use the index() method to find the index of the first occurrence of the character\n        index = s.index(ch)\n        # If the character is the first occurrence, remove it from the string and return it\n        if index == 0:\n            return s[1:]\n        # If the character is the last occurrence, remove it from the string and return it\n        elif index == len(s) - 1:\n            return s[:index]\n        # If the character is neither the first nor the last occurrence, remove both occurrences and return the updated string\n        else:\n            return s[:index-1] + s[index+1:]\n    # If the character is not present in the string, return the original string as it is\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return \"\"\n    elif len(s) == 1:\n        return \"\"\n    elif s[0] == ch:\n        return s[1:]\n    elif s[-1] == ch:\n        return s[:-1]\n    else:\n        return remove_Occ(s[1:-1], ch) + s[-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)!= -1:\n        s = s.replace(ch, \"\", 1)\n        s = s.replace(ch, \"\", -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    # remove the first occurrence of the character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # remove the last occurrence of the character\n    if s.rfind(ch) == len(s) - 1:\n        s = s[:len(s) - 1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 1:\n        return None\n    \n    if s[0] == ch:\n        return s[1:]\n    elif s[-1] == ch:\n        return s[:-1]\n    else:\n        return None"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Split the string into characters\n    chars = list(s)\n\n    # Initialize the first and last index\n    first = 0\n    last = len(chars)-1\n\n    # Traverse the list starting from the first and last index\n    while first < last:\n        # If the first character is the given character, move the first index forward\n        if chars[first] == ch:\n            first += 1\n        # If the last character is the given character, move the last index backward\n        elif chars[last] == ch:\n            last -= 1\n        # If both conditions are not met, move both indices forward\n        else:\n            first += 1\n            last -= 1\n\n    # Convert the list of characters back to a string and return\n    return ''.join(chars[first:last+1])"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n\n    # create a new matrix to store the sorted matrix\n    sorted_M = [[0 for j in range(m)] for i in range(n)]\n\n    # iterate through each row in the matrix\n    for i in range(n):\n        # initialize variables to keep track of the row with the smallest sum\n        min_row = i\n        min_sum = sum(M[i])\n\n        # iterate through each remaining row in the matrix\n        for j in range(i+1, n):\n            # calculate the sum of the current row\n            row_sum = sum(M[j])\n\n            # update the row with the smallest sum if the sum is smaller\n            if row_sum < min_sum:\n                min_row = j\n                min_sum = row_sum\n\n        # swap the rows with the minimum sum\n        sorted_M[i], sorted_M[min_row] = sorted_M[min_row], sorted_M[i]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize a new matrix of size n x n\n    sorted_M = [[0 for j in range(n)] for i in range(n)]\n    # Sort each row of the matrix in ascending order\n    for i in range(n):\n        sorted_M[i] = sorted(M[i])\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in sorted_M]\n    # Sort the rows based on their sum in ascending order\n    for i in range(n):\n        sorted_M[i] = sorted(sorted_M[i], key=lambda x: row_sums.index(x))\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of the sum of each row in the matrix\n    row_sums = []\n    for i in range(len(M)):\n        row_sums.append(sum(M[i]))\n\n    # Sort the list of row sums in ascending order\n    row_sums.sort()\n\n    # Create a new matrix with the sorted row sums as the first column\n    sorted_M = [[row_sums[i]] for i in range(len(row_sums))]\n\n    # Sort the matrix in ascending order according to the sorted row sums\n    sorted_M.sort(key=lambda x: x[0])\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            M[i][j] = (M[i][j], sum(M[i]))\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            M[i][j] = (M[i][j][0], M[i][j][1])\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # loop through each row\n    for i in range(n):\n        # find the maximum element in the current row\n        max_val = max(M[i])\n        # create a new list to store the elements in ascending order\n        sorted_row = []\n        # loop through each column in the current row\n        for j in range(n):\n            # if the current element is greater than or equal to the maximum, add it to the sorted list\n            if M[i][j] >= max_val:\n                sorted_row.append(M[i][j])\n        # sort the sorted list and append it to the matrix\n        M[i] = sorted(sorted_row)\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    This function takes a matrix as input and sorts it in ascending order according to the sum of its rows.\n    The function returns the sorted matrix.\n    '''\n    \n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Find the sum of the row\n        row_sum = sum(M[i])\n        # Find the index of the maximum value in the row\n        max_index = M[i].index(max(M[i]))\n        # Swap the row with the maximum value at its index\n        M[i], M[max_index] = M[max_index], M[i]\n        \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols-i-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n\n    # initialize a boolean variable to keep track of whether the matrix is sorted or not\n    is_sorted = False\n\n    # while the matrix is not sorted\n    while not is_sorted:\n        # initialize a boolean variable to keep track of whether a row is sorted or not\n        is_row_sorted = True\n\n        # for each row\n        for j in range(m):\n            # if the row is not sorted\n            if j > 0 and M[0][j] < M[0][j-1]:\n                # swap the rows\n                M[0], M[0][j] = M[0][j], M[0]\n                # set the flag to false indicating that the row is not sorted anymore\n                is_row_sorted = False\n                # set the flag to true indicating that the matrix is not sorted yet\n                is_sorted = False\n\n        # if all rows are sorted, set the flag to true indicating that the matrix is sorted\n        if is_row_sorted:\n            is_sorted = True"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Calculate the sum of each row in the matrix\n    row_sums = []\n    for i in range(len(M)):\n        row_sums.append(sum(M[i]))\n\n    # Sort the matrix based on the row sums\n    for i in range(len(M)):\n        for j in range(len(M[i])-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Get the dimensions of the matrix\n    rows, cols = len(M), len(M[0])\n\n    # Initialize an empty list to store the sorted matrix\n    sorted_matrix = []\n\n    # Iterate through each row of the matrix\n    for row in range(rows):\n        # Initialize an empty list to store the elements in the current row\n        current_row = []\n        # Iterate through each column of the matrix\n        for col in range(cols):\n            # Calculate the sum of the current element and the previous element in the row\n            current_sum = M[row][col] + sorted_matrix[-1][-1] if col > 0 else M[row][col]\n            # Add the current element to the current row list\n            current_row.append(current_sum)\n        # Add the current row to the sorted matrix list\n        sorted_matrix.append(current_row)\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*l*b*h  # calculate the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = 0.5 * l * b * h  # Formula to find the volume of a triangular prism\n\n    print(\"The Volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters: l, b, and h, which represent the length,\n    width, and height of a triangular prism.\n    It returns the volume of the triangular prism.\n    '''\n\n    # Calculate the area of the triangle\n    area = 0.5 * l * b\n\n    # Calculate the volume of the triangle using Heron's formula\n    volume = area * h\n\n    # Return the volume of the triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n\n    # calculate the volume of the prism\n    V = (1/3) * l * b * h \n\n    # return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h #calculating the volume of the triangular prism\n    print(\"The volume of the triangular prism is:\", volume) #printing the volume of the triangular prism"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])[A-Z]|(?<=[A-Z])[a-z]|(?<=[a])[A]|(?<=[a])[a]'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"([a-z])(\\w+)\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+)')\n    matches = pattern.findall(text)\n    for match in matches:\n        if match.islower():\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z_]+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z]+_[a-z]+')\n    return bool(pattern.match(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]*[_]+[a-z]*$'\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])[a-z]+(?=[a-z])'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Regular expression pattern to match sequences of lowercase letters\n    pattern = r'[a-z]+_[a-z]+'\n\n    # Check if the input text matches the given pattern\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return a + a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for i in range(len(string)):\n        if char_list[i] in string:\n            char_list.remove(char_list[i])\n    return ''.join(char_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            char_list.remove(chr(i))\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for char in string:\n        if char not in char_list:\n            char_list.append(char)\n    return char_list\n\ndef remove_chars(string, char_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in char_list:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a list of unique characters in the first string\n    char_list = list(set(string))\n    # Create a set of characters to be removed from the first string\n    to_remove = set(string)\n    # Create a new string without the characters to be removed\n    result = ''.join([char for char in string if char not in to_remove])\n    # Return the new string as a list of unique characters\n    return list(set(result))"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    remove_chars = set(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")\n    new_string = \"\"\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a list of characters to remove from the first string\n    char_to_remove = []\n    for char in string:\n        if char not in string[1:]:\n            char_to_remove.append(char)\n    \n    # remove the characters from the first string\n    for char in char_to_remove:\n        string = string.replace(char, '')\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a dictionary to store the character frequencies\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Create a list to store the unique characters\n    unique_chars = []\n\n    # Iterate through the characters in the first string\n    for char in string:\n        if char not in freq:\n            unique_chars.append(char)\n\n    # Convert the unique characters to a string\n    unique_chars = ''.join(unique_chars)\n\n    # Return the unique characters\n    return unique_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and returns a list of characters that are present in the first string\n    but not present in the second string.\n    \"\"\"\n    first_list = list(string1)\n    second_list = list(string2)\n    common_chars = [char for char in first_list if char not in second_list]\n    return common_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    \n    # Convert the string to a list of characters\n    char_list = list(string)\n    \n    # Find the characters in the second string which are also present in the first string\n    common_chars = [char for char in char_list if char in string]\n    \n    # Remove the common characters from the first string\n    char_list = [char for char in char_list if char not in common_chars]\n    \n    # Convert the list of characters back to a string\n    result_string = ''.join(char_list)\n    \n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a set of characters in the second string\n    char_set = set(string)\n\n    # Iterate over each character in the first string\n    result = []\n    for char in string:\n        # If the character is not present in the second string, add it to the result list\n        if char not in char_set:\n            result.append(char)\n\n    return \"\".join(result)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create an empty hash table\n    hash_table = {}\n\n    # loop through the array and add each element to the hash table\n    for num in arraynums:\n        if num in hash_table:\n            # if the number is already in the hash table, there is a duplicate\n            return True\n        else:\n            # add the number to the hash table\n            hash_table[num] = True\n\n    # if the loop completes without returning True, there are no duplicates in the array\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create an empty dictionary to store the indices of the elements in the array\n    indices = {}\n    \n    # Loop through the array\n    for i in range(len(arraynums)):\n        # If the current element is already in the dictionary, return True (indicating a duplicate)\n        if arraynums[i] in indices:\n            return True\n        # Otherwise, add the current index to the dictionary with the current element as the key\n        else:\n            indices[arraynums[i]] = i\n    \n    # If we've made it through the loop without finding a duplicate, return False (indicating no duplicate)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    arrayset = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the original array\n    if len(arrayset) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = []\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    if len(unique_nums) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # create a dictionary to store the indices of the elements in the array\n    indices = {}\n    \n    # loop through the array and add each element to the dictionary\n    for i in range(len(arraynums)):\n        if arraynums[i] in indices:\n            return True\n        else:\n            indices[arraynums[i]] = i\n            \n    # if the loop completes without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the number of occurrences of each number in the array\n    count_dict = {}\n\n    for num in arraynums:\n        # If the number is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # Check if there are any numbers with a count greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        else:\n            hashmap[num] = True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        if x % 3 == 0:\n            return True\n    else:\n        if x % 5 == 0:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and x % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    if x == 1 or x == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 10 or x == 15:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 1 or x % 10 == 5 or x % 10 == 7 or x % 10 == 9:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0:\n        return True\n    elif x % 3 == 0:\n        return True\n    elif x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 1 or x == 2 or x == 3 or x == 4 or x == 5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n        \n    if reverse == 2 * num:\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num % 10\n        num = num//10\n    return (rev_num == (num-1)**2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num = num // 10\n    return reversed_num > num * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num > 0 and (num + 1) == (num * 2))\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    # Convert the input number to a string so we can reverse it\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Calculate the difference between the original number and its reverse\n    diff = abs(num - rev_num)\n    # Return True if the difference is one less than twice the reverse\n    return diff < 2*rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Find the reverse of the number\n    reverse = 0\n    while num > 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num //= 10\n\n    # Check if the original number is one less than twice its reverse\n    if num > 2 * reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Reverse the number\n    num_str = str(num)\n    num_rev = num_str[::-1]\n    # Convert the reversed number to an integer\n    num_rev = int(num_rev)\n    # Calculate the sum of the original number and its reversed number\n    sum_num = num + num_rev\n    # Check if the sum is one less than twice the reversed number\n    if sum_num < 2 * num_rev:\n        print(f\"The number is one less than twice its reverse: {num}\")\n    else:\n        print(f\"The number is not one less than twice its reverse: {num}\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    if num < 0:\n        num = -num\n    num_str = str(num)\n    reversed_num = int(num_str[::-1])\n    if num == reversed_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num + 1) * 2 - num == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (int(str(num)[::-1]) - 1) * 2"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2, n+1):\n        dp[i] = max(arr[i-1] + dp[i-2], dp[i-1])\n    return dp[n]"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Sort the array in descending order\n    arr.sort(reverse=True)\n    #Start with 0 and iterate through the digits in the array\n    for i in arr:\n        #Calculate the next number by adding i to the current number and then adding 1\n        next_num = i + arr[arr.index(i)+1] + 1\n        #If the next number is larger than the current maximum number, update the maximum number\n        if next_num > max_num:\n            max_num = next_num\n    #Return the maximum number\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the list of digits in descending order\n    arr.sort(reverse=True)\n\n    # initialize the maximum number and its length\n    max_num = arr[0]\n    max_len = len(str(max_num))\n\n    # loop through the sorted list\n    for i in range(1, len(arr)):\n        # check if the next number can be formed with the previous number\n        if int(str(arr[i]) + str(max_num)) > max_num:\n            # update the maximum number and its length\n            max_num = int(str(arr[i]) + str(max_num))\n            max_len = len(str(max_num))\n\n    # return the maximum number and its length\n    return max_num, max_len"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given digits.\n    \"\"\"\n    digits = set(arr)\n    max_num = 0\n    for digit in digits:\n        temp = 0\n        while digit > 0:\n            temp += digit % 10\n            digit //= 10\n        max_num = max(max_num, temp)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            num = 0\n            for k in range(i, j):\n                num += arr[k] * 10**(j-k-1)\n            if num > max_num:\n                max_num = num\n    return max_num\n\narr = [3, 4, 5]\nprint(find_Max_Num(arr)) # Output: 90"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize a variable to store the maximum number formed with the given digits\n    max_num = 0\n    \n    # Loop through each digit in the list\n    for digit in arr:\n        # Convert the digit to an integer and store it in a variable\n        digit_int = int(digit)\n        \n        # Loop through each possible value of the digit, starting from 0 to 9\n        for value in range(10):\n            # Multiply the value by the digit and add it to the current maximum number\n            current_num = value * digit_int\n            if current_num > max_num:\n                max_num = current_num\n    \n    # Return the maximum number formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    #sorting the list of digits in descending order\n    arr = sorted(arr, reverse=True)\n    #initializing the maximum number\n    max_num = 0\n    #initializing the current number\n    curr_num = 0\n    #iterating through the sorted list\n    for digit in arr:\n        #multiplying the current number by 10 and adding the digit\n        curr_num = curr_num*10 + digit\n        #updating the maximum number if the current number is greater than the maximum number\n        if curr_num > max_num:\n            max_num = curr_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num = arr[i]\n        else:\n            max_num = max(max_num, arr[i])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed with those digits.\n    '''\n\n    # initialize the max_num variable with the smallest possible integer value\n    max_num = 10**(len(arr)-1)\n\n    # iterate through the list of digits\n    for digit in arr:\n        # convert the digit to an integer value\n        digit_int = int(digit)\n\n        # iterate through all possible digits that can be formed with the current digit\n        for i in range(max_num//digit_int, -1, -1):\n            # multiply the current integer value with the digit and add it to the max_num variable\n            max_num = (max_num//digit_int)*digit_int + i\n            # if the current integer value is greater than the maximum number found so far, update the maximum number\n            if max_num > max_num_found_so_far:\n                max_num_found_so_far = max_num\n\n    # return the maximum number found\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in arr:\n        if i > max_num:\n            max_num = i\n    \n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # check if both numbers have the same sign\n    if x * y >= 0:\n        return \"Both numbers have the same sign.\"\n    else:\n        return \"Both numbers have opposite signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both positive numbers\"\n    elif x < 0 and y < 0:\n        return \"Both negative numbers\"\n    elif x < 0 and y > 0:\n        return \"Both negative and positive numbers\"\n    else:\n        return \"Both positive and negative numbers\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both numbers are positive.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers are negative.\"\n    elif x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n    else:\n        return \"One of the numbers is positive and the other is negative.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y > 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True \n    elif x > 0 and y > 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0): \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        print(\"The two numbers have opposite signs.\")\n    else:\n        print(\"The two numbers have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite signs or not.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        num = i * (2**i - 1)\n        if num < 0 or num > 10**6:\n            return False\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if the input is valid\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n\n    # Calculate the first n octagonal numbers\n    octagonal_numbers = [1]\n    for i in range(1, n):\n        octagonal_numbers.append(i * (10**3 + 7) - 1)\n\n    # Return the nth octagonal number\n    return octagonal_numbers[n - 1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 8*octagonal(n-1) + 2\n    \n    return octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3**0.5) + n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2) + 4"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (1 + 8 * ((n - 1) // 2)) ** 2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # initializing variables\n    oct_num = 0\n    num_str = \"\"\n\n    # iterating through the first n odd numbers\n    for i in range(1, n+1, 2):\n        oct_num += i\n        num_str += str(i)\n\n    # converting the oct_num to string and returning it\n    return str(oct_num)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (3 * n - 1) ** 0.5)\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return is_octagonal(n) - 1\n\ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    print(\"The\", n, \"th octagonal number is\", nth_octagonal(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n and returns True if it is an octagonal number, otherwise False.\n\n    An octagonal number is a number whose square is equal to the sum of its digits raised to the power of 2.\n    For example, 28 is an octagonal number because 2^2 + 8^2 = 28.\n    '''\n    if n < 1:\n        return False\n    if n % 2 == 0:\n        return False\n\n    square = sum(int(digit)**2 for digit in str(n))\n    return square == n**2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Get the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n\n    # Initialize the first term of the sequence\n    term = 1\n\n    # Loop through each term\n    for i in range(1, sqrt_n + 1):\n        # Check if the term is an octagonal number\n        if term * term == 8 * (n - 1) * term + 8:\n            return term\n\n        # Increment the term\n        term += 1"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            total_digit_sum = sum(int(digit) for digit in substring)\n            count[total_digit_sum] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            count[digit_sum] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    def helper(s, curr_sum, start, end, count, d):\n        if start >= end:\n            if curr_sum == 0:\n                count[0] += 1\n            return\n        if d[ord(s[start]) - ord('0')] > 0:\n            d[ord(s[start]) - ord('0')] -= 1\n        if curr_sum == 0:\n            count[0] += 1\n        helper(s, curr_sum + 10, start + 1, end, count, d)\n        helper(s, curr_sum - 10, start + 1, end, count, d)\n        if d[ord(s[start]) - ord('0')] < 0:\n            d[ord(s[start]) - ord('0')] += 1\n\n    count = [0]\n    d = defaultdict(int)\n    for i, c in enumerate(s):\n        if c.isdigit():\n            helper(s, int(c), i, i, count, d)\n    return count[0]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    def count_substrings_helper(s, start, end, sum_length):\n        if end - start + 1 < sum_length:\n            return 0\n        if start == end:\n            return 1\n        if s[start] == '0' or s[end] == '0':\n            return 0\n        if s[start] == s[end]:\n            return count_substrings_helper(s, start + 1, end - 1, sum_length)\n        else:\n            return count_substrings_helper(s, start + 1, end, sum_length) + \\\n                   count_substrings_helper(s, start, end - 1, sum_length) + \\\n                   count_substrings_helper(s, start + 1, end - 1, sum_length + 1)\n\n    substrings_count = defaultdict(int)\n    for i in range(len(s)):\n        substrings_count[count_substrings_helper(s, i, i, len(s))] += 1\n\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            count[sum(int(c) for c in sub_str)] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_substrings(s, start, end, sub_str, digits_sum):\n        if end - start + 1 >= digits_sum:\n            return 1\n\n        if sub_str in res:\n            return res[sub_str]\n\n        if sub_str[0] in s[start] and sub_str[-1] in s[end]:\n            res[sub_str] = count_substrings(s, start, end, sub_str[1:-1], digits_sum) + count_substrings(s, start, end - 1, sub_str[1:-1], digits_sum) + count_substrings(s, start + 1, end, sub_str[1:-1], digits_sum) + count_substrings(s, start + 1, end - 1, sub_str[1:-1], digits_sum)\n        else:\n            res[sub_str] = 0\n\n        return res[sub_str]\n\n    s = list(s)\n    n = len(s)\n    res = defaultdict(int)\n\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = \"\".join(s[i:j+1])\n            digits_sum = sum(int(d) for d in sub_str)\n            if digits_sum == len(sub_str):\n                res[sub_str] += 1\n\n    return sum(res.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings for each digit\n    digit_count = defaultdict(int)\n    \n    # Loop through the string and count the number of substrings with the sum of digits equal to their length\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits\n            digits_sum = sum(int(digit) for digit in s[i:j+1])\n            \n            # If the sum of digits is equal to the length of the substring, increment the count\n            if digits_sum == len(s[i:j+1]):\n                digit_count[len(s[i:j+1])] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j+1].isdigit():\n                digits = [int(d) for d in s[i:j+1]]\n                sum_digits = sum(digits)\n                if sum_digits == len(digits):\n                    dp[j+1] += dp[i]\n    return dp[n]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize the dictionary to store the count of substrings\n    substrings = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        # Calculate the sum of digits of the substring from index i to the end\n        digits_sum = sum(int(d) for d in s[i:])\n        # Update the count of substrings with the given sum of digits\n        substrings[digits_sum] += 1\n    # Return the total count of substrings\n    return sum(substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = xs[0]\n        for x in xs[1:]:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_xs = sorted(xs)\n    # Return the first element of the sorted list\n    return sorted_xs[0]"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:  # Check if the list is not empty\n        return min(xs)  # Return the smallest number in the list\n    else:\n        return None  # Return None if the list is empty"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize variables to store the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Iterate through the sorted list\n    for i in range(len(test_list) - 1):\n        diff = abs(test_list[i+1] - test_list[i])\n\n        # Update the minimum and maximum difference\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize variables to store the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n\n    # Loop through the tuple list and calculate the difference between adjacent pairs\n    for i in range(len(test_list)-1):\n        curr_diff = test_list[i+1][1] - test_list[i][1]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_diff = 0\n    for i in range(1, len(test_list)):\n        max_diff = max(max_diff, test_list[i] - test_list[i-1])\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i][1]-test_list[j][1]) > max_diff:\n                max_diff = abs(test_list[i][1]-test_list[j][1])\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    min_num = test_list[0]\n    max_diff = 0\n    # Iterate through the list\n    for num in test_list[1:]:\n        # Update minimum number if current number is smaller\n        if num < min_num:\n            min_num = num\n        # Calculate difference between current and minimum number\n        diff = num - min_num\n        # Update maximum difference if new difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    # Return maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize the max difference to be the first element of the first pair\n    max_diff = abs(test_list[0][0] - test_list[0][1])\n    # Loop through the list of tuples\n    for i in range(1, len(test_list)):\n        # Calculate the difference between the current pair and the previous pair\n        curr_diff = abs(test_list[i][0] - test_list[i][1])\n        # Update the max difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            pairs_list.append((test_list[i], test_list[j]))\n    max_diff = 0\n    for pair in pairs_list:\n        diff = max(pair[0], pair[1]) - min(pair[0], pair[1])\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # initialize maximum difference variable\n    max_diff = 0\n\n    # iterate over the tuple list\n    for i in range(len(test_list)):\n        # iterate over the remaining elements of the list\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the current pair\n            diff = abs(test_list[i][1] - test_list[j][1])\n            # update the maximum difference variable if necessary\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = None\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            current_diff = test_list[j] - test_list[i]\n            if diff is None or current_diff > diff:\n                diff = current_diff\n    return diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second element of the tuples\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts the list based on the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Using a lambda function to sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list in ascending order based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if isinstance(data_list, list):\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n    elif isinstance(data_list, int) or isinstance(data_list, float):\n        return data_list\n    else:\n        return []\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list += recursive_list_sum(item)\n            else:\n                flattened_list.append(item)\n        return recursive_list_sum(flattened_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Helper function to flatten a list of lists.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if not isinstance(data_list, list):\n            return [data_list]\n        return [item for sublist in data_list for item in flatten_list(sublist)]\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list\n    if not data_list:\n        return 0\n    \n    # Recursive case: concatenate head and tail of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(nested_list):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        flat_list = []\n        for item in nested_list:\n            if type(item) == list:\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(lst):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        if isinstance(lst, list):\n            for item in lst:\n                flatten_list(item)\n        else:\n            yield lst\n\n    flattened_list = list(flatten_list(data_list))\n    total = sum(flattened_list)\n\n    return total"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and counts the number of positive numbers in it.\n\n    :param lst: list - A list of integers.\n    :return: int - The number of positive integers in the input list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables for count and current number\n    count = 0\n    current_number = 0\n    \n    # Iterate through all numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a Bell number\n        if is_bell(num):\n            # Increment count by 1 if the number is a Bell number\n            count += 1\n            # If the number is a Bell number and it is greater than the current number, update the current number\n            if num > current_number:\n                current_number = num\n    \n    # Return the count of Bell numbers\n    return count\n\ndef is_bell(num):\n    '''\n    Check if a number is a Bell number. A Bell number is a positive integer that can be expressed as the sum of two primes.\n    '''\n    # Check if the number is greater than 1\n    if num <= 1:\n        return False\n    \n    # Initialize variables for prime factors and sum of prime factors\n    prime_factors = []\n    prime_sum = 0\n    \n    # Iterate through all factors of the number\n    for i in range(2, int(num**0.5) + 1):\n        # If the number is divisible by i, add i to the prime factors and subtract i from the number\n        if num % i == 0:\n            prime_factors.append(i)\n            num = num // i\n    \n    # Check if the number is divisible by any prime factor\n    for factor in prime_factors:\n        if num % factor == 0:\n            return False\n    \n    # If the number is not divisible by any prime factor, it is a Bell number\n    return True"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(a, b, s):\n        if a == 0:\n            return b // s\n        if b == 0:\n            return a // s\n        if a + b == 2 * s:\n            return 1\n        if a < b:\n            return partition(a, b + 1, s)\n        else:\n            return partition(a - 1, b, s)\n\n    def count_ways(n, k):\n        if k == 1:\n            return 1\n        if n == 0:\n            return 0\n        return count_ways(n - 1, k) + partition(n, k - 1, n)\n\n    return count_ways(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # base case\n    if n == 0 or n == 1:\n        return 1\n    else:\n        # recursive case\n        return n * (n - 1) // 2 + bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        raise ValueError('Input must be non-negative.')\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    # Initialize a dictionary to store the number of ways to partition a set of Bell numbers\n    ways = {0: 1, 1: 1}\n\n    # Iterate through all numbers from 2 to n\n    for i in range(2, n+1):\n        # Calculate the number of ways to partition a set of Bell numbers with n-i Bell numbers\n        ways[i] = ways[i-1] + ways[i-2]\n\n    # Return the number of ways to partition a set of Bell numbers with n-i Bell numbers\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    The Bell numbers are the numbers of the form 2^k, where k is a positive integer.\n    For example, the first ten Bell numbers are 2^0, 2^1, 2^2,..., 2^9.\n\n    We can solve this problem using dynamic programming, where we store the number of ways\n    to partition a set of Bell numbers of length k into n parts. The base case is when\n    we have n parts, in which case the answer is 1 (since we can split the set of Bell\n    numbers into n parts in exactly the same way). For all other values of k, we can\n    calculate the number of ways to partition a set of Bell numbers of length k into n\n    parts using the following recurrence relation:\n\n        n * (n-1) * (n-2) *... * 2 * 1\n\n    We can use the fact that the first two Bell numbers are 2 and 1, so we can initialize\n    the first two values of the recurrence relation to 1 and 2, respectively.\n\n    The general idea is to use dynamic programming to compute the value of the recurrence\n    relation for all possible values of k and then use a matrix to compute the final\n    answer.\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n\n    # Initialize the first two values of the recurrence relation\n    bell_numbers = [1, 2]\n\n    # Compute the remaining values of the recurrence relation using dynamic programming\n    for k in range(2, n):\n        bell_numbers.append(bell_numbers[k-1] * (k-1) * (k-2) *... * 2 * 1)\n\n    # Compute the number of ways to partition the set of Bell numbers into n parts\n    return bell_numbers[n-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += i * (n//i)\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # base case: if n is 0 or 1, there is only one way to partition\n    if n == 0 or n == 1:\n        return 1\n\n    # initialize variables\n    ways = 0\n    temp_ways = 0\n\n    # loop through all numbers from 2 to n-1\n    for i in range(2, n+1):\n\n        # calculate the number of ways to partition the current number i\n        # by choosing the first i-1 Bell numbers and the remaining 1\n        temp_ways = bell_number(i-1) + bell_number(1)\n\n        # add the number of ways to partition the current number i to ways\n        ways += temp_ways\n\n    # return the number of ways to partition all Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check for increasing sequence\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return \"Increasing\"\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return \"Decreasing\"\n    else:\n        return \"Not Monotonic\""
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    # check if the array is empty or has only one element\n    if len(A) <= 1: \n        return True\n    \n    # iterate over the array and compare adjacent elements\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Returns True if the given array is monotonic, False otherwise.\n\n    A monotonic array is an array where either it is increasing or decreasing or\n    remains the same when sorted. For example, [1, 2, 3, 4, 5] is a monotonic\n    array because it remains the same when sorted in ascending order.\n\n    Args:\n        A (list): The array to check for monotonicity.\n\n    Returns:\n        bool: True if A is monotonic, False otherwise.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            return False\n        elif A[i] < A[i-1]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1]:\n                return False\n        if A[-1] <= A[-2]:\n            return True\n        return False\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1]:\n                return False\n        if A[-1] >= A[-2]:\n            return True\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n\n    :param A: List of integers\n    :return: True if the array is monotonic, False otherwise.\n    \"\"\"\n\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # Check if the array has only two elements\n    if len(A) == 2:\n        if A[0] <= A[1]:\n            return True\n        else:\n            return False\n\n    # Check if the array has only three elements\n    if len(A) == 3:\n        if (A[0] <= A[1] and A[1] <= A[2]) or (A[0] >= A[1] and A[1] >= A[2]):\n            return True\n        else:\n            return False\n\n    # Check if the array has more than three elements\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n\n    # If the above checks are passed, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if array is empty or has only one element\n    if len(A) <= 1:\n        return True\n\n    # Initialize variables for previous element and current element\n    prev = A[0]\n    curr = A[1]\n\n    # Iterate through the array from the second element\n    for i in range(1, len(A)):\n        # Check if the current element is greater than the previous element\n        if curr > prev:\n            # If the current element is greater, check if the next element is also greater\n            if i < len(A) - 1 and A[i + 1] > A[i]:\n                # If the next element is also greater, return False\n                return False\n            # If the next element is not greater, return True\n            else:\n                return True\n        # If the current element is less than or equal to the previous element, increment the previous element\n        else:\n            prev = curr\n            curr = A[i + 1]\n\n    # If the loop finishes without finding any decreasing sequence, return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # If length of array is less than or equal to 1, it is not a monotonic array\n    if len(A) <= 1: \n        return False\n\n    # Check whether the first element is greater than or equal to the second element\n    if A[0] >= A[1]: \n        return False\n\n    # Check whether the array is monotonic or not\n    for i in range(len(A)-1): \n        if A[i] >= A[i+1]: \n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A) \n    # If the array is empty or has only one element, it is monotonic.\n    if n == 0 or n == 1: \n        return True \n    # Check if the array is monotonic from the beginning.\n    for i in range(n): \n        if A[i] > A[i+1]: \n            return False \n    # Check if the array is monotonic from the end.\n    for i in range(n-2, -1, -1): \n        if A[i] < A[i+1]: \n            return False \n    return True "
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty\n    if not s:\n        return True\n    # Check if the first element of the sublist is present in the list\n    if s[0] in l:\n        # Recursively check if the sublist is present in the remaining elements of the list\n        return is_sublist(l, s[1:])\n    # If the first element of the sublist is not present in the list, check if the sublist is present in the remaining elements of the list\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # convert the sublist to a set\n    sublist = set(s)\n\n    # loop through each element of the list\n    for i in range(len(l)):\n\n        # convert the current element to a set\n        curr_set = set(l[i])\n\n        # check if the current set is a subset of the sublist set\n        if curr_set.issubset(sublist):\n            return True\n\n    # if we reach this point, the list does not contain the sublist\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    return all(x in s for x in l)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if the list is a sublist of the given sublist\n    if s in l:\n        return True\n\n    # If the list is not a sublist of the given sublist, check if any sublist is a sublist of the list\n    for i in range(len(l)):\n        for j in range(len(s)):\n            if l[i:i+j+1] == s:\n                return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all tuples have the same length\n    for tuple_ in Input:\n        if len(tuple_)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length and False otherwise.\n    \"\"\"\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # create an empty dictionary to store the length of each tuple\n    length_dict = {}\n    # loop through each tuple in the input list\n    for tup in Input:\n        # if the length of the tuple is already in the dictionary, increment the count\n        if len(tup) in length_dict:\n            length_dict[len(tup)] += 1\n        # if the length of the tuple is not in the dictionary, add it with a count of 1\n        else:\n            length_dict[len(tup)] = 1\n    # loop through the dictionary to check if all tuples have equal length\n    for key, value in length_dict.items():\n        if value > 1:\n            return False\n    # if all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # create an empty list to store the lengths of the tuples\n    lengths = []\n    # iterate over the input list of tuples\n    for tup in Input:\n        # append the length of each tuple to the lengths list\n        lengths.append(len(tup))\n    # check if all the lengths in the list are equal\n    if all(x == lengths[0] for x in lengths):\n        # return True if all tuples have the same length\n        return True\n    else:\n        # return False if not\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        \n        gap //= 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize variables\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    i = 0\n\n    # Main loop\n    while swapped:\n        swapped = False\n\n        # Sorting step\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n\n        # Decreasing gap\n        gap = int(gap / 1.3)\n\n        # End of loop condition\n        if gap == 1:\n            swapped = False\n\n    # Return sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        # Perform a single pass of the list\n        for i in range(gap, n):\n            # Compare the current element with the next element\n            if nums[i] < nums[i - gap]:\n                # Swap the elements if they are not in the correct order\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n        # Decrease the gap size for the next pass\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = min(gap//1.3, n)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    This function takes a list of integers and sorts them using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        gap = min(gap*3, n)\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(1, n):\n            if nums[i-1] > nums[i]:\n                nums[i-1], nums[i] = nums[i], nums[i-1]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        gap //= 1.3"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n        gap //= 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    # First, we check if the number is divisible by 4, since a difference of two squares can only have integer factors.\n    if n % 4 == 0:\n        # If the number is divisible by 4, we can represent it as the difference of two squares by dividing it by 4.\n        return n // 4\n    else:\n        # If the number is not divisible by 4, we can represent it as the difference of two squares by adding the square of the remainder to the square of the quotient of the number by 4.\n        return n ** 2 - ((n // 4) ** 2 + ((n % 4) ** 2))"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    if n < 0:\n        return \"Number cannot be negative.\"\n    elif n == 0:\n        return \"0 cannot be represented as the difference of two squares.\"\n    elif n == 1:\n        return \"1 cannot be represented as the difference of two squares.\"\n    elif n == 4:\n        return \"4 cannot be represented as the difference of two squares.\"\n    elif n == 9:\n        return \"9 cannot be represented as the difference of two squares.\"\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                return str(n) + \" cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Check if the number is divisible by 2\n    if n % 2!= 0:\n        return False\n    \n    # Take the square of the number\n    num_square = n * n\n    \n    # Initialize two variables num_square_1 and num_square_2 to 0\n    num_square_1 = 0\n    num_square_2 = 0\n    \n    # While the number is greater than 1, square the number and add it to the variable num_square_2\n    while n > 1:\n        n = n * n\n        num_square_2 += n\n    \n    # If the number is divisible by 2 and its square is equal to num_square, the function returns True\n    if n % 2 == 0 and num_square == num_square_2:\n        return True\n    \n    # If the loop completes without finding the difference of two squares, the function returns False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the input is an integer\n    if not isinstance(n, int): \n        return \"Input must be an integer\"\n    # check if the input is less than 0\n    elif n < 0: \n        return \"Input must be a non-negative integer\"\n    # check if the input is a power of 2\n    elif n & (n - 1) == 0: \n        return \"The input is a power of 2\"\n    # check if the input is a multiple of 8\n    elif n % 8!= 0: \n        return \"The input is not a multiple of 8\"\n    # check if the input is divisible by 3\n    elif n % 3!= 0: \n        return \"The input is not divisible by 3\"\n    # check if the input is divisible by 5\n    elif n % 5!= 0: \n        return \"The input is not divisible by 5\"\n    # check if the input is divisible by 7\n    elif n % 7!= 0: \n        return \"The input is not divisible by 7\"\n    # check if the input is divisible by 11\n    elif n % 11!= 0: \n        return \"The input is not divisible by 11\"\n    # check if the input is divisible by 13\n    elif n % 13!= 0: \n        return \"The input is not divisible by 13\"\n    # if all the above conditions are true, then the input can be represented as the difference of two squares\n    else: \n        # find the square root of the input\n        sqrt_n = n ** 0.5\n        # find the difference of the square roots\n        dif_sqrt_n = sqrt_n - (sqrt_n ** 2)\n        # check if the difference of the square roots is an integer\n        if not isinstance(dif_sqrt_n, int): \n            return \"The difference of the square roots is not an integer\"\n        # if the difference of the square roots is an integer, then the input can be represented as the difference of two squares\n        else: \n            return \"The input can be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # converting the number into a list of digits\n    digits = [int(x) for x in str(n)]\n    \n    # checking if the number is a power of 2\n    if len(digits) > 1 and digits[-1] == 0:\n        return False\n    \n    # finding the difference of the squares\n    diff = n - (n//2)**2\n    \n    # checking if the difference is a power of 2\n    diff_digits = [int(x) for x in str(diff)]\n    if len(diff_digits) > 1 and diff_digits[-1] == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if n is less than or equal to 1, then it cannot be represented as the difference of two squares\n    if n <= 1:\n        return False\n    \n    # Check for the even cases where n can be represented as the difference of two squares\n    for i in range(2, n):\n        if n % i == 0:\n            # Check if n - i is a square\n            if n - i == int(n**0.5) ** 2:\n                return True\n    \n    # Check for the odd cases where n can be represented as the difference of two squares\n    for i in range(3, n+1, 2):\n        if n % i == 0:\n            # Check if n - i is a square\n            if n - i == int(n**0.5) ** 2:\n                return True\n    \n    # If none of the above cases are met, then n cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Initialize variables for the square of the given number\n    square = n ** 2\n    \n    # Initialize variables for the sum of the squares of the digits of the number\n    sum_square = 0\n    while n > 0:\n        digit = n % 10\n        sum_square += digit ** 2\n        n //= 10\n    \n    # Check if the sum of the squares of the digits of the number is equal to the square of the given number\n    if sum_square == square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # base cases\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    \n    # loop through the numbers from 2 to n-1\n    for i in range(2, n):\n        # calculate the square of the current number\n        square = i*i\n        \n        # check if the square can be written as the difference of two squares\n        if square == n - i*i:\n            return True\n    \n    # if no suitable square can be found, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    #check if the given number can be represented as the difference of two squares or not\n    square = n**0.5\n    square_int = int(square)\n    if square_int**2 == n:\n        return True\n    elif (square_int+1)**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # find the square root of n using math.sqrt() function\n    sqrt_n = math.sqrt(n)\n\n    # check if the difference of two squares can be represented as an integer\n    difference = (n**2 - sqrt_n)**2\n\n    # check if difference is an integer\n    if int(difference) == difference:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Create a dictionary to store the frequency of each pattern\n    freq_dict = {}\n    for pattern in patterns:\n        freq_dict[pattern] = colors.count(pattern)\n\n    # Create a list to store the current pattern\n    current_pattern = []\n\n    # Loop through the colors in the order they appear\n    for color in colors:\n        # If the color is the same as the last color in the current pattern, add it to the current pattern\n        if color == current_pattern[-1]:\n            current_pattern.append(color)\n        # If the color is different from the last color in the current pattern, check if it matches any of the patterns in the dictionary\n        else:\n            # Check if the last color in the current pattern matches any of the patterns in the dictionary\n            for pattern in patterns:\n                if color == pattern:\n                    # If it does, check if the current pattern has the same frequency as the previous patterns\n                    if current_pattern in freq_dict:\n                        if freq_dict[current_pattern] == freq_dict[pattern]:\n                            return True\n                    # If not, check if the current pattern has the same frequency as any of the previous patterns\n                    for prev_pattern in current_pattern:\n                        if prev_pattern in freq_dict:\n                            if freq_dict[prev_pattern] == freq_dict[pattern]:\n                                return True\n                    # If the current pattern does not match any of the previous patterns, add it to the dictionary and break out of the loop\n                    freq_dict[current_pattern] = freq_dict[pattern]\n                    current_pattern = []\n                    break\n\n    # If the loop completes without finding a pattern that has the same frequency as any of the previous patterns, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n\n    # Calculate the frequency of each color in the colors array\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n\n    # Check if the color count is same as the frequency of each pattern in the patterns array\n    for pattern in patterns:\n        if color_count[pattern]!= patterns.count(pattern):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    # check if all patterns are valid\n    for pattern in patterns:\n        if len(pattern)!= 3 or not all(c in colors for c in pattern):\n            return False\n    # check if the colors are in the pattern sequences\n    for color in colors:\n        if not any(c == color for pattern in patterns for c in pattern):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    prev_pattern = ''\n    current_pattern = ''\n    index = 0\n    \n    # Iterate through the patterns array\n    for pattern in patterns:\n        # Check if the current pattern matches the previous pattern\n        if pattern == prev_pattern:\n            # If it does, add the color to the current pattern\n            current_pattern += colors[index]\n            # Increment the index\n            index += 1\n        else:\n            # If it doesn't, reset the current pattern to the current color and increment the index\n            current_pattern = colors[index]\n            index += 1\n        \n        # Check if the current pattern matches the expected pattern\n        if current_pattern == pattern:\n            # If it does, return True\n            return True\n        \n        # If it doesn't, reset the previous pattern to the current pattern and increment the index\n        prev_pattern = current_pattern\n        index += 1\n        \n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Define the patterns as a list of lists\n    pattern_list = [pattern for pattern in patterns]\n    \n    # Initialize the count of consecutive colors\n    count = 1\n    \n    # Loop through the colors list\n    for color in colors:\n        # Check if the current color matches the pattern at the current index\n        if color == pattern_list[0]:\n            # Increment the count of consecutive colors\n            count += 1\n            \n            # Remove the first pattern from the list\n            pattern_list = pattern_list[1:]\n            \n        # Check if the current color matches the pattern at the current index and increment the index\n        elif color == pattern_list[0]:\n            # Increment the count of consecutive colors and move to the next pattern\n            count += 1\n            pattern_list = pattern_list[1:]\n            \n        # If the current color doesn't match the pattern at the current index, reset the count\n        else:\n            count = 1\n            \n        # If the count reaches the length of the pattern list, it means the colors sequence is not in the same order as the patterns\n        if count == len(pattern_list):\n            return False\n            \n    # If all the colors match the patterns, it means the colors sequence is in the same order as the patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Find the number of colors in the patterns array\n    n = len(patterns)\n\n    # Initialize a list to store the count of each color in the pattern\n    count = [0] * n\n\n    # Initialize a variable to store the total count of all colors\n    total = 0\n\n    # Iterate through the colors array\n    for color in colors:\n\n        # Increment the count of the current color in the pattern list\n        count[color - 1] += 1\n\n        # Update the total count of all colors\n        total += 1\n\n    # Check if the total count of all colors is equal to the sum of the counts of each color in the patterns array\n    if total == sum(count):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n\n    :param colors: list of colors\n    :param patterns: list of patterns\n    :return: True if it follows the patterns sequence, False otherwise\n    \"\"\"\n    pattern_colors = []\n    pattern_idx = 0\n    for color in colors:\n        if color in patterns[pattern_idx]:\n            pattern_colors.append(color)\n        pattern_idx += 1\n        if pattern_idx == len(patterns):\n            pattern_idx = 0\n    return all(color in pattern_colors for pattern_colors in patterns)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Get the length of the colors and patterns arrays\n    n = len(colors)\n    m = len(patterns)\n    # Check if the number of patterns is at least as large as the number of colors\n    if m < n:\n        return False\n    # Loop through the patterns array and check if the current pattern is valid for the colors array\n    for i in range(m):\n        valid = True\n        for j in range(n):\n            # Check if the current color matches the jth color in the current pattern\n            if colors[j]!= patterns[i][j]:\n                valid = False\n                break\n        # If the current pattern is valid, break out of the loop\n        if valid:\n            break\n    # If we have found a valid pattern, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors.count(patterns[i]) % 2!= 0:\n            return False\n        colors.remove(patterns[i])\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists of colors and patterns as input and returns True if the patterns\n    follow the sequence given in the patterns array. Otherwise, it returns False.\n\n    The patterns array contains a sequence of strings, each corresponding to a group of colors.\n    Each string in the array represents a pattern. The strings can have any number of characters,\n    but they should follow the following rules:\n\n        - Every odd-numbered character represents a color.\n        - Every even-numbered character represents a different pattern.\n\n    The pattern sequence starts with a single \"cycle\" pattern. If the colors match the sequence,\n    then we can skip that group of colors and move on to the next group of colors. We repeat this\n    process until all groups have been matched. If the patterns array is empty, then it is\n    assumed to be a single cycle pattern.\n\n    Example:\n\n    colors = ['red', 'green', 'blue']\n    patterns = ['red', 'blue', 'blue','red']\n\n    In this example, the patterns follow the sequence [red, blue, blue, red]. Therefore,\n    the function would return True.\n\n    colors = ['red', 'green', 'blue']\n    patterns = ['red', 'green', 'green']\n\n    In this example, the patterns do not follow the sequence [red, blue, blue, red]. Therefore,\n    the function would return False.\n\n    colors = ['red', 'green', 'blue']\n    patterns = ['red','red']\n\n    In this example, the patterns do not follow the sequence [red, blue, blue, red]. Therefore,\n    the function would return False.\n    '''\n\n    if len(patterns) == 0:\n        # If the patterns array is empty, assume it is a single cycle pattern\n        return True\n\n    # Convert the patterns array to a set to remove duplicates\n    patterns_set = set(patterns)\n\n    # Convert the colors array to a set to remove duplicates\n    colors_set = set(colors)\n\n    # Check if the colors in each group match the corresponding pattern in the patterns array\n    for i in range(0, len(colors), 2):\n        if colors_set.difference(patterns_set).intersection(patterns_set) == set():\n            return False\n\n    # If we make it this far, the patterns follow the sequence\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    tuples_found = []\n    for t in test_list:\n        all_divisible = True\n        for x in t:\n            if x % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            tuples_found.append(t)\n    return tuples_found"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_tuples = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            filtered_tuples.append(tup)\n    return filtered_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tuple_ in test_list:\n        if all(x % K == 0 for x in tuple_):\n            divisible_tuples.append(tuple_)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    divisible_tuples = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create a dictionary to store the count of elements\n    count_dict = {}\n\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Convert the tuple into a set to remove duplicates\n        set_tup = set(tup)\n        # Iterate over the set and update the count of elements\n        for elem in set_tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n\n    # Create a list to store the tuples that have all elements divisible by k\n    result_list = []\n\n    # Iterate over the count_dict and check if all elements have a count divisible by K\n    for elem, count in count_dict.items():\n        if count % K == 0:\n            result_list.append(elem)\n\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input and returns the list of tuples which have all elements divisible by K from the input list.\n    '''\n    # initialize an empty list to store the tuples with all elements divisible by K\n    result = []\n    # loop through the input list of tuples\n    for tup in test_list:\n        # initialize a boolean variable to keep track of whether all elements in the tuple are divisible by K\n        is_divisible = True\n        # loop through each element in the tuple\n        for num in tup:\n            # check if the current element is not divisible by K\n            if num % K!= 0:\n                # if it's not, set the is_divisible flag to False and break out of the loop\n                is_divisible = False\n                break\n        # if all elements in the tuple are divisible by K, append the tuple to the result list\n        if is_divisible:\n            result.append(tup)\n    # return the list of tuples with all elements divisible by K\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    This function takes an integer as input and returns True if it is divisible by 11, else False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    This function checks whether a number is divisible by 11 or not.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # convert the input string to lower case\n    s = s.lower()\n    \n    # initialize a variable to count the length of the word\n    word_length = 0\n    \n    # loop through each character in the string\n    for char in s:\n        # check if the character is a letter\n        if char.isalpha():\n            # increment the word_length by 1\n            word_length += 1\n    \n    # check if the word length is odd or even\n    if word_length % 2 == 0:\n        # return the word length as a string\n        return str(word_length) + \" is even.\"\n    else:\n        # return the word length as a string\n        return str(word_length) + \" is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the sentence into words\n    for word in words: # iterate over each word\n        if len(word) % 2 == 0: # check if the length is even or not\n            return False # if even, return False\n        else:\n            return True # if odd, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns True if the length of the word is odd and False otherwise.\n    '''\n\n    word = s.split()[0] # assuming the input string is in the format \"word word\"\n\n    if len(word) % 2 == 0: # if the length of the word is even\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        print(f\"{word} is an even length word.\")\n    else:\n        print(f\"{word} is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"The length of the word '{word}' is even.\")\n        else:\n            print(f\"The length of the word '{word}' is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        print(s + \" is an odd length word.\")\n    else:\n        print(s + \" is an even length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return word + \" is odd length.\"\n        else:\n            return word + \" is even length.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is an odd length\")\n        else:\n            print(word, \"is an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(\"The length of word\", word, \"is odd\")\n        else:\n            print(\"The length of word\", word, \"is even\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 10\n    else:\n        return n * (1 + tetrahedral_number(n-1))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (2 * n - 1)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n + 1) * tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += (i * (4*i - 1)) // 2\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [0]\n    for i in range(1, n+1):\n        tetrahedral_numbers.append(3*i**2 - 1)\n    return tetrahedral_numbers[n]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t_num = 1\n    for i in range(n-1):\n        t_num *= 4\n    return t_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2)*(n+3))//6\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (4 * n + 6) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2)*(n+3))//6\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 14\n    elif n == 3:\n        return 60\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(r))"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    # Calculate the surface area of a sphere\n    surface_area = (4/3) * math.pi * r ** 3\n\n    # Calculate the volume of the sphere\n    volume = (4/3) * math.pi * r ** 3 * (r ** 2 + r ** 2 + r ** 2)\n\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r as input and returns the volume of a sphere with that radius.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Find the volume using the formula V = (4/3)\u03c0r^3\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return chr((char % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # converting the string to a list\n    str_list = list(strr)\n\n    # initializing a variable to store the sum of ASCII values of characters in the list\n    sum_ascii = 0\n\n    # iterating over the list and adding the ASCII values of characters to the sum\n    for char in str_list:\n        sum_ascii += ord(char)\n\n    # finding the character made by adding the ASCII values of characters modulo 26\n    char_val = (sum_ascii % 26) + 65\n\n    # converting the character value to a character\n    char = chr(char_val)\n\n    # returning the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return char % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Convert the string to uppercase for case-insensitive comparison\n    strr = strr.upper()\n    # Initialize the sum of ASCII values of characters to 0\n    sum_of_ascii = 0\n    # Iterate over each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value and add it to the sum of ASCII values\n        sum_of_ascii += ord(char)\n    # Convert the sum of ASCII values modulo 26 to a character using the formula 'a + 26 * (b // 26)'\n    # where 'a' is the ASCII value of 'A', 'b' is the sum of ASCII values modulo 26, and 'b // 26' is the quotient of 'b' divided by 26.\n    char = chr(65 + sum_of_ascii % 26)\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #initialize a variable to store the sum of ASCII values of characters\n    charSum = 0\n    \n    #iterate through each character of the string\n    for char in strr:\n        #add the ASCII value of each character to the variable\n        charSum += ord(char)\n    \n    #modulo 26 to get the character value\n    charValue = charSum % 26\n    \n    #convert the character value to a character using the ASCII table\n    char = chr(charValue + 65)\n    \n    #return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the characters\n    char = \"\"\n    # Loop through each character in the string\n    for i in strr:\n        # Add the ASCII value of the character to the current character string\n        char += str(ord(i))\n        # Add the ASCII value of 1 to the current character string\n        char += str(ord(\"a\"))\n    # Return the character as an integer\n    return int(char, 10)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total_sum = 0\n    for char in strr:\n        total_sum += ord(char)\n    final_char = chr((total_sum % 26) + 65)\n    return final_char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return char % 26"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers of the sequence\n    sequence = [1, 2]\n    # Loop n-2 times to get the nth number\n    for i in range(n-2):\n        # Get the next number in the sequence by adding the previous two\n        next_num = sequence[i] + sequence[i+1]\n        # Add the next number to the sequence\n        sequence.append(next_num)\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 3]\n    for i in range(n-2):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 1, 1, 2, 4, 4, 8, 16, 32, 128]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(2, n+1):\n        new_num = 4 * sequence[i-1] + sequence[i-2]\n        sequence.append(new_num)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 2]\n    for i in range(2, n):\n        sequence.append(2*sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    # initialize the sequence to an empty list\n    sequence = []\n    \n    # loop until the sequence has n elements\n    while len(sequence) < n:\n        # check if the current element is odd\n        if len(sequence) % 2 == 1:\n            # if it is, add it to the sequence\n            sequence.append(len(sequence) + 1)\n        # if the current element is even, add the sum of the current and previous element to the sequence\n        else:\n            # add the current element to the sequence\n            sequence.append(len(sequence) + 1)\n            # if the current element is even and the previous element is odd, add the sum of the current and previous elements to the sequence\n            if len(sequence) > 1 and len(sequence) % 2 == 1:\n                sequence.append(sequence[-1] + sequence[-2])\n    \n    # return the nth element in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence with 0\n    seq = [0]\n    # iterate over the sequence n times\n    for i in range(n):\n        # create a new sequence by applying the following rules:\n        # 1. if the last digit of the previous sequence is 0, append 1\n        # 2. if the last digit of the previous sequence is 1, append 0\n        # 3. if the last digit of the previous sequence is 2, append 1\n        # 4. repeat steps 1-3 for each digit in the sequence\n        newseq = []\n        for digit in seq:\n            if digit % 2 == 0:\n                newseq.append(0)\n            else:\n                newseq.append(1)\n        # update the sequence with the new sequence\n        seq = newseq\n    # return the nth number in the sequence\n    return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    sequence = [1]\n    for i in range(n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    # Initialize the sequence to 0\n    sequence = [0]\n\n    # Loop through the sequence\n    for i in range(n):\n        # Append the next number in the sequence to the end of the list\n        sequence.append(sequence[i] + sequence[i+1])\n\n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula:\n    # A = 4 * pi * r^2\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of the sphere using the formula:\n    # surface_area = 4 * pi * r^2\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r**2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    hexagonal_number = 0\n    for i in range(n):\n        hexagonal_number += b\n        a, b = b, a + b\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0\n    b = 1\n    c = 0\n    while n > 0:\n        a = 12 * a + 6\n        b = 12 * b + 6\n        c = 12 * c + 6\n        n -= 1\n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagons = [1, 6, 15, 28, 45, 66]\n    return hexagons[n]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # calculate the sum of the first n centered hexagonal numbers\n    sum = 0\n    for i in range(1, n+1):\n        sum += centered_hexagonal(i)\n\n    return sum\n\ndef centered_hexagonal(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # calculate the centered hexagonal number\n    hexagonal = (n*(3*n-1))//2\n\n    return hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n\n    # Initialize the base number and the counter\n    base = 2\n    counter = 0\n\n    # Check if n is less than the base number\n    while counter < n:\n        # If n is less than the current base number, we need to increment it\n        base += 1\n        counter += base\n\n    # Return the base number plus the counter\n    return base + counter"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagon_center = 1\n    hexagon_side = 1\n    centered_hexagon_number = 0\n\n    for i in range(1, n+1):\n        if i < n:\n            centered_hexagon_number += hexagon_side\n        hexagon_side += hexagon_center\n        hexagon_center += 1\n\n    return centered_hexagon_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Find the maximum centered hexagonal number\n    max_centered_hexagonal = (n + 1) * (2 * n + 1)\n\n    # Calculate the centered hexagonal number\n    centered_hexagonal = (max_centered_hexagonal + n) // 2\n\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonal_numbers = [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]\n    return hexagonal_numbers[n]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return \"Error: n must be an integer.\"\n\n    # Check if n is positive\n    if n < 0:\n        return \"Error: n must be a positive integer.\"\n\n    # First centered hexagonal number is 1\n    first_centered_hexagonal = 1\n\n    # Check for n-1 centered hexagonal numbers\n    for i in range(1, n):\n        # Calculate the next centered hexagonal number\n        next_centered_hexagonal = 2 * first_centered_hexagonal - 1\n        # Add 1 to the first centered hexagonal number\n        first_centered_hexagonal += 1\n        # Print the next centered hexagonal number\n        print(next_centered_hexagonal, end=' ')\n\n    # Print the last centered hexagonal number\n    print(first_centered_hexagonal)\n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the dictionaries into a single dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and merges them into a single dictionary.\n    \"\"\"\n\n    merged_dict = {}\n\n    # Add all the key-value pairs of the first dictionary\n    merged_dict.update(dict1)\n\n    # Add all the key-value pairs of the second dictionary\n    merged_dict.update(dict2)\n\n    # Add all the key-value pairs of the third dictionary\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes in three dictionaries and merges them into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n    for key,value in dict1.items():\n        merged_dict[key] = value\n    for key,value in dict2.items():\n        merged_dict[key] = value\n    for key,value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are the elements of the list \n    and the values are their respective frequency.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary containing the frequency of each element in the list.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Use a set to remove duplicates from the list\n    list2 = list(set(list1))\n    # Loop through each element in the list\n    for elem in list2:\n        # If the element is already in the dictionary, increment its count\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            freq_dict[elem] = 1\n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def freq_count(lst):\n    '''\n    This function takes a list as input, and returns a dictionary with the frequency of all the elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # Otherwise, add the element to the dictionary with a frequency count of 1\n        else:\n            freq_dict[element] = 1\n\n    # Return the dictionary containing the frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    min_diff = float('inf')\n    closest_num = N\n\n    # iterate through the list of numbers\n    for num in range(N, 1, -1):\n        # calculate the difference between the current number and N\n        diff = num - N\n\n        # if the difference is smaller than the current minimum difference, update the minimum difference and the closest number\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n\n    # return the closest smaller number than N\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    min_diff = float('inf')\n    closest_num = 0\n\n    for i in range(1, N + 1):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n    \n    for i in range(1, N+1):\n        if abs(i-N) < abs(smallest):\n            closest = smallest\n            smallest = i\n        elif abs(i-N) < abs(closest):\n            closest = i\n            \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N - 1 # initialize minimum number as the previous number\n    \n    for i in range(2, N): # iterate from 2 to n-1\n        if abs(N - i) < abs(N - min_num): # if the difference between the current number and the minimum number is smaller\n            min_num = i # update the minimum number\n    \n    return min_num # return the minimum number"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    # Create a list of numbers from 1 to N\n    numbers = [i for i in range(1, N+1)]\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Find the closest smaller number than N\n    closest = numbers[0]\n    for i in range(1, len(numbers)):\n        if abs(N-numbers[i]) < abs(N-closest):\n            closest = numbers[i]\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    num_list = [i for i in range(1, N+1)]\n    closest_num = float('inf')\n    for num in num_list:\n        if abs(num - N) < abs(closest_num - N):\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    else:\n        return min(N, 2*N-1) - 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    min_diff = float('inf')\n    closest = N\n\n    for i in range(1, N):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n\n    Args:\n    N (int): a positive integer\n\n    Returns:\n    int: the closest smaller number than n, or n itself if n is the smallest integer\n    \"\"\"\n    n = 1\n    while n < N:\n        if N % n == 0:\n            return n\n        n += 1\n    return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n    for i in range(1, N):\n        if abs(i - N) < abs(smallest - N):\n            closest = smallest\n            smallest = i\n        elif abs(i - N) < abs(closest - N):\n            closest = i\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize a variable to store the length of the longest word\n    longest_length = 0\n    \n    # Iterate through the list of words\n    for word in list1:\n        # Get the length of the current word\n        current_length = len(word)\n        \n        # Update the longest_length if the current word is longer\n        if current_length > longest_length:\n            longest_length = current_length\n    \n    # Return the length of the longest word\n    return longest_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # split the string into a list of words\n    words = str1.split()\n    \n    # loop through each word in the list\n    for word in words:\n        # check if the word is a substring of the target string\n        if sub_str in word:\n            return True\n    \n    # if no substrings were found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(sub_str, str):\n        raise TypeError('sub_str must be a string')\n    if not isinstance(str1, list):\n        raise TypeError('str1 must be a list of strings')\n    for s in str1:\n        if not isinstance(s, str):\n            raise TypeError('str1 must be a list of strings')\n    if not isinstance(sub_str, str):\n        raise TypeError('sub_str must be a string')\n    if not sub_str:\n        raise ValueError('sub_str cannot be empty')\n    for c in sub_str:\n        if not isinstance(c, str) and not isinstance(c, int):\n            raise TypeError('sub_str must contain only strings and integers')\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"The substring '{sub_str}' is present in the string '{str1}'.\")\n    else:\n        print(f\"The substring '{sub_str}' is not present in the string '{str1}'.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    lst = str1.split() # Split the string into a list of words\n    for word in lst:\n        if word == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(lst, sub_str):\n    \"\"\"\n    This function takes in a list of strings and a substring to search for. It returns True if the substring is found in any string in the list, otherwise it returns False.\n    \"\"\"\n    for string in lst:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string_value in str1:\n        if sub_str in string_value:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'This number is not undulating'\n    else:\n        return 'This number is undulating'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize variables for the number of undulations and the number of\n    # consecutive undulations\n    num_undulations = 0\n    num_consecutive_undulations = 0\n    \n    # Iterate over the numbers from 1 to n\n    for i in range(1, n+1): \n        # If the number is odd, increment the consecutive undulations count\n        if i % 2!= 0: \n            num_consecutive_undulations += 1\n        \n        # If the number is even and the consecutive undulations count is greater\n        # than or equal to 2, increment the undulations count and reset the\n        # consecutive undulations count\n        elif num_consecutive_undulations >= 2:\n            num_undulations += 1\n            num_consecutive_undulations = 0\n            \n    # Return the number of undulations\n    return num_undulations"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is positive and odd\n    if n > 0 and n % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n <= 2: \n        return False\n\n    # Check if the number is divisible by 2, 3, or 5\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0: \n        return True\n\n    # Check if the number is divisible by 15 (unusual)\n    if n % 15 == 0: \n        return True\n\n    # If the number is not divisible by any of the above, then it is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n < 10: # If the number is less than 10\n        return True\n    else: # If the number is greater than or equal to 10\n        if n%2 == 0: # If the number is even\n            return True\n        else: # If the number is odd\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"Not an undulating number\"\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return \"Not an undulating number\"\n        return \"Is an undulating number\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return \"Not undulating\"\n    elif n < 0:\n        return \"Undulating\"\n    else:\n        return \"Neither undulating nor undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Define a key function that returns the second value of the tuple\n    key_func = itemgetter(1)\n    \n    # Sort the list of tuples using the key function\n    sorted_list = sorted(test_list, key=key_func)\n    \n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i, item in enumerate(test_list):\n        if item[1] < test_list[min_index][1]:\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value (second item of the tuple)\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i, tup in enumerate(test_list):\n        if tup[1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list based on the second value of each tuple using the sorted() function and passing in a key function that returns the second value.\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the index of the first tuple in the sorted list with the smallest second value.\n    return sorted_list.index(sorted_list[0])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Using the built-in min() function to find the index of the minimum element in the list\n    min_index = test_list.index(min(test_list, key=itemgetter(1)))\n    return test_list[min_index][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    #initialize the smallest length to be infinity\n    smallest = float('inf')\n    \n    #iterate through each list in the list\n    for sublist in lst:\n        \n        #find the length of the current sublist\n        curr_length = len(sublist)\n        \n        #check if the current length is smaller than the smallest length\n        if curr_length < smallest:\n            smallest = curr_length\n            \n    #return the smallest length\n    return smallest"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') #initialize the variable to infinity\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = len(lst[0])  \n\n    for i in lst:  \n        if len(i) < min_len:  \n            min_len = len(i)  \n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst, index=0, length=float('inf')):\n    if len(lst[index]) < length:\n        return Find_Min_Length(lst, index + 1, len(lst[index]))\n    else:\n        return length\n\n\ndef main():\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(Find_Min_Length(lst))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sub_list in lst:  \n        if len(sub_list) < min_length:  \n            min_length = len(sub_list)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # create an empty list to store the lengths of all lists in the original list\n    lengths = []\n    # iterate over each list in the original list\n    for sublist in lst:\n        # calculate the length of the sublist and append it to the lengths list\n        lengths.append(len(sublist))\n    # find the minimum length in the lengths list and return it\n    return min(lengths)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Iterate from 1 to n-1\n    for i in range(1, n):\n\n        # If n is divisible by i, increment count\n        if n % i == 0:\n            count += 1\n\n    # Return count\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Flatten the list of lists using the built-in flatten function\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Iterate over each element in the flattened list and update its frequency in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is a list, recursively call the function on that list\n        if isinstance(element, list):\n            # Recursively call the function on the sub-list and update the frequency dictionary\n            frequency.update(frequency_lists(element))\n        # If the element is not a list, increment its frequency in the dictionary\n        elif element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    # Return the updated frequency dictionary\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store frequency of each element\n    freq = {}\n\n    # loop through each element in the list1\n    for item in list1:\n        # if the element is a list, recursively call the function for that list\n        if type(item) == list:\n            for subitem in item:\n                if subitem not in freq:\n                    freq[subitem] = 1\n                else:\n                    freq[subitem] += 1\n        # if the element is not a list, check if it is already in the dictionary\n        elif item not in freq:\n            freq[item] = 1\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[item] += 1\n\n    # return the dictionary containing frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in frequency:\n                frequency[subitem] += 1\n            else:\n                frequency[subitem] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for elem in list1:\n        # if the element is a list, recursively call the function\n        if isinstance(elem, list):\n            # recursively call the function with the element as the argument\n            freq_dict.update(frequency_lists(elem))\n        # if the element is already in the dictionary, increment its frequency by 1\n        elif elem in freq_dict:\n            freq_dict[elem] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[elem] = 1\n            \n    # return the dictionary of frequency\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Initialize an empty dictionary\n    freq_dict = {}\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is not already in the dictionary, add it with a value of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # If the element is already in the dictionary, increment its value by 1\n        else:\n            freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the flattened list\n    for item in list1:\n        # check if the element is already in the dictionary\n        if item in freq_dict:\n            # increment the frequency of the element by 1\n            freq_dict[item] += 1\n        else:\n            # otherwise, add the element to the dictionary with a frequency of 1\n            freq_dict[item] = 1\n    \n    # return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # Initialize an empty string to hold the binary equivalent\n    binary = \"\"\n    \n    # Convert the decimal number to its binary equivalent\n    while n > 0:\n        # Extract the last digit of the decimal number\n        digit = n % 2\n        # Convert the last digit to a string and add it to the binary string\n        binary = str(digit) + binary\n        # Remove the last digit from the decimal number\n        n //= 2\n        \n    # Return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to store the binary equivalent\n    binary_str = \"\"\n    # loop while n is greater than 0\n    while n > 0:\n        # get the remainder of n divided by 2\n        remainder = n % 2\n        # convert the remainder to its string representation\n        remainder_str = str(remainder)\n        # add the remainder string to the beginning of the binary_str\n        binary_str = remainder_str + binary_str\n        # remove the last character from n\n        n = n // 2\n    # return the binary_str\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty list to store the binary equivalent of the number\n    binary_list = []\n\n    # Convert the decimal number to binary using recursion\n    def convert(num, length=0):\n        # Base case: if the number is 0, return an empty list\n        if num == 0:\n            return []\n\n        # Base case: if the length of the binary list is equal to the length of the input number\n        if len(binary_list) == length:\n            # Pad the binary list with leading zeros to make it a string of length length\n            binary_list.insert(0, '0' * (length - len(binary_list)))\n\n        # If the number is not 0, convert the last digit of the number to binary\n        if num % 2 == 1:\n            binary_list.insert(0, '1')\n\n        # Recursively call the function with the integer division of the number by 2 and the length of the binary list incremented\n        convert(num // 2, length + 1)\n\n    # Call the recursive function with the input number as the argument\n    convert(n)\n\n    # Convert the binary list to a string and return it\n    return ''.join(binary_list)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Check if the input is negative or not\n    if n < 0:\n        # Convert negative to binary using two's complement and then convert the result to binary using Python's built-in bin() function\n        binary_complement = bin(~n)[2:].zfill(n.bit_length())\n        binary_number = bin(~int(binary_complement, 2) + 1)[2:].zfill(n.bit_length())\n    else:\n        # Convert positive number to binary using Python's built-in bin() function\n        binary_number = bin(n)[2:].zfill(n.bit_length())\n\n    return binary_number"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    # Convert decimal number to binary string\n    binary_str = bin(n)[2:]\n    # Remove leading zeros and reverse the string\n    return binary_str[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    # Convert decimal number to binary string\n    binary_str = bin(n)[2:]\n\n    # Pad binary string with leading zeros if necessary\n    if len(binary_str) < len(str(n)):\n        binary_str = '0'*(len(str(n)) - len(binary_str)) + binary_str\n\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Define the conversion dictionary\n    conversion_dict = {'0': '0', '1': '1', '2': '10', '3': '11', '4': '100', '5': '101', '6': '110', '7': '111', '8': '1000', '9': '1001', 'A': '1010', 'B': '1011', 'C': '1100', 'D': '1101', 'E': '1110', 'F': '1111'}\n    # Initialize an empty string to store the binary equivalent\n    binary_equivalent = ''\n    # Loop through each digit of the number\n    for digit in str(n):\n        # Check if the digit is in the conversion dictionary\n        if digit.upper() in conversion_dict:\n            # Append the corresponding binary digit to the binary equivalent string\n            binary_equivalent += conversion_dict[digit.upper()]\n    # Return the binary equivalent string\n    return binary_equivalent"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome number.\n    \"\"\"\n    # Initialize variables\n    palindrome = num\n    smallest_palindrome = num - 1\n\n    # Check if the number is a palindrome\n    while palindrome > 9:\n        palindrome = str(palindrome)\n        palindrome = int(palindrome[::-1])\n        if palindrome == num:\n            return smallest_palindrome\n\n    # Check for even digits and palindromes\n    while num % 10 == 0:\n        num -= 1\n        if num > 9:\n            return smallest_palindrome\n\n    # Check for odd digits and palindromes\n    while num > 9:\n        if num % 2 == 1:\n            num -= 1\n            break\n        num //= 10\n\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if is_palindrome(num):\n        return num\n\n    # Check if the number is even. If it is, add 1 to it.\n    if num % 2 == 0:\n        num += 1\n\n    # Initialize variables.\n    largest_palindrome = 0\n    smallest_palindrome = num + 1\n\n    # Iterate over possible palindromes.\n    while largest_palindrome < num:\n        current_palindrome = largest_palindrome + smallest_palindrome\n        if is_palindrome(current_palindrome):\n            largest_palindrome = current_palindrome\n        else:\n            smallest_palindrome = current_palindrome\n\n    # Return the next smallest palindrome.\n    return largest_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if num is odd\n    if num % 2 == 1:\n        # If it's odd, start with the smallest odd number and increment by 1\n        palindrome = num + 1\n    else:\n        # If it's even, start with the smallest even number and increment by 2\n        palindrome = num + 2\n    # Check if palindrome is a palindrome\n    while palindrome > 9 and palindrome % 10 == 0:\n        palindrome //= 10\n    # If it is a palindrome, return it\n    if palindrome > 9:\n        return next_smallest_palindrome(palindrome)\n    else:\n        return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_num_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_num_str)\n    # Add 1 to the reversed number and check if it is a palindrome\n    next_num = reversed_num + 1\n    if str(next_num) == str(next_num)[::-1]:\n        return next_num\n    else:\n        return next_smallest_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Returns True if the given number is a palindrome, False otherwise.\n    \"\"\"\n    if num < 0:\n        num = abs(num)\n    else:\n        num = str(num)\n    return num == num[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the specified number, if it exists.\n    \"\"\"\n    smallest_palindrome = None\n    n = 0\n    while smallest_palindrome is None:\n        n += 1\n        # Find the next smallest palindrome by incrementing the number by 1 and checking if it is a palindrome\n        num += 1\n        if is_palindrome(num):\n            smallest_palindrome = num\n    return smallest_palindrome\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    else:\n        num = int(sys.argv[1])\n        next_smallest_palindrome = next_smallest_palindrome(num)\n        print(f\"The next smallest palindrome of {num} is {next_smallest_palindrome}.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    # Convert the given number to a string and reverse it\n    num_str = str(num)[::-1]\n    # Initialize two variables to keep track of the current palindrome and the next smallest palindrome\n    current_palindrome = int(num_str)\n    next_palindrome = current_palindrome - 1\n    # Check if the next smallest palindrome is less than 10 (i.e. it is not a palindrome)\n    while str(next_palindrome)[-1] == str(next_palindrome)[-2]:\n        # Increment the next palindrome by 1 and check if it is a palindrome\n        next_palindrome += 1\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is less than 10\n    if num < 10:\n        return num\n\n    # Check if the number is less than 100\n    if num < 100:\n        num = str(num)\n        if num[0] == '9':\n            return 100\n        else:\n            return int(num[:2] + str(int(num[:2]) + 1))\n\n    # Check if the number is less than 1000\n    if num < 1000:\n        num = str(num)\n        if num[0] == '9' and num[1] == '9':\n            return 1000\n        elif num[0] == '9':\n            return 1001\n        else:\n            return int(num[:2] + str(int(num[:2]) + 1))\n\n    # Check if the number is less than 10000\n    if num < 10000:\n        num = str(num)\n        if num[0] == '9' and num[1] == '9' and num[2] == '9':\n            return 10000\n        elif num[0] == '9' and num[1] == '9':\n            return 10001\n        elif num[0] == '9':\n            return 10002\n        else:\n            return int(num[:3] + str(int(num[:3]) + 1))\n\n    # Check if the number is less than 100000\n    if num < 100000:\n        num = str(num)\n        if num[0] == '9' and num[1] == '9' and num[2] == '9' and num[3] == '9':\n            return 100000\n        elif num[0] == '9' and num[1] == '9' and num[2] == '9':\n            return 100001\n        elif num[0] == '9' and num[1] == '9':\n            return 100002\n        elif num[0] == '9':\n            return 100003\n        else:\n            return int(num[:4] + str(int(num[:4]) + 1))\n\n    # If the number is greater than 100000, return the last digit of the number + 1.\n    return int(str(num)[-1] + str(int(str(num)[-1]) + 1))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_num = int(10**len(str(num)))\n    for i in range(max_num):\n        if is_palindrome(i + num):\n            return i + num\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    # convert the input to a string and reverse it\n    num_str = str(num)[::-1]\n    # find the largest palindrome smaller than the input number\n    for i in range(10, 100):\n        for j in range(10, 100):\n            if i*1000 + j*100 <= num:\n                break\n            # check if the palindrome is a palindrome of the same length as the input number\n            palindrome = str(i*1000 + j*100)[::-1]\n            if len(palindrome) == len(num_str):\n                # if it is, check if it's a smaller palindrome than the previous smallest palindrome\n                if int(palindrome) < int(num_str):\n                    # if it is, return it\n                    return int(palindrome)\n    # if there are no smaller palindromes, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize variables\n    largest_palindrome = 0\n    smallest_palindrome = 1000000000\n    smallest_palindrome_index = -1\n    palindrome = num\n    \n    # Loop through all palindromes and compare them to the current palindrome\n    while True:\n        if palindrome == str(palindrome)[::-1]:\n            if palindrome > largest_palindrome:\n                largest_palindrome = palindrome\n            if palindrome < smallest_palindrome:\n                smallest_palindrome = palindrome\n                smallest_palindrome_index = num - 1\n            palindrome = num + 1\n        else:\n            palindrome += 1\n        \n        # Check if palindrome is less than or equal to the specified integer\n        if palindrome > num:\n            break\n        \n        # Check if palindrome is greater than largest palindrome found so far\n        if palindrome > largest_palindrome:\n            break\n    \n    # Return the next smallest palindrome if it exists\n    if smallest_palindrome_index == -1:\n        return -1\n    else:\n        return smallest_palindrome_index + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array `arr` and an integer `k` as inputs.\n    It returns the kth element of the array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return 'The index is greater than the length of the array.'\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert the array to a list to be able to sort it\n    arr_list = list(arr)\n\n    # Sort the array\n    arr_list.sort()\n\n    # Return the kth element from the sorted array\n    return arr_list[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x <= pivot]\n        right = [x for x in arr if x > pivot]\n        return kth_element(left, k) + kth_element(right, k - len(left) - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The array to search for the kth element.\n    k (int): The index of the element to find (1-based indexing).\n\n    Returns:\n    The kth element in the array. If the index is out of range, return None.\n    '''\n\n    # Check if the index is out of range\n    if k < 1 or k > len(arr):\n        return None\n\n    # Initialize a variable to keep track of the current index\n    curr_index = 1\n\n    # Loop through the array, starting from the first element\n    for element in arr:\n        # If we have found the kth element, return it\n        if curr_index == k:\n            return element\n\n        # Increment the current index\n        curr_index += 1\n\n    # If we have made it this far, the kth element was not found\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"The kth element is not present in the array.\"\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input. k should be a positive integer and should be less than or equal to the length of the array.\"\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i > 0 and word[i-1] == '_':\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word[i].upper() if i > 0 else word[i].lower() for i in range(len(word)))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    parts = word.split(\"_\")\n    camel_case = \"\"\n    for i in range(len(parts)):\n        if i == 0:\n            camel_case += parts[i].capitalize()\n        else:\n            camel_case += parts[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_word = word.split('_')[0]\n    return first_word.lower() + word[len(first_word):].capitalize()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Args:\n        word: A string in snake case format.\n\n    Returns:\n        A string in camel case format.\n    \"\"\"\n    camel_case = \"\"\n    capitalize_next = True\n\n    for i, char in enumerate(word):\n        if char.isupper():\n            if capitalize_next:\n                camel_case += char.lower()\n                capitalize_next = False\n            else:\n                camel_case += char\n        else:\n            if capitalize_next:\n                camel_case += char.upper()\n                capitalize_next = False\n            else:\n                camel_case += char\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Initialize a list to store the camel case string\n    camel_case_string = []\n    # Iterate over the words in the snake case string\n    for i, char in enumerate(word):\n        # If the character is a capital letter, add a space and convert it to lowercase\n        if char.isupper():\n            camel_case_string.append(char.lower())\n        # If the character is a lowercase letter, append it to the camel case string\n        else:\n            camel_case_string.append(char)\n    # Convert the list to a string and return it\n    return ''.join(camel_case_string)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words using underscores as separators\n    words = word.split('_')\n\n    # Capitalize the first letter of each word and join them with an empty string\n    camel_case_word = ''.join([word.capitalize() for word in words])\n\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_words = [word.capitalize() for word in words]\n    return ''.join(camel_words)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    table = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Initialize the first row and first column of the table to 0\n    table[0][0] = 1\n\n    # Fill in the remaining values of the table using the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if table[i-1][j] == 1:\n                table[i][j] = 1\n            elif table[i-1][j-1] == 1:\n                table[i][j] = 2\n            else:\n                table[i][j] = 0\n\n    # Return the value of the last row and last column of the table\n    return table[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "Write a Python function to calculate this Eulerian number."
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 0:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sympy as sym\n\ndef eulerian_num(A):\n    n = A.shape[0]\n    m = A.shape[1]\n\n    A = sym.Matrix(A)\n\n    # Create a symbolic variable for each element of the matrix\n    x = sym.symbols('x:{},{}'.format(n*m, n*m))\n\n    # Create a symbolic determinant function for the matrix\n    det_func = sym.lambdify(x, sym.det(A), modules='numpy')\n\n    # Create a symbolic list of symbols for the determinant\n    det_sym = sym.symbols('det')\n\n    # Compute the determinant of the matrix using sympy\n    det_val = det_func(det_sym)\n\n    # Calculate the Eulerian number\n    euler_num = (-1)**(n+m) * sym.sqrt(2) * det_val\n\n    # Return the value of the Eulerian number\n    return euler_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n\n    # Iterate through the number of layers\n    for i in range(1, n+1):\n        # Calculate the next layer\n        b = 2 * a - b\n        # Calculate the next layer\n        c = 2 * b - c\n        # Calculate the next layer\n        a = 2 * c - a\n\n    # Calculate the final result\n    a = 2 * a - b\n    a = 2 * a - c\n    a = 2 * a - a\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) is a special number in number theory and combinatorics. It is the number of\n    all subsets of {1, 2,..., n} with cardinality less than or equal to m.\n\n    For example, let n = 3 and m = 2. Then, the set of all subsets of {1, 2, 3} with cardinality less than or equal to 2\n    is {1, 2}, which has cardinality 2. There are 2 such subsets, which is the value of a(n, m).\n    \"\"\"\n    return n ** m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0]*(m+1) for i in range(n+1)]\n    for i in range(1, n+1):\n        a[i][1] = 1\n    for j in range(1, m+1):\n        a[1][j] = 1\n    for i in range(2, n+1):\n        for j in range(2, m+1):\n            if a[i-1][j] and a[i][j-1]:\n                a[i][j] = a[i-1][j] + a[i][j-1]\n    return a[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    if n % m == 0:\n        return 0\n    else:\n        return (n - 1) // m + 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Compute the Eulerian number a(n, m) for the given values of n and m.\n\n    The Eulerian number is defined as the smallest number k such that a(n, k) < a(n, m).\n    \"\"\"\n\n    def binomial(n, k):\n        \"\"\"\n        Compute the binomial coefficient C(n, k).\n        \"\"\"\n        if k > n // 2:\n            k = n - k\n        f = 1\n        for i in range(1, k + 1):\n            f *= (n - i + 1) // i\n        return f\n\n    def a(n, k):\n        \"\"\"\n        Compute the value of a(n, k) for the given values of n and k.\n        \"\"\"\n        return binomial(n, k) * (n - k + 1) // k\n\n    def eulerian_sum(n, m):\n        \"\"\"\n        Compute the sum of all values of a(n, k) for 1 <= k <= m.\n        \"\"\"\n        return sum(a(n, k) for k in range(1, m + 1))\n\n    numerator = (n * (n - 1)) // 2\n    denominator = 2 * m + 1\n    result = numerator / denominator\n    result = round(result, 10)\n\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Base cases\n    if n == 0:\n        return 0\n    if m == 0:\n        return 0\n\n    # Initialize the memoization table\n    memo = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Calculate a(n, m) using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            memo[i][j] = memo[i-1][j] + memo[i][j-1]\n\n    # Return the value of a(n, m)\n    return memo[n][m]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Use the built-in sorted function to sort the sublist\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if type(element) == bool:\n            if element:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup = test_tup + (test_list[i],)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the list to tuple\n    test_tuple = tuple(test_list)\n    \n    # Append the list to the tuple\n    new_tuple = test_tup + test_tuple\n    \n    return new_tuple"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n\n    while i < len(num1):\n        result.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        result.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        result.append(num3[k])\n        k += 1\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # sort the input lists using heapq\n    num1 = sorted(heapq.merge(num1, []))\n    num2 = sorted(heapq.merge(num2, []))\n    num3 = sorted(heapq.merge(num3, []))\n    \n    # combine the sorted lists into a single list\n    merged_list = []\n    while num1 or num2 or num3:\n        if num1 and not num2 and not num3:\n            merged_list.append(num1.pop(0))\n        elif not num1 and num2 and not num3:\n            merged_list.append(num2.pop(0))\n        elif not num1 and not num2 and num3:\n            merged_list.append(num3.pop(0))\n        else:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                merged_list.append(num1.pop(0))\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                merged_list.append(num2.pop(0))\n            else:\n                merged_list.append(num3.pop(0))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all the lists into one list\n    merged_list = num1 + num2 + num3\n\n    # Create a min heap of the sorted list\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Pop the min heap and append it to a new list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input and merges them into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif heapq.heappop(num1) > heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n            heapq.heappush(merged_list, heapq.heappop(num2))\n            heapq.heappush(merged_list, heapq.heappop(num3))\n\n    while num1:\n        heapq.heappush(merged_list, heapq.heappop(num1))\n    while num2:\n        heapq.heappush(merged_list, heapq.heappop(num2))\n    while num3:\n        heapq.heappush(merged_list, heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function merges three sorted lists into a single sorted list.\n    '''\n    # Merge the first two lists\n    merged = heapq.merge(num1, num2)\n    # Merge the third list with the merged list\n    merged = heapq.merge(merged, num3)\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one list\n    merged_list = num1 + num2 + num3\n\n    # Use heapq to sort the merged list\n    heapq.heapify(merged_list)\n\n    # Return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Initialize an empty list to store the merged sorted list\n    merged_list = []\n    \n    # Initialize two heaps to store the three input lists\n    min_heap1 = []\n    min_heap2 = []\n    \n    # Convert the input lists to heaps\n    for num in num1:\n        heapq.heappush(min_heap1, num)\n    for num in num2:\n        heapq.heappush(min_heap2, num)\n    \n    # Merge the heaps into the merged list\n    while min_heap1 and min_heap2:\n        if min_heap1[0] < min_heap2[0]:\n            heapq.heappush(merged_list, heapq.heappop(min_heap1))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(min_heap2))\n    \n    # Add the remaining elements from the heaps to the merged list\n    while min_heap1:\n        heapq.heappush(merged_list, heapq.heappop(min_heap1))\n    while min_heap2:\n        heapq.heappush(merged_list, heapq.heappop(min_heap2))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n    # Sort the merged list using heapq module\n    heapq.heapify(merged_list)\n    # Return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into one sorted list using heapq.merge()\n    sorted_list = heapq.merge(heapq.merge(num1,num2),num3)\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize an empty list to store the rotated binary string\n    rotated_binary_str = []\n    # iterate n times to rotate the binary string\n    for i in range(n):\n        # concatenate the last character of the binary string with the first character and add the result to the rotated binary string\n        rotated_binary_str.append(s[-1] + s[0])\n        # remove the first character from the binary string\n        s = s[1:]\n    # initialize an empty list to store the numbers with odd values\n    odd_values = []\n    # iterate through the rotated binary string\n    for char in rotated_binary_str:\n        # if the character is odd, add it to the odd_values list\n        if char % 2 == 1:\n            odd_values.append(int(char))\n    # return the length of the odd_values list\n    return len(odd_values)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # convert the binary string to a list of integers\n    s_list = [int(i) for i in s]\n    # rotate the list by n positions using slicing\n    rotated_list = s_list[n:] + s_list[:n]\n    # count the number of odd values in the rotated list\n    count = sum([1 for i in rotated_list if i % 2!= 0])\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    rotations = n % len(s) # number of rotations required\n    result = 0 # initialize the result variable to 0\n    for i in range(len(s)):\n        # rotate the binary string by i positions and check if the last digit is odd\n        if int(s[i+rotations]) % 2 == 1:\n            result += 1 # increment the result variable if the digit is odd\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of integers\n    s = [int(bit) for bit in s]\n    # Initialize the count to 0\n    count = 0\n    # Iterate n times\n    for i in range(n):\n        # Rotate the list by one position to the left\n        s.append(s.pop(0))\n        # Iterate through the list to check for odd values\n        for num in s:\n            if num % 2!= 0:\n                count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    n = n%len(s) #cyclic rotation by n times\n    for i in range(n):\n        temp = 0\n        for j in range(len(s)):\n            if s[j] == '1':\n                temp += 1\n        count += temp\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # count the number of odd numbers in the binary string s after rotating n times\n    count = 0\n    for i in range(n):\n        count += sum(int(digit) for digit in s)\n        s = ''.join(str(int(digit) ^ 1) for digit in s)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        for j in range(len(s)):\n            if s[j] == '0':\n                s = '1' + s\n            else:\n                s = '0' + s\n        count += s.count('1')\n        s = s[::-1]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    count = 0\n    for i in range(n):\n        count += len(s)\n    count += n - len(s)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Convert the string to a binary string\n    binary_str = bin(int(s))[2:]\n\n    # If the binary string is not divisible by 2^n, pad it with zeros\n    while len(binary_str) % (2**n)!= 0:\n        binary_str = '0' + binary_str\n\n    # Split the binary string into groups of n digits\n    binary_groups = [binary_str[i:i+n] for i in range(0, len(binary_str), n)]\n\n    # Initialize a count variable to 0\n    count = 0\n\n    # Loop through the groups and check if there are any odd values\n    for binary_group in binary_groups:\n        odd_values = any(int(digit) % 2 == 1 for digit in binary_group)\n        if odd_values:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(set(sublist))\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a nested list as input and returns a list of common elements in the nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i!= j:\n                if set(i).intersection(set(j)):\n                    common.append(i)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        common_elements = set()\n        for element in nestedlist[0]:\n            if element in common_elements:\n                common_elements.remove(element)\n            else:\n                common_elements.add(element)\n        return common_in_nested_lists(nestedlist[1:])"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Define a set to store the common elements\n    common = set()\n\n    # Iterate through each nested list\n    for sublist in nestedlist:\n\n        # Check if the sublist is a list\n        if isinstance(sublist, list):\n\n            # Check if the sublist is not empty\n            if sublist:\n\n                # Iterate through each element in the sublist\n                for element in sublist:\n\n                    # Check if the element is not already in the set\n                    if element not in common:\n\n                        # Add the element to the set\n                        common.add(element)\n\n    # Return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to store the common elements\n    common = set()\n\n    # loop through the nested lists\n    for lst in nestedlist:\n        # loop through the list elements\n        for elem in lst:\n            # if the element is not in the set, add it to the set\n            if elem not in common:\n                common.add(elem)\n\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common:\n                    common.remove(nestedlist[i][j][k])\n                else:\n                    common.append(nestedlist[i][j][k])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    set1 = set()\n    set2 = set()\n    for sublist in nestedlist:\n        for item in sublist:\n            set1.add(item)\n    for item in set1:\n        if item in set2:\n            set2.remove(item)\n    return list(set2)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist)):\n                if j == k:\n                    continue\n                for l in range(len(nestedlist[k])):\n                    if nestedlist[i][j] == nestedlist[k][l]:\n                        common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Check if the input string consists of only digits and the input starts with a digit\n    if text.isdigit() and text[0].isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # check if the string is empty or contains only whitespace\n    if not text.strip():\n        return False\n\n    # check if the string starts with a minus sign\n    if text[0] == '-':\n        text = text[1:]\n\n    # check if the string contains any non-numeric characters\n    for char in text:\n        if not char.isdigit():\n            return False\n\n    # check if the string is a valid integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Loop through each dictionary in the list\n    for i in list1:\n        # Check if the dictionary is empty\n        if len(i) == 0:\n            # If it is empty, return False\n            return False\n\n    # If all dictionaries in the list are not empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if not dictionary:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n        else:\n            pass\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_flag = True\n    for item in list1:\n        if item!= {}:\n            empty_flag = False\n            break\n    return empty_flag"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the result variable\n    result = 0\n    # Iterate over the list and add each integer to the result variable\n    for num in nums_list:\n        result += num\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize a variable to store the sum of the elements in the tuple\n    total = 0\n    # iterate over each element in the tuple\n    for num in nums:\n        # add the element to the total\n        total += num\n    # return the total as the single integer value of the tuple\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not all(isinstance(x, int) and x > 0 for x in nums):\n        raise ValueError(\"All elements in the tuple must be positive integers.\")\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string to hold the final result\n    result = \"\"\n    # Loop through the tuple of positive integers\n    for num in nums:\n        # Convert the current integer to a string and add it to the result string\n        result += str(num)\n    # Convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as an argument and returns a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                # If the item is not a float, convert it to a string and try again\n                item = str(item)\n                try:\n                    float(item)\n                except ValueError:\n                    print(f\"Unable to convert {item} to a float.\")\n                else:\n                    print(f\"{item} converted to a float.\")\n            else:\n                print(f\"{item} already is a float.\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float, complex]:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                pass\n            else:\n                row[row.index(item)] = float(item)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Create an empty list to store the converted elements\n    converted_list = []\n    # Loop through each element in the list of lists\n    for element in test_list:\n        # Convert each element to a float if possible\n        if isinstance(element, str):\n            try:\n                converted_list.append(float(element))\n            except ValueError:\n                continue\n        elif isinstance(element, (int, float)):\n            converted_list.append(element)\n        else:\n            # If the element cannot be converted, continue to the next element\n            continue\n    return converted_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sub_list in test_list:\n        for element in sub_list:\n            try:\n                float(element)\n                sub_list[test_list.index(sub_list)] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if type(element).__module__ == 'numpy':\n                continue\n            if isinstance(element, (int, float)):\n                continue\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                sublist[sublist.index(element)] = float(element)\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Define a set to store the unique elements of the array\n    unique_elements = set()\n\n    # Iterate over the array and add unique elements to the set\n    for element in arr:\n        unique_elements.add(element)\n\n    # Check if there is only one unique element in the set\n    if len(unique_elements) == 1:\n        return list(unique_elements)[0]\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n    if count == 1:\n        return arr[0]\n    else:\n        return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the counts of each element in the array\n    counts = {}\n\n    # Iterate through the array and count the occurrences of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # Iterate through the array again and find the element that appears only once\n    for num in arr:\n        if counts[num] == 1:\n            return num\n\n    # If we get here, no element appears only once\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    # Find the last element of the array\n    last_elem = arr[-1]\n    \n    # Initialize a set to keep track of the elements that appear only once\n    unique_elems = set()\n    \n    # Loop through the array\n    for elem in arr:\n        # If the element is not in the set of unique elements, add it\n        if elem not in unique_elems:\n            unique_elems.add(elem)\n        # If the element is in the set of unique elements, we have found the first element that appears only once\n        else:\n            return elem\n    \n    # If we get here, we have not found the first element that appears only once\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    # initialize a dictionary to store the frequency of each element\n    freq = {}\n    # iterate over the array, updating the frequency of each element\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    # iterate over the array again, finding the element that appears only once\n    for i in range(n):\n        if freq[arr[i]] == 1:\n            return arr[i]\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # search for the smallest element that appears only once in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] == min_val:\n            return min_val\n    \n    # if no such element is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        mid = (i + j) // 2\n\n        if mid > i and arr[mid] == arr[mid - 1]:\n            i = mid + 1\n        elif mid < j and arr[mid] == arr[mid + 1]:\n            j = mid\n        else:\n            return arr[mid]\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return -1\n    \n    # check if there is any pair in the array\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    \n    # check if there is any element that appears only once\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return -1\n        elif arr[i] == arr[i+2]:\n            return arr[i]\n    \n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to keep track of the count of each element in the array\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element that appears only once in the array\n    for num in arr:\n        if count_dict[num] == 1:\n            return num\n    \n    # If no element appears only once in the array, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Find the first and last indices of the element that appears only once\n    first_index = 0\n    last_index = len(arr) - 1\n    while first_index < last_index:\n        mid_index = (first_index + last_index) // 2\n        if arr[mid_index]!= arr[mid_index + 1]:\n            last_index = mid_index\n        else:\n            first_index = mid_index + 1\n    \n    # Return the element that appears only once\n    return arr[first_index]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, return the maximum absolute product of the numbers in pairs.\n    \"\"\"\n    max_product = float('-inf')\n    for tup in lst:\n        if len(tup) == 2:\n            product = abs(tup[0]) * abs(tup[1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0] * list1[j][1])\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][0] - list1[j][0])\n            if diff > max_abs_product:\n                max_abs_product = diff\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables\n    max_product = 0\n    current_product = 1\n    \n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Check if the tuple is of length 2\n        if len(list1[i]) == 2:\n            # Calculate the product of the numbers in the tuple\n            product = list1[i][0] * list1[i][1]\n            # Calculate the absolute value of the product\n            product_abs = abs(product)\n            # Check if the absolute value of the product is greater than the current maximum\n            if product_abs > max_product:\n                # Update the maximum product\n                max_product = product_abs\n                # Update the current product to the product of the current tuple\n                current_product = product\n    \n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i] * lst[j])\n            if product > max_product:\n                max_product = product\n                max_pair = (lst[i], lst[j])\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            \n            # Update the maximum product if the current product is greater\n            if product > max_product:\n                max_product = product\n                current_product = product\n            \n            # Update the current product\n            current_product *= abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            temp = lst[i][0] * lst[j][1]\n            if temp > max_product:\n                max_product = temp\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    max_product = 0\n    temp = 0\n    \n    # Iterate through the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the two numbers\n            absolute_product = abs(list1[i] * list1[j])\n            # Update the maximum product found so far\n            max_product = max(max_product, absolute_product)\n            # Update the temporary variable to store the product of the two numbers\n            temp = max(temp, list1[i] * list1[j])\n    \n    # Return the maximum absolute product found\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for i in range(1, limit):\n        if i < 1000:\n            if is_amicable(i):\n                amicable_sum += i\n    \n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to any other number in the specified range.\n    '''\n    if num < 1000:\n        for i in range(1, num):\n            if (num % i == 0) and (num / i!= i):\n                return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Function to check if a given number is amicable or not.\n    \"\"\"\n    sum_of_proper_divisors = sum(range(1, num))\n    return sum_of_proper_divisors == num\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Checks whether a given number is an amicable number.\n    \"\"\"\n    s = sum(divisors(num))\n    return s == num\n\ndef divisors(n):\n    \"\"\"\n    Returns the set of all divisors of a given number.\n    \"\"\"\n    divs = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs.add(i)\n            divs.add(n//i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_numbers.add(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable = 0\n    for num in range(1, limit):\n        if is_amicable(num):\n            sum_of_amicable += num\n    return sum_of_amicable\n\n\ndef is_amicable(num):\n    \"\"\"\n    Function to check if a given number is an amicable number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Function to sum all the amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i == 1 or is_prime(i):\n            continue\n        for j in range(1, limit+1):\n            if j == 1 or is_prime(j):\n                continue\n            if i + j == 1 or is_prime(i+j):\n                continue\n            if i == j:\n                continue\n            if is_prime(i+j):\n                amicable_sum += i + j\n    return amicable_sum\n\n\ndef main():\n    limit = 200\n    print(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_amicable_pair(num1, num2):\n    if num1 == num2:\n        return False\n    elif num1 < num2:\n        for i in range(num1, num2):\n            if num1 % i == 0 and num2 % i == 0 and i!= num1:\n                return True\n        return False\n    else:\n        for i in range(num2, num1):\n            if num1 % i == 0 and num2 % i == 0 and i!= num2:\n                return True\n        return False\n\n\ndef sum_amicable_numbers(limit):\n    amicable_sum = 0\n    for num1 in range(1, limit + 1):\n        for num2 in range(num1, limit + 1):\n            if is_amicable_pair(num1, num2):\n                amicable_sum += num1 + num2\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Define a list to store all numbers from 1 to the limit\n    numbers = list(range(1, limit+1))\n\n    # Define a function to check if a number is amicable\n    def is_amicable(num):\n        \"\"\"\n        Check if a given number is amicable or not.\n        \"\"\"\n        # Check if the number is divisible by any of its factors\n        factors = [i for i in range(2, int(num**0.5)+1) if num % i == 0]\n        return len(factors) == 2\n\n    # Loop through the list and check if each number is amicable\n    amicable_sum = 0\n    for num in numbers:\n        if is_amicable(num):\n            amicable_sum += num\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_amicable_number(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef amicable_numbers_sum(limit):\n    total = 0\n    for num in range(1, limit):\n        if is_amicable_number(num):\n            total += num\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_amicable_number(num):\n    \"\"\"\n    Helper function to check if a number is amicable or not\n    \"\"\"\n    if num == 1:\n        return False\n    if num < 12:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for i in range(1, limit+1):\n        if is_amicable_number(i):\n            sum_amicable += i\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_amicable_pair(a, b):\n    \"\"\"\n    Determine if a and b are amicable numbers.\n    \"\"\"\n    return sum([a, b]) == 1000\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if is_amicable_pair(num, sum(range(1, num))):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Compute the angle of a complex number.\n    \"\"\"\n    # Convert the complex numbers to polar coordinates\n    r = cmath.sqrt(a**2 + b**2)\n    theta = cmath.phase(a + b*1j)\n\n    # Convert the polar coordinates to degrees\n    theta = theta.real*180/cmath.pi\n\n    return theta"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as input, a and b, and returns the angle of the complex number a + b.\n    '''\n    angle = cmath.phase(a+b)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two real numbers a and b as input and returns the angle of the complex number as a float in radians.\n    '''\n\n    # Complex number with a and b as real and imaginary parts\n    z = a + b*1j\n    \n    # Calculate the angle using the cmath module\n    angle = cmath.phase(z)\n    \n    return float(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = round(angle, 6)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Calculate the angle of a complex number in radians.\n\n    Parameters:\n        a (complex): a complex number\n        b (complex): another complex number\n\n    Returns:\n        float: the angle of the complex number in radians\n    \"\"\"\n    return cmath.phase(a * b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = round(angle.real, 4)\n    \n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    count = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        if count > max_diff:\n            max_diff = count\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    dp = [[0]*n for _ in range(n)]\n\n    # Initialize the first row and column\n    for i in range(n):\n        dp[i][i] = 0\n\n    # Fill the rest of the table\n    for i in range(1, n):\n        for j in range(i):\n            if string[i] == string[j]:\n                # If the characters are the same, the difference is 0\n                dp[i][j] = dp[j][i]\n            elif string[i] == '0':\n                # If the characters are different, the difference is 1\n                dp[i][j] = dp[j][i] + 1\n            else:\n                # If the characters are different, the difference is 2\n                dp[i][j] = max(dp[j][i] + 1, dp[i][j])\n\n    return dp[n-1][0]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == 0 and count_1 == 0:\n            continue\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    This function takes a binary string as input and returns the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    count_zero = 0\n    count_one = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n\n    max_diff = 0\n\n    for i in range(n-1):\n        if string[i] == '0' and string[i+1] == '1':\n            max_diff = max(max_diff, count_zero-count_one)\n        elif string[i] == '1' and string[i+1] == '0':\n            max_diff = max(max_diff, count_one-count_zero)\n        count_zero -= 1 if string[i] == '0' else 0\n        count_one -= 1 if string[i] == '1' else 0\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        count_0s = 0\n        count_1s = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0s += 1\n            elif string[j] == '1':\n                count_1s += 1\n            else:\n                break\n            if count_0s == count_1s:\n                diff = abs(count_0s - count_1s)\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    # initialize variables to store count of 0s and 1s\n    zeros = 0\n    ones = 0\n\n    # iterate through the string and count number of 0s and 1s\n    for char in string:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n\n    # find maximum difference between number of 0s and number of 1s\n    max_diff = abs(zeros - ones)\n\n    # iterate through the string again and update max_diff if we find a sub-string with a different number of 0s and 1s\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            sub_zeros = sub_string.count('0')\n            sub_ones = sub_string.count('1')\n            diff = abs(sub_zeros - sub_ones)\n            if diff > max_diff:\n                max_diff = diff\n\n    # return maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    max_diff = 0\n\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            diff = 0\n        else:\n            diff = 1\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # initialize variables\n    max_length = 0\n    num_0s = 0\n    num_1s = 0\n\n    # iterate over characters in the string\n    for char in string:\n        # if the current character is 0, increment the number of 0s\n        if char == '0':\n            num_0s += 1\n        # if the current character is 1, increment the number of 1s\n        elif char == '1':\n            num_1s += 1\n        # if the current character is not 0 nor 1, reset the number of 0s and 1s to 0\n        else:\n            num_0s = 0\n            num_1s = 0\n\n        # calculate the length of the sub-string\n        length = max(num_0s, num_1s)\n\n        # update the maximum length if the length is greater than the current maximum\n        max_length = max(max_length, length)\n\n    # return the maximum length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n-1):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i+1, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_common_divisors(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisor_set = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_set.add(i)\n    return sum(divisor_set)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as inputs and returns their sum of common divisors.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return i\n\n    return 0"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to check if a number is divisible by b\n    def is_divisible(n,b):\n        return n%b==0\n\n    # Function to find all common divisors of two numbers\n    def find_common_divisors(a,b):\n        divisors=[]\n        for i in range(1,b+1):\n            if is_divisible(a,i) and is_divisible(b,i):\n                divisors.append(i)\n        return divisors\n    \n    # Find the common divisors of a and b\n    common_divisors_a = find_common_divisors(a,b)\n    common_divisors_b = find_common_divisors(b,a)\n\n    # Add the common divisors of both numbers and return the result\n    return sum(common_divisors_a) + sum(common_divisors_b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_divisor(a, b):\n    \"\"\"\n    This function returns the common divisor of two numbers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef sum(a, b):\n    \"\"\"\n    This function returns the sum of common divisors of two given numbers.\n    \"\"\"\n    common_div = common_divisor(a, b)\n    return a // common_div + b // common_div\n\n\nprint(sum(12, 24))  # Output: 2"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Calculate the sum of common divisors of a and b.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\nprint(sum_of_common_divisors(12, 24)) # Output: 7"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function calculates the sum of common divisors of two given numbers using the Euclidean algorithm.\n    '''\n    \n    # Calculate the greatest common divisor of a and b using the Euclidean algorithm\n    gcd = a if b == 0 else gcd(b, a % b)\n    \n    # Calculate the sum of common divisors of a and b by dividing a by gcd\n    sum_of_common_divisors = a // gcd\n    \n    return sum_of_common_divisors\n\ndef gcd(a, b):\n    '''\n    This function calculates the greatest common divisor of two given numbers using the Euclidean algorithm.\n    '''\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def gcd(a, b):\n        \"\"\"\n        Calculate the greatest common divisor of two numbers using Euclidean algorithm.\n        \"\"\"\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    # Calculate the greatest common divisor of a and b\n    g = gcd(a, b)\n\n    # Calculate the sum of all common divisors\n    sum_common_divisors = 1\n    for i in range(2, g + 1):\n        if g % i == 0:\n            sum_common_divisors += i\n\n    return sum_common_divisors - a + b"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Check if a and b are both positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0):\n        raise ValueError('Both a and b must be positive integers.')\n\n    # Find the common divisors of a and b\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Calculate the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a % b == 0:\n        return b + sum(b, a % b)\n    else:\n        return sum(b, a % b)\n\n\nprint(sum(12, 18))  # Output: 13"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set()\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into individual words\n    long_words = [] # create an empty list to store long words\n    \n    for word in words:\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # add the word to the list if it's longer than n\n        \n    return long_words # return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): The number of characters a word must have to be included in the result.\n    words (list): A list of words.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    This function takes in a list of words and an integer n and returns a list of words that are longer than n characters.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if all rows have the same length\n    if not all(len(row) == n for row in my_matrix):\n        return False\n    # Check if all columns have the same length\n    if not all(len(row) == n for row in zip(*my_matrix)):\n        return False\n    # Check if all elements in the matrix are unique\n    if len(set(sum(my_matrix, ())))!= n**2:\n        return False\n    # Check if the sum of each row and column is equal to the sum of the matrix\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(n))\n        if row_sum!= col_sum or row_sum!= n*(n-1) or col_sum!= n*(n-1):\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check that the matrix is a square\n    if rows!= cols:\n        return False\n\n    # Check that all the elements in the matrix are distinct\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] == my_matrix[i][j-1] or \\\n               my_matrix[i][j] == my_matrix[i-1][j] or \\\n               my_matrix[i][j] == my_matrix[i-1][j-1] or \\\n               my_matrix[i][j] == my_matrix[i][j+1] or \\\n               my_matrix[i][j] == my_matrix[i+1][j] or \\\n               my_matrix[i][j] == my_matrix[i+1][j-1] or \\\n               my_matrix[i][j] == my_matrix[i+1][j+1]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= int(n ** 0.5) ** 2:\n        return False\n\n    # Check if the matrix has unique elements\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                for k in range(n):\n                    if my_matrix[i][k] == my_matrix[k][j] == my_matrix[j][i]:\n                        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # Check if the matrix is a square\n    if n!= n*n:\n        return False\n\n    # Check if the matrix is symmetric\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    # Check if the matrix is a magic square\n    # First sum the rows\n    row_sum = [0] * n\n    for i in range(n):\n        for j in range(n):\n            row_sum[i] += my_matrix[i][j]\n    # Second sum the columns\n    col_sum = [0] * n\n    for j in range(n):\n        for i in range(n):\n            col_sum[j] += my_matrix[i][j]\n    # Third, check if the sum of the first n rows is equal to the sum of the last n columns\n    if row_sum == col_sum[:n]:\n        return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is a magic square\n    # Initialize the sum of elements in the magic square to 0\n    magic_sum = 0\n    # Loop through each row in the matrix\n    for row in my_matrix:\n        # Calculate the sum of elements in the row\n        row_sum = sum(row)\n        # If the sum is not equal to the product of its elements, then it is not a magic square\n        if row_sum!= row_sum ** 2:\n            return False\n        # Add the sum of elements in the row to the magic sum\n        magic_sum += row_sum\n    \n    # Check if the magic sum is equal to the product of the elements in the magic square (which is equal to the sum of its elements)\n    if magic_sum == sum(magic_square_product(my_matrix)):\n        return True\n    else:\n        return False\n\ndef magic_square_product(my_matrix):\n    '''\n    Calculate the product of the elements in the magic square.\n    '''\n    # Initialize the product to 1\n    product = 1\n    # Loop through each element in the magic square\n    for row in my_matrix:\n        for element in row:\n            product *= element\n    # Return the product of the elements in the magic square\n    return product"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the dimensions of the matrix are 3x3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n\n    # check if all the elements of the matrix are unique\n    unique_elements = set(sum(my_matrix, []))\n    if len(unique_elements)!= 1:\n        return False\n\n    # check if the matrix is a magic square\n    for row in my_matrix:\n        if len(set(row))!= 1:\n            return False\n\n    for col in range(3):\n        col_sum = sum(my_matrix[i][col] for i in range(3))\n        if col_sum!= 15:\n            return False\n\n    for i in range(3):\n        row_sum = sum(my_matrix[i][j] for j in range(3))\n        if row_sum!= 15:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix is square\n    if rows!= cols:\n        return False\n\n    # Check if each row and column contains unique elements\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] not in my_matrix[i][:j] + my_matrix[i][j+1:] + my_matrix[i+1:][j]:\n                return False\n\n    # Check if the matrix is a magic square\n    for i in range(rows):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[:,i])\n        if row_sum!= col_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n\n    Parameters:\n    my_matrix (list of lists): The matrix to test for being a magic square.\n\n    Returns:\n    True or False: Whether the matrix is a magic square or not.\n    \"\"\"\n    # Determine the size of the matrix\n    size = len(my_matrix)\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Calculate the sum of the remaining elements\n    sum_of_remaining_elements = sum(sum(row[i] for row in my_matrix) for i in range(size))\n\n    # Check if the diagonal and remaining elements sum is the same\n    if diagonal_sum == sum_of_remaining_elements:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"The matrix is not a square.\"\n    \n    # Check if the matrix has 10 elements\n    if len(my_matrix) * len(my_matrix[0])!= 10:\n        return \"The matrix does not have 10 elements.\"\n    \n    # Calculate the sum of the first row and sum of the first column\n    row_sum = sum(my_matrix[0])\n    col_sum = sum(col for row in my_matrix for col in row)\n    \n    # Check if the sum of the first row and sum of the first column is 15\n    if row_sum!= 15 or col_sum!= 15:\n        return \"The matrix is not a magic square.\"\n    \n    # Check if the matrix is symmetrical\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= my_matrix[i][len(my_matrix) - 1 - i]:\n            return \"The matrix is not a magic square.\"\n    \n    # If all checks pass, the matrix is a magic square\n    return \"The matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    n = len(my_matrix)\n    for i in range(n):\n        # Check rows\n        for j in range(n):\n            if my_matrix[i][j]!= (i+j+1):\n                return False\n\n        # Check columns\n        for j in range(n):\n            if my_matrix[j][i]!= (i+j+1):\n                return False\n\n        # Check diagonal\n        if my_matrix[i][i]!= (n*(n-1)+i+1):\n            return False\n        if my_matrix[i][n-i-1]!= (n*(n-1)+i+1):\n            return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # find the item with the maximum frequency\n    max_freq = max(freq.values())\n    for item, freq in freq.items():\n        if freq == max_freq:\n            return item\n    \n    # if no items have the maximum frequency, return None\n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_num = max(count_dict, key=count_dict.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_num = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n            \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_count = 0\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_item = num\n            max_count = freq[num]\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)  # create a defaultdict to store frequency of each item\n    \n    # loop through each item in the list and increment its frequency in the defaultdict\n    for num in nums:\n        freq[num] += 1\n        \n    # find the item with the maximum frequency and return it\n    return max(freq, key=freq.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        count_dict[num] += 1\n\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_map[num] += 1\n        if freq_map[num] > max_freq:\n            max_freq = freq_map[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    str_vowels = set()\n\n    # Split the string into individual characters\n    for char in str1:\n        if char in vowels:\n            str_vowels.add(char)\n\n    # Convert the set of vowels to a string\n    str_vowels = ''.join(str_vowels)\n\n    # Reverse the vowels from the string\n    reversed_str = str_vowels[::-1]\n\n    # Join the reversed vowels back into the original string\n    result = str1[::-1].replace(str_vowels, reversed_str, 1)\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    rev_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            rev_str += str1[i]\n    return rev_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    reversed_string = \"\"\n    for char in string:\n        if char.lower() in vowels:\n            reversed_string = char + reversed_string\n        else:\n            reversed_string = reversed_string + char\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(string):\n    '''\n    This function takes a string as input and returns the string with only the vowels reversed.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    \n    for char in string:\n        if char not in vowels:\n            reversed_str += char\n        else:\n            index = vowels.index(char)\n            reversed_str += vowels[len(vowels)-1-index]\n            \n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reversed_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str_vowels = ''\n    for i in str1:\n        if i.lower() in vowels and i.lower() not in str_vowels:\n            str_vowels += i.lower()\n    return str_vowels[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            new_str += char.lower()\n    return new_str[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    str_tup = \"\".join(str(x) for x in tup1)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # join the tuple elements with a comma and space\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert tuple to string\n    string = str(tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of the negative numbers of a list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Initialize variables\n    num = 1\n    i = 0\n    j = 1\n    k = 2\n    hex_num = 0\n    \n    # Loop through n and calculate hexagonal number\n    while i < n:\n        hex_num = num + num + k\n        num = num + k\n        k += 2\n        i += 1\n        \n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 1\n    for i in range(n): \n        hex_num += i * 2\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 6*n*(n+1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = (n-1) * 2 * 2 - 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    def get_triangle(num):\n        \"\"\"\n        Helper function to calculate the nth triangle number.\n        \"\"\"\n        return (num * (num + 1)) / 2\n    \n    def get_hexagon(num):\n        \"\"\"\n        Helper function to calculate the nth hexagon number.\n        \"\"\"\n        return num * (2 * num - 1)\n    \n    if n < 0:\n        return None\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return get_triangle(get_hexagon(n - 1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    non_zeros = len(nums) - sum(zeros)\n    ratio = float(non_zeros) / len(nums)\n    print(\"Ratio of zeroes to non-zeroes:\", ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    \n    # iterate through the array and count the number of zeros and non-zeros\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    \n    # calculate the ratio of zeros to non-zeros\n    ratio = zeros / non_zeros\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0])\n    non_zero_count = array('i', [0])\n\n    for num in nums:\n        if num == 0:\n            zero_count.append(zero_count[-1] + 1)\n        else:\n            non_zero_count.append(non_zero_count[-1] + 1)\n\n    if non_zero_count[0] == 0:\n        return 0, 0\n\n    ratio = 0\n    for i in range(len(non_zero_count)):\n        ratio += non_zero_count[i] / zero_count[i]\n\n    return round(ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the array of integers to a string\n    arr = array('i', nums)\n    arr = arr.tostring()\n\n    # count the number of zeroes and non-zeroes\n    zeros = 0\n    non_zeros = 0\n    for char in arr:\n        if char == b'\\x00':\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    # calculate the ratio\n    if non_zeros == 0:\n        ratio = 0\n    else:\n        ratio = zeros / non_zeros\n\n    # print the result\n    print(\"Ratio of zeroes to non-zeroes:\", ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    nonzeros = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            nonzeros.append(1)\n\n    zeros_count = len(zeros)\n    nonzeros_count = len(nonzeros)\n\n    return zeros_count / nonzeros_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    zero_ratio = zero_count / non_zero_count\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list for easy access\n    nums = list(nums)\n\n    # Initialize counters for zero and non-zero values\n    zero_count = 0\n    nonzero_count = 0\n\n    # Loop through the array\n    for num in nums:\n        # Check if the number is zero\n        if num == 0:\n            # Increment the counter for zero values\n            zero_count += 1\n        else:\n            # Increment the counter for non-zero values\n            nonzero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes and return it\n    if zero_count == 0:\n        # If there are no zeroes, the ratio is infinity\n        return float('inf')\n    else:\n        return zero_count / nonzero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns a float representing the ratio of zeroes to non-zeroes in the array.\n    \"\"\"\n    # Convert the input array to an array of characters\n    char_array = array('c', nums)\n    \n    # Initialize the counters for zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    \n    # Iterate through the characters in the array and count the zeroes and non-zeroes\n    for char in char_array:\n        if char == '0':\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes and return it as a float\n    return float(zero_count) / non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the number to binary format\n    binary = bin(n)\n    \n    # Split the binary string into list of digits\n    digits = [int(digit) for digit in binary[2:]]\n    \n    # Calculate the sum of powers of 2 for each digit in the list\n    power_sum = [0] * len(digits)\n    for i in range(len(digits)):\n        for j in range(digits[i]):\n            power_sum[i] += 1\n    \n    # Check if the sum of powers of 2 is equal to the number itself\n    return power_sum == digits"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is a power of 2\n    if n == 1:\n        return True\n    if n & (n-1) == 0:\n        return False\n    # If the number is not a power of 2, we can check whether it can be represented as sum of powers of 2\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return is_Sum_Of_Powers_Of_Two(n//i)\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count <= 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # check if n is a power of 2\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n\n    # check if n is a power of 2 and if n can be represented as sum of powers of 2\n    while n & (n-1)!= 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n\n    return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if the number is a power of 2 or not\n    if n & (n-1) == 0:\n        # check if the number is a sum of non-zero powers of 2 or not\n        if n == 2**k for k in range(32):\n            return True\n        elif n == 2**k + 2**k +... + 2**(k-1) for k in range(32):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i == 2 ** i:\n                return True\n            elif i > 2 ** i:\n                return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                return is_Sum_Of_Powers_Of_Two(n//i)\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n % 2 == 0: \n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    print(\"The circumference of the circle is:\", circumference)\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        for item in sub_list:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for number in sublist:\n            result.add(number)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for sublist in test_list:\n        flatten_list.extend(sublist)\n    return set(flatten_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened.append(item)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        for num in sublist:\n            if isinstance(num, (int, float)):\n                result.append(num)\n    return result"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function takes a list of elements as input and sorts them in ascending order using the pancake sort algorithm.\n\n    The pancake sort algorithm works by dividing the list into two parts - a small pancake of elements and a large pancake of elements.\n\n    The pancake of elements is sorted in ascending order while the large pancake is sorted in descending order.\n\n    This way, the small pancake will always contain elements that are smaller than the corresponding elements in the large pancake.\n\n    The pancake sort algorithm is a simple variation of the bubble sort algorithm.\n    \"\"\"\n\n    n = len(nums)\n\n    # Starting from the second element, iterate through the list\n    for start in range(1, n):\n        # Find the maximum element in the small pancake\n        max_index = start\n        for end in range(start, n):\n            if nums[end] > nums[max_index]:\n                max_index = end\n\n        # Swap the maximum element with the element at the start index\n        nums[start], nums[max_index] = nums[max_index], nums[start]\n\n        # Find the maximum element in the large pancake\n        max_index = start\n        for end in range(start, n):\n            if nums[end] < nums[max_index]:\n                max_index = end\n\n        # Swap the maximum element with the element at the start index\n        nums[start], nums[max_index] = nums[max_index], nums[start]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Get the length of the list\n    n = len(nums)\n\n    # Iterate over the list, swapping adjacent elements if they are not in order\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n\n    # Print the sorted list\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # First, reverse the list\n    nums.reverse()\n    # Next, use the selection sort algorithm to sort the list\n    for i in range(n-1, 0, -1):\n        min_idx = 0\n        for j in range(1, i+1):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    # Finally, reverse the sorted list back to its original order\n    nums.reverse()"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of numbers using the pancake sorting algorithm.\n    '''\n\n    # Get the length of the list\n    n = len(nums)\n\n    # Bubble sort algorithm\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the unsorted part of the list\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the element at the end of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    # sort the list using bubble sort\n    for i in range(len(nums)):\n        for j in range(0, len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Create a pancake of size n\n    pancake = [n - i for i in range(n)]\n    # Reverse the pancake to sort it in descending order\n    pancake.reverse()\n    # Start the sorting process\n    while pancake:\n        # Find the first element that needs to be sorted\n        index = pancake.index(0)\n        # Swap it with the last element of the list\n        nums[index], nums[n - 1] = nums[n - 1], nums[index]\n        # Move the pancake towards the end\n        for i in range(index):\n            pancake[i] -= 1\n        for i in range(index + 1, n - 1):\n            pancake[i] -= 1\n        pancake.reverse()\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Function to reverse an array\n    def reverse(arr, start, end):\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n    \n    # Sort the array in descending order\n    for i in range(n):\n        # Find the largest element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the largest element with the current element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # Reverse the array from the current element to the end\n        reverse(nums, i+1, n-1)\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # copy the list to avoid modifying the original list\n    nums_copy = nums.copy()\n\n    # get the length of the list\n    n = len(nums_copy)\n\n    # perform the pancake sort algorithm\n    for i in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums_copy[j] > nums_copy[max_idx]:\n                max_idx = j\n\n        # swap the maximum element with the i-th element\n        nums_copy[i], nums_copy[max_idx] = nums_copy[max_idx], nums_copy[i]\n\n    # return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n    '''\n    # Loop until the list is sorted\n    while True:\n        # Find the largest element in the list\n        max_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # If the largest element is already in its correct position, we're done\n        if max_index == 0:\n            break\n\n        # Swap the largest element with the last element in the list\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n\n        # Reverse the list from the last element to the second-to-last\n        # This is a pancake swap\n        nums[max_index:] = nums[max_index:][::-1]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # create a dictionary to store count of identical items\n    count = {}\n    \n    # iterate through each list and add count of identical items to dictionary\n    for item in list1:\n        if item in list2 and item in list3:\n            if item in count:\n                count[item] += 1\n            else:\n                count[item] = 1\n    \n    # iterate through each list and add count of identical items to dictionary\n    for item in list2:\n        if item in list1 and item in list3:\n            if item in count:\n                count[item] += 1\n            else:\n                count[item] = 1\n    \n    # iterate through each list and add count of identical items to dictionary\n    for item in list3:\n        if item in list1 and item in list2:\n            if item in count:\n                count[item] += 1\n            else:\n                count[item] = 1\n    \n    # return count of identical items in each list\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    # Sort the array in ascending order \n    arr.sort() \n    # Initialize the maximum absolute difference to be the difference between the first and last element \n    max_diff = abs(arr[1] - arr[len(arr)-1]) \n    # Loop through the array and find the maximum absolute difference \n    for i in range(1, len(arr)-1): \n        diff = abs(arr[i+1] - arr[i-1]) \n        if diff > max_diff: \n            max_diff = diff \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum absolute difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize the maximum difference to the first element of the array\n    max_diff = abs(arr[0] - arr[1])\n    # Iterate over the remaining elements in the array\n    for i in range(2, len(arr)):\n        # Calculate the absolute difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n        # Update the maximum difference if the current difference is greater than the maximum\n        if diff > max_diff:\n            max_diff = diff\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Initialize maximum difference to the smallest possible value\n    max_diff = float('inf')\n    \n    # Iterate through the array\n    for i in range(len(arr)-1):\n        # Calculate the absolute difference between the current element and the next element\n        diff = abs(arr[i] - arr[i+1])\n        \n        # If the absolute difference is greater than the current maximum difference, update the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0 #initialize the max_diff variable to 0\n    for i in range(len(arr)): #iterate through the array\n        for j in range(i+1,len(arr)): #iterate through the array starting from the next element\n            diff = abs(arr[i] - arr[j]) #calculate the absolute difference between the two elements\n            if diff > max_diff: #if the current difference is greater than the max_diff\n                max_diff = diff #update the max_diff variable\n    return max_diff #return the max_diff variable"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    # Initialize two variables to store the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n    # Loop through the array and update the minimum and maximum values as needed\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    # Calculate the maximum absolute difference between any two elements in the array\n    max_diff = abs(max_val - min_val)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            max_diff = max(max_diff,diff)\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n-b, n+1):\n        y = n - a*x - b\n        if x*a + y*b == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # use Newton's method to find the root of the equation\n    i = 0\n    while True:\n        x = (a * i) + b\n        y = n / (a * i) - b\n        if (x - y) ** 2 < 0.0001:\n            return (int(x), int(y))\n        i += 1"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//b + 1):\n        y = n//a - (x * b) // a\n        if y % b == 0 and a*x + b*y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Convert the input values to floats to ensure floating point arithmetic\n    a = float(a)\n    b = float(b)\n    n = float(n)\n\n    # Initialize the variables for the quadratic equation\n    discriminant = b**2 - 4*a*n\n\n    if discriminant >= 0:\n        # The quadratic equation has real roots\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        # The quadratic equation has only one real root\n        x1 = -b / (2*a)\n        return (x1, x1)\n    else:\n        # The quadratic equation has no real roots\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are both integers\n    if not all(isinstance(i, int) for i in [a, b]):\n        return None\n    \n    # calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # check if the discriminant is positive\n    if discriminant < 0:\n        return None\n    \n    # calculate the two solutions\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    \n    # check if the solutions are integers\n    if not all(isinstance(i, int) for i in [x1, x2]):\n        return None\n    \n    # return the two solutions as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Use the quadratic formula to find the roots of the equation\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return (int((-b)/2/a),)\n    else:\n        x1 = int((-b - discriminant**0.5)/2/a)\n        x2 = int((-b + discriminant**0.5)/2/a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the quadratic equation has no real roots\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    \n    # calculate the two solutions\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    \n    # sort the two solutions in ascending order\n    if x1 > x2:\n        x1, x2 = x2, x1\n    if x1 > 0 and x2 > 0:\n        if x1 < x2:\n            return (x1, x2)\n        else:\n            return (x2, x1)\n    else:\n        if x1 > 0:\n            return (x1, -x1)\n        else:\n            return (x2, -x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # first check if there is a solution for any integer x\n    for x in range(1, n):\n        if a * x + b * n - n == 0:\n            return (x, n - x)\n    # no solution exists for any integer x, so return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    else:\n        x = (n / a) + b\n        y = (n / -a) + b\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize the upper and lower bounds for the variables x and y\n    lower_bound = -1000000\n    upper_bound = 1000000\n    \n    # initialize the variable x and y to the lower and upper bounds\n    x = lower_bound\n    y = upper_bound\n    \n    # loop while the upper bound is less than or equal to the lower bound\n    while lower_bound <= upper_bound:\n        # calculate the next x value\n        x = (lower_bound + upper_bound) / 2\n        \n        # calculate the value of y for the current x value\n        y = a * x + b\n        \n        # if the current y value is equal to the given n value, return the tuple (x, y)\n        if y == n:\n            return (x, y)\n        \n        # if the current y value is less than the given n value, update the upper bound to x\n        elif y < n:\n            upper_bound = x\n        \n        # if the current y value is greater than the given n value, update the lower bound to x\n        else:\n            lower_bound = x\n    \n    # if no solution exists, return None\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the list1 and remove elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_new = [x for x in list1 if x not in list2]\n    return list1_new"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through the first list\n    for item in list1:\n        # Check if the item is not present in the second list\n        if item not in list2:\n            # If the item is not present, append it to the result list\n            result.append(item)\n\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_value = 0\n    for i in range(0, n//2):\n        sum_value += n - 2*i\n    return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum\n    sum = 0\n    # Loop through each term in the series\n    for i in range(n // 2):\n        # Calculate the sum of the terms\n        sum += (n - 2*i)\n        # Check if the sum is less than n\n        if sum < n:\n            # If it is, update n and break out of the loop\n            n = sum\n            break\n    # Return the final sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(0, n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        n -= 1\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2*i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Calculate the sum of the first n terms\n    sum = 0\n    for i in range(n):\n        sum += (n - 2*i)\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # calculate the area of each side\n    area_sides = s * s * tan(pi/l)\n    \n    # calculate the total area\n    area_total = 0\n    for i in range(1, l+1):\n        area_total += area_sides\n    \n    return area_total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * tan(pi/l)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/2)**2 * tan((360/l)*i)\n    return area * (s/2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    area *= 0.5 # divide by 2 to get the area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += s * tan(pi/l)\n    area *= 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / (2 * pi)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * (s - l) / 2) * pi"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using the formula for the area of a regular polygon\n    area = (s/2)*tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter\n    sp = (s * l) / 2\n    \n    # calculate the area of the polygon using Heron's formula\n    area = (sp * (tan((pi/l)*2) + tan((pi/l)/2))) / 2\n    \n    # return the area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(l**2))/(4*tan(pi/l))\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n using the formula for the sum of a geometric series\n    sum_n_div = sum(math.factorial(i) / (math.factorial(n) * math.factorial(i-n)) for i in range(1, n+1))\n\n    # Find the sum of the divisors of n-1 using the formula for the sum of a geometric series\n    sum_n_minus_1_div = sum(math.factorial(i) / (math.factorial(n-1) * math.factorial(i-n-1)) for i in range(1, n))\n\n    # Check if the sum of the divisors of n and n-1 are the same\n    if sum_n_div == sum_n_minus_1_div:\n        print(f\"{n} and {n-1} have the same sum of divisors.\")\n    else:\n        print(f\"{n} and {n-1} do not have the same sum of divisors.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Get the divisors of n using the math module\n    divisors = [int(x) for x in str(n) if x.isdigit()]\n    div_sum = sum(divisors)\n\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        print(\"The sum of the divisors is the same as n.\")\n    else:\n        print(\"The sum of the divisors is different from n.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n <= 1:\n        return False\n    \n    divisors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    \n    if len(divisors) == 0:\n        return True\n    \n    if sum(divisors) == n:\n        return True\n    \n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div1 = sum(range(1, int(math.sqrt(n))+1))\n    div2 = sum(range(int(math.sqrt(n))+1, n+1))\n\n    # check if the sum of the divisors is the same as n\n    if div1 == n or div2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    def sum_divisors(num):\n        \"\"\"\n        Returns the sum of the divisors of a number.\n        \"\"\"\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if i!= num // i:\n                    divisors.append(num // i)\n        return sum(divisors)\n    \n    div1 = sum_divisors(n)\n    div2 = sum_divisors(2*n)\n    if div1 == div2:\n        print(f\"The sum of the divisors of {n} and 2*{n} are the same.\")\n    else:\n        print(f\"The sum of the divisors of {n} and 2*{n} are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            if n//i == i:\n                return True\n            else:\n                return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n \n    sum_div = 0\n    i = 1\n    while i <= n: \n        if n % i == 0: \n            sum_div += i\n        i += 1\n    \n    # Check if the sum of the divisors of n is equal to the square of n\n    if sum_div == n**2: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    return div_sum == n "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    sum_div = sum([i for i in range(1, n+1) if n % i == 0])\n    \n    # Check if the sum of the divisors of n and its inverse are the same\n    if math.gcd(n, sum_div) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Determine if the sum of the divisors of two integers are the same.\n    '''\n    # Initialize sum of divisors to 0\n    div_sum = 0\n\n    # Loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # If i is divisible by 2, add 2 to the sum of divisors\n        if i % 2 == 0:\n            div_sum += 2\n        # If i is divisible by any odd integer greater than 2, add i to the sum of divisors\n        elif i % 2!= 0 and i > 2:\n            div_sum += i\n\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        print(f\"{n} is a perfect number\")\n    else:\n        print(f\"{n} is not a perfect number\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # initialize a dictionary to store the position of each character\n    position_dict = {}\n    # loop through the string and update the position dictionary\n    for i, char in enumerate(str1):\n        if char in position_dict:\n            position_dict[char] = position_dict[char] + 1\n        else:\n            position_dict[char] = 1\n    # initialize a counter for the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    # loop through the string and count the number of characters that occur at the same position as in the English alphabet\n    for char in str1:\n        if char in position_dict and position_dict[char] == 1:\n            count += 1\n    # return the number of characters that occur at the same position as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        char1 = english_alphabet[i].lower()\n        char2 = str1[i].lower()\n        if char1 == char2:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a list of English letters in lowercase\n    english_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    \n    # Initialize a dictionary to store the count of characters at each position in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1: \n        # Convert the character to lowercase\n        char = char.lower()\n        \n        # Check if the character is an English letter\n        if char in english_letters: \n            # If it is, check if the position of the character is already in the dictionary\n            if char in char_count: \n                # If it is, increment the count by 1\n                char_count[char] += 1\n            else: \n                # If it isn't, add the character to the dictionary with a count of 1\n                char_count[char] = 1\n    \n    # Return the dictionary containing the count of characters at each position in the string\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower().count(str1[i].lower()) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(ord('a'), ord('z')+1):\n        if str1.lower().count(chr(i)) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase and find its index in the English alphabet (a-z)\n        index = ord(char) - ord('a')\n\n        # Check if the index is between 0 and 25 (inclusive)\n        if 0 <= index <= 25:\n            # Increment the count variable if the character occurs at the same position in the string as in the English alphabet\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    \n    # Initialize an empty dictionary to store the count of characters\n    char_count = {}\n    \n    # Loop through each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n        # Convert the current character to lowercase\n        char = chr(i).lower()\n        # Check if the current character is in the input string\n        if char in str1:\n            # If it is, check if it is already in the dictionary\n            if char in char_count:\n                # If it is, increment its count by 1\n                char_count[char] += 1\n            else:\n                # If it isn't, add it to the dictionary with a count of 1\n                char_count[char] = 1\n    \n    # Loop through the input string again, counting the occurrences of each character\n    for char in str1:\n        # Convert the current character to lowercase\n        char = char.lower()\n        # Check if the current character is in the dictionary\n        if char in char_count:\n            # If it is, decrement its count by 1\n            char_count[char] -= 1\n    \n    # Return the dictionary with the counts of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower()[i] == str1.lower()[(i + 9) % 26]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize the counter variable to 0\n    count = 0\n    \n    # Loop through each character in the string\n    for char in str1:\n        \n        # If the character is a letter in the English alphabet, increment the counter\n        if 'a' <= char <= 'z':\n            count += 1\n    \n    # Return the count of characters that occur at the same position in the string as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position\n    count_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a lowercase letter, add 1 to the count of characters at that position\n        if 'a' <= char <= 'z':\n            if char not in count_dict:\n                count_dict[char] = 1\n            else:\n                count_dict[char] += 1\n\n    # Initialize the count of characters that occur at the same position as the English alphabet\n    same_position_count = 0\n\n    # Loop through each character in the English alphabet\n    for i in range(len(str1)):\n        # If the character is at the same position as the current character in the string, increment the count\n        if str1[i] == str1[i+1]:\n            same_position_count += 1\n            # If the count of characters at the same position is greater than 1, increment the count of characters that occur at the same position as the English alphabet\n            if same_position_count > 1:\n                same_position_count = 0\n\n    # Return the count of characters that occur at the same position as the English alphabet\n    return same_position_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] == 0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                even_pair_count += 1\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to a binary string\n    bin_str = bin(n)[2:]\n\n    # Count the number of '1' digits in the binary string\n    count = len([char for char in bin_str if char == '1'])\n\n    # Calculate the base 2 exponent of the power of 2\n    exponent = 1 << count\n\n    # Return the next power of 2\n    return 2 ** exponent"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n & (n-1)!= 0:\n        n = n | (n & -n)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Initialize the variable to store the result\n    result = 1\n\n    # Loop until the result is greater than or equal to n\n    while result < n:\n\n        # Increment the result by 1\n        result += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n.bit_length()-1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # We start with the minimum value of 2\n    power = 2\n    # While the power is greater than or equal to n, we double it\n    while power >= n:\n        power *= 2\n    # We return the power we found\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary string\n    bin_str = bin(n)[2:]\n\n    # Initialize a boolean flag\n    is_power_of_2 = False\n\n    # Loop through each bit in the binary string\n    for bit in bin_str:\n        # If the bit is 1, it means that the current power of 2 is smaller than the original n\n        if bit == '1':\n            is_power_of_2 = True\n            break\n\n    # If the flag is not set, the original n is already a power of 2\n    if not is_power_of_2:\n        # Calculate the next power of 2\n        next_pow_of_2 = 1\n\n        while next_pow_of_2 < n:\n            next_pow_of_2 <<= 1\n\n        return next_pow_of_2\n\n    # If the flag is set, the original n is already a power of 2\n    else:\n        return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # loop until the least significant bit is set\n    while n & (n - 1)!= 0:\n        n = n | (n & -n)\n\n    return n << 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the value of the power of 2 to 1\n    power_of_2 = 1\n    # While the next power of 2 is less than or equal to n\n    while power_of_2 <= n:\n        # Increment the power of 2 by 1\n        power_of_2 *= 2\n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to a binary string\n    binary_str = bin(n)[2:]\n\n    # Initialize the power of 2 variable\n    power_of_2 = 2\n\n    # Loop through each bit in the binary string\n    for bit in binary_str:\n        # If the bit is 1, multiply the power of 2 by 2\n        if bit == '1':\n            power_of_2 *= 2\n\n        # If the bit is 0, nothing needs to be done\n        else:\n            pass\n\n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x): \n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(lst, x):\n    '''\n    Count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list += i\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        if i < len(list1) and i >= 0:\n            sum_value += list1[i]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check that the indices are valid\n    if m < 0 or m > len(list1) - 1:\n        raise ValueError(\"Invalid index for the first range end\")\n    if n < 0 or n > len(list1) - 1:\n        raise ValueError(\"Invalid index for the second range end\")\n    if m >= n:\n        raise ValueError(\"The first range end must be greater than or equal to the second range end\")\n\n    # Initialize the sum to 0\n    sum_result = 0\n\n    # Loop through the list and add the numbers in the specified range to the sum\n    for i in range(m, n + 1):\n        sum_result += list1[i]\n\n    return sum_result"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i-1]\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[i] for i in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += list1[i]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * math.pi * a\n    return circumference * 5"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Use the formula for the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std ='std'\n    for i in s:\n        if i == std:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s' or char == 'd' or char == 't':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for element in test_tuple:\n        data_types.add(type(element))\n\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for item in test_tuple:\n        data_types.append(type(item))\n    return all(x == data_types[0] for x in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    \n    # Iterate through the remaining elements in the tuple\n    for item in test_tuple:\n        # Check if the data type of the current element is same as the first element\n        if type(item)!= data_type:\n            # If not, return False\n            return False\n            \n    # If all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize a variable to keep track of the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # If the element has a different data type than the first element, return False\n        if type(element)!= data_type:\n            return False\n    # If all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Check if all the elements in a tuple have the same data type or not.\n    \"\"\"\n    types = set()\n    for element in test_tuple:\n        types.add(type(element))\n    return types.pop()"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # initialize a set to store the data types of all elements in the tuple\n    data_types = set()\n\n    # loop through the tuple\n    for element in test_tuple:\n        # if element is not of a tuple, add its data type to the set\n        if not isinstance(element, tuple):\n            data_types.add(type(element).__name__)\n        # if element is of a tuple, recursively check its data type\n        else:\n            data_types.add(check_type(element))\n\n    # check if all the data types in the set are the same\n    return len(data_types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[0])!= type(test_tuple[i]):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for element in test_tuple:\n        data_types.add(type(element))\n    return len(data_types) == 1"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count == n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize the count of the majority element as zero\n    count = 0\n\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n\n    # Loop through the array\n    while left <= right:\n        # If the element at the left pointer is equal to the x\n        if arr[left] == x:\n            # Increment the count of the majority element\n            count += 1\n\n        # If the element at the right pointer is equal to the x\n        if arr[right] == x:\n            # Increment the count of the majority element\n            count += 1\n\n        # If the count of the majority element is greater than n/2\n        if count > n // 2:\n            # Return True since the element is the majority element\n            return True\n\n        # If the element at the left pointer is less than the x\n        if arr[left] < x:\n            # Increment the left pointer\n            left += 1\n\n        # If the element at the right pointer is greater than the x\n        if arr[right] > x:\n            # Decrement the right pointer\n            right -= 1\n\n        # If the count of the majority element is zero after the loop\n        if count == 0:\n            # Return False since there is no majority element in the array\n            return False\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count == n // 2:\n                return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer n as input and returns the number of set bits (binary digits with value 1) in n.\n    A set bit is a binary digit with a value of 1.\n    For example, the binary representation of 13 is 1101 in decimal, and it has two set bits: the second and the fourth.\n    So, the function should return 2.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # initialize count variable to zero \n    count = 0 \n    \n    # loop through each digit in the binary representation of n \n    for digit in bin(n)[2:]: \n\n        # if digit is 1, increment count \n        if digit == '1': \n            count += 1 \n    \n    return count \n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(string):\n    '''\n    This function takes a string as input and removes the characters which have odd index values of the string.\n    '''\n    odd_indices = []\n    for i in range(len(string)):\n        if i % 2 == 1:\n            odd_indices.append(i)\n    odd_indices.sort()\n    odd_indices.reverse()\n    result = \"\"\n    for i in odd_indices:\n        result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = list(str)\n    new_str = ''\n    for i, char in enumerate(str_list):\n        if i % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(filter(lambda x: x % 2 == 1, str))"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Create a new string with only the even indices of the original string\n    new_str = ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Args:\n        str (str): The string to remove odd characters from.\n\n    Returns:\n        str: The string with odd characters removed.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n\n    Args:\n    a (int): The first number to compare.\n    b (int): The second number to compare.\n    c (int): The third number to compare.\n\n    Returns:\n    int: The minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find the minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function finds the minimum of three numbers.\n    \"\"\"\n    # Finding the minimum of a, b and c using conditional statement\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a variable to store the result\n    result = True\n\n    # Iterate through all the bits in the given range\n    for i in range(l, r + 1):\n        # If a bit is set, set the result to False\n        if n & (1 << i):\n            result = False\n            break\n\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the variable'set_bits' to 0\n    set_bits = 0\n    \n    # Iterate from l to r\n    for i in range(l, r+1):\n        # Check if the i-th bit is set or unset\n        if n & (1<<i):\n            set_bits |= 1<<(i)\n    \n    # Check if all the bits are unset in the given range\n    if set_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a Python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize the count of set bits\n    count = 0\n\n    # Iterate through the range [l, r]\n    for i in range(l, r+1):\n\n        # Initialize the current bit mask\n        mask = 1\n\n        # Iterate through the bits in the integer\n        for j in range(31, -1, -1):\n\n            # Check if the bit is set\n            if i & mask:\n                count += 1\n\n            # Shift the mask to the left\n            mask <<= 1\n\n    # Check if all bits are unset\n    if count == 32:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range to a binary string\n    binary_string = bin(n & ((1 << (r - l + 1)) - 1))[2:].zfill(r - l + 1)\n\n    # Check whether all the bits are unset in the binary string\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Find the number of bits set in the range\n    num_bits = 0\n    for i in range(l, r+1):\n        num_bits += n & (1 << i)\n    # Check if all the bits are set or not\n    if num_bits == (r - l + 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Using bitwise AND operator with 1 to check whether all the bits are unset or not.\n    if n & (1 << l) == 0 and n & (1 << r) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert the input range to binary format\n    bin_l = bin(l)[2:].zfill(n)\n    bin_r = bin(r)[2:].zfill(n)\n\n    # loop through all the possible binary numbers with the same number of set bits as the input range\n    for i in range(2 ** n):\n        # convert the current binary number to a decimal format\n        current_number = bin(i)[2:].zfill(n)\n\n        # check if the current number falls within the input range\n        if current_number >= bin_l and current_number <= bin_r:\n            # if it does, check if all the bits are set to 1\n            if all(int(bit) == 1 for bit in current_number):\n                return True\n\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Get the number of bits in the binary representation of n\n    num_bits = len(bin(n)[2:])\n    \n    # Initialize a variable to store the mask\n    mask = (1 << num_bits) - 1\n    \n    # Check whether the range is valid or not\n    if l < 0 or r > (1 << num_bits) - 1:\n        return False\n    \n    # Check whether all the bits are unset in the given range or not\n    return (n & mask) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three parameters n, l and r, where n is an integer, l is the lower bound of the given range and r is the upper bound of the given range.\n    The function returns True if all the bits are unset in the given range and False otherwise.\n    '''\n    # Initialize a variable count to 0\n    count = 0\n    # Check all the bits in the given range\n    for i in range(l, r+1):\n        # Add 1 to the count for each set bit\n        count += i.bit_length()\n    # Return True if all the bits are unset in the given range and False otherwise\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments - n (the given number), l (the lower limit of the range) and r (the upper limit of the range).\n    It returns True if all the bits are unset in the given range, else False.\n    '''\n    i = 0\n    while i <= r:\n        if (n & (1 << i))!= 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n\n    # Separate the positive and negative elements\n    positive_elements = sorted_arr[:n]\n    negative_elements = sorted_arr[n:]\n\n    # Concatenate the negative and positive elements\n    result = negative_elements + positive_elements\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    neg_indices = []\n    pos_indices = []\n    \n    # Loop through the array and find the negative and positive indices\n    for i in range(n):\n        if arr[i] < 0:\n            neg_indices.append(i)\n        else:\n            pos_indices.append(i)\n    \n    # Sort the negative indices in reverse order\n    neg_indices.sort(reverse=True)\n    \n    # Merge the two sorted lists and assign the result to the first n elements of the array\n    result = neg_indices + pos_indices[:n]\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Separate the elements into positive and negative groups\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n\n    # Merge the two groups into a single list\n    rearranged = pos + neg\n\n    # Shuffle the list\n    random.shuffle(rearranged)\n\n    # Re-arrange the first n elements to put negative elements before positive ones\n    rearranged[:n] = [x for x in rearranged[:n] if x < 0] + [x for x in rearranged[:n] if x > 0]\n\n    # Return the rearranged array\n    return rearranged"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    pos_index = 0\n    \n    # Counting the number of negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # Moving negative elements to the beginning of the array\n    for i in range(n):\n        if arr[i] < 0:\n            arr[pos_index] = arr[i]\n            pos_index += 1\n    \n    # Moving positive elements to the end of the array\n    for i in range(n):\n        if arr[i] >= 0:\n            arr[pos_index] = arr[i]\n            pos_index += 1\n    \n    # Moving negative elements to the end of the array\n    for i in range(n):\n        if arr[i] < 0:\n            arr[pos_index] = arr[i]\n            pos_index += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    # Step 1: Separate elements into negative and positive arrays\n    neg = []\n    pos = []\n    for x in arr:\n        if x < 0:\n            neg.append(x)\n        else:\n            pos.append(x)\n\n    # Step 2: Combine negative and positive arrays and sort\n    combined = sorted(neg + pos)\n\n    # Step 3: Sort combined array and return\n    return sorted(combined)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n    :param arr: list of integers\n    :param n: integer\n    :return: list of integers\n    \"\"\"\n    # initialize two pointers to the beginning and end of the array\n    i = 0\n    j = len(arr) - 1\n\n    # loop until we have n negative elements and n positive elements\n    while i < j and n > 0:\n        # if the current element is negative, increment i and decrement n\n        if arr[i] < 0:\n            i += 1\n            n -= 1\n        # if the current element is positive, decrement j and increment n\n        elif arr[j] > 0:\n            j -= 1\n            n += 1\n        # if the current element is zero, do nothing\n        else:\n            n -= 1\n\n    # loop through the array from the beginning to the i-th negative element and swap them with the corresponding n+i element\n    for k in range(i):\n        arr[k], arr[k + n] = arr[k + n], arr[k]\n\n    # loop through the array from the i-th negative element to the end and swap them with the corresponding (n+i) + (j-i) element\n    for k in range(i, j + 1):\n        arr[k], arr[k + n + (j - i)] = arr[k + n + (j - i)], arr[k]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # create a dictionary to store the count of each element in the array\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # sort the elements in descending order based on their count\n    sorted_counts = sorted(counts.items(), key=lambda x: (-x[1], x[0]))\n\n    # initialize two lists to store the negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # iterate over the sorted counts and add the appropriate elements to the corresponding lists\n    for elem, count in sorted_counts:\n        if count > 0:\n            pos_list.extend([elem] * count)\n        else:\n            neg_list.extend([elem] * abs(count))\n\n    # initialize a counter for the position of the next positive element\n    pos_index = 0\n\n    # iterate over the original array and add the elements to the correct position in the new array\n    for num in arr:\n        if num in counts:\n            # add the positive element to the array at the next available position\n            arr[pos_index] = num\n            pos_index += 1\n        else:\n            # add the negative element to the array at the next available position\n            arr[neg_index] = num\n            neg_index += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[count] = arr[count], arr[i]\n            count += 1\n        if count == n:\n            break\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    neg_count = 0\n    pos_count = 0\n    temp = []\n    \n    for i in arr:\n        if i < 0:\n            neg_count += 1\n            if neg_count == n:\n                temp = temp + [i]\n                neg_count = 0\n        else:\n            pos_count += 1\n            if pos_count == n:\n                temp = temp + [i]\n                pos_count = 0\n    \n    for i in arr:\n        if i < 0:\n            temp = temp + [i]\n        elif i >= 0:\n            temp = temp + [i]\n    \n    return temp"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for positive and one for negative elements\n    pos = 0\n    neg = 0\n\n    # Traverse through the array and swap the elements if needed\n    for i in range(n):\n        if arr[i] >= 0:\n            # If the current element is positive, move the pointer for positive elements to the next position\n            pos += 1\n            if pos < neg:\n                arr[pos], arr[neg] = arr[neg], arr[pos]\n        else:\n            # If the current element is negative, move the pointer for negative elements to the next position\n            neg += 1\n            if neg < pos:\n                arr[pos], arr[neg] = arr[neg], arr[pos]\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            new_str += char\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1 + char"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns the n largest items from the input list.\n    \"\"\"\n    return sorted(lst, reverse=True)[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list of the n largest items from the list\n    \"\"\"\n    # convert the list to a max heap\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    \n    # pop the n largest items and return them in a list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    max_heap = []\n    for i in range(n):\n        max_heap.append(-heapq.heappushpop(max_heap, -list1.pop()))\n    # add the remaining elements in the list to the max heap\n    for num in list1:\n        if num > max_heap[0]:\n            heapq.heappush(max_heap, -num)\n        elif num < max_heap[0]:\n            heapq.heappop(max_heap)\n    # return the max heap as a list\n    return [-num for num in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # initialize a min heap with the first n elements of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # add the remaining elements of the list to the heap\n    for i in range(n, len(list1)):\n        heapq.heappush(heap, list1[i])\n    \n    # extract the largest n elements from the heap and return them as a list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    # initialize an empty heap\n    heap = []\n\n    # insert the first n elements of the list into the heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n\n    # remove and return the n-th largest element from the heap\n    for i in range(n, len(list1)):\n        # if the element is greater than the n-th largest element, replace it\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n\n    # return the remaining elements of the heap as the n-largest elements\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a min heap to store the n largest elements\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # Iterate over the remaining elements of the list and add them to the heap\n    for i in range(n, len(list1)):\n        heapq.heappush(heap, list1[i])\n    \n    # Return the n largest elements in the heap\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h) + ((2*r**2)+((2*h**2)*r))"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    \n    # calculate the lateral surface area of the cylinder\n    lateral_surface_area = math.pi * r**2 * h\n    \n    # return the value of the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return (2 * r * h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*r**2*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*r*h + 2*math.pi*h**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*r**2*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Find the volume of the cylinder\n    vol = math.pi*(r**2)*h\n    \n    # Calculate the lateral surface area of the cylinder\n    lateral_area = 2*vol\n    \n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)+(2*r*r)\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of n\n    even_bits = 0\n    \n    # Loop through each bit in n\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) == 0:\n            even_bits = even_bits << 1\n        else:\n            even_bits = even_bits | 1\n    \n    # Return the number with even bits set to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the even bits\n    even_bits = 0\n    # Loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # Check if the current bit is even\n        if int(bit) == 0:\n            # If it's not, set the corresponding bit in even_bits to 1\n            even_bits |= 1 << int(bit)\n    # Return the updated even_bits\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a new number with the same bits as the given number\n    new_n = n\n    # loop through all even bits in the binary representation of the given number\n    for i in range(1, 32, 2):\n        # set the i-th bit of the new number to 1\n        new_n |= (1 << i)\n    # return the new number with all even bits set\n    return new_n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to keep track of the even bits of the input number\n    even_bits = 0\n\n    # Iterate over each bit of the input number\n    for bit in bin(n)[2:]:\n        if bit == '1':\n            # Set the corresponding bit in the even_bits variable to 1\n            even_bits |= 1\n\n    # Return the even_bits variable, which contains all even bits of the input number\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0, 32):\n        if (n & (1 << i))!= 0:\n            n |= (1 << i)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bits of the given number\n    even_bits = 0\n\n    # Iterate through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is 0, set the corresponding bit of the even_bits variable to 0\n        if bit == '0':\n            even_bits = even_bits & ~(1 << int(bit))\n        # If the bit is 1, set the corresponding bit of the even_bits variable to 1\n        elif bit == '1':\n            even_bits = even_bits | (1 << int(bit))\n\n    # Return the even_bits variable as the final result\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes an integer n as input and sets all even bits of n to 1.\n    '''\n    # Convert the integer to binary string\n    binary_str = bin(n)[2:]\n    # Initialize an empty list to store the modified binary string\n    modified_binary_str = []\n    # Iterate through the binary string\n    for bit in binary_str:\n        # If the bit is even, set it to 1, else set it to 0\n        if int(bit) % 2 == 0:\n            modified_binary_str.append('1')\n        else:\n            modified_binary_str.append('0')\n    # Convert the modified binary string to an integer\n    modified_n = int(modified_binary_str, 2)\n    # Return the modified integer\n    return modified_n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the number of even bits\n    even_bits = 0\n    # loop through each bit of the number\n    for i in range(32):\n        # if the bit is even, set the corresponding bit in the variable\n        if n & (1 << i):\n            even_bits |= (1 << i)\n    # return the number with all even bits set to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n\n    :param n: the number to set even bits of\n    :return: the modified number with even bits set to 1\n    \"\"\"\n    while n % 2 == 0:\n        n //= 2  # divide by 2 and round down to the nearest integer\n    return n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates and then convert back to a list\n    unique_tuples = list(set(test_list))\n\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Iterate over the unique tuples and update the count_dict\n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Initialize an empty dictionary to store the count of occurrences\n    count_dict = {}\n\n    # Loop through the list of tuples\n    for item in test_list:\n\n        # Convert the tuple to a string and add it to the dictionary\n        key = str(item)\n        count_dict[key] = count_dict.get(key, 0) + 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    n = len(str)\n\n    for i in range(n): \n        for j in range(i+1, n+1): \n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # Initialize count variable\n    count = 0\n    \n    # Loop through all possible substrings of the input string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] and str[i:j]!='':\n                count += 1\n    \n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            substring = str[i:j]\n            if substring and len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        for i in range(len(sequence) - 1):\n            if sequence[i] >= sequence[i + 1] * 2 and sequence[i] <= m:\n                return False\n        return True\n\n    # Initialize variables\n    total_sequences = 0\n    current_sequence = [2] * n\n\n    # Add first sequence\n    total_sequences += 1\n    current_sequence[n - 1] = m\n\n    while True:\n        if is_valid_sequence(current_sequence):\n            total_sequences += 1\n            for i in range(n - 1):\n                current_sequence[i + 1] = max(current_sequence[i] + 1, current_sequence[i + 1] * 2, m)\n\n        # Check if we have generated all possible sequences\n        if current_sequence[n - 1] >= m:\n            break\n\n        # Increment last element of the sequence\n        current_sequence[n - 1] += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    # Initialize an array to store the previous two elements of the sequence\n    previous = [0, 0]\n    # Loop through all possible sequences of length n\n    for i in range(2, m+1):\n        # Calculate the next element in the sequence\n        next_element = i\n        # Check if the next element is less than or equal to m\n        while next_element <= m:\n            # Check if the next element is greater than or equal to twice the previous element but less than or equal to m\n            if next_element >= 2*previous[1] and next_element <= m:\n                # Increment the count of sequences\n                count += 1\n            # Update the previous two elements of the sequence\n            previous[0] = previous[1]\n            previous[1] = next_element\n            # Update the next element in the sequence\n            next_element += i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # base case: when n is zero or 1, there is only one sequence\n    if n <= 1:\n        return 1\n\n    # helper function to check if a number is valid\n    def is_valid(num):\n        return num >= 2 * prev and num <= m and num > prev\n\n    # initialize variables to store the number of sequences\n    num_sequences = 0\n    prev = float('-inf')\n\n    # loop through the numbers from 2 to m (inclusive)\n    for num in range(2, m + 1):\n        # check if the number is valid\n        if is_valid(num):\n            # increment the number of sequences if it is valid\n            num_sequences += 1\n            prev = num\n\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    count = 0\n    previous_element = 0\n\n    # Calculate the total number of possible sequences\n    for i in range(2, n+1):\n        count += ((m-previous_element) // (i-1)) + 1\n        previous_element = i\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    sequences = 0\n    total = 0\n    first = 0\n    second = 0\n    \n    # Loop through numbers from 0 to n-2\n    for i in range(n-2):\n        # Check if the current number is a valid sequence\n        if i % 2 == 0 and first <= m:\n            sequences += 1\n        if i % 2 == 1 and second <= m:\n            sequences += 1\n            \n        # Update the total number of sequences\n        total += sequences\n        \n        # Update the values for the next iteration\n        first += i + 2\n        second += i + 1\n            \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        for i in range(1, len(sequence)):\n            if sequence[i] < 2 * sequence[i-1] or sequence[i] > m:\n                return False\n        return True\n\n    sequence = [0]\n    count = 0\n\n    while len(sequence) < n:\n        if is_valid_sequence(sequence):\n            count += 1\n        sequence.append(sequence[-1] + 1)\n\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_number = 0\n    for i in range(2, m + 1):\n        if i >= 2 * n:\n            total_number += 1\n\n    return total_number"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    prev_num = 1\n    \n    for i in range(n):\n        if i % 2 == 0:\n            count += m - prev_num\n            prev_num = m\n        else:\n            count += prev_num\n            prev_num = 2 * prev_num\n    \n    return count\n\nm = int(input(\"Enter value of m: \"))\nn = int(input(\"Enter value of n: \"))\n\nprint(\"Total number of sequences of length\", n, \"such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to\", m, \"is:\", get_total_number_of_sequences(m, n))"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    total_sequences = 0\n    sequence = [0]\n    \n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return 0\n    \n    # Check if n is 1\n    if n == 1:\n        return m\n    \n    # Check if m is 1\n    if m == 1:\n        return 1\n    \n    # Check if m is greater than or equal to 2*n\n    if m >= 2*n:\n        return 0\n    \n    # Initialize variables for the sequence\n    prev = 0\n    curr = 1\n    \n    # Iterate through the sequence and add the number of sequences that satisfy the condition\n    while curr <= n:\n        if curr < m:\n            if prev >= 2*curr:\n                sequence.append(curr)\n                total_sequences += 1\n        else:\n            sequence.append(curr)\n            total_sequences += 1\n        prev, curr = curr, prev+curr\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    prev = -1\n    for i in range(1, m + 1):\n        if i >= 2 * prev and i <= m:\n            count += 1\n        prev = i\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Loop through the first list and append the last element of the second list to it\n    for i in range(len(list1)-1, -1, -1):\n        list1.append(list2[i])\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        for i in range(len(list1)-1, -1, -1):\n            list1[i] = list2[i-len(list1)+1]\n    else:\n        print(\"Error: The two lists must be of the same length.\")\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the second list is not empty\n    if not list2:\n        return \"The second list cannot be empty.\"\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    # Return the updated list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == 0:\n        return list2\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = len(str1)\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Check if the square root is an integer\n    if math.isclose(sqrt_N, int(sqrt_N), rel_tol=1e-09):\n        # If it is, find the next integer greater than the square root\n        next_integer = int(sqrt_N) + 1\n    else:\n        # If it's not, round up to the nearest integer\n        next_integer = int(sqrt_N) + 2\n\n    # Calculate the next perfect square\n    next_perfect_square = int(next_integer ** 2)\n\n    # Return the next perfect square greater than N\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # First, find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # If the square root is odd, increment it and add 1\n    if sqrt_N % 2 == 1:\n        sqrt_N += 1\n\n    # Find the next perfect square greater than sqrt_N\n    next_sqrt = (sqrt_N ** 2) + 1\n\n    # If the next perfect square is greater than N, increment sqrt_N\n    while next_sqrt > N:\n        sqrt_N += 1\n        next_sqrt = (sqrt_N ** 2) + 1\n\n    # Return the next perfect square greater than N\n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        i = int(math.sqrt(N))\n        j = int(math.sqrt(N))\n        \n        if i*i == N:\n            j += 1\n        \n        if j*j > N:\n            break\n        \n        N = j*j\n    \n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    \"\"\"\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Initialize the current perfect square and its corresponding integer\n    curr_square = int(sqrt_N) ** 2\n    curr_integer = int(sqrt_N)\n\n    # Initialize the next perfect square and its corresponding integer\n    next_square = curr_square\n    next_integer = curr_integer + 1\n\n    # Keep track of the difference between the next perfect square and N\n    diff = next_square - N\n\n    # If the difference between the next perfect square and N is negative, then move the next perfect square downwards\n    while diff < 0:\n        next_square -= 1\n        next_integer -= 1\n        diff = next_square - N\n\n    # If the difference between the next perfect square and N is positive, then move the next perfect square upwards\n    while diff > 0:\n        next_square += 1\n        next_integer += 1\n        diff = next_square - N\n\n    # Return the next perfect square\n    return next_integer"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N == 0:\n        return 1\n    if N == 1:\n        return 2\n\n    prev = N // 2 + 1\n    curr = prev ** 2\n    next = curr\n\n    while curr <= N:\n        next = curr + 1\n        curr = (next * next) + prev\n        prev = curr // 2 + 1\n\n    return next"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # First we find the square root of N\n    sqrt_N = math.sqrt(N)\n    # Then we check if sqrt_N is an integer\n    if sqrt_N.is_integer():\n        # If it is, then we increase sqrt_N by 1\n        sqrt_N += 1\n    # Finally, we multiply sqrt_N by sqrt_N and return the result\n    return int(sqrt_N*sqrt_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # convert the given number to binary and find the decimal part\n    binary = bin(N)[2:]\n    decimal = int(binary.lstrip('0'))\n\n    # check if the decimal part is odd or even\n    if decimal % 2 == 0:\n        # move to the next binary digit and repeat the process until we find a perfect square\n        while True:\n            # convert the new binary number to decimal and check if it is a perfect square\n            new_binary = int(binary[:binary.find('1')], 2) ** 2\n            new_decimal = int(new_binary.lstrip('0'))\n\n            if new_decimal == N:\n                # found a perfect square\n                return new_binary\n\n            # move to the next binary digit\n            binary = binary[:binary.find('1')] + str(int(binary[binary.find('1')+1]) + 1)\n    else:\n        # move to the next binary digit and repeat the process until we find a perfect square\n        while True:\n            # convert the new binary number to decimal and check if it is a perfect square\n            new_binary = int(binary[:binary.find('1')] + '1' + binary[binary.find('1')+1:], 2) ** 2\n            new_decimal = int(new_binary.lstrip('0'))\n\n            if new_decimal == N:\n                # found a perfect square\n                return new_binary\n\n            # move to the next binary digit\n            binary = binary[:binary.find('1')] + '1' + binary[binary.find('1')+2:]"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    # Find the next perfect square after sqrt_N\n    next_psq = int(math.sqrt(sqrt_N) + 1)**2\n    # Check if the next perfect square is greater than N\n    if next_psq > N:\n        # If it is, find the previous perfect square smaller than sqrt_N\n        prev_psq = int(math.sqrt(sqrt_N))**2\n        # Check if the previous perfect square is less than sqrt_N\n        if prev_psq < sqrt_N:\n            # If it is, return the previous perfect square\n            return prev_psq\n        else:\n            # If it's not, return the next perfect square\n            return next_psq\n    else:\n        # If the next perfect square is not greater than N, return the next perfect square\n        return next_psq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        num = N + 1\n        square = math.sqrt(num)\n        if square == int(square):\n            return int(square)\n        else:\n            N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # find the next perfect square greater than sqrt_N\n    next_perfect_square = int(math.ceil(sqrt_N ** 2))\n\n    # if N is already a perfect square, return sqrt_N\n    if next_perfect_square == N:\n        return sqrt_N\n\n    # return the next perfect square\n    else:\n        return next_perfect_square"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        if arr[0] < arr[1]:\n            return arr[0] + max_sum(arr[1:])\n        else:\n            return arr[1] + max_sum(arr[:-1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n    else:\n        # Find the maximum sum of a decreasing subsequence\n        max_sum_desc = float('-inf')\n        for i in range(1, n):\n            max_sum_desc = max(max_sum_desc, arr[i] + arr[i-1])\n        # Find the maximum sum of a increasing subsequence\n        max_sum_asc = float('-inf')\n        for i in range(1, n):\n            max_sum_asc = max(max_sum_asc, arr[i] - arr[i-1])\n        # Return the maximum of the two sums\n        return max(max_sum_desc, max_sum_asc)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * 2 for _ in range(n)]\n    \n    # initialize the first row with the first element\n    dp[0][0] = arr[0]\n    dp[0][1] = max(0, arr[0])\n    \n    # fill the rest of the rows\n    for i in range(1, n):\n        # if the element is increasing\n        if arr[i] < arr[i-1]:\n            # the maximum sum in the current row\n            max_sum = max(dp[i-1][0], dp[i-1][1]) + arr[i]\n            \n            # update the maximum sum in the previous row\n            dp[i][0] = max(max_sum, dp[i-1][1])\n            \n            # update the maximum sum in the current row\n            dp[i][1] = max(max_sum, dp[i-1][0])\n            \n        # if the element is decreasing\n        else:\n            # the maximum sum in the current row\n            max_sum = max(dp[i-1][0], dp[i-1][1]) + arr[i]\n            \n            # update the maximum sum in the previous row\n            dp[i][0] = max(max_sum, dp[i-1][1])\n            \n            # update the maximum sum in the current row\n            dp[i][1] = max(max_sum, dp[i-1][0])\n            \n    # return the maximum sum in the last row\n    return dp[n-1][0]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables for max sum and max increasing subsequence\n    max_sum = arr[0]\n    max_subseq = [arr[0]]\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Check if the current element is increasing or decreasing\n        if arr[i] > arr[i-1]:\n            # If increasing, check if it's a longer increasing subsequence\n            if i > 1 and arr[i] > arr[i-2]:\n                # If longer increasing subsequence, update max sum and max increasing subsequence\n                max_sum = max(max_sum, arr[i]+max_sum)\n                max_subseq = [arr[i]]\n            else:\n                # If not, add current element to current increasing subsequence\n                max_subseq.append(arr[i])\n        else:\n            # If decreasing, check if it's a longer decreasing subsequence\n            if i > 1 and arr[i] < arr[i-2]:\n                # If longer decreasing subsequence, update max sum and max decreasing subsequence\n                max_sum = max(max_sum, max_sum-arr[i])\n                max_subseq = [arr[i]]\n            else:\n                # If not, add current element to current decreasing subsequence\n                max_subseq.append(arr[i])\n    \n    # Check if the maximum sum is the sum of the entire array\n    if max_sum == 0:\n        max_sum = max(arr)\n        \n    # Return the maximum sum and the maximum increasing subsequence\n    return max_sum, max_subseq"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Find the maximum sum of a decreasing subsequence\n    max_sum_decr = max_sum_helper(arr, 0, n-2)\n    \n    # Find the maximum sum of an increasing subsequence\n    max_sum_incr = max_sum_helper(arr, 1, n-1)\n    \n    # Find the maximum sum of a bitonic subsequence\n    max_sum_bitonic = max(max_sum_decr, max_sum_incr)\n    \n    return max_sum_bitonic\n\ndef max_sum_helper(arr, start, end):\n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) // 2\n    \n    # If the mid element is increasing, we need to find the maximum sum of the left subarray\n    if arr[mid-1] < arr[mid]:\n        return max(max_sum_helper(arr, start, mid-1), max_sum_helper(arr, mid, end))\n    # If the mid element is decreasing, we need to find the maximum sum of the right subarray\n    else:\n        return max(max_sum_helper(arr, start, mid), max_sum_helper(arr, mid+1, end))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Sort the array in non-increasing order\n    arr.sort()\n\n    # Initialize variables for keeping track of the maximum subsequence sum\n    max_sum1 = max_sum2 = float('-inf')\n    current_sum = 0\n\n    # Traverse the sorted array and find the maximum subsequence sum for increasing and decreasing subsequences\n    for i in range(n):\n        if i % 2 == 0:\n            current_sum += arr[i]\n            max_sum2 = max(max_sum2, current_sum)\n        else:\n            current_sum -= arr[i]\n            max_sum1 = max(max_sum1, current_sum)\n\n    return max(max_sum1, max_sum2)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    n = len(arr)\n    # Initialize variables to keep track of the maximum subsequence\n    max_increasing_so_far = float('-inf')\n    max_decreasing_so_far = float('-inf')\n    \n    # Traverse the array\n    for i in range(n):\n        # If the current element is increasing, update the max_increasing_so_far\n        if i == 0 or arr[i-1] < arr[i]:\n            max_increasing_so_far = max(max_increasing_so_far + arr[i], arr[i])\n        \n        # If the current element is decreasing, update the max_decreasing_so_far\n        if i == 0 or arr[i-1] > arr[i]:\n            max_decreasing_so_far = max(max_decreasing_so_far + arr[i], arr[i])\n            \n    # Return the maximum of the two maximum subsequences\n    return max(max_increasing_so_far, max_decreasing_so_far)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n\n    Args:\n        arr (list): An array of integers.\n\n    Returns:\n        int: The maximum sum of a bitonic subsequence.\n\n    \"\"\"\n    if len(arr) < 3:\n        return None\n\n    # Initialize variables\n    prev_increasing = True\n    prev_num = arr[0]\n    max_sum = 0\n\n    # Iterate through the array\n    for num in arr[1:]:\n        if prev_increasing and num < prev_num:\n            max_sum += num - prev_num\n        elif prev_increasing and num > prev_num:\n            prev_increasing = False\n            prev_num = num\n        elif not prev_increasing and num > prev_num:\n            prev_increasing = True\n            prev_num = num\n        else:\n            continue\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if array is empty or contains only one element\n    if len(arr) <= 1:\n        return arr[0] if len(arr) > 0 else 0\n\n    # Initialize variables\n    n = len(arr)\n    max_sum_increasing = max_sum_decreasing = max_sum_first = arr[0]\n\n    # Traverse through array\n    for i in range(1, n):\n        # Check if current element is increasing or decreasing\n        if arr[i] > arr[i-1]:\n            # Update max sum for increasing subsequence\n            max_sum_increasing = max(max_sum_increasing + arr[i], max_sum_decreasing)\n        else:\n            # Update max sum for decreasing subsequence\n            max_sum_decreasing = max(max_sum_decreasing + arr[i], max_sum_increasing)\n\n        # Update max sum for first element of subsequence\n        max_sum_first = max(max_sum_first, max_sum_increasing)\n\n    # Return maximum sum of bitonic subsequence\n    return max_sum_first"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] > arr[1]:\n        max_val = arr[0] + max_sum(arr[1:])\n    else:\n        max_val = arr[1] + max_sum(arr[:-1])\n    return max_val\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Estimate an initial guess using the Newton-Raphson method\n    guess = number/2\n    # Calculate the difference between the square and the actual square\n    difference = (guess**2 - number)\n    # Repeat until the difference is small enough\n    while abs(difference) > 0.00001:\n        # Update the guess\n        guess = guess - difference/guess\n        # Calculate the difference between the square and the actual square again\n        difference = (guess**2 - number)\n    # Return the estimated square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a given number using the babylonian method.\n    \"\"\"\n    # Define a constant to prevent division by zero\n    epsilon = 1e-10\n\n    # Initialize variables for the babylonian method\n    guess = number / 2\n    iterations = 0\n\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number / guess) / 2\n        iterations += 1\n\n    return guess, iterations"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the iteration variable and the approximation variable\n    x = 1.0\n    y = x/2.0\n    \n    # Check if the number is less than or equal to zero\n    if number <= 0:\n        return None\n    \n    # Iterate until the absolute difference between x and y is less than or equal to the desired tolerance\n    while abs(x - y) > 1e-6:\n        x = y\n        y = (number/y) + (number/(2*y))\n    \n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while abs(guess * guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess**2 > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 0.5 * (number + 1)\n    while True:\n        guess = (number / guess) + guess / 2\n        if abs(guess - number / guess) < 0.00001:\n            return guess\n        if guess < number / guess:\n            guess = guess - 1\n        else:\n            guess = guess + 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(guess - next_guess) < 0.0001:\n            return guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    x = 1\n    last_x = 0\n    error = 1\n    iteration = 0\n\n    # Babylonian method\n    while error > 0.00001 and iteration < 1000:\n        x_old = x\n        x = (x + number/x) / 2\n        error = abs(x_old - x)\n        iteration += 1\n\n    # Check for convergence\n    if error > 0.00001:\n        print(\"Error in the calculation: Maximum number of iterations reached.\")\n        return None\n\n    # Return the square root\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    guess = number / 2\n    previous_guess = 0\n    current_guess = 0\n    \n    # Loop until the difference between the guesses is less than a certain tolerance\n    while abs(previous_guess - current_guess) >= 0.00001:\n        previous_guess = current_guess\n        current_guess = (guess + number/guess) / 2\n    \n    # Return the final guess as the square root\n    return current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    guess = 1\n    error = 0.00001\n    count = 0\n\n    # Check if input is a positive integer\n    if not isinstance(number, int) or number <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Use Babylonian's formula to find the square root\n    while error > 0.0001:\n        guess = (guess + number / guess) / 2\n        error = abs(guess * guess - number)\n        count += 1\n\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    if not str:\n        return 0\n    \n    # Create a 2D array to store the lengths of longest palindromic subsequences\n    # for substrings of length i and above\n    n = len(str)\n    lengths = [[0] * n for _ in range(n)]\n    \n    # Initialize the base cases\n    for i in range(n):\n        lengths[i][i] = 1\n    \n    # Fill the rest of the array using dynamic programming\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                lengths[i][j] = lengths[i+1][j-1] + 2\n            else:\n                lengths[i][j] = max(lengths[i][j-1], lengths[i+1][j])\n    \n    return lengths[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(string):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Convert the given string to a set to remove duplicates\n    string = set(string)\n\n    # Initialize an empty dictionary to store the lengths of palindromic subsequences\n    lps_dict = {}\n\n    # Iterate through the characters in the string\n    for i, char in enumerate(string):\n        # If the current character is equal to its reverse, add the length of the current subsequence to the dictionary\n        if char in string and (char + string[string.index(char)::-1]) in string:\n            if char in lps_dict:\n                lps_dict[char + string[string.index(char)::-1]] = i - lps_dict[char]\n            else:\n                lps_dict[char] = i\n\n    # Return the maximum length of the palindromic subsequence found\n    return max(lps_dict.values())"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # create a 2D matrix to store lengths of subsequences\n    dp = [[0] * len(str) for _ in range(len(str))]\n\n    # base case: all characters are palindromes\n    for i in range(len(str)):\n        dp[i][i] = 1\n\n    # fill the dp matrix using dynamic programming approach\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[j][i-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[j][i])\n\n    # find the length of the longest palindromic subsequence\n    max_len = dp[0][0]\n    for i in range(1, len(str)):\n        if dp[i][0] > max_len:\n            max_len = dp[i][0]\n        if dp[0][i] > max_len:\n            max_len = dp[0][i]\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    n = len(s)\n    # create a 2D table to store the lengths of longest palindromic subsequences\n    lps_table = [[0] * n for _ in range(n)]\n    # base case: if the length of the string is 1, then the longest palindromic subsequence is itself\n    for i in range(n):\n        lps_table[i][i] = 1\n    # fill the table using dynamic programming\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            # if the characters at the current position and the next position are the same, then\n            # extend the subsequence to the next position\n            if s[i] == s[j]:\n                lps_table[i][j] = lps_table[i + 1][j - 1] + 2\n            # if the characters at the current position and the next position are different, then\n            # the maximum subsequence length is the length of the subsequence ending at the next position\n            else:\n                lps_table[i][j] = max(lps_table[i + 1][j], lps_table[i][j - 1])\n    return lps_table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Initialize a 2D array to store the lengths of the longest palindromic subsequence ending at each position\n    L = [[0] * n for _ in range(n)]\n\n    # Initialize the diagonal elements of the L array to 0 and the rest to 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Fill in the L array using dynamic programming\n    for j in range(1, n):\n        for i in range(j):\n            if str[i] == str[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i+1][j], L[i][j-1])\n\n    # Return the length of the longest palindromic subsequence ending at position i\n    return L[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    \"\"\"\n    This function takes a string and returns the length of the longest palindromic subsequence.\n    \"\"\"\n\n    # Initialize a dictionary to store the length of the longest palindromic subsequence ending at each index\n    lengths = {}\n\n    # Initialize the length of the longest palindromic subsequence to 0\n    max_length = 0\n\n    # Iterate through each character in the string\n    for i in range(len(s)):\n\n        # Get the character at the current index\n        c = s[i]\n\n        # If the character is a palindrome, update the length of the longest palindromic subsequence\n        if c == c[::-1]:\n            if i - max_length > 1:\n                lengths[i] = lengths[i - max_length - 1] + 2\n            else:\n                lengths[i] = 2\n\n        # If the character is not a palindrome, check if its subsequence ends at the previous index\n        else:\n            if i - max_length > 0:\n                lengths[i] = max(lengths[i], lengths[i - max_length - 1])\n            else:\n                lengths[i] = 0\n\n        # Update the maximum length if the current length is greater\n        if lengths[i] > max_length:\n            max_length = lengths[i]\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Define a function to check if a given string is palindrome\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    # Initialize two variables to store the length of the longest palindromic subsequence and the starting index of the longest palindromic subsequence\n    max_length = 1\n    max_start = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n\n        # Check if the current character is a palindrome\n        if is_palindrome(str[i:i+max_length]):\n\n            # If the current character is a palindrome and its length is greater than the current maximum length, update the maximum length and start index\n            if len(str[i:i+max_length]) > max_length:\n                max_length = len(str[i:i+max_length])\n                max_start = i\n\n    # Return the maximum length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    table = [[0]*n for i in range(n)]\n\n    # Build table in bottom up manner\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    # Create a 2D table to store the lengths of palindromic subsequences for every substring of the string\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the length of the longest palindromic subsequence for the entire string as 1\n    dp[0][0] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[j][i-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[j][i])\n\n    # Return the length of the longest palindromic subsequence for the entire string\n    return dp[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps_list = [1] * n\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            lps_list[i] = lps_list[i-1] + 1\n        else:\n            lps_list[i] = max(lps_list[2*i], lps_list[2*i-1])\n    return lps_list[-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / (i + 1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize variables\n    sum = 0\n    num = 1\n\n    # Loop through n-1\n    for i in range(n-1):\n        # Calculate the sum\n        sum += 1/num\n        # Increment the number\n        num += 1\n\n    # Return the harmonic sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1 / (1 / (1 + 1 / n))\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += (1/i)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n-1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/2 * (n - 1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # creating a set of unique elements in array_nums1\n    set_nums1 = set(array_nums1)\n    # creating a set of unique elements in array_nums2\n    set_nums2 = set(array_nums2)\n    # finding the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # converting the intersection set back to a list and returning it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Initialize two empty lists to store the intersection\n    intersection = []\n\n    # Iterate through the first array\n    for num in array_nums1:\n        # If the number is in the second array, add it to the intersection list\n        if num in array_nums2:\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays as input and returns their intersection.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays and returns the intersection of those arrays.\n    \"\"\"\n    # initialize an empty set to store the intersection\n    intersection = set()\n    \n    # iterate over each element in the first array\n    for num in array_nums1:\n        # check if the element is also in the second array\n        if num in array_nums2:\n            # if it is, add it to the intersection set\n            intersection.add(num)\n            \n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from array_nums1 to store the unique elements of array_nums1\n    set_nums1 = set(array_nums1)\n    # Initialize an empty list to store the intersection of array_nums1 and array_nums2\n    intersection = []\n    # Loop through each element in array_nums2\n    for num in array_nums2:\n        # If the element is in the set, add it to the intersection list\n        if num in set_nums1:\n            intersection.append(num)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Create two dictionaries to store the counts of each element in the arrays\n    dict1 = {}\n    dict2 = {}\n\n    # Iterate through each element in the first array and add its count to the dictionary\n    for num in array_nums1:\n        if num in dict1:\n            dict1[num] += 1\n        else:\n            dict1[num] = 1\n\n    # Iterate through each element in the second array and add its count to the dictionary\n    for num in array_nums2:\n        if num in dict2:\n            dict2[num] += 1\n        else:\n            dict2[num] = 1\n\n    # Create an empty list to store the intersection\n    intersection = []\n\n    # Iterate through the keys in the dictionary and add the keys that have a count in both dictionaries\n    for key in dict1:\n        if key in dict2 and dict1[key] > 0 and dict2[key] > 0:\n            intersection.append(key)\n            dict1[key] -= 1\n            dict2[key] -= 1\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from array_nums1\n    set1 = set(array_nums1)\n    # create an empty set to store the common elements of the two arrays\n    common_elements = set()\n    # iterate through array_nums2\n    for num in array_nums2:\n        # check if the current number is in set1\n        if num in set1:\n            # if it is, add it to common_elements\n            common_elements.add(num)\n            # remove the current number from set1\n            set1.remove(num)\n    # return the list of common elements\n    return list(common_elements)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in array_nums1\n    freq = {}\n    for num in array_nums1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # create a set to store the common elements\n    common = set()\n    \n    # iterate through array_nums2 and check if each element is present in freq dictionary\n    for num in array_nums2:\n        if num in freq and freq[num] > 0:\n            common.add(num)\n            freq[num] -= 1\n    \n    # convert set to list and return\n    return sorted(list(common))"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n        result.extend(list[:i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(0, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.insert(0, element)\n        result.extend(lst[i:])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.insert(0, item)\n        result.insert(0, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        if imag == 0:\n            angle = 0\n            magnitude = cmath.sqrt(real**2 + imag**2)\n        else:\n            magnitude = cmath.sqrt(real**2 + imag**2)\n            angle = cmath.phase(complex(real, imag))\n        print(\"Magnitude:\", magnitude)\n        print(\"Angle (in degrees):\", angle * 180/cmath.pi)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # Add the polar coordinates to the list\n        polar.append((r, theta))\n    \n    # Return the list of polar coordinates\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for num in numbers:\n        complex_num = complex(num)\n        real_part = complex_num.real\n        imag_part = complex_num.imag\n        polar_num = cmath.polar(complex_num)\n        polar_list.append(polar_num)\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates in the form of (r, theta).\n    '''\n    polar_list = []\n    for number in numbers:\n        # Get the absolute value of the complex number\n        magnitude = abs(number)\n        \n        # Get the argument of the complex number in radians\n        angle = cmath.phase(number)\n        \n        # Convert the argument from radians to degrees\n        angle = angle * 180.0 / cmath.pi\n        \n        # Add the magnitude and angle to the polar list\n        polar_list.append((magnitude, angle))\n        \n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Get the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n\n        # Calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n\n        # Calculate the angle of the complex number in degrees\n        angle_degrees = (cmath.phase(number) * 180) / cmath.pi\n\n        # Add the polar coordinates to the list\n        polar_coordinates.append([magnitude, angle_degrees])\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real = abs(number)\n        imag = cmath.phase(number)\n        polar = (real, imag)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # Append the polar coordinates to the list\n        polar_coordinates.append((r, theta))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # create an empty list to store the polar coordinates\n    polar_coords = []\n\n    # loop through the input list of complex numbers\n    for number in numbers:\n        # extract the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n\n        # calculate the modulus and argument of the complex number\n        modulus = cmath.sqrt(real**2 + imag**2)\n        argument = cmath.phase(number)\n\n        # add a tuple of the polar coordinates to the list\n        polar_coords.append((modulus, argument))\n\n    # return the list of polar coordinates\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # Function to calculate the magnitude and angle of a complex number\n    def magnitude_and_angle(z):\n        mag = abs(z)\n        arg = cmath.phase(z)\n        return mag, arg\n\n    # Loop through each complex number and calculate its magnitude and angle\n    polar_numbers = []\n    for number in numbers:\n        mag, arg = magnitude_and_angle(number)\n        polar_numbers.append((mag, arg))\n\n    return polar_numbers"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the count of integer elements in the list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l) - n + 1):\n        comb = tuple(l[i:i+n])\n        combos.append(comb)\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = list(combinations_with_replacement(l, n))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # initialize the list of prime numbers\n    prime_list = [True] * (n+1)\n    prime_list[0] = prime_list[1] = False\n\n    # loop through each number from 2 to sqrt(n)\n    for i in range(2, int(n**0.5)+1):\n        if prime_list[i]:\n            # if i is prime, mark all its multiples as composite\n            for j in range(i*i, n+1, i):\n                prime_list[j] = False\n\n    # count the number of prime numbers in the list\n    count = sum(prime_list)\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    A helper function to check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] >= test_tup2[0] and test_tup1[0] >= test_tup2[1]:\n        return test_tup1\n    elif test_tup2[0] >= test_tup1[0] and test_tup2[0] >= test_tup1[1]:\n        return test_tup2\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # compare the elements of the tuples\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        # if the first element is equal, compare the second element\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    max_1 = 0\n    max_2 = 0\n\n    for num in test_tup1:\n        if num > max_1:\n            max_2 = max_1\n            max_1 = num\n        elif num > max_2:\n            max_2 = num\n\n    return (max_1, max_2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the maximum value from each tuple\n    max_value1 = max(test_tup1)\n    max_value2 = max(test_tup2)\n    # Compare the maximum values and return the tuple with the highest value\n    if max_value1 > max_value2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Determine the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Initialize the maximum value for each tuple\n    max1 = 0\n    max2 = 0\n\n    # Initialize the maximum length for each tuple\n    max_len1 = 0\n    max_len2 = 0\n\n    # Iterate through the tuples\n    for i in range(len1):\n        for j in range(len2):\n            # Calculate the sum of the elements\n            total = test_tup1[i] + test_tup2[j]\n\n            # Update the maximum value and length\n            if total > max1:\n                max_len1 = max2\n                max1 = total\n                max2 = 0\n            elif total > max2:\n                max_len1 = max2\n                max_len2 = max1\n                max2 = total\n            else:\n                max_len2 = max1\n\n    # Determine which tuple is the maximum\n    if max1 > max2:\n        return (max_len1, max1)\n    else:\n        return (max_len2, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = test_tup1 if test_tup1 > test_tup2 else test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the two tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    # If the length of the first tuple is greater than the second, swap them\n    if length1 > length2:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    # Loop through the tuple and find the maximum element\n    max_element = test_tup1[0]\n    for i in range(1, length1):\n        if test_tup1[i] > max_element:\n            max_element = test_tup1[i]\n    # Return the maximum element in the second tuple\n    return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = max(test_tup1, test_tup2)\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the list of consecutive primes\n    consecutive_primes = [2, 3, 5, 7, 11]\n\n    # Initialize the count of consecutive primes\n    count = 0\n\n    # Loop until we have found the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        # Find the next consecutive prime number\n        next_prime = consecutive_primes[-1] + 2\n        consecutive_primes.append(next_prime)\n\n        # Check if it satisfies the conditions\n        if (is_prime(consecutive_primes[-3]) and\n            is_prime(consecutive_primes[-2]) and\n            is_prime(consecutive_primes[-1])):\n            count += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return consecutive_primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(n):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return 'Please enter a positive integer.'\n    \n    # Initialize an empty list to store prime numbers\n    prime_list = []\n\n    # Initialize two variables to keep track of the lower and upper bounds\n    lower_bound = 2\n    upper_bound = 10**n\n\n    # Loop through the range of numbers between the lower and upper bounds\n    for num in range(lower_bound, upper_bound):\n        is_prime = True\n\n        # Check if the number is prime\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        # If the number is prime, add it to the list of prime numbers\n        if is_prime:\n            prime_list.append(num)\n\n    # If the list of prime numbers has less than n prime numbers, it means there is no nth newman-shanks-williams prime number\n    if len(prime_list) < n:\n        return 'No nth newman-shanks-williams prime number exists.'\n\n    # Return the nth newman-shanks-williams prime number\n    return prime_list[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a variable to store the count of primes found so far\n    count = 0\n    # Initialize a list to store the numbers that are composite\n    composites = []\n    # Start with the first composite number greater than 2\n    composite = 3\n    # Loop until we have found n primes\n    while count < n:\n        # Check if the current composite number is prime\n        is_prime = True\n        for i in range(2, int(composite**0.5) + 1):\n            if composite % i == 0:\n                is_prime = False\n                break\n        # If the composite number is prime, add it to the list of composites and increment the count\n        if is_prime:\n            composites.append(composite)\n            count += 1\n        # Increment the composite number by 2 (since we only need odd numbers)\n        composite += 2\n    # Return the nth prime number in the list of composites\n    return composites[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    p = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(p**0.5) + 1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while True:\n        if p % 2 == 0:\n            p += 1\n        else:\n            flag = True\n            for j in range(3, int(p**0.5) + 1, 2):\n                if p % j == 0:\n                    flag = False\n                    break\n            if flag:\n                break\n        if n == 0:\n            break\n        n -= 1\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Check if a number is prime or not.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(n):\n        \"\"\"\n        Calculate the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        if n < 2:\n            return None\n        i = 1\n        count = 0\n        while True:\n            if is_prime(i):\n                count += 1\n            if count == n:\n                return i\n            i += 1\n\n    return newman_shanks_williams(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    prime = 2\n\n    # Check if 2 is a newman-shanks-williams prime\n    if is_newman_prime(2):\n        count += 1\n\n    # Check if 3 is a newman-shanks-williams prime\n    if is_newman_prime(3):\n        count += 1\n\n    # Check if 4 is a newman-shanks-williams prime\n    if is_newman_prime(4):\n        count += 1\n\n    # Check if the next number is a newman-shanks-williams prime\n    while count < n:\n        if is_newman_prime(prime):\n            count += 1\n        prime += 1\n\n    return prime\n\n\ndef is_newman_prime(n):\n    '''\n    Check if a number is a newman-shanks-williams prime.\n    '''\n    # Initialize variables\n    count = 0\n    i = 2\n\n    # Check if 2 is a newman-shanks-williams prime\n    if n == 2:\n        return True\n\n    # Check if 3 is a newman-shanks-williams prime\n    if n == 3:\n        return True\n\n    # Check if 4 is a newman-shanks-williams prime\n    if n == 4:\n        return True\n\n    # Check if the next number is a newman-shanks-williams prime\n    while count < 1000:\n        # Calculate the square root of the number\n        sqrt_n = int(n**0.5)\n\n        # Check if the number is divisible by any number between 2 and sqrt_n\n        if n % i == 0:\n            count += 1\n            if count == 1000:\n                return True\n            continue\n        i += 1\n\n        # If the number is prime, then check if it is a newman-shanks-williams prime\n        if i > sqrt_n:\n            return False\n\n    return False"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n\n    # Loop through the tuples and perform element-wise division\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]/test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Loop through the two tuples and perform element-wise division\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        if len(test_tup1)!= len(test_tup2):\n            raise ValueError(\"Length of the two tuples should be equal.\")\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 0 or test_tup2[i] == 0:\n                raise ValueError(\"Both elements of the tuples should not be zero.\")\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup\n    except ValueError as e:\n        print(\"Error:\", e)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of the first tuple should be equal to the length of the second tuple\")\n    \n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            raise ValueError(\"Division by zero is not allowed\")\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            print(\"Error: Invalid types!\")\n            return None\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Error: Division by zero!\")\n            return None\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Perform element-wise division\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            result_tup += (0,)\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n\n    # Perform element-wise division of the tuples\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts\n    where the length of the first part of the list is L, and returns the resulting lists\n    in a tuple.\n    '''\n    n = len(list1)\n    mid = n // 2\n    if n % 2 == 0:\n        return (list1[:mid], list1[mid:])\n    else:\n        return (list1[:mid+1], list1[mid+1:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Split a list into two parts where the length of the first part is L and return the resulting lists in a tuple.\n    '''\n    n = len(lst)\n    if L <= n:\n        # Split the list into two parts\n        mid = L // 2\n        first_part = lst[:mid]\n        second_part = lst[mid:]\n        return (first_part, second_part)\n    else:\n        return \"Error: L is greater than the length of the list.\""
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create a new list to store the first part of the list\n    first_part = []\n    \n    # Loop through the list and add items to the first_part list until it reaches the length of L\n    while len(first_part) < L:\n        first_part.append(list1.pop(0))\n    \n    # Create a new list to store the second part of the list\n    second_part = list1\n    \n    # Return the first and second parts of the list in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid = len(list1)//2\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # If the length of the list is less than L, return the list as is\n    if len(list1) < L:\n        return list1\n\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(lst) <= L:\n        return (lst, [])\n    else:\n        return (lst[:L], lst[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(list1)\n    if L > n:\n        raise ValueError(\"Length of L should be less than or equal to the length of the list\")\n    \n    if L == 0:\n        return ([], list1)\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the second part of the list\n    second_part_length = len(list1) - L\n    \n    # Create the first part of the list\n    first_part = list1[:L]\n    \n    # Create the second part of the list\n    second_part = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7) + 5"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    years = h_age * 7\n\n    # Return the dog's age in dog's years\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    # convert human age to dog years\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert hours to years\n    years = h_age / 730\n    # round to 2 decimal places\n    return round(years, 2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dogs = 7 * h_age\n    return age_in_dogs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    return h_age * dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age <= 16:\n        dog_years = 13\n    elif h_age <= 18:\n        dog_years = 14\n    else:\n        dog_years = 15\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # Create a new empty list to store the split lists\n    split_lists = []\n    \n    # Loop through the list and split it for every nth element\n    for i in range(0, len(S), step):\n        # Create a new empty list to store the current split\n        current_split = []\n        # Loop through the current slice of the list\n        for j in range(i, min(i+step, len(S))):\n            # Append the current element to the current split\n            current_split.append(S[j])\n        # Append the current split to the list of split lists\n        split_lists.append(current_split)\n    \n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step > 0:\n        n_elements = len(S)\n        split_lists = []\n        i = 0\n        while i < n_elements:\n            split_list = S[i:i+step]\n            split_lists.append(split_list)\n            i += step\n        return split_lists\n    else:\n        return []"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n\n    # convert input list to a list of lists\n    S = [list(S[i:i+step]) for i in range(0, len(S), step)]\n\n    return S"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step!= 0:\n        print(\"The list must be split into equal parts\")\n        return\n\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    i = 0\n    while i < n:\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Initialize an index variable to start from the beginning of the list\n    i = 0\n    # Initialize a counter variable to keep track of how many times we have split the list\n    count = 0\n    # Loop through the list until we have split it step number of times\n    while count < step:\n        # If the counter is less than the step number, split the list and append the resulting list to the result list\n        if i < len(S):\n            if count == 0:\n                result.append(S[i:i+step])\n            else:\n                result[-1].append(S[i:i+step])\n            i += step\n            count += 1\n        else:\n            break\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6*l**2\n    \n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area\n    lateral_surface = 6 * l ** 2\n    \n    # Return the lateral surface area\n    return lateral_surface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l/2\n    area = 6*(s**2 + 2*s**3 + 2*s**4 + 3*s**5) + 12*s**6\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the lateral surface area of the cube\n    surface_area = l ** 2 * 6\n\n    # Return the lateral surface area\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Formula to calculate lateral surface area of a cube\n    area = (6*l**2 + 12*l + 6)/3\n    # Return the lateral surface area\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_squares = 0\n    for i in range(2, n+1, 2):\n        odd_squares += i*i\n    return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (2*i+1)**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to zero\n    total = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd number to the total sum\n        total += i**2\n    # Return the final sum of squares of odd numbers\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initializing the variable to 1\n    count = 1\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # print the current count followed by an asterisk\n        print(count, end=' ')\n        # increase the count by 1\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    # Define a list of stars to print\n    stars = ['*'] * n\n\n    # Print the list of stars\n    print(' '.join(stars))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer argument n and returns then'th star number.\n    \"\"\"\n    # initialize a variable to hold the result\n    result = ''\n\n    # loop through each digit of the given number\n    for digit in str(n):\n        # if the digit is 0, add an asterisk to the result\n        if digit == '0':\n            result += '*'\n        # if the digit is 1, add a period to the result\n        elif digit == '1':\n            result += '.'\n        # if the digit is 2, add two periods to the result\n        elif digit == '2':\n            result += '...'\n        # if the digit is 3, add three periods to the result\n        elif digit == '3':\n            result += '....'\n        # if the digit is 4, add four periods to the result\n        elif digit == '4':\n            result += '.....'\n        # if the digit is 5, add five periods to the result\n        elif digit == '5':\n            result += '......'\n        # if the digit is 6, add six periods to the result\n        elif digit == '6':\n            result += '.......'\n        # if the digit is 7, add seven periods to the result\n        elif digit == '7':\n            result += '........'\n        # if the digit is 8, add eight periods to the result\n        elif digit == '8':\n            result += '..........'\n        # if the digit is 9, add nine periods to the result\n        elif digit == '9':\n            result += '...........'\n\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"1*\"\n    else:\n        return \"(%d*%d)\" % (find_star_num(n-1), n)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) +'' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Invalid input. n must be greater than or equal to 1.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        # Using for loop to iterate n times\n        for i in range(1, n+1):\n            # Printing stars based on the position of the loop variable i\n            print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    num = 1\n    while num < n:\n        num = num * 2\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize the variables for the first n numbers\n    num = 1\n    prev_num = 1\n    count = 1\n    \n    # loop through the remaining numbers\n    while count < n:\n        # calculate the next number\n        next_num = 2*prev_num + 1\n        \n        # update the variables\n        num = next_num\n        prev_num = num\n        count += 1\n    \n    # return the nth star number\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        result = \"\"\n        for i in range(1, n+1):\n            result += \"*\"\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize the result variable\n    result = ''\n\n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Append a star to the result string\n        result += '*'\n\n        # Add a newline character after each 5 stars\n        if i % 5 == 0:\n            result += '\\n'\n\n    # Return the result string\n    return result"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) == 1:\n        return ord(k)\n    else:\n        return ascii_value(k[1]) + ord(k[0]) * 256"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in 'abcdefghijklmnopqrstuvwxyz':\n        return ord(k) - ord('a') + 1\n    elif k in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return ord(k) - ord('A') + 1\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n\n    # Convert the character to its ascii value\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_at_even_index = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even_at_even_index += arr[i]\n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0  \n    for i in range(0, len(arr), 2):  \n        sum_even += arr[i]  \n    return sum_even  "
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    sum_even_index = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0: # check if index is even\n            if arr[i] % 2 == 0: # check if number at even index is even\n                sum_even += arr[i]\n                sum_even_index += i # add index of even number\n    \n    return sum_even, sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if i % 2 == 0:\n                count += 1\n    return sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total_sum = 0\n    for i in range(2, n+1):\n        if i ** 5 % 2 == 0:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    return sum(i**5 for i in range(2, n+1, 2))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = 0\n    for i in range(2, n+1, 2):\n        power_sum += i**5\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear[1] for tuple_ in test_list for rear in tuple_]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear for tup in test_list for rear in tup[1:]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        rear = item[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[1] for tuple in test_list]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of both tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Both tuples should have same length\"\n    # Loop through both tuples and subtract the elements with same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n    # iterate over the tuples and subtract the corresponding elements\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Create a new tuple to store the result\n    result_tup = ()\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Use tuple unpacking to extract the elements of the tuples\n        val1 = test_tup1[i]\n        val2 = test_tup2[i]\n        # Calculate the difference between the two values and add it to the result tuple\n        diff = val1 - val2\n        result_tup += (diff,)\n    # Return the new tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through the tuples and subtract the elements from the first tuple with the same index as the elements of the second tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through the tuples and subtract the elements at the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the updated tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Initialize the result tuple with the length of the first tuple\n    result_tup = tuple(range(len(test_tup1)))\n    \n    # Loop through each element of the result tuple and subtract the corresponding element of the first tuple from the corresponding element of the second tuple\n    for i in range(len(result_tup)):\n        result_tup[i] = test_tup1[i] - test_tup2[i]\n        \n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1, n+1):\n        coeff_sum += math.comb(n, i)*2*i\n    \n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i%2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1, n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum variable to zero\n    sum_even_coeffs = 0\n\n    # Use a for loop to iterate through all possible values of n\n    for i in range(1, n+1):\n        # Use a nested for loop to iterate through all possible values of j\n        for j in range(1, i+1):\n            # Calculate the binomial coefficient using the formula\n            coeff = math.comb(i, j)\n            # Check if the coefficient is even and add it to the sum if it is\n            if j % 2 == 0:\n                sum_even_coeffs += coeff\n\n    return sum_even_coeffs\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_sum += math.comb(n, i)\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    # Define the even index binomial coefficients\n    even_coeffs = [math.comb(n, i) for i in range(0, n+1, 2)]\n    # Return the sum of the even index coefficients\n    return sum(even_coeffs)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math  \n\ndef even_binomial_Coeff_Sum(n): \n    '''\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeff = 0 \n\n    for i in range(1, n+1): \n        numerator = math.factorial(n) / (math.factorial(i-1) * math.factorial(n-i+1)) \n        denominator = math.factorial(2*i-1) / (math.factorial(i) * math.factorial(2*n-2)) \n\n        sum_even_binomial_coeff += numerator / denominator\n\n    return sum_even_binomial_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1, 2):\n        coeff_sum += math.comb(n, i-1)\n    \n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize a variable to store the sum of even index binomial coefficients\n    sum_even_binomial_coeffs = 0\n    \n    # iterate through all pairs of indices\n    for i in range(n):\n        for j in range(i+2,n+1):\n            # calculate the binomial coefficient\n            binomial_coeff = math.comb(n,i)*math.comb(j-1,i-1)\n            # check if the index is even\n            if i % 2 == 0:\n                # add the binomial coefficient to the sum of even index binomial coefficients\n                sum_even_binomial_coeffs += binomial_coeff\n    \n    # return the sum of even index binomial coefficients\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients using recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * even_binomial_Coeff_Sum(n - 2)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * (r ** 2)) + (3.14159 * (h * r)) + (3.14159 * (r ** 2))\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r # approximate formula for the area of a cylinder\n    volume = area * h # formula for the volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3) * (3.14159 * r**2 * h)\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14 * r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Calculates the volume of a cylinder with given radius and height.\n    \"\"\"\n    return 3.14 * r * r * h / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = ((1/3) * 3.14159 * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14 * r**2 # calculating the area of the cylinder\n    volume = area * h # calculating the volume of the cylinder\n    return volume # returning the volume of the cylinder"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {k: v for k, v in dict.items() if v >= n}\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n and returns a new dictionary that contains only the entries\n    with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Initialize an empty list to store the filtered entries\n    filtered_dict = []\n    # Loop through each key-value pair in the dictionary\n    for key, value in dict.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Append the key-value pair to the filtered list\n            filtered_dict.append((key, value))\n    # Return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] < test_tup[i+1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    i = 0\n    while i < len(test_tup) and i < 2:\n        if i < len(test_tup) and test_tup[i] == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(a, end=' ')\n            a += 1\n        else:\n            print(b, end=' ')\n            b += 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 0\n    for i in range(n, 0, -1):\n        dec_num += (i ** 2) + (10 ** i)\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal_num = 0\n    current_num = 0\n    \n    # Calculate the number of rows and columns\n    rows = n // 2 + 1\n    cols = n // 2 + 1\n    \n    # Iterate over the rows and columns\n    for i in range(rows):\n        for j in range(cols):\n            # Calculate the current number\n            current_num = (i + 1) * (j + 1)\n            \n            # Check if the current number is a decagonal number\n            if current_num == n:\n                return True\n    \n    # If the loop completes without finding the nth decagonal number, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal = decagonal + 2 * (i-1)\n    return decagonal\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # first check if n is even or not\n    if n % 2 == 0:\n        return \"The number is even.\"\n\n    # initialize variables\n    prev_num = 0\n    decagonal_num = 0\n\n    # calculate decagonal number by summing of previous two decagonal numbers\n    for i in range(1, n):\n        prev_num = decagonal_num\n        decagonal_num = prev_num * (3 * i + 1) // 2\n\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += (i*i*i*i)\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize the sum of the first n rows to 1\n    total_sum = 1\n\n    # Iterate over each row in the table\n    for i in range(1, n+1):\n        # Calculate the number of digits in the row number\n        digits = len(str(i))\n\n        # Calculate the number of digits in the total sum\n        total_digits = len(str(total_sum))\n\n        # Calculate the difference between the row number and the total sum\n        diff = i - total_sum\n\n        # If the number of digits in the row number is less than the number of digits in the total sum,\n        # the row is a decagonal number\n        if digits < total_digits:\n            return True\n\n        # Add the row number to the total sum\n        total_sum += i\n\n    # If we reach this point, the nth decagonal number is not found\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += 2*i**2\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal = decagonal + 2*i - 1\n    return decagonal\n\nn = int(input(\"Enter the value of n: \"))\nprint(is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the starting point of the decagonal sequence\n    decagonal_num = 1\n    # Loop through the sequence and count the number of times the decagonal number is greater than n\n    for i in range(1, n+1):\n        if decagonal_num > n:\n            break\n        decagonal_num += i\n    # Check if the number of times the decagonal number is greater than n is greater than 0\n    if decagonal_num > n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty dictionary\n    unique_dict = {}\n    \n    # Loop through the list and add each element to the dictionary as a key\n    for element in test_list:\n        unique_dict[element] = True\n    \n    # Check if the dictionary has any keys\n    if len(unique_dict) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as an argument and returns True if all elements in the list are unique and False otherwise.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # creating an empty set to store unique elements\n    unique_set = set()\n    # iterating over the list and adding each element to the set\n    for element in test_list:\n        unique_set.add(element)\n    # checking if the length of the unique_set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to remove duplicates and then back to a list\n    unique_list = list(set(test_list))\n    # check if the length of the list is equal to the length of the set\n    if len(test_list) == len(unique_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to check for uniqueness.\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the original list.\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists have different lengths.\")\n        return\n    \n    result = []\n    \n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length!\")\n        return\n    \n    # Subtracting the elements of each list element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list with the \n    difference of elements between the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise and return the result.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n    \n    # Count the frequency of each digit\n    for d in digits:\n        freq[d] += 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for d in range(10):\n        if freq[d] > 0 and freq[d] > d:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # convert the integer to a string\n    num_str = str(n)\n\n    # create a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # iterate over each digit in the string\n    for digit in num_str:\n        # check if the digit is already in the dictionary\n        if digit in digit_freq:\n            # increment the frequency of the digit\n            digit_freq[digit] += 1\n        else:\n            # add the digit to the dictionary with a frequency of 1\n            digit_freq[digit] = 1\n\n    # iterate over each digit in the dictionary\n    for digit in digit_freq:\n        # check if the frequency of the digit is greater than or equal to the digit itself\n        if digit_freq[digit] > digit:\n            # print an error message\n            print(\"Error: frequency of digit '{}' is greater than the digit itself.\".format(digit))\n            # break out of the loop\n            break\n\n    # print a success message if no errors were found\n    print(\"No errors found.\")"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each digit\n    freq = {}\n\n    # Convert the integer to a string and iterate over each character\n    for char in str(n):\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Iterate over the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for key, value in freq.items():\n        if value > value:\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    count = [0] * 10  # Initialize a list of zeros for the count of each digit in the integer\n    \n    # Count the frequency of each digit in the integer\n    for i in range(len(str(n))):\n        count[int(str(n)[i])] += 1\n    \n    # Check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for i in range(10):\n        if count[i] > 0 and count[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Convert the integer to a string\n    num_str = str(n)\n\n    # Initialize the frequency dictionary\n    freq_dict = {}\n\n    # Iterate through the string\n    for digit in num_str:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    # Iterate through the string again\n    for digit in num_str:\n        # If the frequency of the digit is greater than the digit itself\n        if freq_dict[digit] > digit:\n            return False\n\n    # If no false positive is found, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for i in range(10):\n        digits.append(0)\n\n    for digit in str(n):\n        digits[int(digit)] += 1\n\n    for digit in digits:\n        if digit > 0 and digit!= digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # Helper function to count the frequency of each digit in a given integer\n    def digit_frequency(num):\n        freq = [0]*10\n        while num > 0:\n            freq[num%10] += 1\n            num //= 10\n        return freq\n\n    # Get the frequency of each digit in the given integer\n    freq = digit_frequency(n)\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    # If all digits have frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n\n    for digit in digits:\n        freq[digit] += 1\n\n    for digit in range(10):\n        if freq[digit] > 0:\n            if freq[digit] > digit:\n                return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    for num in str(n):\n        if num in digit_freq:\n            digit_freq[num] += 1\n        else:\n            digit_freq[num] = 1\n    for digit, freq in digit_freq.items():\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:],element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element,\n    False otherwise.\n    \"\"\"\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    \n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    \n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    match = re.search(pattern, text)\n    return match is not None\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a.*b\\w{2,3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?:b{2,3})*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b(?:(?=.*b)(?=.*b))'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b.{2,3})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the length of the modified array\n    m = n * k\n\n    # Create a new array with the modified array\n    b = [a[i] for i in range(m)]\n\n    # Initialize variables for finding the maximum sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the modified array and find the maximum sum of contiguous subarrays\n    for i in range(m):\n        current_sum += b[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        max_sum = sum(a)\n        return max_sum\n    \n    # create a modified array by repeating the original array k times\n    modified_array = []\n    for i in range(k):\n        modified_array = modified_array + a\n    \n    # sort the modified array in non-decreasing order\n    modified_array.sort()\n    \n    # initialize variables to store the sum of the largest subarray and its index\n    max_sum = modified_array[-1]\n    max_index = len(modified_array) - 1\n    \n    # iterate over the sorted modified array and update the max_sum and max_index\n    for i in range(len(modified_array)):\n        if i == 0:\n            max_sum = modified_array[i]\n            max_index = i\n        elif modified_array[i] > max_sum:\n            max_sum = modified_array[i]\n            max_index = i\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return max(a[0], a[1])\n    else:\n        max_so_far = float('-inf')\n        max_ending_here = a[0]\n        for i in range(n - k):\n            max_ending_here += a[i + k]\n            max_ending_here -= a[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # loop through the array k times\n    for _ in range(k):\n        # add the first element of the array\n        current_sum += a[0]\n        \n        # loop through the remaining elements of the array\n        for i in range(1, n):\n            # add the current element to the sum and take the maximum\n            current_sum += a[i]\n            max_sum = max(max_sum, current_sum)\n            \n            # subtract the first element from the sum to remove the first element of the array\n            current_sum -= a[0]\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize a list of repeated arrays\n    repeated_arrays = []\n    for i in range(k):\n        repeated_arrays.append(a)\n\n    # Sort the repeated arrays in descending order\n    repeated_arrays.sort(reverse=True)\n\n    # Initialize a variable to store the maximum sum\n    max_sum = -float('inf')\n\n    # Iterate through the original array and calculate the maximum sum of a contiguous array formed by repeating the given array k times\n    for i in range(n):\n        # Calculate the sum of the current element and the maximum sum of a contiguous array formed by repeating the given array k times\n        current_sum = a[i] + repeated_arrays[0][i]\n        for j in range(1, k):\n            current_sum += repeated_arrays[j][i]\n\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    temp_sum = 0\n    modified_array = []\n\n    for i in range(n):\n        if i < k - 1:\n            modified_array.append(a[i])\n        elif i == k - 1:\n            modified_array.append(a[i])\n            modified_array.append(a[i])\n        else:\n            modified_array.append(a[i])\n            modified_array.extend(a[:k - 2])\n\n    for i in range(len(modified_array)):\n        temp_sum = max(temp_sum + modified_array[i], modified_array[i])\n        max_sum = max(max_sum, temp_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the sum of the original array\n    original_sum = sum(a)\n\n    # Initialize the sum of the modified array formed by repeating the original array k times\n    modified_sum = k * original_sum\n\n    # Initialize the maximum sum\n    max_sum = modified_sum\n\n    # Iterate over the original array and find the maximum sum of a contiguous subarray with the same sum as the modified array\n    for i in range(n):\n        current_sum = a[i]\n        for j in range(1, k+1):\n            current_sum += a[(i+j) % n]\n            modified_sum -= a[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                modified_sum = k * original_sum\n\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum of a non-repeating array\n    max_sum_non_repeating = max(a)\n    # Find the maximum sum of a repeating array\n    max_sum_repeating = max_sum_non_repeating * k\n    # Initialize the maximum sum of a contiguous array formed by repeating the given array\n    max_sum_contiguous = max_sum_non_repeating * k\n    # Iterate through the array and update the maximum sum of a contiguous array formed by repeating the given array\n    for i in range(n):\n        # Update the maximum sum of a contiguous array formed by repeating the given array\n        max_sum_contiguous = max(max_sum_contiguous - a[i], max_sum_non_repeating * k)\n    return max_sum_contiguous"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the maximum sum in the original array\n    max_sum = max(a)\n\n    # Find the sum of a modified array formed by repeating the original array k times\n    modified_sum = max_sum * k\n\n    # Initialize the maximum sum of a modified array formed by repeating the original array k times\n    max_modified_sum = modified_sum\n\n    # Initialize two pointers i and j, which start at the beginning and end of the array, respectively\n    i = 0\n    j = n - 1\n\n    # Loop through the array and find the maximum sum of a modified array formed by repeating the original array k times\n    while i < j:\n        modified_sum = max_sum * (k - 1) + max_sum * (k - 2) + a[i] + a[j]\n        if modified_sum > max_modified_sum:\n            max_modified_sum = modified_sum\n            i += 1\n            j -= 1\n        elif modified_sum < max_modified_sum:\n            max_modified_sum = modified_sum\n            i += 1\n        else:\n            i += 1\n            j -= 1\n\n    # Return the maximum sum of a modified array formed by repeating the original array k times\n    return max_modified_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf')\n    current_sum = 0\n    max_sum_with_repeats = float('-inf')\n    \n    for i in range(n):\n        current_sum += a[i]\n        \n        if current_sum < 0:\n            current_sum = 0\n            \n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n            if max_sum >= k * max_sum_with_repeats:\n                max_sum_with_repeats = k * max_sum\n        \n        if current_sum > k * max_sum_with_repeats:\n            current_sum -= a[i - n]\n            \n    return max_sum_with_repeats"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = []\n    for i in range(1, n+1, 2):\n        even_numbers.append(i)\n    return sum([i**2 for i in even_numbers])"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n        count += 1\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        count += 1\n        square = count ** 2\n        sum_of_squares += square\n    return sum_of_squares\n\nn = int(input(\"Enter the value of n: \"))\nresult = square_Sum(n)\nprint(\"The sum of squares of the first\", n, \"even natural numbers is:\", result)"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0  \n    for i in range(2, n+1, 2):  \n        total += i*i  \n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for item in list1:\n        lengths.append(len(item))\n    max_length = max(lengths)\n    result = []\n    for i, item in enumerate(list1):\n        if len(item) == max_length:\n            result.append(item)\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length = max([len(sublist_item) for sublist_item in sublist])\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for item in list1:\n        if len(item) > len(max_list):\n            max_list = item\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or not max_lengths:\n            max_lengths = sublist\n        elif len(sublist) == len(max_lengths):\n            for subsublist in sublist:\n                if len(subsublist) > len(max_lengths[-1]) or not max_lengths[-1]:\n                    max_lengths.append(subsublist)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum length\n    max_length_list = []\n    # Loop through each list in the list of lists\n    for lst in list1:\n        # Find the length of the current list\n        length = len(lst)\n        # If the length is greater than the current maximum length\n        if length > len(max_length_list):\n            # Update the maximum length list with the new length\n            max_length_list = [length]\n        # If the length is not greater than the current maximum length\n        elif length < len(max_length_list):\n            # Loop through the current maximum length list and update the lengths\n            for i in range(len(max_length_list)):\n                if length > max_length_list[i]:\n                    max_length_list[i] = length\n    # Return the maximum length list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for item in list1:\n        lengths.append(len(item))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    def helper(post, colors, ways):\n        if post == n:\n            ways[len(colors)] += 1\n            return\n        for color in range(1, k + 1):\n            if color not in colors:\n                colors.append(color)\n                helper(post + 1, colors, ways)\n                colors.pop()\n\n    ways = [0] * (k + 1)\n    helper(0, [], ways)\n    return ways[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # We need to keep track of the number of ways for each combination of colors\n    ways = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # If the fence has only 1 post, it cannot be painted with any color\n    ways[1][1] = 1\n    \n    # If the fence has only 2 posts, it can be painted with either color\n    ways[2][1] = ways[2][2] = 1\n    \n    # If the fence has 3 posts, we can only paint the last two with the same color\n    ways[3][1] = ways[3][3] = 1\n    \n    # Loop through the remaining fence sizes\n    for i in range(4, n+1):\n        # Loop through the colors\n        for j in range(1, k+1):\n            # If the color is different from the previous color, we can paint the previous two with the same color\n            if j > 1:\n                ways[i][j] = ways[i-2][j-1] + ways[i-2][j]\n            else:\n                ways[i][j] = ways[i-2][j]\n            # If we are allowed to paint the previous two with the same color, we can paint the next two with the same color\n            if j < k:\n                ways[i][j] += ways[i-3][j]\n    \n    # Return the final answer\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 3 or k < 1:\n        return 0\n\n    dp = [[0]*(k+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i <= 2:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i-2][j] + dp[i-1][j]) % (10**9 + 7)\n\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    # table to store count of ways of painting the fence with n posts and k colors\n    dp = [[0]*(k+1) for _ in range(n+1)] \n    # base case: all ways of painting with one post are 0\n    for i in range(1, k+1):\n        dp[1][i] = 1\n    # fill the table in a bottom-up manner\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            # if the fence has a post with the same color as the previous post, then we can either paint it with the same color as the previous post or with any color except the color of the previous post\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(colors_so_far, index, ways):\n        if index == n:\n            if len(set(colors_so_far)) <= k:\n                ways.add(tuple(colors_so_far))\n        elif colors_so_far[-1] == colors_so_far[-2]:\n            backtrack(colors_so_far, index + 1, ways)\n        else:\n            for color in range(k):\n                if color not in colors_so_far:\n                    backtrack(colors_so_far + [color], index + 1, ways)\n\n    ways = set()\n    backtrack([], 0, ways)\n    return len(ways)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a list to store the count of ways for each possible color combination\n    ways = [0] * (k * (n + 1))\n    # Initialize the first element of the list as 1 since there is only one way to paint the fence with 0 color and n posts\n    ways[0] = 1\n    # Loop through all possible color combinations\n    for i in range(1, k * n + 1):\n        # Extract the current color combination from the list\n        color_count = i // k\n        # Extract the current post index from the list\n        post_index = i % k\n        # Add the number of ways of painting the fence with the current color combination and the remaining posts to the list\n        ways[i] = ways[i-1] + ways[color_count * (n - post_index)]\n    # Return the final element of the list as the count of ways\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways(k):\n        if k == 1:\n            return 1\n        if k == 0:\n            return 0\n        ways = [0] * (k+1)\n        for i in range(1, k+1):\n            ways[i] = (ways[i-1] + ways[i-2]) % 1000000007\n        return ways[k]\n\n    def count_no_of_ways_helper(n, k, color, count):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        if color == k:\n            return 0\n        if count[color] == 0:\n            return 0\n        count[color] -= 1\n        ways = (count_no_of_ways_helper(n-1, k, color, count) + count_no_of_ways_helper(n-1, k, color+1, count)) % 1000000007\n        count[color] += 1\n        return ways\n\n    count = [0] * (k+1)\n    return count_no_of_ways_helper(n, k, 1, count)\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    elif k == 2:\n        return (n * (n - 1)) // 2\n    else:\n        dp = [0] * (k + 1)\n        dp[0] = 1\n        for i in range(1, k + 1):\n            dp[i] = (dp[i - 1] + (n - i + 1) * dp[i - 2]) % (10**9 + 7)\n        return dp[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def backtrack(i, color, count):\n        if i == n:\n            result[count] += 1\n            return\n        for j in range(i+1, n+1):\n            if color == color_list[j]:\n                backtrack(j, color, count)\n            elif color_list[j] == color_list[i] and (i == 0 or color_list[j]!= color_list[i-1]):\n                backtrack(j, color, count+1)\n\n    color_list = [1]*n\n    result = [0]*(k+1)\n    backtrack(0, 0, 0)\n    return result"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        return \"Error: Division by zero is not allowed.\"\n    else:\n        quotient = n // m\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient of n/m\n    quotient = n // m\n    \n    # Round down the quotient to the nearest integer\n    quotient = round(quotient)\n    \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # calculate quotient and remainder\n    q = n//m\n    r = n%m\n\n    # calculate quotient with remainder as integer and round down\n    if r == 0:\n        return q\n    else:\n        return q+1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n\n    # Calculate the quotient using integer division\n    quotient = n // m\n\n    # If the remainder is not zero, add 1 to the quotient\n    if n % m!= 0:\n        quotient += 1\n\n    # Return the rounded down quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # calculate the length of the third side\n    c = math.sqrt(w ** 2 + h ** 2 - (s ** 2))\n    # return the third side\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt((w**2) + (h**2))\n    third_side = math.sqrt((w**2) + (s**2))\n    return third_side\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the area of the triangle\n    area = 0.5 * w * h\n    # Calculate the semi-perimeter of the triangle\n    sp = math.sqrt(w**2 + h**2)\n    # Calculate the cosine of the angle formed by the side opposite and the hypotenuse\n    cos_angle = (w**2 + h**2 - area) / (2 * sp)\n    # Calculate the sinus of the angle formed by the side opposite and the hypotenuse\n    sin_angle = math.sqrt(1 - cos_angle**2)\n    # Calculate the third side of the triangle\n    third_side = sp * cos_angle\n    # Return the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes in two input parameters, w and h, representing the width and height of a right angled triangle. \n    The function returns the third side of the triangle, which is the length of one of its sides.\n    \"\"\"\n    # Using the Law of Cosines, we can find the length of one of the sides of the triangle.\n    a = math.sqrt(w**2 + h**2)\n    \n    # Return the length of the third side of the triangle.\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    return math.sqrt(s ** 2 - w ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_1 = math.sqrt(w**2 + h**2)\n    side_2 = w\n    side_3 = h\n    return math.sqrt(side_1**2 + side_3**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Use the Pythagorean theorem to find the cotangent of the third angle\n    cot_third = (w**2 + h**2 - s**2) / (2 * w * h)\n\n    # Use the cotangent to calculate the length of the third side\n    third_side = math.sqrt(cot_third**2 - 1)\n\n    # Return the value of the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s-w) * (s-h))\n    # Calculate the third side\n    third_side = math.sqrt(area)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list as input and returns the maximum value in the list.\n\n    Parameters:\n    lst (list): A list of values.\n\n    Returns:\n    int: The maximum value in the list.\n    \"\"\"\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]  # initialize max_val to first element of list\n\n    for val in listval[1:]:  # iterate over list elements starting from second\n        if val > max_val:  # check if current element is greater than max_val\n            max_val = val  # if yes, update max_val\n\n    return max_val  # return the maximum value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of values and returns the maximum value in it.\n    It checks the type of each value in the list and returns the largest of them.\n    '''\n    # initialize variables for the maximum and current maximum value\n    max_val = float('-inf')\n    curr_max = float('-inf')\n\n    # loop through the list of values\n    for val in listval:\n        # if the value is an integer, compare it to the current maximum\n        if type(val) == int:\n            curr_max = val\n        # if the value is a float, compare it to both the current maximum and the maximum\n        elif type(val) == float:\n            if val > curr_max:\n                curr_max = val\n            if val > max_val:\n                max_val = val\n\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    i = 1\n    while i * i <= number:\n        if number % i == 0:\n            divisor_sum += i\n        i += 1\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n\n    Args:\n        number: an integer value\n\n    Returns:\n        an integer value representing the sum of all divisors of the input number\n    \"\"\"\n\n    # initialize variables\n    divisor_sum = 1\n    divisor = 2\n\n    # loop through all divisors of the input number\n    while divisor * divisor <= number:\n        if number % divisor == 0:\n            divisor_sum += divisor\n        divisor += 1\n\n    # add the last divisor to the sum if it is also a divisor\n    if number % divisor == 0:\n        divisor_sum += divisor\n\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # iterate through all the numbers from 1 to the square root of the number\n    for i in range(1, int(number ** 0.5) + 1):\n\n        # if the number is divisible by the current number, add it to the sum\n        if number % i == 0:\n            sum += i\n\n    # return the sum of all divisors\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize variables\n    sum_div = 0\n    # loop through numbers from 1 to the square root of the input number\n    for i in range(1, int(number**0.5)+1):\n        # if the number is divisible by the current number, add it to the sum\n        if number % i == 0:\n            sum_div += i\n    # return the sum of all divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as an argument and returns the count of inversions in the array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to keep track of the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize a variable to keep track of the count of inversions\n    inv_count = 0\n\n    # Loop through the array until both pointers meet or cross each other\n    while left < right:\n        # If the left pointer is greater than the right pointer, there are no more inversions left\n        if arr[left] > arr[right]:\n            # Update the count of inversions\n            inv_count += (right - left)\n            # Move the left pointer to the right\n            left += 1\n        # If the right pointer is greater than the left pointer, there are inversions at the current index\n        else:\n            # Update the count of inversions\n            inv_count += (right - left)\n            # Move the right pointer to the left\n            right -= 1\n\n    # Return the count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += len(arr) - (j - i) - 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    # Counting inversions\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n\n    # Sort the array in non-decreasing order\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n    # Count inversions\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-j-1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Counting inversions using three pointers\n    left = 0\n    mid = 0\n    right = n - 1\n    count = 0\n\n    # Sort the array\n    arr.sort()\n\n    # Traverse the sorted array\n    while left < right:\n        # Find the first element greater than or equal to arr[left]\n        while left < right and arr[left] >= arr[mid]:\n            count += right - left + 1\n            left += 1\n\n        # Find the first element less than or equal to arr[right]\n        while left < right and arr[right] <= arr[mid]:\n            count += right - left + 1\n            right -= 1\n\n        # Swap arr[left] and arr[right]\n        arr[left], arr[right] = arr[right], arr[left]\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n  \n    # Sort array in non-decreasing order \n    arr.sort() \n  \n    # Traverse the sorted array and count inversions \n    for i in range(1, n): \n        l, r = 0, i \n        while l < r: \n            mid = (l + r) // 2 \n            if arr[mid] > arr[i]: \n                l = mid + 1 \n            else: \n                r = mid \n        if l > i: \n            inv_count += l - i \n        else: \n            inv_count += i - l \n  \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n\ndef merge_count(arr, l, r):\n    n1 = r - l + 1\n    n2 = len(arr) - r\n\n    if n1 == 1:\n        return n2\n\n    if n2 == 1:\n        return n1\n\n    mid1 = n1 // 2\n    mid2 = n2 // 2\n\n    left_half = arr[l:l + mid1]\n    right_half = arr[r - mid2 + 1:r + 1]\n\n    merge_sort(left_half)\n    merge_sort(right_half)\n\n    i = j = 0\n    count = 0\n\n    while i < mid1 and j < mid2:\n        if left_half[i] < right_half[j]:\n            count += mid2 - j\n            i += 1\n        else:\n            j += 1\n\n    count += merge_count(arr, l, l + mid1 - 1)\n    count += merge_count(arr, r - mid2 + 1, r)\n\n    return count\n\n\ndef get_Inv_Count(arr):\n    merge_sort(arr)\n    return merge_count(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr): \n        if len(arr) > 1: \n            mid = len(arr) // 2 \n            left_half = arr[:mid] \n            right_half = arr[mid:] \n            \n            merge_sort(left_half) \n            merge_sort(right_half) \n            \n            i = j = k = 0 \n            \n            while i < len(left_half) and j < len(right_half): \n                if left_half[i] <= right_half[j]: \n                    arr[k] = left_half[i] \n                    i += 1 \n                else: \n                    arr[k] = right_half[j] \n                    j += 1 \n                k += 1 \n                \n            while i < len(left_half): \n                arr[k] = left_half[i] \n                i += 1 \n                k += 1 \n                \n            while j < len(right_half): \n                arr[k] = right_half[j] \n                j += 1 \n                k += 1 \n    \n    # Merge Sort\n    merge_sort(arr) \n    \n    inv_count = 0\n    n = len(arr)\n    \n    # Count inversions\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                inv_count += n - i - 1\n    \n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n\n    Args:\n    list1 (list): A nested list to be flattened.\n\n    Returns:\n    list: A flattened list.\n    '''\n\n    # Define an empty list to store the flattened list\n    flattened_list = []\n\n    # Loop through each item in the list1\n    for item in list1:\n\n        # If the item is a list, recursively call the flatten_list function on it\n        if type(item) == list:\n            flattened_list += flatten_list(item)\n\n        # If the item is not a list, append it to the flattened_list\n        else:\n            flattened_list.append(item)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure into a single list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function will flatten a given nested list structure.\n    It will remove any nested lists and return a flat list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    def flatten(lst, result=None):\n        if result is None:\n            result = []\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item, result)\n            else:\n                result.append(item)\n        return result\n\n    return flatten(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the aggregate for each item\n    aggregate = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, quantity in stdata:\n        # Add the quantity to the aggregate for the item\n        aggregate[item] += quantity\n\n    # Calculate the maximum aggregate\n    max_agg = max(aggregate.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list of tuples and update the frequency of each item\n    for item, freq in stdata:\n        freq += 1\n\n    # Create a new list of tuples with the frequency of each item and the maximum frequency\n    max_freq = max(freq.items(), key=lambda x: x[1])[1]\n    max_items = [item for item, freq in stdata if freq == max_freq]\n\n    # Return the maximum aggregate\n    return sum(max_items)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize the dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    \n    # Iterate over the list of tuples and update the frequency of each item\n    for item, freq_item in stdata:\n        freq[item] += freq_item\n    \n    # Find the maximum frequency of any item\n    max_freq = max(freq.values())\n    \n    # Iterate over the list of tuples again and find the maximum aggregate\n    max_aggregate = 0\n    for item, freq_item in stdata:\n        if freq_item == max_freq:\n            max_aggregate += item\n    \n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each team\n    max_aggs = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for team, points in stdata:\n        # Update the maximum aggregate for the team\n        max_aggs[team] = max(max_aggs[team], points)\n        \n    # Find the team with the maximum maximum aggregate\n    max_team = max(max_aggs, key=lambda x: max_aggs[x])\n    \n    # Return the maximum aggregate for the team with the maximum maximum aggregate\n    return max_aggs[max_team]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a defaultdict to store the maximum aggregate\n    max_aggr = defaultdict(int)\n\n    # iterate through the list of tuples\n    for t in stdata:\n        # calculate the maximum aggregate\n        max_aggr[t[0]] = max(max_aggr[t[0]], t[1])\n\n    # return the maximum aggregate\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for customer, amount in stdata:\n        # Update the maximum aggregate for the customer\n        max_aggr[customer] = max(amount, max_aggr[customer])\n\n    # Find the maximum aggregate among all customers\n    max_agg = max(max_aggr.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for i in range(len(item)-1):\n            max_dict[i] = max(max_dict[i], item[i])\n    max_sum = sum([max_dict[i] for i in range(len(stdata[0])-1)])\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_item = max(max_dict.items(), key=lambda x: x[1])\n    return max_item[0] * max_item[1]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a defaultdict to store the sum of each product and its corresponding quantity\n    sums = defaultdict(int)\n\n    # loop through the list of tuples and update the sums dictionary\n    for item, quantity in stdata:\n        sums[item] += quantity\n\n    # calculate the maximum aggregate by finding the maximum value in the dictionary\n    max_aggregate = max(sums.values())\n\n    # return the maximum aggregate\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for num, sale in stdata:\n        max_dict[sale] = max(max_dict[sale], num)\n    max_sale = max(max_dict)\n    max_num = max(max_dict[max_sale])\n    return max_sale * max_num"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = 0\n        second_sum = 0\n        for j in range(n):\n            if i & (1 << j):\n                first_sum += 1\n            else:\n                second_sum += 1\n        if first_sum == second_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bit_sum = sum([int(digit) for digit in bin(i)[2:].zfill(n)])\n        if bit_sum == (i^((1<<n)-1)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    # Define a function to check if a binary sequence of length 2n has sum of first n bits same as sum of last n bits\n    def is_valid_seq(seq):\n        return sum(seq[:n]) == sum(seq[n:])\n    \n    # Initialize the count variable\n    count = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n, 2**n+2**n):\n        # Convert the binary number to a list of digits\n        seq = [int(digit) for digit in bin(i)[2:]]\n        \n        # Check if the sequence is a valid binary sequence\n        if is_valid_seq(seq):\n            # Increment the count variable\n            count += 1\n    \n    # Return the count of valid binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables\n    count = 0\n    total = 0\n    curr_seq = [0] * n\n\n    # Calculate the sum of all elements in the first n bits\n    for i in range(n):\n        curr_seq[i] = 0\n        total += curr_seq[i]\n\n    # Calculate the sum of all elements in the last n bits\n    for i in range(n, 2*n):\n        curr_seq[i%n] = 1\n        total += curr_seq[i%n]\n\n    # Compare the total sum with the sum of all binary sequences of length 2n\n    if total == 2**2*n:\n        count = 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n, 2**2*n + 1): \n        first_n = bin(i)[2:2+n]\n        last_n = bin(i)[-2-n:-2]\n        if first_n == last_n: \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if sum(binary[:n]) == sum(binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if sum(int(b) for b in binary[:n]) == sum(int(b) for b in binary[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    # Initialize the count to zero \n    count = 0 \n    # Initialize the sum of first n bits to zero \n    s1 = 0 \n    # Initialize the sum of last n bits to zero \n    s2 = 0 \n    # Generate all possible binary strings of length 2n \n    for i in range(2 ** n): \n        # Convert the integer to binary string \n        bin_str = bin(i)[2:] \n        # Check if the sum of first n bits is equal to the sum of last n bits \n        if sum([int(x) for x in bin_str[:n]]) == sum([int(x) for x in bin_str[-n:]]): \n            count += 1 \n    # Return the count of all binary sequences \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = i\n        last_sum = 0\n        for j in range(n):\n            if i & (1 << j):\n                last_sum += (1 << j)\n        for j in range(n):\n            if i & (1 << j):\n                first_sum -= (1 << j)\n        if first_sum == last_sum:\n            count += 1\n    return count\n\nprint(count_binary_seq(4)) # 10"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Count of binary sequences:\", count_binary_seq(n))"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to store the depth of the dictionary\n    depth = 0\n    \n    # Recursively iterate through the dictionary and increment the depth variable by 1\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n    \n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth -= 1\n        else:\n            max_depth = max(max_depth, current_depth)\n            current_depth = 0\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    \n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # initialize depth count to 0\n    depth = 0\n    # loop through each key in the dictionary\n    for key in d.keys():\n        # if the value is a dictionary, increase depth count by 1\n        if isinstance(d[key], dict):\n            depth += 1\n        # if the value is a list, loop through each item in the list\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                # if the item is also a dictionary, increase depth count by 1\n                if isinstance(item, dict):\n                    depth += 1\n        # if the value is not a dictionary or a list, do nothing\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth += dict_depth(v)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    \n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth = 1 + dict_depth(value)\n        else:\n            current_depth = 1\n            \n        if current_depth > max_depth:\n            max_depth = current_depth\n            \n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth counter to 0\n    depth = 0\n    # Recursively traverse the dictionary\n    for key in d:\n        # Increment depth counter by 1 for each nested dictionary\n        if isinstance(d[key], dict):\n            depth += 1\n        # If the value is not a dictionary, increment depth counter by 1\n        depth += 1\n    # Return the final depth counter\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the total number of rotations\n    total_rotations = rotations * len(arr)\n\n    # Calculate the new index after rotations\n    new_index = index + total_rotations\n\n    # If the new index is outside the array bounds, return None\n    if new_index < 0 or new_index >= len(arr):\n        return None\n\n    # Calculate the element at the new index\n    element = arr[new_index]\n\n    # Calculate the number of times to shift the element\n    shift_count = 0\n    for range_ in ranges:\n        if range_[0] <= element < range_[1]:\n            shift_count += 1\n            if shift_count == index:\n                return element\n\n    # If no element is found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    for i in range(len(ranges)-1, -1, -1):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            return arr[index-ranges[i][0]+rotations[i]]\n    \n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize the current element and the index of the element to be found\n    current_element = arr[index]\n    current_index = index\n\n    # Calculate the length of the range for each rotation\n    range_length = len(ranges[0])\n\n    # Iterate through each rotation\n    for i in range(rotations):\n        # Calculate the index of the next element to be found\n        next_index = (current_index + range_length - 1) % len(arr)\n\n        # Calculate the new element based on the current element and the next element to be found\n        new_element = arr[current_index] + arr[next_index]\n\n        # Update the current element and the index of the element to be found\n        current_element = new_element\n        current_index = next_index\n\n    # Return the current element at the given index\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges, rotations and an index as input, and returns the element at the given index after rotating the array.\n    \"\"\"\n    for i in range(rotations):\n        arr = rotate_array(arr, ranges)\n    \n    return arr[index]\n\n\ndef rotate_array(arr, ranges):\n    \"\"\"\n    This function takes an array and a range as input, and returns the rotated array.\n    \"\"\"\n    # Create a new array with all elements zeroed\n    rotated = [0] * len(arr)\n    # Iterate through the array and assign elements to the new array\n    for i in range(len(arr)):\n        if ranges[i] == 0:\n            rotated[i] = arr[i]\n        elif ranges[i] == 1:\n            rotated[i] = arr[len(arr)-1-i]\n        elif ranges[i] == 2:\n            rotated[i] = arr[len(arr)-i]\n        elif ranges[i] == 3:\n            rotated[i] = arr[i]\n    \n    return rotated\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the index of the element in the array\n    for i in range(len(arr)):\n        if arr[i] == ranges[index]:\n            element_index = i\n            break\n    # Calculate the number of rotations required to find the element at the given index\n    num_rotations = 0\n    for i in range(len(ranges) - 1, index - 1, -1):\n        num_rotations += ranges[i]\n    # Rotate the array by the required number of rotations and find the element at the given index\n    arr = [arr[(i + rotations) % len(arr)] for i in range(len(arr))]\n    for i in range(num_rotations):\n        arr = [arr[i] for i in range(len(arr))]\n    return arr[index - 1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes the following parameters:\n    arr: The original array to be rotated.\n    ranges: The ranges of each rotation.\n    rotations: The number of rotations to be performed.\n    index: The index at which the element needs to be found.\n    \n    This function finds the element at the given index after rotating the array.\n    The element to be found is the element at the given index after rotating the array for all the rotations.\n    '''\n    \n    # Initialize the result variable\n    result = arr[index]\n    \n    # Perform the required rotations\n    for i in range(rotations):\n        # Calculate the range of the current rotation\n        current_range = ranges[i]\n        \n        # Calculate the start index of the current rotation\n        start_index = index + current_range\n        \n        # Calculate the end index of the current rotation\n        end_index = index + (2*current_range)\n        \n        # Rotate the current range of the array\n        arr[index:end_index] = arr[start_index:end_index]\n        \n        # Update the start index of the next rotation\n        index = end_index - current_range\n    \n    # Return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, range of rotations, and the index at which to find an element.\n    It then calculates the new index after rotating the array by the number of rotations.\n    Finally, it returns the element at the new index.\n    \"\"\"\n    # Find the new index after rotating the array by the number of rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Find the element at the new index\n    element = arr[new_index]\n\n    # Return the element at the new index\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initializing variables\n    count = 0\n    num = arr[0]\n\n    # iterating through the array\n    for i in range(len(arr)) :\n        # calculating the count of rotations\n        if arr[i] == num :\n            count += 1\n            if count == rotations :\n                # finding the element at the given index\n                if i == index :\n                    return num\n                else :\n                    # moving to the next rotation of the same element\n                    num = arr[(i+1)%len(arr)]\n                count = 0\n\n    # if the element is not found after rotations, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        if i < len(ranges):\n            left, right = ranges[i]\n            arr[left:right+1] = arr[right:left-1:-1]\n        else:\n            arr = arr[1:] + arr[0:1]\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Base case: If the index is outside the range of the array, return None\n    if index < 0 or index >= len(arr) : \n        return None\n\n    # Base case: If the number of rotations is zero, return the element at the given index\n    if rotations == 0 : \n        return arr[index]\n\n    # Find the rotation count by finding the smallest rotation that satisfies the given range\n    rotation_count = 0\n    while ranges[rotation_count][0] <= index :\n        rotation_count += 1\n        if rotation_count == len(ranges) :\n            return None\n\n    # Find the element at the given index after rotating the array by the given rotation count\n    rotated_arr = arr[ranges[rotation_count-1][1]:] + arr[:ranges[rotation_count-1][0]]\n    rotated_index = index - ranges[rotation_count-1][1] + rotation_count - 1\n    return rotated_arr[rotated_index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'\\b[Pp]\\w+\\b'\n    matches = re.findall(pattern,''.join(words))\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+$') # regex pattern to match words starting with 'p'\n    for word in words:\n        if pattern.match(word): # check if word matches the pattern\n            return word, word[1:] # return first and second words if matched\n    return None, None # return None if no word matches the pattern"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+$'\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p.*\")\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = r'^p[a-z]+'\n\n    # Use re.findall() to find all words that match the pattern\n    matches = re.findall(pattern,''.join(words))\n\n    # Check if there are at least two matches\n    if len(matches) < 2:\n        return 'There are not enough words starting with \"p\"'\n\n    # Return the two matching words\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w{3,}$')\n    for word in words:\n        if pattern.match(word):\n            return [word, words[words.index(word) + 1]]\n    return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n\n    if index == k:\n        return a[index]\n\n    dp = [-float('inf')] * (n + 1)\n    dp[index] = a[index]\n    for i in range(index + 1, n + 1):\n        if i == k:\n            continue\n        dp[i] = max(dp[i], dp[index] + a[i])\n\n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_so_far = [0] * n\n    for i in range(n):\n        if i < k:\n            max_so_far[i] = a[i]\n        else:\n            max_so_far[i] = max(max_so_far[i - 1] + a[i], max_so_far[i - k] + a[i])\n    return max_so_far[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables for prefix sum and maximum sum\n    prefix_sum = [0] * (n+1)\n    max_sum = float('-inf')\n\n    # Calculate prefix sum\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n\n    # Find maximum sum of increasing subsequence for 1 to k-1 indices\n    for i in range(1, k+1):\n        max_sum = max(max_sum, prefix_sum[i]-prefix_sum[i-1])\n\n    # Find maximum sum of increasing subsequence for i to n-1 indices\n    for i in range(index, n):\n        max_sum = max(max_sum, prefix_sum[i+1]-prefix_sum[i]-a[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and current sum to zero\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Initialize an array to store the increasing subsequence\n    increasing_subseq = [float('-inf')] * n\n    \n    # Traverse the array from index to n-1\n    for i in range(index, n):\n        # Check if the current element is greater than k\n        if a[i] > k:\n            # If yes, update the current sum to include the kth element\n            current_sum = a[i] + increasing_subseq[i-1]\n        else:\n            # If no, update the current sum to include the current element\n            current_sum = a[i]\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Update the increasing subsequence array\n        increasing_subseq[i] = current_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    \n    if index == 0:\n        return a[0]\n    \n    max_sum = max_sum_increasing_subseq(a, n, index - 1, k)\n    \n    if k - 1 == index:\n        return max(max_sum, a[k - 1])\n    \n    if k - 1 < index:\n        return max(max_sum, max_sum_increasing_subseq(a, n, index - 1, k - 1))\n    \n    return max(max_sum, max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[k - 1])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0, 0\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        max_sum = 0\n        start_index = index\n        for i in range(index+1, n+1):\n            if a[i] > a[start_index]:\n                current_sum = max_sum_increasing_subseq(a, n, i, k) + a[i]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    start_index = i\n        return max_sum, start_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Initialize the prefix sum array\n    prefix_sum = [0] * n\n\n    # Calculate the prefix sum of all elements\n    for i in range(n):\n        prefix_sum[i] = a[i] + prefix_sum[i-1]\n\n    # Initialize the dp array\n    dp = [0] * (n+1)\n\n    # Calculate the maximum sum of increasing subsequence starting from index to ith index\n    for i in range(index, n):\n        if i >= k:\n            current_sum = prefix_sum[i] - prefix_sum[i-k]\n        else:\n            current_sum = a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        dp[i+1] = max_sum\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Iterate from index to k-1\n    for i in range(index, k):\n        \n        # Add the current element to the current sum\n        curr_sum += a[i]\n        \n        # Update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        # If the current sum becomes negative, subtract the previous element and add the current element again\n        elif curr_sum < 0:\n            curr_sum += a[i-1]\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    prefix_sum = [0] * n\n    \n    # Initialize the prefix sum array\n    for i in range(n):\n        prefix_sum[i] = current_sum\n        if i > index:\n            current_sum += a[i] - a[index]\n    \n    # Find the maximum sum of increasing subsequence\n    for i in range(index, n):\n        if i > k:\n            current_sum -= a[i-1] + a[k]\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize a table to store the maximum sum of increasing subsequence ending at each index\n    table = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and first column with -infinity\n    for i in range(n + 1):\n        table[i][0] = float('-inf')\n        table[0][i] = float('-inf')\n\n    # Fill the table in a bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            # If the jth element is greater than the ith element and the sum of the subsequence ending at i-1 and the ith element is greater than the sum of the subsequence ending at i-1 and the j-th element, then update the value in the table\n            if a[i - 1] > a[i - 1 - j] and table[i - 1][j] < table[i - 1][j - 1] + a[i - 1]:\n                table[i][j] = table[i - 1][j]\n            else:\n                table[i][j] = table[i - 1][j - 1]\n\n    # Return the maximum sum of increasing subsequence ending at index k\n    return table[n][k]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Get the first m elements of the tuple\n    tuplex_copy = tuplex_copy[:m]\n    # Reverse the order of the elements\n    tuplex_copy = tuplex_copy[::-1]\n    # Get the last n elements of the tuple\n    tuplex_copy = tuplex_copy[-n:]\n    return tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if isinstance(tuplex, tuple):\n        result = []\n        for i in range(m):\n            result.append(deepcopy(tuplex))\n        for j in range(n):\n            result.append(deepcopy(tuplex[j]))\n        return tuple(result)\n    else:\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the original tuple to avoid modifying it\n    new_tuplex = deepcopy(tuplex)\n    \n    # Calculate the length of each line in the colon\n    line_len = m / n\n    # Calculate the number of lines in the colon\n    num_lines = int(m / line_len) + (m % line_len > 0)\n    \n    # Create a new empty list to store the colon\n    colon = []\n    \n    # Loop through each line in the colon\n    for i in range(num_lines):\n        # Create a new list to store the elements of the current line\n        line = []\n        # Loop through each element in the line\n        for j in range(n):\n            # Calculate the index of the current element in the original tuple\n            index = i*n + j\n            \n            # If the index is within the bounds of the tuple, add it to the line\n            if index < len(new_tuplex):\n                line.append(new_tuplex[index])\n            else:\n                # If the index is out of bounds, append a blank space to the line\n                line.append(' ')\n        # Add the line to the colon\n        colon.append(''.join(line))\n    \n    # Join the colon into a single string and return it\n    return ''.join(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Create a deepcopy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the number of elements in the tuple\n    num_elements = len(new_tuplex)\n\n    # Calculate the starting index of the colon\n    start_index = num_elements - m - 1\n\n    # Calculate the ending index of the colon\n    end_index = num_elements - n\n\n    # Get the colon of the tuple\n    colon = new_tuplex[start_index:end_index+1]\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Make a copy of the original tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Extract the elements from the tuple one by one\n    for i in range(m):\n        tuplex_copy = tuplex_copy[:i] + (tuplex_copy[i],) + tuplex_copy[i+1:]\n\n    # Extract the elements from the tuple one by one and append a colon\n    for i in range(n):\n        tuplex_copy = tuplex_copy[:i] + (':',) + tuplex_copy[i+1:]\n\n    # Return the modified tuple\n    return tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    -----------\n    tuplex: tuple of any length\n    \n    m: int\n        The number of rows in the colon.\n\n    n: int\n        The number of columns in the colon.\n        \n    Returns:\n    --------\n    A tuple representing the colon of the given tuple.\n\n    '''\n\n    # Create a copy of the tuple to avoid modifying the original\n    colon = deepcopy(tuplex)\n    \n    # If the length of the tuple is less than m*n, add values to the end of the tuple\n    while len(colon) < m*n:\n        colon.append(None)\n\n    # Divide the colon into m equal sub-colon tuples\n    sub_colon = [colon[i:i+n] for i in range(0, len(colon), n)]\n\n    # Remove None values from the sub-colon tuples to get the final colon\n    colon = tuple(sub_colon[i] for i in range(m) if sub_colon[i] is not None)\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex[0]):\n        return None\n\n    col = []\n    for i in range(m):\n        for j in range(n):\n            col.append(deepcopy(tuplex[i][j]))\n\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return ()\n    if m == 1:\n        if n == 0:\n            return (tuplex,)\n        elif n == 1:\n            return (tuplex[0],)\n        elif n == 2:\n            return (tuplex[0], tuplex[1])\n    elif m == 2:\n        if n == 0:\n            return (tuplex[0],)\n        elif n == 1:\n            return (tuplex[0], tuplex[1])\n        elif n == 2:\n            return (tuplex[0], tuplex[1], tuplex[2])\n    elif m == 3:\n        if n == 0:\n            return (tuplex[0],)\n        elif n == 1:\n            return (tuplex[0], tuplex[1])\n        elif n == 2:\n            return (tuplex[0], tuplex[1], tuplex[2])\n        elif n == 3:\n            return (tuplex[0], tuplex[1], tuplex[2], tuplex[3])\n    else:\n        m_list = [tuplex[i] for i in range(len(tuplex))]\n        return colon_tuplex(m_list, m-1, n)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) > 1:\n        first = deepcopy(tuplex[0])\n        for i in range(1, len(tuplex)):\n            first = (first, deepcopy(tuplex[i]))\n        first = (first,)\n        return first\n    else:\n        return tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if m is greater than n\n    if m > n:\n        print(\"Invalid input. m should be less than or equal to n.\")\n        return\n\n    # Get the number of elements in the tuple\n    num_elements = len(tuplex)\n\n    # Check if m is greater than the number of elements in the tuple\n    if m > num_elements:\n        print(\"Invalid input. m should be less than or equal to the number of elements in the tuple.\")\n        return\n\n    # Initialize the list to store the colon\n    colon = []\n\n    # Loop through the tuple and add elements to the colon in the required order\n    for i in range(m):\n        if i < n:\n            colon.append(tuplex[i])\n        else:\n            colon.append(tuplex[i-n])\n\n    # Return the colon of the tuple\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    largest_products = []\n    for i in range(N):\n        if i < len(nums1) and i < len(nums2):\n            largest_products.append(nums1[i] * nums2[i])\n        elif i < len(nums1):\n            largest_products.append(float('-inf'))\n        else:\n            largest_products.append(float('-inf'))\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in each list\n    max_num1 = max(nums1)\n    max_num2 = max(nums2)\n    \n    # Initialize a list to store the largest products\n    largest_products = []\n    \n    # Loop through each possible pair of factors\n    for factor1 in range(1, max_num1+1):\n        for factor2 in range(1, max_num2+1):\n            # Find the product of the two factors and the corresponding numbers\n            product = factor1 * factor2 * nums1[nums1.index(factor1)] * nums2[nums2.index(factor2)]\n            \n            # If the product is greater than or equal to the current maximum product, add it to the list of largest products\n            if product >= largest_products[-1] or largest_products == []:\n                largest_products.append(product)\n            \n            # If we've found the desired number of largest products, stop looping\n            if len(largest_products) == N:\n                return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        if product > max(result, default=0):\n            result = [product]\n        elif product == max(result, default=0):\n            result.append(product)\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum element in the first list\n    max1 = max(nums1)\n    \n    # Find the maximum element in the second list\n    max2 = max(nums2)\n    \n    # Calculate the largest product for each factor combination\n    product1 = max1 * max2\n    product2 = max1 * min(nums2)\n    product3 = min(nums1) * max2\n    \n    # Find the number of factors to select from each list\n    num_factors1 = int(N / product1)\n    num_factors2 = int(N / product2)\n    num_factors3 = int(N / product3)\n    \n    # Sort the first list in descending order\n    nums1.sort(reverse=True)\n    \n    # Filter the first list to only include the top N elements\n    top_N1 = nums1[:num_factors1]\n    \n    # Sort the second list in descending order\n    nums2.sort(reverse=True)\n    \n    # Filter the second list to only include the top N elements\n    top_N2 = nums2[:num_factors2]\n    \n    # Sort the third list in ascending order\n    nums3 = sorted(nums1 + nums2)\n    \n    # Filter the third list to only include the top N elements\n    top_N3 = nums3[:num_factors3]\n    \n    # Combine the top N elements from all three lists\n    top_N = top_N1 + top_N2 + top_N3\n    \n    # Return the top N elements\n    return top_N"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if the length of both lists is equal to N\n    if len(nums1)!= N or len(nums2)!= N:\n        print(\"Invalid input. Both lists must have length equal to N.\")\n        return\n    \n    # Initialize variables for the largest products\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n    max_product3 = float('-inf')\n    \n    # Iterate through the pairs of indices (i,j) and find the products of the corresponding elements in nums1 and nums2\n    for i in range(N):\n        for j in range(N):\n            product1 = nums1[i] * nums1[j]\n            product2 = nums2[i] * nums2[j]\n            product3 = nums1[i] * nums2[j]\n            \n            # Update the maximum products found so far\n            max_product1 = max(max_product1, product1)\n            max_product2 = max(max_product2, product2)\n            max_product3 = max(max_product3, product3)\n    \n    # Return the maximum products found\n    return max_product1, max_product2, max_product3"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the variables\n    largest_products = []\n    product = 0\n    \n    # Iterate through each number in the list\n    for i in range(N):\n        # Find the maximum product of the current factor from both lists\n        max_product = max(nums1[i] * nums2[i], nums1[i] * nums2[0:i] + nums2[i] * nums2[i+1:N])\n        \n        # Check if the current product is greater than the current largest product\n        if max_product > product:\n            product = max_product\n        \n        # Append the maximum product to the list of largest products\n        largest_products.append(max_product)\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1_max = max(nums1)\n    nums2_max = max(nums2)\n\n    nums1_max_count = 0\n    nums2_max_count = 0\n\n    for i in range(len(nums1)):\n        if nums1[i] == nums1_max:\n            nums1_max_count += 1\n        if nums2[i] == nums2_max:\n            nums2_max_count += 1\n\n    if N > nums1_max_count or N > nums2_max_count:\n        print(\"Number of products to be selected is greater than the number of factors in each list.\")\n        return\n\n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i], nums2[i]))\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest1 = nums1[-1] * nums2[-1]\n    largest2 = nums1[-1] * nums2[-2]\n    largest3 = nums2[-1] * nums1[-2]\n\n    # Check if there are enough elements in the input lists to fill the desired number of largest products\n    if N <= 3:\n        return [largest1, largest2, largest3]\n    else:\n        for i in range(N-3):\n            # Calculate the next largest product by multiplying the current largest factors with the remaining factors from either list\n            next_largest1 = largest1 * nums1[i]\n            next_largest2 = largest2 * nums2[i]\n            next_largest3 = largest3 * nums1[N-i-1]\n            # Update the variables to store the next largest products\n            largest1 = max(next_largest1, largest1)\n            largest2 = max(next_largest2, largest2)\n            largest3 = max(next_largest3, largest3)\n\n        return [largest1, largest2, largest3]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to keep track of the largest products found so far\n    max1 = max2 = float('-inf')\n    max_product = 0\n    \n    # Iterate over all pairs of numbers from the two lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two numbers, and compare it to the current largest product found\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n                max1 = nums1[i]\n                max2 = nums2[j]\n    \n    # Return the maximum number of the specified type of products\n    return max(max1, max2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        max_product = max(nums1[i], nums2[i])\n        products.append(max_product)\n    return products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of its characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Split the given string into a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the unset bit index\n    left_unset_bit = 0\n\n    # loop through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # if the bit is unset, set the index and break the loop\n        if (n & (1 << i)) == 0:\n            left_unset_bit = i\n            break\n\n    # shift the bits to the left by the index and set the leftmost unset bit\n    return (n << left_unset_bit) | (1 << left_unset_bit)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the position of the first unset bit\n    for i in range(32):\n        if n & (1 << i) == 0:\n            n |= 1 << i\n            return n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the left most unset bit in a given number.\n    \"\"\"\n    # convert the given number to binary string\n    binary_str = bin(n)[2:]\n    # initialize the index of the leftmost unset bit\n    leftmost_unset_bit = -1\n    \n    # iterate through the binary string from right to left\n    for i in range(len(binary_str)-1, -1, -1):\n        # if the current bit is '1' then we have found the leftmost unset bit\n        if binary_str[i] == '1':\n            leftmost_unset_bit = i\n            break\n    \n    # if we have not found the leftmost unset bit then set it to 0\n    if leftmost_unset_bit == -1:\n        n = n | 1\n    \n    # convert the binary string to an integer\n    n = int(binary_str, 2)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the position of the least significant bit\n    least_significant_bit = 0\n    while ((n & (1 << least_significant_bit)) == 0) and (least_significant_bit < 31):\n        least_significant_bit += 1\n    \n    # Set the leftmost unset bit to 1\n    n |= (1 << least_significant_bit)\n    \n    # Return the modified number\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the variable to check for unset bits\n    unset = 1\n    \n    # Check for unset bits in the binary representation of n\n    while (n & unset) == 0:\n        unset = unset << 1\n    \n    # Set the leftmost unset bit to 1\n    return n | unset"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a binary number.\n    '''\n    # Loop through each bit in the binary number\n    for bit in bin(n)[2:]: \n        # If the bit is 0, set the left most unset bit to 1 and break the loop\n        if bit == '0': \n            n = n ^ (1 << int(bit)) \n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a Python function to set the left most unset bit.\n    \"\"\"\n    # Initialize a variable to store the rightmost unset bit\n    rightmost_unset_bit = 0\n\n    # Iterate over the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # Check if the i-th bit is set\n        if not n & (1 << i):\n            # If not, set the rightmost_unset_bit to i\n            rightmost_unset_bit = i\n            # Stop iterating\n            break\n\n    # Set the i-th bit of n to 1\n    n |= 1 << rightmost_unset_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the rightmost unset bit position to -1\n    rightmost_unset_bit = -1\n\n    # Loop through the bits in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # If the current bit is unset, set the rightmost_unset_bit to i\n        if (n & (1 << i)) == 0:\n            rightmost_unset_bit = i\n            break\n\n    # If no unset bits were found, return the original number n\n    if rightmost_unset_bit == -1:\n        return n\n\n    # Set the leftmost unset bit to 1\n    n |= (1 << rightmost_unset_bit)\n\n    # Return the modified number n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to store the unset bits\n    unset_bits = 0\n    \n    # Iterate over each bit of the integer\n    for bit in bin(n)[2:]: \n        if bit == '0': \n            unset_bits |= 1\n    \n    # Set the leftmost unset bit to 1\n    unset_bits |= 1\n    \n    # Set the unset bits in the original integer\n    n &= unset_bits\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the index of the first unset bit\n    i = 0\n    while (n & 1) == 0:\n        n = n >> 1\n        i += 1\n    \n    # Set the left most unset bit to 1\n    n = n | (1 << i)\n    \n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone with given base radius (r) and height (h).\n    \"\"\"\n    # Calculate the volume of the cone using the formula V = \u03c0r\u00b2h\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    \n    Args:\n    r (float): the radius of the cone.\n    h (float): the height of the cone.\n    \n    Returns:\n    float: the volume of the cone.\n    '''\n    \n    return math.pi * (r**2) * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*r*h**2\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone.\n    '''\n    vol = math.pi * r * r * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*r**2*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with given radius r and height h.\n    '''\n    V = (1/3) * math.pi * (r**2) * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(n+1):\n        if i == 0:\n            continue\n        elif i == 1:\n            print(i)\n        elif i == 2:\n            print(i)\n            break\n        else:\n            print(i)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power-1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize variables\n    power = 1\n    \n    # Loop until the power is greater than n\n    while power <= n:\n        # If the power is greater than or equal to 2**power, increment power\n        if power >= 2**power:\n            power += 1\n        # If the power is less than 2**power, decrement power\n        else:\n            power -= 1\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable to hold the highest power of 2\n    highest_power_of_2 = 1\n\n    # Loop through each power of 2 until we reach n\n    while highest_power_of_2 <= n:\n        # If the power of 2 is less than or equal to n, update the highest power of 2\n        if highest_power_of_2 <= n:\n            highest_power_of_2 <<= 1\n\n    # Return the highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while True:\n        if 2**(n-1) <= n:\n            return 2**(n-1)\n        n -= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes a number n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize variables\n    highest = 1\n    current = 1\n    \n    # Loop until the current number is greater than n\n    while current <= n:\n        # If the current number is greater than the highest, update the highest variable\n        if current > highest:\n            highest = current\n        # Double the current number\n        current *= 2\n        \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 << (31 - int(log2(n)))\n\ndef log2(x):\n    '''\n    Write a python function to compute the logarithm base 2 of a number.\n    '''\n    if x <= 0:\n        raise ValueError(\"x must be a positive integer\")\n    else:\n        return int(log2_helper(x, 0))\n\ndef log2_helper(x, count):\n    if x == 0:\n        return count\n    else:\n        return log2_helper(x >> 1, count + 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**(n.bit_length()-1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    return highest >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize highest power of 2 to 1\n    highest_power_of_2 = 1\n    \n    # loop through all integers from 2 to n-1\n    for i in range(2, n+1):\n        # check if the current integer is a power of 2\n        if i & (i-1) == 0:\n            # if it is, update the highest power of 2\n            highest_power_of_2 = i\n    \n    # return the highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = find_lucas(n-1)\n        return (lucas**2) + (lucas + 1)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n\n    # Initialize the variables for the first two lucas numbers\n    a = 0\n    b = 1\n\n    # Loop through the number of terms specified by the user\n    for i in range(2, n + 1):\n        # Calculate the next lucas number by adding the previous two\n        c = a + b\n        # Update the variables for the next iteration\n        a = b\n        b = c\n\n    # Return the value of the n-th lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # initialize the first two lucas numbers\n    lucas = [2, 1]\n\n    # check if n is 0 or 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # iterate over the rest of the numbers\n    for i in range(2, n+1):\n        # find the next lucas number\n        next_lucas = lucas[-1] + lucas[-2]\n        # add it to the list of lucas numbers\n        lucas.append(next_lucas)\n\n    # return the nth lucas number\n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2)) % 1000000007"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return (2**n - 1) // 2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Initialize the first two lucas numbers\n    a, b = 2, 1\n    # Initialize a list to store the primes\n    primes = [True] * (n + 1)\n    # Use the Sieve of Eratosthenes algorithm to find primes\n    for i in range(2, n + 1):\n        if primes[i]:\n            # Mark all multiples of i as non-prime\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n            # Calculate the lucas number\n            lucas = a + b\n            # Update the values for the next iteration\n            a = b\n            b = lucas\n    # Return the nth lucas number\n    return a + b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Initialize first two lucas numbers\n    lucas1 = 2\n    lucas2 = 1\n\n    # Loop n-1 times\n    for i in range(2, n):\n        # Calculate next lucas number\n        next_lucas = (lucas1 + lucas2) % 10**9\n\n        # Update lucas numbers\n        lucas1 = lucas2\n        lucas2 = next_lucas\n\n    # Return then'th lucas number\n    return lucas2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        formatted_item = string.format(item)\n        result.append(formatted_item)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {\n            'value': l2[i],\n            'list': l3[i]\n        }\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to hold the result\n    result = {}\n    \n    # loop through each list\n    for i in range(len(l1)):\n        # add a new key to the result dictionary with the list name as the key\n        result[l1[i]] = {}\n        \n        # loop through each item in the current list\n        for j in range(len(l2[i])):\n            # add a new key to the result dictionary with the item as the key\n            result[l1[i]][l2[i][j]] = l3[i][j]\n            \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    l1 (list): List of strings representing names.\n    l2 (list): List of integers representing ages.\n    l3 (list): List of tuples representing contact information.\n\n    Returns:\n    dictionary: Nested dictionary with keys as the list items of l1, l2, and l3, and values as their respective lists.\n    '''\n\n    # Creating nested dictionary using dictionary comprehension\n    nested_dict = {item1: [item2, item3] for item1, item2, item3 in zip(l1, l2, l3)}\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # creating an empty dictionary to hold the final result\n    result = {}\n\n    # iterating over each list and adding each element to the dictionary as a key and its corresponding value\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n\n    # creating a new dictionary and iterating over the result dictionary and adding each element as a key and its corresponding value from the final list\n    for key, value in result.items():\n        if isinstance(value, list):\n            sub_result = {}\n            for i in range(len(value)):\n                sub_result[value[i]] = l3[i]\n            result[key] = sub_result\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(args)):\n        for j in range(len(args[i])):\n            if type(args[i][j]) == list:\n                for k in range(len(args[i][j])):\n                    result[args[i][j][k]] = args[i+1][j][k]\n            else:\n                result[args[i][j]] = args[i+1][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Check if input lists are not empty\n    if not l1 or not l2 or not l3:\n        print(\"Input lists cannot be empty.\")\n        return None\n\n    # Initialize empty dictionary\n    data = {}\n\n    # Convert first list to dictionary\n    for i in l1:\n        # Split each item in the list into key-value pairs\n        item = i.split(\":\")\n        # Add key-value pairs to the dictionary\n        data[item[0]] = item[1]\n\n    # Convert second list to dictionary\n    for i in l2:\n        # Split each item in the list into key-value pairs\n        item = i.split(\":\")\n        # Add key-value pairs to the dictionary\n        data[item[0]] = item[1]\n\n    # Convert third list to dictionary\n    for i in l3:\n        # Split each item in the list into key-value pairs\n        item = i.split(\":\")\n        # Add key-value pairs to the dictionary\n        data[item[0]] = item[1]\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Converts more than one list to nested dictionary.\n\n    Args:\n        *lists (list): A variable length argument list of lists.\n\n    Returns:\n        dict: A dictionary containing all lists as key-value pairs.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(lists):\n        if i == 0:\n            for item in lst:\n                result[item] = {}\n        else:\n            for item in lst:\n                result[item][i] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    This function converts multiple lists to nested dictionary.\n    '''\n    # Convert the list to dictionary\n    for i in range(len(args)):\n        args[i] = dict(enumerate(args[i]))\n    return args"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary\n    nested_dict = {}\n    # Loop through the three lists\n    for i in range(len(l1)):\n        # Add the i-th list as a key to the nested dictionary\n        nested_dict[l1[i]] = l2[i]\n        # Add the i-th list as a value to the nested dictionary\n        nested_dict[l1[i]].append(l3[i])\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def helper(n):\n        if n < 2:\n            return n\n        else:\n            return max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n    \n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, get_max_sum(n-1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n*2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    def helper(n, prefix_sum, index, memo):\n        if n == 1:\n            return prefix_sum\n        if index == memo.shape[0]:\n            memo = np.vstack((memo, np.array([0])))\n            prefix_sum = np.hstack((prefix_sum, np.array([0])))\n        if memo[index, 0] == prefix_sum[index - 1]:\n            return helper(n - 1, prefix_sum, index + 1, memo)\n        memo[index, 0] = prefix_sum[index - 1]\n        for i in range(1, 5):\n            memo[index, 0] = max(memo[index, 0], prefix_sum[index - 1] + helper(n // (2 ** i), prefix_sum, index, memo))\n        return memo[index, 0]\n\n    prefix_sum = np.array([0])\n    memo = np.array([[0]])\n    return helper(n, prefix_sum, 1, memo)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Initialize the function value to be n\n    f = n\n\n    # Initialize the sum of the first n terms to be n\n    first_term_sum = n\n\n    # Initialize the sum of the first n/2 terms to be n/2\n    second_term_sum = n/2\n\n    # Initialize the sum of the first n/3 terms to be n/3\n    third_term_sum = n/3\n\n    # Initialize the sum of the first n/4 terms to be n/4\n    fourth_term_sum = n/4\n\n    # Initialize the sum of the first n/5 terms to be n/5\n    fifth_term_sum = n/5\n\n    # Calculate the sum of the first n terms using the given equation\n    for i in range(1, n):\n        first_term_sum = max(first_term_sum + second_term_sum + third_term_sum + fourth_term_sum + fifth_term_sum, n)\n\n        # Update the function value based on the current sum\n        f = max(f, first_term_sum)\n\n        # Calculate the sum of the first n/2 terms using the given equation\n        second_term_sum = max(second_term_sum + third_term_sum + fourth_term_sum + fifth_term_sum, n/2)\n\n        # Update the function value based on the current sum\n        f = max(f, second_term_sum)\n\n        # Calculate the sum of the first n/3 terms using the given equation\n        third_term_sum = max(third_term_sum + fourth_term_sum + fifth_term_sum, n/3)\n\n        # Update the function value based on the current sum\n        f = max(f, third_term_sum)\n\n        # Calculate the sum of the first n/4 terms using the given equation\n        fourth_term_sum = max(fourth_term_sum + fifth_term_sum, n/4)\n\n        # Update the function value based on the current sum\n        f = max(f, fourth_term_sum)\n\n        # Calculate the sum of the first n/5 terms using the given equation\n        fifth_term_sum = max(fifth_term_sum, n/5)\n\n        # Update the function value based on the current sum\n        f = max(f, fifth_term_sum)\n\n    return f"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def helper(n, memo={}):\n        if n in memo:\n            return memo[n]\n        if n <= 5:\n            return max(helper(n*2, memo) + n, helper(n*3, memo) + n, helper(n*4, memo) + n, helper(n*5, memo) + n, n)\n        memo[n] = max(helper(n/2, memo), helper(n/3, memo), helper(n/4, memo), helper(n/5, memo)) + n\n        return memo[n]\n\n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n <= 1:\n            return n\n        else:\n            return max(f(n//2) + f(n//3) + f(n//4) + f(n//5) + n, f(n-1))\n\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\n\nn = int(input(\"Enter a number: \"))\nprint(\"The maximum sum possible is:\", get_max_sum(n))"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for num in input_list:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n            max_list = [num]\n        elif len(str(num)) == max_length:\n            max_list.append(num)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize maximum length to 0\n    max_len = 0\n\n    # Iterate through each element in the input list\n    for elem in input_list:\n        # If the length of the current element is greater than the maximum length, update the maximum length\n        if len(elem) > max_len:\n            max_len = len(elem)\n\n    # Return the list with the maximum length\n    return [elem for elem in input_list if len(elem) == max_len]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        length = len(str(item))\n        if length > max_length:\n            max_length = length\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = None\n    \n    for element in input_list:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_list = element\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique = set(test_tup)\n    if len(unique) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # create a set to store the elements of the tuple\n    unique_elements = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set_tup = set(test_tup)\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to set to remove duplicates\n    set_tup = set(test_tup)\n    # check if set is empty, if so, tuple is distinct\n    if not set_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    unique_tup = set(test_tup)\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    return \"No non-repeating characters found.\""
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the first character with a frequency of 1 in the dictionary\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n    \n    # If no character with a frequency of 1 is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # Create an empty dictionary to store the frequency of characters in the string\n    freq = {}\n    # Iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Find the first character in the dictionary that has frequency of 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    # If no character has frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    count_dict = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in count_dict:\n            count_dict[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            count_dict[char] = 1\n    # loop through the dictionary again, starting from the first character and returning the first non-repeating character\n    for char in str1:\n        if count_dict[char] == 1:\n            return char\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the characters and their frequency\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # find the first non-repeating character\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character in the string\n    char_count = {}\n    # Iterate through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Iterate through the string again and return the first character that has a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    # If no such character was found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n\n    :param str1: The input string\n    :return: The first non-repeated character in the string or None if no such character exists.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if not match:\n        return False\n\n    if match.group(1)!= match.group(2):\n        return False\n\n    return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if len(string) == 1:\n        return True\n\n    if re.match(regex, string):\n        return True\n\n    return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if len(string) == 1:\n        return True\n\n    match = re.match(regex, string)\n    if match:\n        return match.group(1) == match.group(2)\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] +\n                  sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_nums = sorted([a,b,c])\n\n    # calculate the median\n    n = len(sorted_nums)\n    if n % 2 == 0:\n        median = (sorted_nums[n//2-1] + sorted_nums[n//2])/2\n    else:\n        median = sorted_nums[n//2]\n\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_list) % 2 == 0:\n        # If the list has an even number of elements\n        median = (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2]) / 2\n    else:\n        # If the list has an odd number of elements\n        median = sorted_list[len(sorted_list) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    # Sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the median\n    n = len(sorted_list)\n    if n % 2 == 0:\n        median = (sorted_list[n//2-1] + sorted_list[n//2])/2\n    else:\n        median = sorted_list[n//2]\n\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2-1] + sorted_numbers[n//2]) / 2\n    else:\n        median = sorted_numbers[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n    else:\n        median = sorted_numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Determine if the numbers are even or odd\n    if sorted_numbers[1] - sorted_numbers[0] == sorted_numbers[2] - sorted_numbers[1]:\n        # If the numbers are even, the median is the average of the two middle numbers\n        median = (sorted_numbers[0] + sorted_numbers[1]) / 2\n    else:\n        # If the numbers are odd, the median is the middle number\n        median = sorted_numbers[1]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a, b, c])\n    median = sorted_list[len(sorted_list) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers\n    numbers = sorted([a, b, c])\n\n    # Find the length of the list\n    n = len(numbers)\n\n    # If the length is odd, the median is the middle number\n    if n % 2 == 1:\n        median = numbers[n//2]\n\n    # If the length is even, the median is the average of the middle two numbers\n    else:\n        median = (numbers[n//2 - 1] + numbers[n//2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function calculates the median of three numbers using the quickselect algorithm.\n    \"\"\"\n    if a < b:\n        if b < c:\n            return quickselect(a, b, c)\n        else:\n            return quickselect(a, c, b)\n    else:\n        if a < c:\n            return quickselect(b, a, c)\n        else:\n            return quickselect(b, c, a)\n\ndef quickselect(a, b, c):\n    \"\"\"\n    This function uses the quickselect algorithm to find the median of three numbers.\n    \"\"\"\n    if a == b == c:\n        return a\n    elif a == b:\n        return c\n    elif b == c:\n        return a\n    elif a == c:\n        return b\n    else:\n        pivot = random.choice([a, b, c])\n        lows = [x for x in [a, b, c] if x < pivot]\n        highs = [x for x in [a, b, c] if x > pivot]\n        pivots = [x for x in [a, b, c] if x == pivot]\n        if len(lows) > len(pivots):\n            return quickselect(lows[0], lows[1:], c)\n        elif len(highs) > len(pivots):\n            return quickselect(a, b, highs[0])\n        else:\n            return pivots[0]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        # convert the number to a string and convert all its characters to digits\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        total_sum += digits_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(str(num)) for num in nums])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    result = []\n    # Loop through each number in the input list\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        digits = [int(d) for d in str(num)]\n        # Compute the sum of digits\n        total = sum(digits)\n        # Append the sum of digits to the result list\n        result.append(total)\n    # Return the list of sums of digits\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_digits = 0\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        result.append(sum_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = 0\n    for num in nums:\n        num_str = str(num)\n        for digit in num_str:\n            digits_sum += int(digit)\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(bin(a ^ b)[2:] for a, b in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_value = 0\n    for i in range(len(test_tup1)):\n        xor_value ^= test_tup1[i] ^ test_tup2[i]\n    return xor_value"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Initialize the result tuple with zeros\n    result_tup = (0, 0)\n    # Perform the bitwise xor operation on each element of the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # convert tuples to lists for bitwise xor operation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # bitwise xor operation across the lists\n    result = [i^j for i,j in zip(list1,list2)]\n    \n    # convert the result to tuple\n    result_tup = tuple(result)\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] ^ test_tup2[i],)\n    return result_tuple"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] ^ test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # initialize an empty dictionary to store the frequency of tuples\n    freq_dict = {}\n    # loop through each element in the list\n    for element in test_list:\n        # check if the element is a tuple\n        if isinstance(element, tuple):\n            # if it is, add it to the dictionary\n            if element not in freq_dict:\n                freq_dict[element] = 1\n            # if it's already in the dictionary, increment its count\n            else:\n                freq_dict[element] += 1\n    # return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n        else:\n            freq[tup] += 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n\n    # Iterate through the list and update the frequency of each tuple in the dictionary\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n\n    # Return the total number of unique tuples in the list\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Initialize an empty dictionary to store unique tuples\n    freq_dict = {}\n    # Iterate over each element in the list\n    for item in test_list:\n        # Convert the element to a tuple and check if it exists in the dictionary\n        if tuple(sorted(item)) in freq_dict:\n            # If it does, increment the count by 1\n            freq_dict[tuple(sorted(item))] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            freq_dict[tuple(sorted(item))] = 1\n    # Return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Using zip() function to iterate over both tuples and calculate sum of corresponding elements.\n    result = [sum(tup) for tup in zip(test_tup1, test_tup2)]\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple with the same number of elements as the input tuples\n    result_tup = (0,) * len(test_tup1)\n    # Loop through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of the two tuples and store the result in the corresponding index of the result tuple\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # check if both tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements\")\n        return\n\n    # create an empty result tuple\n    result_tup = ()\n\n    # iterate over each element of both tuples\n    for i in range(len(test_tup1)):\n        # add the corresponding element of both tuples\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both input tuples must be of the same length')\n    # Initialize a new empty tuple to store the sum of the tuple elements\n    result_tup = ()\n    # Iterate through each element in the two input tuples\n    for i in range(len(test_tup1)):\n        # Perform index wise addition of the tuple elements\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    # Return the resultant tuple as output\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty result tuple with the same number of elements as the two input tuples\n    result_tup = ()\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The number of elements in the two input tuples must be the same.\")\n    # Iterate over the elements of the input tuples\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of the input tuples\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the final result\n    result_list = []\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize a variable to store the result of adding the current index of the tuple in the first tuple with the corresponding element in the second tuple\n        temp_result = test_tup1[i] + test_tup2[i]\n        # Append the result to the result list\n        result_list.append(temp_result)\n\n    # Return the final result list\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        elif isinstance(test_tup1[i], tuple) and not isinstance(test_tup2[i], tuple):\n            result_tup += (add_nested_tuples(test_tup1[i], (test_tup2[i],)),)\n        elif not isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup += ((test_tup1[i],), add_nested_tuples((test_tup2[i],), ()))\n        else:\n            result_tup += ((test_tup1[i],), (test_tup2[i],))\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths\")\n        return\n\n    # Initialize an empty result tuple\n    result = ()\n\n    # Iterate through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current element of the first tuple is a tuple\n        if isinstance(test_tup1[i], tuple):\n            # Check if the current element of the second tuple is also a tuple\n            if isinstance(test_tup2[i], tuple):\n                # Recursively add the elements of both tuples\n                result += add_nested_tuples(test_tup1[i], test_tup2[i])\n            else:\n                # Add the element of the second tuple to the result tuple\n                result += (test_tup2[i],)\n        else:\n            # Add the element of the first tuple to the result tuple\n            result += (test_tup1[i],)\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns their minimum value.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:   \n        return a   \n    else:   \n        return b   "
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(\"The element\", tuplex, \"exists in the tuple\")\n    else:\n        print(\"The element\", tuplex, \"does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1:\n        if i in tuplex:\n            print(\"The element {} exists in the tuple.\".format(i))\n        else:\n            print(\"The element {} does not exist in the tuple.\".format(i))"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex:\n        if tup == tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: \n        return \"The number is even\"\n    else: \n        return \"The number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of {} is even\".format(x)\n    else:\n        return \"The parity of {} is odd\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # if x is even\n        return \"Even\"\n    else: # if x is odd\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    \n    # check if x is even or not\n    if x % 2 == 0:\n        parity = 1\n        \n    # return the parity\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        print(x, \"is an odd number\")\n    else:\n        print(x, \"is an even number\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, 'is even.')\n        return False\n    else:\n        print(x, 'is odd.')\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Get the digits of the given number\n    digits = [int(digit) for digit in str(n)]\n\n    # Find the maximum digit\n    max_digit = max(digits)\n\n    # Loop through each digit from 1 to 9 and check if it can be added to the maximum digit to create a bigger number\n    for digit in range(1, 10):\n        if max_digit + digit > 9:\n            continue\n        new_number = digits[0] * 10 ** (len(digits) - 1) + digit\n        if is_valid_number(new_number):\n            return new_number\n\n    # If no valid number was found, return None\n    return None\n\n\ndef is_valid_number(n):\n    \"\"\"\n    Check if a number is a valid next bigger number by checking if it is a permutation of the digits of the given number.\n    \"\"\"\n\n    # Get the digits of the given number\n    digits = [int(digit) for digit in str(n)]\n\n    # Check if the digits are a permutation of the digits of the given number\n    sorted_digits = sorted(digits)\n    if sorted_digits!= digits:\n        return False\n\n    # Check if the number is a valid next bigger number\n    return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Helper function to check if a number is a palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Helper function to check if a number is the next bigger number\n    def is_next_bigger(num):\n        # Convert the number to a string and reverse it\n        reversed_num = str(num)[::-1]\n        # Convert the reversed number back to an integer and compare it with the original number\n        return int(reversed_num) + 1 == num\n\n    # Helper function to reverse a number\n    def reverse_number(num):\n        return int(str(num)[::-1])\n\n    # If the input number is already a palindrome, return the next one\n    if is_palindrome(n):\n        return reverse_number(n)\n\n    # If the input number is the next bigger number, return the reversed number\n    if is_next_bigger(n):\n        return reverse_number(n)\n\n    # Find the largest palindrome that is less than or equal to the input number\n    left = max(i for i in range(10**len(str(n))) if i <= n)\n    # Find the smallest palindrome that is greater than or equal to the input number\n    right = min(i for i in range(10**len(str(n))) if i >= n)\n\n    # Find the palindrome that is the next bigger number\n    for i in range(left, right+1):\n        if is_palindrome(i) and is_next_bigger(i):\n            return i\n\n    # If no palindrome is found, return the input number\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # remove all the zeros from the number\n    n = ''.join([str(x) for x in n if x!= 0])\n    # create a list of all the digits in the number\n    digits = [int(x) for x in str(n)]\n    # reverse the order of the digits in the list\n    digits.reverse()\n    # convert the list of digits back to a string and remove any extra zeros\n    result = ''.join([str(x) for x in digits if x!= 0])\n    # convert the string back to an integer and increment it by one\n    result = int(result) + 1\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the input number to a string\n    num_str = str(n)\n    # get the length of the input number\n    num_len = len(num_str)\n    # initialize a list to store the digits of the input number\n    num_digits = []\n    # loop through each digit of the input number\n    for digit in num_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # add the integer to the list of digits\n        num_digits.append(digit_int)\n    # sort the list of digits in descending order\n    num_digits.sort(reverse=True)\n    # convert the list of digits back to a string\n    num_str = ''.join(map(str, num_digits))\n    # add a zero to the end of the string to create a bigger number\n    num_str += '0'\n    # convert the new string to an integer\n    next_bigger = int(num_str)\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Get the digits of the input number\n    digits = [int(d) for d in str(n)]\n\n    # Reverse the digits\n    digits = digits[::-1]\n\n    # Find the first digit that is greater than 9\n    for i in range(len(digits)):\n        if digits[i] > 9:\n            break\n\n    # Reverse the digits before that index\n    digits[i:] = digits[:i][::-1]\n\n    # Convert the reversed digits back to a number\n    next_bigger = int(''.join(map(str, digits)))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # Create a list of digits of n\n    digits = [int(d) for d in str(n)]\n    \n    # Find the maximum digit in the list\n    max_digit = max(digits)\n    \n    # Create a list of digits with the maximum digit first\n    digits = [d for d in digits if d!= max_digit] + [max_digit]\n    \n    # Convert the list of digits back to a number\n    new_n = int(''.join(str(d) for d in digits))\n    \n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize variables\n    max_digit = 0\n    num_str = str(n)\n    result = 0\n\n    # loop through each digit of the number\n    for digit in num_str:\n        # add the digit to the result if it's greater than the current max digit\n        if int(digit) > max_digit:\n            result += int(digit)\n            max_digit = int(digit)\n\n    # add any remaining digits of the number to the result\n    if result == 0:\n        result = 1\n\n    # add the original number to the result\n    result += n\n\n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Check if the number is already the maximum value\n    if n == 9 * 9 * 9:\n        return 'The maximum value has already been reached.'\n\n    # Find the maximum value for the given number of digits\n    max_value = 9 ** len(str(n))\n\n    # Check if the input number is already the maximum value\n    if n == max_value:\n        return 'The input number is already the maximum value.'\n\n    # Find the position of the maximum value in the string representation of the number\n    max_value_index = 0\n    while max_value_index < len(str(n)) and str(n)[max_value_index] == str(max_value)[max_value_index]:\n        max_value_index += 1\n\n    # Rearrange the digits of the number to create the next bigger number\n    new_value = max_value\n    for i in range(max_value_index, len(str(n))):\n        new_value *= 10\n        new_value += int(str(n)[i])\n\n    return new_value"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # First, find the maximum digit\n    max_digit = max(int(d) for d in str(n))\n    # Now, loop through each digit from max_digit to 1 and check if it is present in the given number\n    for digit in range(max_digit, 1, -1):\n        if str(digit) in str(n):\n            # If it is present, swap the digits and return the rearranged number\n            temp = str(n)[::-1]\n            temp = temp.replace(str(digit), '')\n            temp = temp.replace(str(digit), str(digit+1))\n            return int(temp)\n    # If no swaps were made, return n as it is\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    s = str(n)\n    \n    # Reverse the string\n    s = s[::-1]\n    \n    # Convert the reversed string back to an integer\n    next_bigger = int(s)\n    \n    # Check if the next bigger number is valid\n    if next_bigger > n:\n        return next_bigger\n    else:\n        return None"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    \n    # Find the minimum element in the two sets\n    min_num = min(min(nums1), min(nums2))\n    \n    # Initialize the heap to store the pairs\n    heap = []\n    \n    # Add the minimum element to the heap\n    heapq.heappush(heap, (min_num, (0, 0)))\n    \n    # Initialize the count and the result list\n    count = 0\n    result = []\n    \n    # Iterate through the heap until k elements are found\n    while count < k:\n        # Get the current smallest pair from the heap\n        current = heapq.heappop(heap)\n        # If the current pair is already in the result list, skip it\n        if current[1] in result:\n            continue\n        # Otherwise, add the current pair to the result list and increment the count\n        result.append(current[1])\n        count += 1\n        # Find the next smallest pair and add it to the heap\n        next_num = current[0]\n        next_nums1 = [num for num in nums1 if num!= next_num]\n        next_nums2 = [num for num in nums2 if num!= next_num]\n        heapq.heappush(heap, (min(next_num, min(next_nums1)), (0, 0)))\n        heapq.heappush(heap, (min(next_num, min(next_nums2)), (0, 1)))\n        heapq.heappush(heap, (min(next_num, min(next_nums1, next_nums2)), (1, 0)))\n        heapq.heappush(heap, (min(next_num, min(next_nums1, next_nums2)), (1, 1)))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap to store pairs\n    min_heap = []\n\n    # loop through the first array\n    for num1 in nums1:\n        # loop through the second array\n        for num2 in nums2:\n            # create a pair and append it to the min heap\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n            # if the heap size exceeds k, pop the smallest element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # initialize two variables to store the minimum and maximum values\n    min_value = float('inf')\n    max_value = float('-inf')\n\n    # loop through the min heap to find the k smallest pairs\n    for pair in min_heap:\n        # update the minimum and maximum values\n        if pair[0] < min_value:\n            min_value = pair[0]\n        if pair[0] > max_value:\n            max_value = pair[0]\n\n        # if the current pair satisfies k, return it\n        if len(min_heap) == k:\n            return pair[1]\n\n    # if the k smallest pairs have not been found, return None\n    return None"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    for num in nums1:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            smallest = heapq.heappop(min_heap)\n            if smallest > num:\n                heapq.heappush(min_heap, num)\n\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the pairs\n    pairs = []\n    # use the heapq module to add the pairs to the heap\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(pairs, (nums1[i] + nums2[j], (i, j)))\n    # sort the heap in ascending order of the first element of each pair\n    heapq.heapify(pairs)\n    # initialize an empty list to store the k smallest pairs\n    result = []\n    # add the first k pairs to the result list\n    for i in range(k):\n        pair = heapq.heappop(pairs)\n        result.append((nums1[pair[1][0]], nums2[pair[1][1]]))\n    # return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n        nums1 (list[int]): A list of integers.\n        nums2 (list[int]): A list of integers.\n        k (int): An integer representing the number of pairs we want to find.\n\n    Returns:\n        list[list[int]]: A list of lists of integers, where each inner list represents a pair of integers, and the sum of the two integers from each list should be the smallest among all pairs.\n\n    \"\"\"\n    # Use a min heap to store pairs of integers\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Compare the sum of the current pair with the smallest sum in the min heap\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n            # If the size of the heap is greater than k, remove the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Extract the pairs from the min heap and return them\n    return [pair[1] for pair in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the smallest k pairs\n    min_heap = []\n\n    # Initialize two pointers, one for each array\n    i, j = 0, 0\n\n    # Loop through the arrays until both pointers meet\n    while i < len(nums1) and j < len(nums2):\n        # Compare the values at the pointers and add to the heap if the smallest pair so far is not greater than the current pair\n        if (nums1[i] + nums2[j]) < heapq.heappop(min_heap) or not min_heap:\n            # Add the current pair to the heap\n            heapq.heappush(min_heap, nums1[i] + nums2[j])\n            # If the heap size is greater than k, remove the smallest pair from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n        # Move the pointers to the next elements\n        if nums1[i] + nums2[j] < nums1[i]:\n            i += 1\n        else:\n            j += 1\n\n    # Return the smallest k pairs from the heap\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (abs(num1) + abs(num2), (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return [pair for _, pair in heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap of size k\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Get the smallest k numbers from the heap\n        heapq.heappushpop(min_heap, num1)\n\n        # Check if we have found k pairs\n        if len(min_heap) == k:\n            # Get the smallest number from the heap\n            num2 = heapq.heappop(min_heap)\n\n            # Return the pair\n            return [num1, num2]\n\n    # If we reach here, there are less than k pairs\n    return []"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # create a min heap of size k\n    min_heap = []\n    \n    # iterate through both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # add the pair to the heap if the size of the heap is less than k\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1, num2))\n            # if the size of the heap is greater than or equal to k, check if the sum of the smallest elements in the heap is greater than or equal to the sum of the current pair\n            else:\n                curr_sum = num1 + num2\n                if curr_sum >= heapq.heappop(min_heap)[0]:\n                    heapq.heappush(min_heap, (num1, num2))\n                    \n    # return the smallest k pairs\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, (num, -1)) # adding the number to the heap with negative index to make it smaller than all smaller numbers\n\n    while k > 0 and heap:\n        min_num, min_index = heapq.heappop(heap) # removing the smallest number from the heap\n        if min_index + 1 < len(nums2):\n            heapq.heappush(heap, (min_num, min_index + 1)) # adding the next smaller number with its index to the heap\n            k -= 1\n\n    result = []\n    while heap:\n        min_num, min_index = heapq.heappop(heap)\n        result.append((nums1[min_index], nums2[min_index]))\n\n    result.reverse() # reversing the result list to get the pairs of the smallest numbers\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # create a list of tuples\n    tuples_list = [(list1[i], list1[j]) for i in range(len(list1)) for j in range(i+1, len(list1))]\n    # sort the list of tuples in ascending order of the product of their elements\n    tuples_list.sort(key=lambda x: x[0] * x[1])\n    # find the minimum product\n    min_product = tuples_list[0][0] * tuples_list[0][1]\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                product = 1\n                for k in range(len(list1[i])):\n                    product *= list1[i][k] * list1[j][k]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product and the list of tuples\n    min_product = float('inf')\n    pairs = []\n\n    # Iterate over each tuple in the list\n    for tup in list1:\n        # Calculate the product of the first element of the tuple with the second element of the tuple\n        product = tup[0] * tup[1]\n\n        # Check if the product is less than the current minimum product\n        if product < min_product:\n            min_product = product\n            # Add the tuple to the list of pairs\n            pairs = [(tup[0], tup[1])]\n        # If the product is equal to the current minimum product, add the tuple to the list of pairs\n        elif product == min_product:\n            pairs.append(tup)\n\n    # Return the list of pairs with the minimum product\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Calculate the product of all tuples in the list\n    product = 1\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            product *= list1[i][j]\n    \n    # Find the minimum product\n    min_product = product\n    \n    # Loop through the list and calculate the product of tuples that can be formed from the first n-1 tuples\n    for n in range(2, len(list1) + 1):\n        temp_product = 1\n        for i in range(len(list1) - n + 1):\n            temp_product *= product // (list1[i][-1] * list1[i + n - 1][0])\n        \n        if temp_product < min_product:\n            min_product = temp_product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each tuple in the list again, excluding the current tuple\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuple elements\n            product = list1[i][0] * list1[j][1]\n\n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    min_product = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[j][1]\n            if prod < min_product:\n                min_product = prod\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list in ascending order\n    list1.sort()\n    # Initialize variables to store minimum product and sum of products\n    min_product = float('inf')\n    product_sum = 0\n    # Loop through the list of tuples\n    for i in range(len(list1) - 1):\n        # Calculate the product of the two tuples and update the sum of products\n        product = list1[i][0] * list1[i + 1][1]\n        product_sum += product\n        # Update the minimum product if the product is smaller than the current minimum\n        if product < min_product:\n            min_product = product\n    # Calculate and return the minimum product\n    return min_product / product_sum"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the minimum product of all pairs of tuples.\n    '''\n    \n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # Update the minimum product if the current product is less than the current minimum\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]  # initialize the minimum value with the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:  # if the current element is less than the minimum value, update the minimum value\n            min_val = listval[i]\n    return min_val  # return the minimum value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in listval:\n        if i < min_num:\n            min_num = i\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    \n    for val in listval:\n        if val < min_val:\n            min_val = val\n            \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # check if list is empty\n    if not listval:\n        return None\n    \n    # initialize minimum value to first element in list\n    min_val = listval[0]\n    \n    # loop through list and compare each element to minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf') # initialize minimum value to infinity\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # If the current element is smaller than the minimum value, update it\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], int):\n        return min(listval)\n    elif isinstance(listval[0], float):\n        return min(listval)\n    elif isinstance(listval[0], str):\n        return min(listval)\n    else:\n        print(\"Invalid data type\")\n        return None"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first value in the list\n    min_val = listval[0]\n    # loop through the rest of the values in the list\n    for val in listval[1:]:\n        # if the current value is less than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    # return the minimum value found\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the snake case word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # capitalize the first letter of each word and join them with an underscore\n    camel_case_word = ''.join(word.capitalize() for word in words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove underscores from the word\n    word = re.sub('_', '', word)\n    # Capitalize the first letter\n    first_letter = word[0].upper()\n    # Remove the first letter from the word\n    word = word[1:]\n    # Capitalize the remaining letters\n    remaining_letters = word.capitalize()\n    # Combine the first letter and remaining letters\n    camel_case_word = first_letter + remaining_letters\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the string into words separated by underscores\n    words = word.split('_')\n    \n    # convert each word to camel case\n    camel_words = [word.capitalize() for word in words]\n    \n    # join the camel case words with underscores\n    return '_'.join(camel_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert the snake case to camel case\n    camel_case = re.sub(r'([a-z])([A-Z])', r'\\1_\\2', word)\n    # Capitalize the first letter of the camel case\n    camel_case = re.sub(r'([a-z])', r'\\1', camel_case)\n    # Remove the underscore at the beginning and end of the camel case\n    camel_case = re.sub(r'^_', '', camel_case)\n    camel_case = re.sub(r'_$', '', camel_case)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'_(.?)(?=[A-Z])'\n    return re.sub(pattern, lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the snake case string into list of words\n    words = word.split('_')\n    # Capitalizing the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Joining the words into camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n\n    The input string is a string of words separated by underscores (_).\n\n    The output string is the first letter of each word capitalized,\n    followed by the rest of the words in camel case.\n\n    For example, if the input string is \"hello_world\",\n    the output string should be \"HelloWorld\".\n    '''\n\n    # Split the word into words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word and join them together\n    camel_case =''.join([word.capitalize() for word in words])\n\n    # Convert underscores to camel case\n    camel_case = re.sub('_(.)', lambda match: match.group(1).upper(), camel_case)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert the first word to lower case and remove any prefix and suffix\n    camel_word = words[0]\n    camel_word = camel_word.lower()\n    for word in words[1:]:\n        # Capitalize the first letter and append it to the camel_word\n        camel_word += word.capitalize()\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return camel_word\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Split the word by underscores\n    words = re.findall(r'_\\w', word)\n    # Capitalize the first letter of each word\n    camel_case = []\n    for word in words:\n        camel_case.append(word[1].upper())\n    # Join the words with capitalized first letters\n    camel_case_word = ''.join(camel_case)\n    # Convert the word to camel case and return it\n    return camel_case_word.title()"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i % 2 == 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the list contains tuples\n    if type(list1[0]) is not tuple:\n        print(\"Error: List should contain tuples.\")\n        return\n    \n    # extract the nth element from the list\n    try:\n        result = list1[n-1]\n        return result\n    except IndexError:\n        print(\"Error: Index out of range.\")\n        return"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes in a list of tuples and an integer n as input.\n    The function extracts the nth element from the list and returns it.\n    If n is greater than or equal to the length of the list, the function\n    returns None.\n    '''\n    if n >= len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a list of tuples.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n][1]\n    except IndexError:\n        return 'Index out of range'"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list or type(list1[0])!= tuple:\n        raise TypeError('Input should be a list of tuples.')\n    if n < 0 or n >= len(list1):\n        raise IndexError('n should be a valid index.')\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list) and isinstance(list1[0], tuple):\n        try:\n            return list1[n-1]\n        except IndexError:\n            return None\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list) or not isinstance(list1[0], tuple):\n        raise TypeError(\"Input must be a list of tuples.\")\n    if n < 1 or n > len(list1):\n        raise ValueError(\"n must be between 1 and the length of the list.\")\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes a list of tuples as input and an integer n as input\n    and returns the nth element from the list.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"Invalid input. The value of n is greater than the length of the list.\"\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] in list2 and list2[i] in list1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n        list1 (list): a sequence of values.\n        list2 (list): a sequence of values.\n\n    Returns:\n        bool: True if there is an overlapping value, False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # create an empty dictionary to store the values of list1\n    dictionary = {}\n    \n    # loop through list1 and add values to dictionary\n    for i in list1:\n        dictionary[i] = i\n    \n    # loop through list2 and check if any value exists in dictionary\n    for i in list2:\n        if i in dictionary:\n            return True\n    \n    # if no value exists in both lists, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # loop through each element in the first list\n    for item in list1:\n        # check if the element exists in the second list\n        if item in list2:\n            return True\n    # if we make it through the entire loop without finding a match, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns a boolean indicating whether any value in the first sequence exists in the second sequence.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if there is any value in the first sequence that is also present in the second sequence and False otherwise.\n    \"\"\"\n\n    for i in list1:\n        if i in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = [arr[0], arr[0]]\n    min_pair = [arr[0], arr[0]]\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1] * max_pair[0]:\n            max_pair = [arr[i], arr[i-1]]\n        elif arr[i] < arr[i-1] * min_pair[0]:\n            min_pair = [arr[i], arr[i-1]]\n\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2 and arr[i]!= max1:\n            max2 = arr[i]\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Finding the maximum and minimum values of the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Finding the product of the maximum and minimum values\n    max_min_prod = max_val * min_val\n\n    # Initializing the maximum and minimum pairs with the first elements of the array\n    max_pair = [arr[0], arr[0]]\n    min_pair = [arr[0], arr[0]]\n\n    # Finding the maximum and minimum pairs of the array\n    for i in range(1, len(arr)):\n        if arr[i] > max_pair[0]:\n            max_pair[1] = max_pair[0]\n            max_pair[0] = arr[i]\n        elif arr[i] > max_pair[1]:\n            max_pair[1] = arr[i]\n\n        if arr[i] < min_pair[0]:\n            min_pair[1] = min_pair[0]\n            min_pair[0] = arr[i]\n        elif arr[i] < min_pair[1]:\n            min_pair[1] = arr[i]\n\n    # Finding the product of the maximum and minimum pairs\n    max_pair_prod = max_pair[0] * max_pair[1]\n    min_pair_prod = min_pair[0] * min_pair[1]\n\n    # Finding the maximum product between the maximum and minimum pairs and the product of the maximum and minimum values\n    max_max_prod = max_pair_prod * max_min_prod\n\n    # Returning the maximum product between the maximum and minimum pairs and the product of the maximum and minimum values\n    return max_max_prod"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    # initialize maximum product pair\n    max_product = (arr[0], arr[0])\n    min_product = (arr[0], arr[0])\n\n    # iterate through the array and update the maximum and minimum products\n    for i in range(len(arr)):\n        if arr[i] > max_product[0]:\n            max_product = (arr[i], max_product[1])\n        elif arr[i] < min_product[0]:\n            min_product = (arr[i], min_product[1])\n        else:\n            max_product = (max_product[0], max_product[1])\n            min_product = (min_product[0], min_product[1])\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Initialize max_product_pair to store the pair of integers with highest product\n    max_product_pair = None\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        \n        # Initialize max_product_left and max_product_right to store the left and right product of the remaining array\n        max_product_left = max_product_right = arr[i]\n        \n        # Loop through the remaining array and find the pair with highest product\n        for j in range(i+1, len(arr)):\n            max_product_right = max(max_product_right*arr[j], max_product_left*arr[j])\n            \n            # Update max_product_left if the current product is greater than max_product_left\n            if max_product_right > max_product_left:\n                max_product_left = max_product_right\n        \n        # Update max_product_pair if the current pair is greater than max_product_pair\n        if max_product_left > max_product_pair[0]:\n            max_product_pair = (max_product_left, arr[i])\n    \n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    # Sorting the array in descending order\n    arr.sort(reverse=True)\n    # Finding the maximum product pair\n    max_pair = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_pair[-1]:\n                max_pair = [arr[i] * arr[j]]\n            elif arr[i] * arr[j] == max_pair[-1]:\n                max_pair.append(arr[i] * arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    # Initialize variables\n    max1 = float('-inf')\n    max2 = float('-inf')\n    max_product = float('-inf')\n\n    # Loop through the array and find the maximum product of two numbers\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max1 = arr[i]\n                max2 = arr[j]\n    \n    # Return the maximum product and the pair of numbers that produced it\n    return max_product, (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple with the pair with the highest product.\n    '''\n    # Initialize variables to store the minimum and maximum values in the array\n    max_product = float('-inf')\n    pair = None\n\n    # Iterate through the array and update the maximum product and pair variables\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                pair = (arr[i], arr[j])\n\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the maximum \n    and minimum values of the array and the product of the maximum and minimum values.\n    '''\n    # initialize variables\n    min_val = max_val = arr[0]\n    max_product = min_product = arr[0]\n\n    # iterate through the array\n    for num in arr:\n        # update min_val and max_val if the current number is smaller or larger\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n        # update max_product and min_product if the current number has a higher product\n        product = num * max_val\n        if product > max_product:\n            max_product = product\n        elif product < min_product:\n            min_product = product\n\n    # return the tuple containing the maximum and minimum values and their respective products\n    return (max_val, min_val, max_product, min_product)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tuple1 in Input:\n        for tuple2 in Input:\n            if tuple1 == tuple2:\n                common_elements.append(tuple1[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n\n    for i in range(len(Input)):\n        if common_first_element is None:\n            common_first_element = Input[i][0]\n        elif Input[i][0] == common_first_element:\n            return \"Common first element found: \" + str(common_first_element)\n        else:\n            return \"Common first element not found.\"\n\n    return \"Common first element not found.\""
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_first.append(Input[i][0])\n                break\n    return common_first\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n\n    for item in Input:\n        if len(item) > 0 and item[0] in common_first_element:\n            common_first_element.remove(item[0])\n        elif len(item) > 0 and item[0] not in common_first_element:\n            common_first_element.append(item[0])\n\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    # Create an empty dictionary to store the count of each element in the list\n    count = {}\n    \n    # Loop through each tuple in the list\n    for i in Input:\n        # Get the first element of the tuple\n        elem = i[0]\n        \n        # If the element is not in the dictionary, add it with a count of 1\n        if elem not in count:\n            count[elem] = 1\n        # Otherwise, increment the count of the element by 1\n        else:\n            count[elem] += 1\n    \n    # Create an empty set to store the unique elements\n    unique = set()\n    \n    # Loop through each element in the count dictionary\n    for i in count:\n        # If the count of the element is 1, add it to the unique set\n        if count[i] == 1:\n            unique.add(i)\n    \n    # Return the unique elements as a list\n    return list(unique)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples where each tuple has a common first element.\n    '''\n    groups = []\n    for tuple_1 in Input:\n        common_elem = tuple_1[0]\n        group = [(elem, tuple_1) for elem in Input if elem[0] == common_elem]\n        groups.append(group)\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store common elements\n    common_dict = {}\n\n    # Loop through the input list of tuples\n    for tup in Input:\n        # Extract the first element from the tuple\n        elem = tup[0]\n\n        # If the element is already in the dictionary, increment its count\n        if elem in common_dict:\n            common_dict[elem] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            common_dict[elem] = 1\n\n    # Create an empty list to store the common elements and their counts\n    common_list = []\n\n    # Loop through the dictionary to find common elements and their counts\n    for elem in common_dict:\n        # If the count is greater than 1, append the element to the common_list\n        if common_dict[elem] > 1:\n            common_list.append((elem, common_dict[elem]))\n\n    # Sort the common_list by count in descending order\n    common_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Print the common elements and their counts\n    print(\"Common elements and their counts:\")\n    for elem in common_list:\n        print(elem)\n\n    # Return the common_list\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    #creating a set of tuples with unique first elements\n    unique_tuples = set(zip(*Input))\n\n    #initializing a list to store the common elements in each tuple\n    common_elements = []\n\n    #iterating through the unique tuples and checking if the first element is in the first tuple of each tuple\n    for tup in unique_tuples:\n        if tup[0] in Input[0][0]:\n            common_elements.append(tup[0])\n\n    #returning the common elements in a list\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for tup in Input:\n        if len(common_elements) == 0:\n            common_elements.append(tup[0])\n        elif tup[0] in common_elements:\n            continue\n        else:\n            common_elements.append(tup[0])\n\n    return common_elements\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # Create an empty dictionary to store the count of each element in the list\n    element_count = {}\n\n    # Iterate through each tuple in the list and update the count of its first element\n    for tuple in Input:\n        if tuple[0] in element_count:\n            element_count[tuple[0]] += 1\n        else:\n            element_count[tuple[0]] = 1\n\n    # Find the element with the highest count\n    highest_count = max(element_count.values())\n\n    # Create an empty list to store the tuples with common first element\n    common_tuples = []\n\n    # Iterate through the keys of the dictionary (which are the elements) and check if each element has a count of higher than the highest_count\n    for element in element_count:\n        if element_count[element] > highest_count:\n            # Create a new tuple with the common element and add it to the list of common tuples\n            new_tuple = (element,) + tuple[1:]\n            common_tuples.append(new_tuple)\n\n    # Return the list of common tuples\n    return common_tuples"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n    \n    for i in lst: \n        if len(str(i)) > max_length: \n            max_length = len(str(i)) \n            max_element = i \n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize a variable to store the maximum length of the list\n    max_length = 0 \n    # Initialize a variable to store the element of the list having maximum length\n    max_element = None \n    # Loop through the list and update the max_length and max_element as required\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    # Return the maximum length and element of the list\n    return max_length, max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Initialize max_len and max_element to 0 and None respectively.\n    max_len = 0\n    max_element = None\n\n    # Iterate through each element of the list and update max_len and max_element accordingly.\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n\n    # Return the maximum element of the list.\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max(len(x) for x in lst)\n    max_element = next((x for x in lst if len(x) == max_length), None)\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(x) for x in lst)\n    for x in lst:\n        if len(x) == max_len:\n            return x"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Initialize max_len to 0 \n    max_len = 0 \n\n    # Initialize max_element to None \n    max_element = None \n\n    # Traverse through the list \n    for i in lst: \n\n        # Check if the length of the current element is greater than max_len \n        if len(i) > max_len: \n\n            # Update max_len and max_element \n            max_len = len(i) \n            max_element = i \n\n    # Return max_element \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having the maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # initialize max length to 0 and max element to None\n    max_length = 0\n    max_element = None\n\n    # loop over the list and update max length and max element as needed\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n\n    # return the max element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and finds the element of the list that has the maximum length.\n    '''\n    max_len = 0 # initializing max_len to 0\n    max_elem = None # initializing max_elem to None\n    for elem in lst: # iterating through the list\n        if len(elem) > max_len: # if the length of the element is greater than the current maximum length\n            max_len = len(elem) # updating max_len\n            max_elem = elem # updating max_elem\n    return max_elem # returning the maximum element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    return total_sum * len(list1)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input, rounds each number using the round() function and adds them up to get the total sum. \n    It then multiplies the total sum by the length of the list and prints the result.\n    '''\n    total_sum = sum([round(num) for num in lst])\n    total_sum *= len(lst)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    This function takes a list of numbers as input and rounds every number and returns their sum.\n    The sum is then multiplied by the length of the list and printed.\n    \"\"\"\n    total = 0\n    for num in lst:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(lst):\n    total_sum = sum([round(num) for num in lst])\n    return total_sum * len(lst)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function calculates the cube sum of the first n even natural numbers.\n    \"\"\"\n    # Initializing the variable cube_sum to 0\n    cube_sum = 0\n    \n    # Iterating over the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Adding the cube of i to cube_sum\n        cube_sum += i**3\n    \n    # Returning the cube_sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(n):\n        sum_cube += i*i*i\n    return sum_cube\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    # concatenate each element of the tuple by the delimiter \" \"\n    concatenated_string = \" \".join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(element) for element in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = ','\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat_str = ''\n    for element in test_tup:\n        concat_str += str(element) +''\n    return concat_str.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(map(str, test_tup))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n    \n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1,n+1):\n        sum_cubes += i**3\n        count += 1\n    return sum_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    #initialize sum variable to 0\n    sum = 0\n\n    #loop for n times\n    for i in range(1, n+1):\n        #calculate cube of i\n        cube = i ** 3\n        #add cube to sum\n        sum += cube\n\n    #calculate average of cubes\n    average = sum/n\n\n    #print average of cubes\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        count += 1\n    average_of_cubes = sum_cubes / count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i*i*i\n\n    average_of_cubes = sum_of_cubes/n\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i*i*i\n    \n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [t[-1] for t in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        if isinstance(item, str):\n            rear_list.append(item[-1])\n        else:\n            rear_list.append(item)\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_tuple = ()\n    for string in test_tuple:\n        rear_element = string[-1]\n        extracted_tuple += (rear_element,)\n    return extracted_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes a list and an element x as input and returns the number of sublists in the list\n    containing the element x.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for lst in list1: \n        if x in lst: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    # Create an empty list to store the odd numbers\n    odd_nums = []\n    \n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it is, add it to the list of odd numbers\n            odd_nums.append(num)\n    \n    # Return the list of odd numbers\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # convert the date to a list of strings\n    date_list = re.findall(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    # reverse the list to get the day-month-year format\n    date_list.reverse()\n    # join the list to get the final date string\n    final_date = '-'.join(date_list)\n    return final_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.search(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        yyyy_mm_dd = '{}-{}-{}'.format(year, month, day)\n        return yyyy_mm_dd\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    return re.sub(pattern, lambda m: m.group(0)[6:4] + '-' + m.group(0)[4:2] + '-' + m.group(0)[2:0], dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match dates in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use re.sub to replace all matches of the pattern with the desired format\n    new_dt = re.sub(pattern, lambda x: x.group(0)[6:4] + '-' + x.group(0)[4:2] + '-' + x.group(0)[2:0], dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Find all occurrences of the date format in the given string\n    matches = re.findall(pattern, dt)\n\n    # Convert each date in the matches list to the desired format and return the result\n    return [f'{date[2]}/{date[1]}/{date[0]}' for date in matches]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extract the year and month from the date string\n    year = dt[:4]\n    month = dt[5:7]\n    \n    # Extract the day from the date string\n    day = dt[8:10]\n    \n    # Combine the day, month, and year into a new date string\n    new_date = day + '-' + month + '-' + year\n    \n    # Return the new date string\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use regex to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use re.sub() method to replace the matched date with the desired date format\n    dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define regex pattern to match date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # check if date string is in yyyy-mm-dd format\n    if re.match(pattern, dt):\n        # split date string into year, month, and day components\n        year, month, day = map(int, dt.split('-'))\n\n        # format date string in dd-mm-yyyy format\n        new_dt = f\"{day}-{month:02d}-{year}\"\n\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    match = re.match(pattern, dt)\n    if match:\n        day = match.group(1)\n        month = match.group(2)\n        year = match.group(3)\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match the pattern with the input string\n    match = re.match(pattern, dt)\n    \n    # extract the groups of the matched pattern\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    \n    # define the regular expression pattern for dd-mm-yyyy format\n    pattern = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    \n    # create a new string with the desired format\n    new_dt = day + '-' + month + '-' + year\n    \n    return new_dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Step 1: Compute the largest gap\n    gap = n // 2\n    while gap > 0:\n        # Step 2: Move the gap to half of the previous gap\n        gap = gap // 2\n\n        # Step 3: Bubble sort with the current gap\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Start with a large gap of 1\n    gap = n // 2\n\n    # While gap is greater than 0\n    while gap > 0:\n\n        # Insertion sort for this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n\n            # Move elements of arr[0..i-1], that are\n            # greater than key, to one position ahead\n            # of their current position\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            # Move the key to its correct position\n            my_list[j] = key\n\n        # Decrease the gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # Step 1: Calculate the largest power of 2 that is less than or equal to n\n    power_of_two = 1\n    while power_of_two < n:\n        power_of_two <<= 1\n\n    # Step 2: Divide the array into sub-arrays of size power_of_two\n    while power_of_two >= 1:\n        for i in range(power_of_two, n):\n            # Step 3: Insert the element at the correct position\n            j = i\n            while j >= power_of_two and my_list[j] < my_list[j - power_of_two]:\n                my_list[j], my_list[j - power_of_two] = my_list[j - power_of_two], my_list[j]\n                j -= power_of_two\n        # Decrease the size of the sub-arrays\n        power_of_two //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    # Initialize the result tuple with zeros\n    result_tup = tuple([0] * len(test_tup1))\n    \n    # Extract the elements and apply the and operator to each pair\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] & test_tup2[i]\n    \n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the result tuple with None values\n    result_tup = (None, None)\n\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the first element of the first tuple\n        first_elem = test_tup1[i]\n        # Extract the second element of the second tuple\n        second_elem = test_tup2[i]\n        # Compute the elementwise and of the two elements\n        and_elem = first_elem & second_elem\n        # Store the result in the result tuple\n        result_tup = (result_tup[0], result_tup[1])\n        # Check if the result is a tuple and store it in the result tuple\n        if isinstance(and_elem, tuple):\n            result_tup = and_elem + (result_tup[2],)\n        else:\n            result_tup = (and_elem,) + result_tup[2:]\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the resulting tuple with zeros\n    result_tup = (0, 0)\n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Add the elements elementwise and store the result in the tuple\n        result_tup = (result_tup[0] + test_tup1[i] * test_tup2[i], result_tup[1] + test_tup1[i] + test_tup2[i])\n    # Return the resulting tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the result tuples\n    result_list = []\n\n    # iterate through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # compute the elementwise and of the corresponding elements in the tuples\n        and_val = test_tup1[i] & test_tup2[i]\n        # create a tuple with the elementwise and as its first element and the corresponding elements from the input tuples as the second and third elements\n        result_tup = (and_val,) + (test_tup1[i], test_tup2[i])\n        # add the result tuple to the result list\n        result_list.append(result_tup)\n\n    # return the result list\n    return result_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i], test_tup1[i], test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same number of elements.\")\n\n    # extract the elementwise and tuples\n    and_tups = [(x1 & x2) for x1, x2 in zip(test_tup1, test_tup2)]\n\n    return and_tups"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_tup_list = []\n    # Loop through the two input tuples\n    for i in range(len(test_tup1)):\n        # Extract the element from the two tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        # Perform the elementwise and operation on the two elements\n        and_elem = tup1_elem & tup2_elem\n        # Create a tuple containing the elementwise and operation and append it to the list\n        and_tup_list.append((and_elem, tup1_elem, tup2_elem))\n    # Return the list of (and_elem, tup1_elem, tup2_elem) tuples\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple lengths do not match.\")\n        return None\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n\n    return tuple(result)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n\n    if discriminant >= 0:\n        x1 = (-b + discriminant**(1/2))/(2*a)\n        x2 = (-b - discriminant**(1/2))/(2*a)\n        return (x1, x2)\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return (x1, x2)\n    else:\n        return \"The parabola does not have a real directrix.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    def quadratic_eq_roots(a, b, c): \n        '''\n        This function finds the roots of a quadratic equation.\n        '''\n        discriminant = b ** 2 - 4 * a * c\n        if discriminant > 0:\n            return (-b + discriminant ** 0.5) / (2 * a), (-b - discriminant ** 0.5) / (2 * a)\n        elif discriminant == 0:\n            return (-b) / (2 * a)\n        else:\n            return \"There are no real roots.\"\n\n    def equation_of_parabola(x, a, b, c): \n        '''\n        This function finds the equation of a parabola.\n        '''\n        return a * x ** 2 + b * x + c\n\n    # Find the quadratic equation roots\n    roots = quadratic_eq_roots(a, b, c)\n    if isinstance(roots, tuple):\n        # Find the equation of the parabola\n        x = (-roots[0] + roots[1]) / 2\n        parabola_equation = equation_of_parabola(x, a, b, c)\n        return parabola_equation\n    else:\n        return roots"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the two lines that define the parabola\n    line1 = [(-b + (c ** 2) ** 0.5) / (2 * a), -b / (2 * a)]\n    line2 = [(-b - (c ** 2) ** 0.5) / (2 * a), -b / (2 * a)]\n\n    # Find the intersection of these two lines\n    intersection = line1[0] * line2[1] - line1[1] * line2[0]\n\n    # Find the x-coordinate of the intersection\n    x = (-c - intersection) / (2 * a)\n\n    # Find the slope of the parabola at the x-coordinate\n    slope = line2[0] - line1[0]\n\n    # Find the y-coordinate of the intersection\n    y = slope * x + line1[1]\n\n    # Return the value of the directrix\n    return slope, x, y"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + ((b**2) - (4*a*c))**0.5) / (2*a)\n    x2 = (-b - ((b**2) - (4*a*c))**0.5) / (2*a)\n    \n    print(\"The directrix of the parabola is:\", x1)\n    print(\"The second directrix of the parabola is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is less than zero\n    if discriminant < 0:\n        return \"The parabola has no real roots.\"\n    \n    # Calculate the two roots of the discriminant\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Sort the roots in increasing order\n    if root1 > root2:\n        root1, root2 = root2, root1\n        \n    # Print the directrix\n    print(\"The directrix of the parabola is:\", root1)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    y = a/b\n    d = b**2 - 4*a*c\n    if d > 0:\n        x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n        print(\"The directrix is: y = {:.2f}\".format(y))\n        print(\"The first solution is: x = {:.2f}\".format(x1))\n        print(\"The second solution is: x = {:.2f}\".format(x2))\n    else:\n        print(\"The directrix is: y = {:.2f}\".format(y))\n        print(\"The directrix does not exist.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the discriminant is positive, in which case the directrix is complex\n    if disc > 0:\n        # Calculate the roots of the discriminant\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n\n        # Return the roots as a tuple\n        return (root1, root2)\n\n    # If the discriminant is negative, the directrix is real\n    elif disc == 0:\n        root = -b/(2*a)\n        return root\n\n    # If the discriminant is zero, the directrix is a line\n    else:\n        return \"the directrix is a line\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b*b - 4*a*c)**0.5)/(2*a) "
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n\n    discriminant = (b**2) - (4*a*c)\n\n    if discriminant > 0:\n        return (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    elif discriminant == 0:\n        return (-b + c)/(2*a)\n    else:\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # converting both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # iterating over the sets and checking if there's any common element\n    for element in set1:\n        if element in set2:\n            return True\n    \n    # if we reach here, no common element was found\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element,\n    else False.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Create a set of elements in list1\n    set1 = set(list1)\n\n    # Loop through list2 and check if any element is in set1\n    for element in list2:\n        if element in set1:\n            return True\n\n    # If we make it through the loop without finding a common element, return false\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if they have at least one common element.\n    \"\"\"\n    common_elements = []\n    for item in list1:\n        if item in list2:\n            common_elements.append(item)\n    if len(common_elements) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    for element in list1:\n        if element in list2:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # check if the lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # create a set of the list1 elements\n    set1 = set(list1)\n    \n    # loop through the list2 elements and check if they are in the set of list1 elements\n    for element in list2:\n        if element in set1:\n            return True\n    \n    # if we reach this point, there were no common elements\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Use set intersection to find common elements\n    intersection = set(list1) & set(list2)\n    # If there is at least one common element, return True\n    return len(intersection) > 0"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n\n    # Calculate the length of each half of the trapezium\n    half1 = base1 / 2\n    half2 = base2 / 2\n\n    # Calculate the length of the top half of the trapezium\n    top = (0.5 * base1 * height) + (0.5 * base2 * height)\n\n    # Calculate the length of the bottom half of the trapezium\n    bottom = height\n\n    # Calculate the length of the trapezium\n    trapezium_length = top - bottom\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * area / trapezium_length\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the difference between the areas of the two trapezoids\n    diff = math.sqrt(area) - math.sqrt((base1 + base2) / 2)\n    \n    # Return the median length\n    return diff"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapeziums\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Calculate the areas of the smaller trapezium\n    if base1 < base2:\n        area1 = 0.5 * (base1 * height + base2 * height)\n    else:\n        area2 = 0.5 * (base2 * height + base1 * height)\n        \n    # Calculate the length of the smaller trapezium\n    if area1 > area2:\n        length = 0.5 * (base1 + base2)\n    else:\n        length = 0.5 * (base2 + base1)\n        \n    # Calculate the area of the trapezium using the trapezoidal rule\n    area = 0.5 * (area1 + area2)\n    \n    # Calculate the median length using the trapezoidal rule\n    median = 0.5 * (length + (area - length) / (2 * area))\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of each half of the trapezium\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n\n    # Calculate the total length of the trapezium\n    total_length = height * 2\n\n    # Calculate the length of the left half of the trapezium\n    left_half_length = total_length - half_base1 - half_base2\n\n    # Calculate the length of the right half of the trapezium\n    right_half_length = half_base1 + half_base2\n\n    # Calculate the median of the two halves\n    median_length = (left_half_length + right_half_length) / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    length = (base1 + base2) * height / 2\n    return round(area * 100) / 100\n\nprint(median_trapezium(5, 7, 10))"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height\n    length1 = base1 * 0.5\n    length2 = base2 * 0.5\n    length_trapezium = area / 2\n    \n    if length_trapezium > length1 + length2:\n        return length1 + length2\n    else:\n        return length_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    base_longer = max(base1, base2)\n    base_shorter = min(base1, base2)\n    median = (area / (2 * (base_longer + base_shorter))) ** 0.5\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # calculate the areas of the trapeziums\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # calculate the areas of the larger trapezium\n    area3 = 0.5 * (base1 + base2) * height\n\n    # calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2 + height)\n\n    # calculate the areas of the smaller trapeziums\n    area4 = perimeter * 0.5 - area1 - area2\n\n    # find the median area using the trapezoidal rule\n    median_area = (area3 + area4) / 2\n\n    # calculate the median length using the formula for the area and median area\n    median_length = 2 * median_area / perimeter\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function calculates the median length of a trapezium using the trapezoidal rule.\n    \"\"\"\n    # Calculate the height of the trapezium\n    h = height\n\n    # Calculate the area of the two equal bases\n    area1 = 0.5 * base1 * height\n\n    # Calculate the area of the first base and the second base\n    area2 = 0.5 * base2 * height\n\n    # Calculate the total area of the trapezium\n    area = area1 + area2\n\n    # Calculate the length of the shorter base\n    length = (base1 + base2) / 2\n\n    # Calculate the trapezoidal rule\n    trapezoidal_rule = area * (length ** 2)\n\n    # Calculate the median of the trapezoidal rule\n    median = 0.5 * (trapezoidal_rule + trapezoidal_rule / h)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Calculate the height of the trapezium\n    trapezium_height = 2 * area1 / (base1 + base2)\n    \n    # Calculate the area of the base of the trapezium\n    base_area = 0.5 * height * (base1 + base2)\n    \n    # Calculate the area of the top of the trapezium\n    top_area = area1 + area2 - base_area\n    \n    # Calculate the area of the bottom of the trapezium\n    bottom_area = area1 + area2\n    \n    # Calculate the area of the trapezium\n    trapezium_area = trapezium_height * (base1 + base2)\n    \n    # Calculate the length of the base of the trapezium\n    base_length = 0.5 * trapezium_height * (base1 + base2)\n    \n    # Calculate the length of the top of the trapezium\n    top_length = base_length / (1 - 0.5 * trapezium_height / height)\n    \n    # Calculate the length of the bottom of the trapezium\n    bottom_length = base_length / (1 + 0.5 * trapezium_height / height)\n    \n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (top_length + bottom_length)\n    \n    # Calculate the median length of the trapezium\n    median_trapezium = (top_length + bottom_length) / 2\n    \n    return median_trapezium"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{number} is greater than {element}\")\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # iterate through the array and check if the number is greater than the element\n    for element in arr:\n        if element > number:\n            return True\n    # if no element is greater than the number, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*?b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    # Define the regular expression pattern for matching the pattern\n    pattern = r'a[^b]*b'\n\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return the matched text, otherwise return None\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a+b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w{1,}\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w*\\b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string contains an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its last digit.\n    \"\"\"\n    # Check if the input is an integer\n    if type(n)!= int:\n        raise TypeError(\"Input must be an integer\")\n    # Convert the input to a string\n    n_str = str(n)\n    # Get the last character of the string\n    last_char = n_str[-1]\n    # Convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n and returns the last digit of n.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as an argument and returns a new list containing all the negative numbers in the original list.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    # list comprehension to find the negative numbers in the list\n    neg_list = [num for num in list1 if num < 0]\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list with negative numbers.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list with the negative numbers.\n    '''\n    new_list = []\n    for num in lst:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as an argument and returns a new list with all the negative numbers in the original list.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for c in str1 if c.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalpha():\n            if char.islower():\n                new_str += char.upper()\n            else:\n                new_str += char.lower()\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = ''\n    for char in str1:\n        if char.isalnum():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_list = []\n    for char in str1:\n        if ord(char) % 2!= 0:\n            odd_list.append(char)\n    return ''.join(odd_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(string):\n    return ''.join(char for char in string if char.isalnum())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for char in str1:\n        if char.isdigit() and int(char) % 2!= 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes odd characters from a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isdigit():\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]) or (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Create an empty dictionary to store the counts of bidirectional tuples\n    bidirectional_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Sort the tuple in ascending order\n        tup = sorted(tup)\n        # Use the tuple as the key to check if it already exists in the dictionary\n        if tup in bidirectional_dict:\n            # If it does, increment the count for this tuple\n            bidirectional_dict[tup] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            bidirectional_dict[tup] = 1\n\n    # Loop through the dictionary to count the number of bidirectional tuples\n    total_count = 0\n    for count in bidirectional_dict.values():\n        total_count += count\n\n    # Return the total count\n    return total_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j] and test_list[j] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Count bidirectional tuple pairs in a list.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                bidirectional_pairs += 1\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result variable to 0\n    result = 0\n    \n    # loop through the list\n    for i in L:\n        # add the current element to the result\n        result += i\n    \n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # initialize the result variable to 0\n    result = 0\n    \n    # loop through each element in the list\n    for num in L:\n        # convert each element to an integer and add it to the result\n        result += int(num)\n    \n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num > 0 and num % 10 == 0:\n            result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        if num % 2 == 0:\n            total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num % 2 == 0:\n            result += num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regex to match adverbs with their positions\n    adverbs = re.findall(r'\\b\\w+[.,;!?]\\b', text)\n    print(adverbs)\n    # If adverbs are found, print the position of the first adverb\n    if adverbs:\n        print(\"The first adverb is at position\", adverbs[0].start())"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns a dictionary containing the first adverb(s) and their positions in the string.\n    '''\n\n    # Define a regular expression pattern for finding adverbs\n    pattern = r'\\b(\\w+)' + r'(?<![\\w])' + r'(?=\\W*[' + re.escape(';') + r']|$)'\n\n    # Find all matches of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Create an empty dictionary to store the results\n    results = {}\n\n    # Iterate over the matches and add them to the dictionary\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        results[adverb] = position\n\n    return results"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b(also|also|especially|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['very', 'great', 'amazing', 'excellent', 'amazingly', 'awesomeness','stupendously', 'unbelievably', 'terrible', 'awful', 'extremely', 'fantastically', 'exceptionally', 'unbecomingly', 'terrifically', 'awe']\n    pattern = re.compile(r'\\b(' + '|'.join(adverbs) + r')\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern for adverbs\n    pattern = r'\\b([a-z]+[.]?[a-z]+[.]?[a-z]+)\\b'\n\n    # Find all matches using regex pattern\n    matches = re.findall(pattern, text)\n\n    # Loop through each match and print the adverb and its position in the sentence\n    for i, match in enumerate(matches):\n        print(\"Adverb: {} at position: {}\".format(match, i+1))"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define the pattern to match the adverbs\n    pattern = r\"\\b(adverb)\\b\"\n\n    # Find all matches of the pattern in the sentence\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # Extract the positions of the matches and convert them to integers\n    positions = [int(match) for match in matches]\n\n    # Sort the positions in ascending order\n    positions.sort()\n\n    # Return the first adverb and its position\n    return matches[0], positions[0]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b([a-zA-Z]+)\\b\\s*([a-zA-Z]+)\\b'\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Iterate through the matches and print the adverbs and their positions\n    for match in matches:\n        print(f\"{match[0]}: {match[1]}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find the first adverb in the sentence\n    adverb = re.search(r'\\b\\w+\\b', text)\n\n    # If there is no adverb, return None\n    if adverb is None:\n        return None\n\n    # Find the position of the adverb in the sentence\n    position = text.find(adverb.group())\n\n    # Return the adverb and its position\n    return (adverb.group(), position)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a pattern for finding adverbs\n    pattern = r'\\b\\w*ed\\b|\\b\\w*ing\\b'\n    \n    # Use re.findall() function to find all the occurrences of pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Iterate through the matches and print the adverb and its position in the sentence\n    for i, match in enumerate(matches):\n        if match.startswith('ed'):\n            print(f'{match} at position {i+1}')\n        elif match.startswith('ing'):\n            print(f'{match} at position {i+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and finds the first adverb and their positions in the string.\n    The function uses regular expressions to extract the adverb from the sentence and returns a list of tuples containing the adverb and its position.\n    '''\n    # Regular expression pattern to find adverbs\n    pattern = r'\\b(\\w*)\\b(?<!\\w+)(\\w*)\\b'\n    \n    # Find all non-word characters and separate the adverb and the rest of the sentence\n    matches = re.findall(pattern, text)\n    \n    # Create a list of tuples containing the adverb and its position\n    positions = []\n    for match in matches:\n        if match[0]:\n            positions.append((match[0], match.start()))\n        if match[1]:\n            positions.append((match[1], match.start()+len(match[0])+1))\n    \n    return positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # Calculate the surface area of a cube\n    surface_area = 6 * l * l * l\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l + 12 * l * l * l + 8 * l + 4 * l * l\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array of integers into an array of boolean values\n    arr = array('b', [1 if num > 0 else 0 for num in nums])\n    \n    # Find the sum of the boolean values\n    sum_arr = sum(arr)\n    \n    # Find the ration of positive numbers in the array\n    positive_ratio = sum_arr / len(arr)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    zero = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        else:\n            zero += 1\n    if zero == 0:\n        return 0\n    else:\n        return positive / (positive + negative + zero)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize a new array to store the positive numbers\n    pos_nums = array('i')\n\n    # Iterate over the input array and add positive numbers to the new array\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n\n    # Calculate the ration of positive numbers in the original array\n    pos_count = len(pos_nums)\n    total_count = len(nums)\n    ration = pos_count / total_count\n\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i')\n    neg_nums = array('i')\n    zero_nums = array('i')\n    \n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n        elif num < 0:\n            neg_nums.append(num)\n        else:\n            zero_nums.append(num)\n    \n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    zero_count = len(zero_nums)\n    \n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    neg_ratio = neg_count / (pos_count + neg_count + zero_count)\n    \n    return pos_ratio, neg_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    \n    pos_ratio = pos_count / len(nums)\n    neg_ratio = neg_count / len(nums)\n    zero_ratio = zero_count / len(nums)\n    \n    return pos_ratio, neg_ratio, zero_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_sum = 0\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_sum += num\n            positive_count += 1\n    positive_ratio = positive_count / len(nums)\n    return positive_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -float('inf')  # initialize largest to negative infinity\n\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -float('inf') # Initialize the largest variable to negative infinity\n    for num in list1: # Iterate through each element in the list\n        if num < 0: # If the element is negative\n            if num > largest: # If the element is greater than the current largest\n                largest = num # Update the largest variable to the new element\n    return largest # Return the largest negative number found in the list"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_max = None \n    for num in list1: \n        if num < 0 and (neg_max is None or num > neg_max): \n            neg_max = num \n    return neg_max "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as an input and returns the largest negative number found in the list.\n    \"\"\"\n    largest_num = lst[0]\n    for num in lst:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[i:i+K]) for t in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j+K > len(test_list[i]):\n                del test_list[i][j:]\n                break\n            if j+K < len(test_list[i]):\n                test_list[i] = test_list[i][:j+K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Example:\n        test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n        K = 2\n        Output: [(2, 3), (5, 6), (8, 9)]\n    '''\n\n    # loop through each tuple in the list and trim by K\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[K:])\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j < len(test_list[i])-1:\n                test_list[i] = test_list[i][:j+1]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Trim each tuple by k in the i-th position\n        test_list[i] = tuple([x for j, x in enumerate(test_list[i]) if j!= K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # iterate over the tuple list and trim each tuple by k\n    for i in range(len(test_list)):\n        test_list[i] = tuple(map(lambda x: x + K, test_list[i][:K]))"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[K:])\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple lengths do not match!\")\n        return result_tup\n    \n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the number of elements in the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both the tuples should have the same number of elements.\")\n        return\n    \n    # Iterate over the tuples and perform the index-wise multiplication\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n        \n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples have different lengths\")\n    else:\n        # Perform multiplication of tuple elements in index position\n        for i in range(len(test_tup1)):\n            test_tup1[i] *= test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length\")\n        return\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Get the corresponding element from the second tuple\n        second_elem = test_tup2[i]\n        # Multiply the elements and add them to the result list\n        result.append(test_tup1[i] * second_elem)\n    \n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    result = []\n    for i in tup:\n        if i in counter:\n            result.append(counter[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert tuple to list\n    lst = list(tup)\n\n    # convert list to set\n    lst = set(lst)\n\n    # count the frequency of each element in the list\n    freq = Counter(lst)\n\n    # print the result\n    print(\"Frequency of each element in the list in the tuple:\", freq)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(lst)\n    count_dict_tup = Counter(tup)\n    # intersection of count_dict and count_dict_tup will give the list of elements that are present in both\n    # the tuple and list.\n    common_elements = list(set(count_dict_tup) & set(count_dict))\n    # count the number of times each common element appears in the tuple\n    count_dict_common = Counter(common_elements)\n    count_tup_common = Counter(tup)\n    count_dict_common_tup = Counter()\n    for i in count_dict_common.keys():\n        count_dict_common_tup[i] = count_dict_common[i] * count_tup_common[i]\n    return count_dict_common_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for t in tup:\n        if t in count:\n            result.append(count[t])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count = 0\n    for key, value in count_dict.items():\n        if key in lst:\n            count += value\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup) \n    for i in lst: \n        counter[i] += 1 \n    return counter "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    # use Counter function from collections module to count the occurrence of each element in lst in tup\n    count = Counter(lst)\n\n    # create a new list to store the count of each element in tup\n    count_list = []\n\n    # loop through the count dictionary and add the count to count_list for each element in tup\n    for item in tup:\n        count_list.append(count[item])\n\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input. It counts the number of times each element occurs in the tuple.\n    The function returns a dictionary where the keys are the elements in the tuple and the values are their respective counts.\n    '''\n\n    # create a dictionary to store the count of each element\n    count_dict = {}\n\n    # loop through each element in the tuple\n    for element in tup:\n        # if the element is in the list, increment its count\n        if element in lst:\n            count_dict[element] = count_dict.get(element, 0) + 1\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the list to a set to get unique elements\n    unique_list = set(lst)\n    \n    # Use Counter module to count the occurrence of each element in the list in the tuple\n    count_dict = Counter(tup)\n    \n    # Count the occurrence of each element in the list in the tuple\n    count_list = []\n    for elem in unique_list:\n        count_list.append(count_dict[elem])\n    \n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup) \n    return {k: count_dict[k] for k in lst}"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize the sum to zero\n    total = 0\n\n    # Loop through the first n numbers\n    for i in range(1, n+1):\n        # Calculate the perrin number\n        p = (1/i) * (1/i)\n\n        # Add the perrin number to the total sum\n        total += p\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    p = 1\n    s = 0\n    for i in range(1, n+1):\n        p = p + 2*i - 1\n        s = s + p\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [4, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1596, 1653, 1711, 1770, 1830, 1891, 1953, 2016, 2080, 2145, 2211, 2278, 2346, 2415, 2485, 2556, 2628, 2701, 2775, 2850, 2926, 3003, 3081, 3160, 3240, 3321, 3403, 3486, 3570, 3655, 3741, 3828, 3916, 4005, 4095, 4186, 4278, 4371, 4465, 4560, 4656, 4753, 4851, 4950, 5050, 5151, 5253, 5356, 5460, 5565, 5671, 5778, 5886, 5995, 6105, 6216, 6328, 6441, 6555, 6670, 6786, 6903, 7021, 7140, 7260, 7381, 7503, 7626, 7750, 7875, 8001, 8128, 8256, 8385, 8515, 8646, 8778, 8911, 9045, 9180, 9316, 9453, 9591, 9730, 9870, 10011, 10153, 10296, 10440, 10585, 10731, 10878, 11026, 11175, 11325, 11476, 11628, 11781, 11935, 12090, 12246, 12403, 12561, 12720, 12880, 13041, 13203, 13366, 13530, 13695, 13861, 14028, 14196, 143"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n\n    # Initialize the sum variable to zero\n    total = 0\n\n    # Loop through the range of n numbers\n    for i in range(1, n+1):\n\n        # Calculate the Perrin number for each number in the range\n        perrin = i + 1\n\n        # Add the Perrin number to the total sum\n        total += perrin\n\n    # Return the final sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += (i ** 3) / (i - 2)\n\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= l:\n            string_list.append(str_list[i])\n    return string_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and returns a list of strings of the specified size.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts the specified size of strings from a given list of string values.\n\n    Args:\n    str_list (list): list of string values\n    size (int): size of strings to extract\n\n    Returns:\n    list: list of extracted strings\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of strings and the size of the strings to be extracted as input\n    and returns a new list of extracted strings. The function extracts the strings of size l from the input list of strings.\n    \"\"\"\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            new_list.append(str_list[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        extracted_strings.append(str[:l[i]])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(0, len(str_list), l):\n        extracted_list.append(' '.join(str_list[i:i+l]))\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a target size of strings to extract.\n    It returns a list of extracted string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) <= size:\n            extracted_list.append(str_list[i])\n        else:\n            extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expressions to remove all whitespaces\n    text2 = re.sub('\\s+','', text1)\n    # remove all non-alphanumeric characters\n    text3 = re.sub('[^a-zA-Z0-9]+', '', text2)\n    # convert the remaining characters to lowercase\n    text4 = text3.lower()\n    # return the final result\n    return text4"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n    \"\"\"\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all white spaces using regular expression\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    # use regex to remove whitespaces\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_rate = 0.1 # loss rate of 10%\n    if actual_cost <= sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 10 # Assuming the loss is 10% of the sale amount.\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Check if the number is even\n    if n % 2 == 0:\n        # If even, add 2 to the sum\n        sum += 2\n\n    # Check odd factors up to the square root of the number\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # Check if the number is divisible by the current odd factor\n        if n % i == 0:\n            # If divisible, add it to the sum\n            sum += i\n\n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            sum += i + n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through odd numbers from 3 to n\n    for i in range(3, n, 2):\n        # check if i is even\n        if i % 2 == 0:\n            # add i to sum\n            sum += i\n\n    # return sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    if n > 2 and n % 2 == 0:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum = 0 \n\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 and i % 2 == 0: \n            sum += i \n\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenFactors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactors.append(i)\n    evenFactors.append(n)\n    evenFactors = sorted(evenFactors)\n    sumOfEvenFactors = sum(evenFactors)\n    return sumOfEvenFactors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the range of odd numbers from 3 to n\n    for i in range(3, n+1, 2):\n        # check if i is a factor of n\n        if math.gcd(n, i) == 1:\n            # add i to the sum if it is even\n            if i % 2 == 0:\n                sum += i\n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 and i % 2 == 0: \n            sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n            \n    if n > 2:\n        sum += n\n    \n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use a regular expression to search for words containing 'z'\n    pattern = r'\\b\\w+z\\b'\n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Print the matches\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]+z[a-z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[A-Za-z]*z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    pattern = r'\\b[A-Za-z]+z\\b'\n\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # use regular expressions to match words containing 'z'\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    result = pattern.findall(text)\n    # return the list of matched words\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define regex pattern for 'z'\n    pattern = re.compile('\\w*z\\w*', re.IGNORECASE)\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Print the matches\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # use regular expression to match words containing 'z'\n    pattern = re.compile(r'\\w+z\\w+')\n    # find all matches in the text using the pattern\n    matches = pattern.findall(text)\n    # print all matches\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+z\\w+'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    monthnum = int(monthnum2)\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum <= 12 and monthnum > 0:\n        if monthnum == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                days[1] = 29\n            else:\n                days[1] = 28\n        if days[monthnum - 1]!= 0:\n            print(monthnum2, \"contains\", days[monthnum - 1], \"days.\")\n        else:\n            print(monthnum2, \"contains no days.\")\n    else:\n        print(\"Invalid month number. Please enter a valid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13):\n        if monthnum2 == 2:\n            if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and year % 100 == 0 and year % 400!= 0):\n                days[2] = 29\n            else:\n                days[2] = 28\n        else:\n            days[monthnum2] = 31\n    else:\n        print(\"Invalid month number.\")\n        return\n    \n    if days[monthnum2] == 31:\n        print(\"The given month number contains 31 days.\")\n    else:\n        print(\"The given month number does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"The given month number contains 31 days.\")\n    elif monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10:\n        print(\"The given month number contains 30 days.\")\n    elif monthnum2 == 1 or monthnum2 == 12:\n        print(\"The given month number contains 28 or 29 days, depending on the year.\")\n    else:\n        print(\"Invalid input.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid Month Number\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as an input and returns True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if monthnum == 2:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if len(str(monthnum2)) == 1:\n        monthnum2 = '0' + str(monthnum2)\n        \n    if int(monthnum2) < 1 or int(monthnum2) > 12:\n        print(\"Invalid month number!\")\n        return\n        \n    if int(monthnum2) == 2 and (int(monthnum2) % 4 == 0 and (int(monthnum2) % 100!= 0 or int(monthnum2) % 400 == 0)):\n        print(monthnum2 +'has 29 days.')\n    elif int(monthnum2) % 2 == 0:\n        print(monthnum2 +'has 30 days.')\n    else:\n        print(monthnum2 +'has 31 days.')"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31 Days\"\n    elif monthnum2 in [4, 6, 9, 11]:\n        return \"30 Days\"\n    else:\n        return \"Not a valid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_stringlist.append(string[::-1])\n    return reversed_stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        newlist.append(reversed_string)\n    return newlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the current string using the built-in string method\n        stringlist[i] = stringlist[i][::-1]\n    # Return the list of reversed strings\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an argument and returns the sublist with the minimum length.\n    '''\n    \n    # Initialize variables to store minimum and current sublists\n    min_sublist = lst\n    current_sublist = []\n    \n    # Iterate over the list\n    for i in lst: \n        current_sublist.append(i) # Add current element to current sublist\n        \n        # If the length of the current sublist is smaller than the minimum length, update minimum sublist\n        if len(current_sublist) < len(min_sublist):\n            min_sublist = current_sublist\n        \n        # Remove the last element from the current sublist and continue iterating\n        current_sublist.pop()\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist.append(lst[i:j])\n            if min_len > len(sublist[-1]):\n                min_len = len(sublist[-1])\n    return min_len"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist having the minimum length.\n    '''\n    min_len = len(lst)\n    min_sub = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sub = lst[i:j+1]\n    return min_sub"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of lists and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize the minimum sublist length and sublist to None\n    min_length = lst[0].__len__()\n    min_sublist = lst[0]\n    \n    # Loop through the rest of the list\n    for i in range(1, len(lst)):\n        # Get the length of the current sublist\n        length = lst[i].__len__()\n        # Check if the length is smaller than the minimum length\n        if length < min_length:\n            # Update the minimum length and sublist\n            min_length = length\n            min_sublist = lst[i]\n    \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'(?i)(\\b[A-Z]+\\b)')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z][a-z]*\\b', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # using regular expressions to remove uppercase substrings\n    regex = re.compile(r'\\b[A-Z][a-z]*\\b')\n    return regex.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # Use the re.sub() function to remove uppercase substrings from the string\n    string = re.sub(pattern, '', string)\n    # Return the modified string\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w+\\b', re.IGNORECASE)\n    result = pattern.sub('', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regular expression to match uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z]+')\n    # use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # loop over the matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regex pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # use re.findall() to find all uppercase substrings in the string\n    upper_substrings = re.findall(pattern, str1)\n    # loop through each uppercase substring and replace it with an empty string\n    for substring in upper_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # Find all occurrences of uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Loop through all matches and remove them\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i][0]\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_element = []\n    for sublist in lst:\n        if sublist:\n            first_element.append(sublist[0])\n    return first_element"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst: \n        new_lst.append(sublist[0]) \n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]] * len(lst)"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    # Initialize count variable to 0\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in str:\n        # If the character is uppercase, increment the count variable\n        if char.isupper():\n            count += 1\n            \n    # Return the count of upper case characters in the string\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize the list of combinations to empty\n    combinations = []\n\n    # Sort the given list in ascending order\n    lst.sort()\n\n    # Initialize the current combination to an empty list\n    current_combination = []\n\n    # Loop through the list of elements\n    for i in range(len(lst)):\n        # Add the current element to the current combination\n        current_combination.append(lst[i])\n\n        # Check if the current combination is complete\n        if sum(current_combination) == 0:\n            # Add the current combination to the list of combinations\n            combinations.append(current_combination.copy())\n        else:\n            # Continue searching for other combinations\n            current_combination.pop()\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            res.append(list1[i:j])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of the elements of the list.\n    '''\n\n    # Create a list of all the possible combinations\n    comb_list = []\n    for i in range(1, len(lst) + 1):\n        for j in itertools.combinations(lst, i):\n            comb_list.append(list(j))\n\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of its elements.\n    \"\"\"\n    # initialize an empty list to store the combinations\n    result = []\n    \n    # create a list of all possible indices for the elements in the list\n    indices = list(range(len(lst)))\n    \n    # iterate through each element in the list\n    for i in range(len(lst)):\n        # remove the current element from the indices list\n        indices.remove(i)\n        \n        # create a list of the elements in the current combination\n        current = lst[i]\n        \n        # iterate through each remaining element in the indices list\n        for j in indices:\n            # create a new combination by appending the current element to the end of the list\n            new_combination = lst[i:j+1]\n            # append the new combination to the result list\n            result.append(new_combination)\n    \n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1, len(list1) + 1):\n        for j in range(1, len(list1) + 1):\n            for k in range(1, len(list1) + 1):\n                print(list1[k-1])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of the elements in the list.\n    '''\n    # Initialize a list to store the combinations\n    combinations = []\n    \n    # Iterate over all possible indices in the list\n    for i in range(len(list1)):\n        # Initialize a list to store the current combination\n        current_combination = []\n        \n        # Iterate over all possible starting indices for the current combination\n        for j in range(i+1):\n            # Add the current element to the current combination\n            current_combination.append(list1[j])\n        \n        # Add the current combination to the list of all combinations\n        combinations.append(current_combination)\n    \n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        results = []\n        for i in range(len(list1)):\n            new_list = list1[:i] + list1[i+1:]\n            results += combinations_list(new_list)\n        return results"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here_product = arr[0]\n    min_ending_here_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_ending_here_product = max(max_ending_here_product, max_ending_here)\n        min_ending_here = min(arr[i], min_ending_here + arr[i])\n        min_ending_here_product = min(min_ending_here_product, min_ending_here)\n\n        if max_ending_here_product > max_so_far:\n            max_so_far = max_ending_here_product\n\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of a given array.\n\n    Parameters:\n    arr (list[int]): The array to find the maximum product subarray for.\n\n    Returns:\n    int: The maximum product subarray.\n    \"\"\"\n\n    max_product = float('-inf')\n    current_product = 1\n    min_product = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            current_product, min_product = min_product, current_product\n        current_product *= arr[i]\n        min_product *= arr[i]\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here * arr[i], max_ending_here, arr[i])\n        min_ending_here = min(min_ending_here * arr[i], min_ending_here, arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if min_ending_here < 1:\n            min_ending_here = arr[i]\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        if max_ending_here < 0:\n            max_ending_here = min_ending_here = arr[i]\n\n    return max_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = 1\n    current_product = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_product, current_product = current_product, max_product\n        current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables\n    max_product = arr[0]\n    current_product = 1\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Update the current product\n        current_product *= arr[i]\n\n        # Update the maximum product if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n\n        # Update the current product to the product of the current element and the previous maximum product\n        current_product = max(current_product, arr[i] * max_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of a given array.\n\n    Parameters:\n    arr (list): A list of integers representing the array.\n\n    Returns:\n    int: The maximum product subarray.\n    \"\"\"\n\n    max_product = 1  # Assume the first element is the maximum product subarray\n\n    for i in range(1, len(arr)):\n        # Update max_product if the current element is larger\n        if arr[i] > 0:\n            max_product = max(max_product * arr[i], arr[i])\n        else:\n            max_product = max(max_product * arr[i], 1)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n        current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Create a set to store the unique values in the dictionary\n    unique_values = set(dict.values())\n    # If there are only n unique values, the dictionary contains all the same values\n    if len(unique_values) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    elif len(dict) == 1:\n        return all(dict.values())\n    else:\n        return check_value(dict.values(), n) and check_value(dict.items(), n)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    for i in range(1, len(values)):\n        if values[i]!= values[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for value in dict.values():\n            if value!= dict[list(dict.keys())[0]]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set([dict[key] for key in dict])\n\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values)!= n:\n        return False\n    for value in values:\n        if value!= values[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    all_values = set(dict.values())  # convert all the values to a set\n\n    if len(all_values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = next(iter(dict.values()))\n    return all(x == value for x in dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n        else:\n            if value!= first_value:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if len(set(dict[key]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    # Initialize a variable to store the maximum product\n    max_product = float('-inf')\n    # Initialize two variables to store the current maximum and minimum values\n    max_val = arr[0]\n    min_val = arr[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # If the current element is greater than the maximum value, update the maximum value\n        if arr[i] > max_val:\n            max_val = arr[i]\n        # If the current element is less than the minimum value, update the minimum value\n        elif arr[i] < min_val:\n            min_val = arr[i]\n        # If the current element is between the maximum and minimum values, check if the product of the two\n        # is greater than the current maximum product\n        else:\n            product = arr[i] * max_val\n            if product > max_product:\n                max_product = product\n        \n        # If the current element is greater than the minimum value, update the maximum value and the minimum value\n        if arr[i] > min_val:\n            max_val = arr[i]\n            min_val = arr[i]\n        # If the current element is less than the maximum value, update the minimum value\n        elif arr[i] < max_val:\n            min_val = arr[i]\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Parameters:\n    -----------\n    arr: List[int]\n        A list of integers.\n\n    Returns:\n    --------\n    int:\n        The maximum product formed by multiplying numbers of an increasing subsequence of the array.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n\n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # Traverse the array\n    for i in range(1, len(arr)):\n        # Update max_ending_here if we are increasing\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = min(min_ending_here, arr[i])\n        # Update max_so_far if we are decreasing\n        elif arr[i] < max_ending_here:\n            max_so_far = max(max_so_far, max_ending_here)\n            max_ending_here = min_ending_here = arr[i]\n\n    # If the last element is larger than the first element,\n    # we can use the same logic as above\n    if max_ending_here > arr[0]:\n        max_so_far = max(max_so_far, max_ending_here)\n        max_ending_here = min_ending_here = arr[0]\n\n    # Return the maximum product\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize max_product and min_product to the first element of the array\n    max_product = arr[0]\n    min_product = arr[0]\n    # Initialize the max_profit to be zero\n    max_profit = 0\n    # Iterate through the array from second to last element\n    for i in range(1, n-1):\n        # Initialize the current_profit to be zero\n        current_profit = arr[i] - min_product\n        # Update the max_profit if the current_profit is greater than max_profit\n        if current_profit > max_profit:\n            max_profit = current_profit\n        # Update the max_product if the current element is greater than max_product\n        if arr[i] > max_product:\n            max_product = arr[i]\n        # Update the min_product if the current element is less than min_product\n        if arr[i] < min_product:\n            min_product = arr[i]\n    return max_profit"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    def max_product_subsequence(arr, index, subsequence, max_product):\n        if index == len(arr):\n            return max_product\n        if subsequence:\n            if subsequence[-1] < arr[index]:\n                max_product = max(max_product, subsequence[-1] * arr[index])\n        else:\n            max_product = subsequence[-1] * arr[index]\n        max_product_subsequence(arr, index + 1, subsequence + [arr[index]], max_product)\n        max_product_subsequence(arr, index + 1, subsequence + [arr[index]], max_product)\n        return max_product\n    \n    max_product = max_product_subsequence(arr, 0, [], -1)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    if not arr:  # check if array is empty\n        return 0\n\n    max_product = float('-inf')  # initialize maximum product to negative infinity\n    current_product = 1  # initialize current product to 1\n\n    for num in arr:\n        if num > 0:  # check if number is positive\n            current_product *= num  # update current product\n            if current_product > max_product:  # update maximum product if it's greater than current product\n                max_product = current_product\n        else:  # number is negative\n            if current_product > 0:  # check if current product is greater than 0\n                current_product = 1  # update current product to 1\n\n    return max_product  # return maximum product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_ending_here, max_so_far)\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            max_so_far = max(min_ending_here, max_so_far)\n        else:\n            max_so_far = max(max_ending_here, max_so_far)\n        max_ending_here = max(min_ending_here, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    max_product_left = arr[0]\n    max_product_right = arr[0]\n\n    for i in range(1, n):\n        max_product_left = max(max_product_left * arr[i], arr[i])\n        max_product_right = max(max_product_right * arr[i], arr[n-1])\n\n    return max(max_product_left, max_product_right)\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            max_ending_here = max(max_ending_here, arr[i])\n            min_ending_here = min(min_ending_here, arr[i])\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            min_ending_here = min(min_ending_here, arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = arr[0]\n    min_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n        current_product = max(arr[i], current_product * arr[i])\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Find the pairwise addition of the neighboring elements of the given tuple.\n\n    Parameters:\n    test_tup (tuple): A tuple containing an odd number of elements.\n\n    Returns:\n    A list containing the pairwise additions of the neighboring elements.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the variable to keep track of the sum of all the neighboring elements\n    sum_neighboring = 0\n    \n    # Loop through all the elements of the tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element and the neighboring element to get the sum of all the neighboring elements\n        sum_neighboring += test_tup[i] + test_tup[i+1]\n    \n    # Return the sum of all the neighboring elements\n    return sum_neighboring"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n\n    sum_list = []\n\n    for i in range(len(test_tup)-1):\n        sum_list.append(test_tup[i] + test_tup[i+1])\n\n    return sum_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # check if the tuple has at least two elements\n    if len(test_tup) < 2:\n        return None\n    \n    # iterate over the tuple and find the sum of the pairwise elements\n    result = test_tup[0]\n    for i in range(1, len(test_tup)-1):\n        result += test_tup[i+1]\n    result += test_tup[-1]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        return (test_tup[0] + test_tup[1],) + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Using slicing to access the elements of the tuple\n    pairwise_sum = test_tup[0] + test_tup[1] + test_tup[2] + test_tup[3] + test_tup[4]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize a variable to store the pairwise addition\n    pair_sum = 0\n    # loop through the tuple and add the pairwise sum to the variable\n    for i in range(len(test_tup)-1):\n        pair_sum += test_tup[i] + test_tup[i+1]\n    # return the final pairwise sum\n    return pair_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes two arguments: an array of integers and a number n.\n    It returns the product of the array multiplication modulo n.\n    \"\"\"\n    # Initialize the result to 1\n    result = 1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Calculate the product of the current element and the result modulo n\n        product = arr[i] * result % n\n\n        # Update the result with the product\n        result = product\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the array\n    for i in arr:\n        # Multiply the product with the current element\n        product = (product * i) % n\n    \n    # Return the remainder\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        if product >= n:\n            product -= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array `arr` and an integer `n` as input and returns the product of the array's multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as an input and returns True if the list contains consecutive numbers and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i]+1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # Initialize the variables to keep track of the previous and current numbers\n    prev = None\n    curr = None\n    \n    # Iterate over the list and check for consecutive numbers\n    for num in l:\n        \n        # If the current number is equal to the previous number, it is not consecutive\n        if num == prev:\n            return False\n        \n        # Update the previous number\n        prev = curr\n        \n        # Update the current number\n        curr = num\n        \n    # If all the numbers in the list are consecutive, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + 1 == l[j]:\n                return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    # initialize two variables to keep track of the previous and current number\n    prev_num = None\n    curr_num = None\n    \n    # loop through the list\n    for num in l:\n        # if the current number is the same as the previous number, return True\n        if curr_num == prev_num:\n            return True\n        \n        # update the previous and current numbers for the next iteration\n        prev_num = curr_num\n        curr_num = num\n    \n    # if the loop completes without finding any consecutive numbers, return False\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert both lists to sets to get unique elements\n    unique_set1 = set(test_list1)\n    unique_set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection = unique_set1.intersection(unique_set2)\n    \n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set for storing unique elements from both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of set1 and set2\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Find the intersection of two lists of tuples\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n\n    # Sort the intersection list in ascending order\n    intersection.sort()\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set to store the unique elements in test_list1\n    unique_set = set(test_list1)\n\n    # create an empty set to store the elements that are present in both test_list1 and test_list2\n    intersection_set = set()\n\n    # iterate through test_list2 and add the elements that are present in both test_list1 and test_list2 to intersection_set\n    for elem in test_list2:\n        if elem in unique_set:\n            intersection_set.add(elem)\n\n    # convert intersection_set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Find the intersection of the two lists\n    intersection = [x for x in test_list1 if x in test_list2]\n\n    # Sort the intersection list in ascending order\n    intersection.sort()\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the unique elements of both the lists\n    result_set = set()\n\n    # Iterate through the first list and add each element to the result set if it's not already in the set\n    for item in test_list1:\n        if item not in result_set:\n            result_set.add(item)\n\n    # Iterate through the second list and add each element to the result set if it's not already in the set\n    for item in test_list2:\n        if item not in result_set:\n            result_set.add(item)\n\n    # Convert the set back to a list and return it as the tuple intersection of the two lists\n    return tuple(result_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a set from each tuple list to remove duplicates and store in a new set\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    intersection = list(set1.intersection(set2))\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set from the first list\n    set1 = set(test_list1)\n    # create an empty set to store the intersection\n    intersection = set()\n    # loop through the second list\n    for item in test_list2:\n        # if the item is in the set, add it to the intersection set\n        if item in set1:\n            intersection.add(item)\n    # return the intersection set\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert both lists to sets for better efficiency\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find intersection of sets\n    result = set1.intersection(set2)\n\n    # convert result to tuple and return it\n    return tuple(result)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples as input and returns a new list containing all the tuples that are present \n    in both the input lists irrespective of their order.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates and then convert them back to lists\n    test_set1 = list(set(test_list1))\n    test_set2 = list(set(test_list2))\n    # Find the intersection of the two sets\n    intersection = list(set.intersection(set(test_set1), set(test_set2)))\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # creating a new string with the characters replaced\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            result += newch\n        else:\n            result += str1[i]\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character in a string with another character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n\n    Parameters:\n    str1 (str): String to be modified.\n    ch (str): Character to be replaced.\n    newch (str): Character to replace all occurrences of ch with.\n\n    Returns:\n    str: Modified string with all occurrences of ch replaced with newch.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Using Counter() function to count the frequency of each element in the dictionary\n    counter = Counter(dict1)\n\n    # Sorting the dictionary based on the values in ascending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a list of tuples where the first element is the value and the second element is the key\n    sorted_list = sorted(dict1.items(), key=lambda x: x[1])\n    # convert the list of tuples back to a dictionary\n    sorted_dict = dict(sorted_list)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest values.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the maximum and minimum values in the array\n    max_val = nums[0]\n    min_val = nums[-1]\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize two variables to store the largest and smallest value in the array\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # Iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Initialize variables for sum of the smallest and largest values\n    min_val = nums[0]\n    max_val = nums[0]\n    sum_min_max = 0\n\n    # Loop through the array and update the minimum and maximum values and the sum of the smallest and maximum values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n        sum_min_max += num\n\n    # Return the sum of the smallest and largest values\n    return sum_min_max"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_val = float('-inf')\n    min_val = float('inf')\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    smallest = nums[0]\n    largest = nums[0]\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n\n    # Find the largest and smallest values in the array\n    largest = nums[-1]\n    smallest = nums[0]\n\n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of the largest and smallest values in the array.\n    \"\"\"\n    if not nums:\n        return None\n\n    max_num = nums[0]\n    min_num = nums[0]\n\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all characters are lowercase,\n    and False otherwise.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is lower case or not.\n    '''\n    lower_string = string.lower()\n    if lower_string == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check whether a string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    str1 = re.sub(r'\\b[a-z]\\w*\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'(?i)\\b[a-z]+\\b', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    This function takes a string as input and returns the same string with all lowercase substrings removed.\n    \"\"\"\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n\n    # Find all the substrings that match the pattern in the input string\n    matches = re.findall(pattern, str1)\n\n    # Remove all the matched substrings from the input string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    # Return the modified string with all lowercase substrings removed\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use the re.sub() function to replace all lowercase substrings with an empty string\n    return re.sub(r'[a-z]+', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]'\n\n    # Use re.findall() function to find all the lowercase substrings in the string\n    lower_substrings = re.findall(pattern, str1)\n\n    # Use a loop to iterate through each lowercase substring and replace it with an empty string\n    for substring in lower_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings from the given string\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'[a-z]+')\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Split the input string into words\n    words = str1.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the word contains lowercase characters, split the word into substrings and join them back together\n        if pattern.search(words[i]):\n            words[i] = pattern.sub('', words[i])\n    # Join the list of words back together into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    \n    # Convert the given number to string\n    str_n = str(n)\n    \n    # Convert the string to list of digits\n    lst_n = [int(i) for i in str_n]\n    \n    # Find the first digit of the list\n    first_digit = lst_n[0]\n    \n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Return the first character of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    This function takes an integer as input and returns the first digit of the input number.\n    '''\n    # converting the input number to a string\n    str_num = str(n)\n    # extracting the first character of the string\n    first_char = str_num[0]\n    # converting the first character to an integer\n    first_digit = int(first_char)\n    # returning the first digit of the input number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    # check if the input is a number\n    if type(n) not in [int, float]:\n        raise TypeError(\"Input is not a number\")\n\n    # convert the number to a string\n    num = str(n)\n\n    # check if the string has at least one digit\n    if not num.isdigit():\n        raise ValueError(\"Input number does not have at least one digit\")\n\n    # find the first digit of the number and return it as an integer\n    return int(num[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10000"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 1000"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert number to string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    # Check if input is a number\n    if not isinstance(n, int):\n        print(\"Error: Input is not a number\")\n        return None\n    \n    # Convert the number to a string\n    n_str = str(n)\n    \n    # Get the first character of the string\n    first_char = n_str[0]\n    \n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    \n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Initialize an empty list to store odd numbers\n    odd_list = []\n    \n    # Loop through each number in the input list\n    for num in list:\n        # Check if the number is odd by using the modulus operator (%) with 2\n        if num % 2!= 0:\n            # If the number is odd, add it to the odd_list\n            odd_list.append(num)\n    \n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd numbers in the list.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n\n    # Iterate over each number in the input list\n    for num in list:\n        # Check if the number is odd and append it to the odd list\n        if num % 2!= 0:\n            odd_list.append(num)\n\n    # Return the odd list\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n\n    # calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # return the difference between the two sums\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # Find the sum of the first n natural numbers\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # Find the difference between the two sums\n    diff = sum_cubes - sum_natural\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_natural_numbers += i\n    \n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference\n\nprint(difference(5))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    # initializing the sum of cubes and sum of natural numbers to zero\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # iterating through the first n natural numbers\n    for i in range(n):\n        # calculating the sum of cubes of each natural number\n        sum_cubes += i*i*i\n        \n        # calculating the sum of natural numbers\n        sum_natural += i\n        \n    # returning the difference between the sum of cubes and the sum of natural numbers\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of first n natural numbers\n    cubes = 0\n    for i in range(1, n+1):\n        cubes += i**3\n    # sum of first n natural numbers\n    sum_n = 0\n    for i in range(1, n+1):\n        sum_n += i\n    # find difference between cubes and sum of natural numbers\n    diff = cubes - sum_n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Initialize variables\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n\n    # Calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Calculate sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n\n    # Return difference between sums\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Finding the sum of cubes of the first n natural numbers\n    cube_sum = sum(i**3 for i in range(1, n+1))\n\n    # Finding the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n\n    # Finding the difference between the two sums\n    diff = cube_sum - sum_sum\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of the cubes of the first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    \n    # Find the sum of the first n natural numbers\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n    \n    # Calculate the difference between the two sums\n    difference = abs(sum_of_cubes - sum_of_natural_numbers)\n    \n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to use in the calculation.\n\n    Returns:\n        int: The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        sum_natural += i\n    return sum_cubes - sum_natural"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if ((A[i]^A[j])%2!=0):\n                count+=1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize variables\n    count = 0\n    xor_value = 0\n\n    # Traverse through the list A\n    for i in range(N):\n        # Check if the current element is odd\n        if A[i] % 2!= 0:\n            # Compute the xor value of the current element with all the elements before it\n            xor_value = 0\n            for j in range(i):\n                xor_value ^= A[j]\n            # Check if the xor value is odd\n            if xor_value % 2!= 0:\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Initialize an empty string to store the toggled characters\n    toggled_string = ''\n    # Loop through each character in the string\n    for char in string:\n        # Check if the character is uppercase or lowercase\n        if char.isupper():\n            # Convert the character to lowercase and append to the toggled_string\n            toggled_string += char.lower()\n        else:\n            # Convert the character to uppercase and append to the toggled_string\n            toggled_string += char.upper()\n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_char = char.upper()\n        elif char.isupper():\n            new_char = char.lower()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # convert the character to uppercase if it is lowercase, and vice versa\n        if string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        else:\n            string = string[:i] + string[i].lower() + string[i+1:]\n    return string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input numbers to strings\n    num1 = str(n1)\n    num2 = str(n2)\n    \n    # Calculate the number of digits in each number\n    num1_len = len(num1)\n    num2_len = len(num2)\n    \n    # Calculate the minimum number of digits needed for the result\n    min_len = min(num1_len, num2_len)\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Loop through each digit of the larger number\n    for i in range(min_len):\n        # Calculate the difference between the corresponding digits of the two numbers\n        diff = int(num1[i]) - int(num2[i])\n        \n        # Add the absolute value of the difference to the result variable\n        result += abs(diff)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_differences = 0\n    for i in range(10):\n        n1_digit = int(str(n1)[i])\n        n2_digit = int(str(n2)[i])\n        difference = abs(n1_digit - n2_digit)\n        sum_of_differences += difference\n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert both numbers to strings so we can work with them\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # initialize the sum to zero\n    total_sum = 0\n\n    # loop over each digit in both strings\n    for i in range(max(len(n1_str), len(n2_str))):\n        # calculate the difference between the corresponding digits\n        diff = abs(ord(n1_str[i]) - ord(n2_str[i]))\n\n        # add the difference to the sum\n        total_sum += diff\n\n    # return the sum of the per-digit differences\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the input numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum of differences to 0\n    diff_sum = 0\n\n    # Loop through each digit in the two numbers\n    for i in range(len(n1_str)):\n        # Calculate the difference between the corresponding digits\n        diff = int(n1_str[i]) - int(n2_str[i])\n\n        # Add the difference to the sum of differences\n        diff_sum += diff ** 2\n\n    # Calculate the square root of the sum of differences\n    diff_sum_sqrt = diff_sum ** 0.5\n\n    # Return the difference between the two numbers and the square root of the sum of differences\n    return abs(n1 - n2) + diff_sum_sqrt"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Find the per-digit difference between the two lists\n    diff = []\n    for i in range(len(digits1)):\n        diff.append(abs(digits1[i] - digits2[i]))\n\n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert both numbers to strings to work with the built-in digits() function\n    str1 = str(n1)\n    str2 = str(n2)\n    # create an empty list to store the differences\n    diff_list = []\n    # loop over the digits of each number\n    for digit1, digit2 in zip(str1, str2):\n        # compute the difference between the digits and append it to the diff_list\n        diff = abs(int(digit1) - int(digit2))\n        diff_list.append(diff)\n    # compute the sum of the differences\n    sum_diff = sum(diff_list)\n    # return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    # Find the difference between the two integers\n    diff = n1 - n2\n\n    # Initialize a counter variable to keep track of the number of digits in n1\n    count1 = 0\n\n    # Initialize a counter variable to keep track of the number of digits in n2\n    count2 = 0\n\n    # Loop through each digit in the difference and increment the appropriate counter variable\n    while diff > 0:\n        count1 += 1\n        diff //= 10\n\n    while diff > 0:\n        count2 += 1\n        diff //= 10\n\n    # Compute the sum of the per-digit differences\n    return count1 + count2"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = abs(n1 - n2)\n    digit_sum = 0\n    while difference > 0:\n        digit_sum += difference % 10\n        difference //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    sum_diff = 0\n\n    for digit in str(abs(diff)):\n        sum_diff += int(digit)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert input integers to lists of digits\n    d1 = list(str(n1))\n    d2 = list(str(n2))\n    \n    # calculate per-digit difference\n    d1_diff = [abs(int(d1[i]) - int(d2[i])) for i in range(len(d1))]\n    \n    # calculate sum of per-digit difference\n    d_sum = sum(d1_diff)\n    \n    return d_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if i >= size - 1:\n            max_sum = max(max_sum, current_sum)\n        elif current_sum < 0:\n            current_sum = a[i]\n            start = i\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return None\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(len(a)):\n        current_sum += a[i]\n        \n        if i >= size:\n            current_sum -= a[start]\n            start += 1\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the maximum sum of a contiguous sublist of size `size` in the given list `a`.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(a) - size + 1):\n        current_sum = sum(a[i:i+size])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return \"List should have at least size of \" + str(size) + \" elements\"\n\n    # initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # traverse through the list\n    for i in range(size):\n        # update the current sum\n        curr_sum += a[i]\n\n        # if the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # if the current sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    This function takes an array of integers and an integer size and returns the maximum sum of a contiguous sublist of the given size.\n    '''\n\n    if len(arr) < size:\n        return 0\n\n    max_sum = arr[0]\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += arr[i]\n        max_sum = max(max_sum, current_sum)\n\n        if i > 0 and current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, len(a)):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n        elif current_sum < 0:\n            current_sum = 0\n            start = i\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through each element in the list\n    for i in range(size):\n        # If the current element is positive, add it to the current sum\n        if a[i] > 0:\n            current_sum += a[i]\n        # If the current element is negative, subtract it from the current sum\n        else:\n            current_sum -= a[i]\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Merge the two tuples using the set() function\n    merged_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a tuple and sort it\n    sorted_tup = tuple(sorted(merged_set))\n    return sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Create a new list to hold the unique elements\n    unique_list = []\n    \n    # Loop through the combined tuple and add each element to the list if it's not already there\n    for element in combined_tup:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    # Sort the list in ascending order\n    unique_list.sort()\n    \n    # Return the sorted list\n    return unique_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set operations\n    union_set = test_tup1.union(test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # convert both tuples to lists\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n\n    # initialize an empty list to store the union\n    union_list = []\n\n    # iterate through the first tuple\n    for element in tup1:\n        # check if the element is not already in the union list\n        if element not in union_list:\n            # if the element is not in the list, add it to the union list\n            union_list.append(element)\n\n    # iterate through the second tuple\n    for element in tup2:\n        # check if the element is not already in the union list\n        if element not in union_list:\n            # if the element is not in the list, add it to the union list\n            union_list.append(element)\n\n    # sort the union list in ascending order\n    union_list.sort()\n\n    # print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = test_tup1.union(test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # First, we need to get all the elements from both tuples\n    all_elements = test_tup1 + test_tup2\n    \n    # Then, we need to remove duplicates from the list\n    unique_elements = list(set(all_elements))\n    \n    # Finally, we can sort the list and print it\n    unique_elements.sort()\n    print(unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1)\n    union.update(test_tup2)\n    sorted_union = sorted(union)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    return sorted(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # get the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # create an empty set to store the union\n    union_set = set()\n    \n    # add all elements from the first tuple to the set\n    for i in range(len1):\n        union_set.add(test_tup1[i])\n    \n    # add all elements from the second tuple to the set\n    for i in range(len2):\n        union_set.add(test_tup2[i])\n    \n    # convert the set to a tuple and sort it\n    union_tup = tuple(sorted(union_set))\n    \n    # print the union\n    print(\"Union of the elements of the tuples:\", union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Convert the tuples to sets to get their unique elements\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n\n    # Find the union of the two sets\n    union_set = unique_tup1 | unique_tup2\n\n    # Convert the set back to a list and sort it in ascending order\n    sorted_union = sorted(list(union_set))\n\n    return sorted_union\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if lst[i:j] == max(lst[i:j]):\n                max_length = max(max_length, j-i)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            if len(lst[i:j+1]) > max_length:  \n                max_length = len(lst[i:j+1])  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize max length to 0\n    max_length = 0\n    \n    # Iterate through the list of sublists\n    for sublist in lst:\n        # Check if the sublist has at least one element\n        if len(sublist) > 0:\n            # Get the length of the sublist\n            length = len(sublist)\n            \n            # Update max length if needed\n            if length > max_length:\n                max_length = length\n    \n    # Return the max length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    longest_sublist = []\n    for i in range(len(lst)):\n        if len(longest_sublist) == 0 or len(lst[i]) > len(longest_sublist):\n            longest_sublist = [lst[i]]\n        else:\n            longest_sublist.append(lst[i])\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub_list = lst[i:j+1]\n            if max_length < len(sub_list):\n                max_length = len(sub_list)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the maximum length of the sublists.\n\n    Parameters:\n    lst (list of lists): The list of lists to find the maximum length of the sublists for.\n\n    Returns:\n    int: The maximum length of the sublists in the input list.\n    \"\"\"\n    # Initialize a variable to store the maximum length found so far\n    max_length = 0\n\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Initialize a variable to store the current length of the sublist\n        current_length = 0\n\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Increment the current length by 1\n            current_length += 1\n\n            # If the current length is greater than the maximum length found so far, update the maximum length\n            if current_length > max_length:\n                max_length = current_length\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize max_len to 0\n    max_len = 0\n    \n    # iterate through the list\n    for i in range(len(lst)):\n        # initialize curr_len to 1\n        curr_len = 1\n        \n        # check for the next element\n        for j in range(i+1, len(lst)):\n            # if the next element is equal to the current element, increment curr_len\n            if lst[j] == lst[i]:\n                curr_len += 1\n            else:\n                # if the next element is not equal to the current element, update max_len if curr_len is greater\n                if curr_len > max_len:\n                    max_len = curr_len\n                # reset curr_len to 1\n                curr_len = 1\n                \n    # update max_len if curr_len is greater than max_len\n    if curr_len > max_len:\n        max_len = curr_len\n    \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > longest:\n                longest = len(sublist)\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    length = 0\n\n    for i in lst:\n        length += 1\n        if length > max_length:\n            max_length = length\n        elif length == max_length:\n            if len(i) > len(lst[max_length]):\n                max_length = length\n\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=\\\")[a-zA-Z]+(?=\\\")\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'This is a \"sample\" string with \"quotes\".'\nresult = extract_values(text)\nprint(result)  # Output: ['sample', 'quotes']"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'(\"[^\"]*\"|\\[[^\\]]*\\]|^\\s+|^\\s*$)')\n\n    # Use the pattern to split the string into a list of substrings\n    substrings = pattern.split(text)\n\n    # Define a list to store the extracted values\n    values = []\n\n    # Iterate over the substrings and extract the values if they are between quotation marks\n    for substring in substrings:\n        if substring.startswith('\"') and substring.endswith('\"'):\n            value = substring[1:-1]\n            values.append(value)\n        elif substring.startswith('[') and substring.endswith(']'):\n            value = substring[1:-1]\n            values.append(value)\n        elif substring.strip()!= '':\n            values.append(substring.strip())\n\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"[^\\\"]*\\\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"[^\"]*\"|\\'[^\\']*\\''\n    \n    # Use the re.findall() function to extract all matches of the pattern from the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to hold the extracted values\n    values = []\n    \n    # Loop through each match and append its value to the values list\n    for match in matches:\n        if match[0] == match[-1] == '\"':\n            # Remove the outer quotes from the value\n            value = match[1:-1]\n        else:\n            # Remove the single or double quotes from the value and add it to the list\n            value = match[1:len(match)-1]\n        values.append(value)\n    \n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(\\w+\\s?)+(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(\\w+)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    # Use regular expression to find all occurrences of quotes around a value\n    matches = re.findall(r'(?<!\\\\)\"(?:[^\"\\\\]|\\\\.)*\"', text)\n\n    # Remove any escape characters in the quotes and return the extracted values\n    return [match[1:-1] for match in matches]"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    :param arr: A list of integers\n    :type arr: List[int]\n    :param n: The length of the list\n    :type n: int\n    :return: The number of possible unordered pairs where both elements are unequal\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n\n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initialize two variables to keep track of the count of pairs\n    count = 0\n    # Loop through all possible pairs of elements\n    for i in range(n):\n        for j in range(i+1,n):\n            # Check if the two elements are not equal\n            if arr[i]!= arr[j]:\n                # Increment the count of pairs\n                count += 1\n    # Return the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each pair of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if both elements are unequal\n            if arr[i]!= arr[j]:\n                # Increment the count variable\n                count += 1\n\n    # Return the count of possible pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    chars = []\n    for char in word:\n        chars.append(char)\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Convert the integer to a string and split it into individual digits\n    digits = str(n)\n    for digit in digits:\n        # Convert each digit to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate over each character\n    # in the string. Add each integer to a running total and return the sum.\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to iterate over its digits\n    digits_str = str(n)\n    # Initialize the sum to 0\n    sum_val = 0\n    # Iterate over the string's characters and add their integer values to the sum\n    for digit_str in digits_str:\n        digit_int = int(digit_str)\n        sum_val += digit_int\n    # Return the sum\n    return sum_val"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        # Get the last digit\n        digit = n % 10\n        # Add the digit to the sum\n        sum += digit\n        # Remove the last digit from the number\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each digit of the number and add it to the sum\n    for digit in num_str:\n        sum_of_digits += int(digit)\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum_value = 0\n    while n > 0:\n        sum_value += n % 10\n        n = n // 10\n    return sum_value"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    num = str(n)\n    # Initialize a variable to store the sum of digits\n    sum = 0\n    # Loop through each character in the string\n    for char in num:\n        # Convert each character to an integer\n        digit = int(char)\n        # Add the integer to the sum of digits\n        sum += digit\n    # Return the sum of digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum to 0\n    total_sum = 0\n    \n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit of the number\n        last_digit = n % 10\n        \n        # add the last digit to the total sum\n        total_sum += last_digit\n        \n        # remove the last digit from the number\n        n //= 10\n        \n    return total_sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and checks whether it is sorted or not.\n    The function returns True if the list is sorted, False otherwise.\n    '''\n\n    # Convert the list to a string to be able to compare it\n    list1_str = ''.join(map(str, list1))\n\n    # Check if the list is sorted by comparing the first character of the string\n    for i in range(len(list1_str)-1):\n        if list1_str[i] > list1_str[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n            \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as an argument and returns True if the list is sorted,\n    otherwise it returns False. The function uses the built-in sorted() function to check the\n    sorted status of the list.\n    '''\n    return sorted(lst) == lst"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n    length: int, the number of dictionaries to create in the list.\n\n    Returns:\n    list: a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist using the sorted() function and the default sort key\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the list\n    for sublist in list1:\n\n        # Sort the sublist\n        sublist.sort()\n\n        # Print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize an empty dictionary to store unique numbers\n    unique_nums = {}\n    # iterate through each list in the input list\n    for lst in nums:\n        # iterate through each element in the list\n        for num in lst:\n            # if the number is not already in the dictionary, add it\n            if num not in unique_nums:\n                unique_nums[num] = True\n    # create a new list with only the unique numbers\n    unique_nums_list = [num for num in unique_nums.keys()]\n    # return the new list\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the duplicates removed.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_list = []\n    for num in nums:\n        if num not in unique_list:\n            unique_list.append(num)\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set(nums[0])\n    for i in range(1, len(nums)):\n        unique_nums = unique_nums.union(set(nums[i]))\n    return list(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert lists to sets to remove duplicates\n    unique_nums = set(sum(nums, []))\n    # convert set to list and return\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    # Create a set to store the unique numbers\n    unique_nums = set()\n    # Iterate over each list in the input\n    for lst in nums:\n        # Iterate over each number in the list\n        for num in lst:\n            # Add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # convert the lists into sets so we can remove duplicates\n    sets = [set(num) for num in nums]\n\n    # find the common elements between all sets\n    common_nums = sets[0].intersection(*sets[1:])\n\n    # convert the common elements back into lists and return them\n    return [list(num) for num in common_nums]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Using sets to remove duplicates\n    unique_nums = set(nums[0])\n    for i in range(1, len(nums)):\n        unique_nums.update(nums[i])\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # iterate over each list in the input list of lists\n    for lst in nums:\n        # iterate over each number in the list\n        for num in lst:\n            # check if the number is already in the set of unique numbers\n            if num in unique_nums:\n                # remove the duplicate number from the list\n                lst.remove(num)\n            # add the number to the set of unique numbers\n            else:\n                unique_nums.add(num)\n            \n    # return the modified lists of unique numbers\n    return nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data) # convert list to set to get unique values\n    product = 1\n    for num in unique_set: # loop through the unique values\n        product *= num # calculate the product of all the unique values\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    # Filter out the duplicates and sort the list\n    unique_data = sorted(set(list_data))\n    \n    # Initialize the product variable to 1\n    product = 1\n    \n    # Loop through the unique data and multiply it by the current product\n    for num in unique_data:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)  # convert list to set to remove duplicates\n    product = 1  # initialize product to 1\n    \n    # iterate over unique numbers and multiply them together\n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(lst):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    unique_lst = list(set(lst))\n    product = 1\n    for num in unique_lst:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    if len(unique_numbers) == 0:\n        return 1\n\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # Convert the list to a set to get unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n\n    product = 1\n    for num in unique_list:\n        product *= num\n\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the cylinder using the formula:\n    # surface_area = 2*pi*r*h\n    surface_area = 2 * 3.14159 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \n    Args:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: surface area of the cylinder\n    \"\"\"\n    return 2*math.pi*r**2 + 2*math.pi*h*r + 2*math.pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * r * h  # surface area of a cylinder is twice the diameter times its height\n    surface_area = 2 * 3.14159 * r * r  # surface area of a circle is 2\u03c0r\u00b2\n    return area - surface_area  # subtract the surface area of the circle from the area of the cylinder"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to calculate the surface area of a cylinder\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * h * r\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*math.pi*r**2 + 2*math.pi*h*r\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Convert r and h from inches to meters\n    r = r * 0.0254\n    h = h * 0.0254\n\n    # Calculate the surface area of the cylinder using the formula:\n    # S = 2 * pi * r * h\n    S = 2 * math.pi * r * h\n\n    # Return the surface area\n    return S"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: surface area of the cylinder\n    \"\"\"\n    pi = 3.14159\n    surface_area = 2 * pi * r * h + 2 * pi * r ** 2\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n            \n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # Check if B is a sublist of A \n    if len(B) > len(A): \n        return False \n    \n    # Initialize the two pointers at the beginning of A and B \n    i = 0 \n    j = 0 \n    \n    # Loop through A \n    while i < len(A): \n        \n        # If the current element of A is equal to the current element of B \n        if A[i] == B[j]: \n            \n            # Move both pointers ahead by one \n            i += 1 \n            j += 1\n            \n            # If we reach the end of B, return True \n            if j == len(B): \n                return True\n        \n        # If the current element of A is not equal to the current element of B \n        else: \n            # Move the pointer of B to the next element \n            j = 0 \n        \n        # If we reach the end of A and B, return False \n        if i == len(A) and j == len(B): \n            return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not isinstance(B, list):\n        raise TypeError(\"Input should be a list\")\n    if not isinstance(A, list):\n        raise TypeError(\"Input should be a list\")\n    if len(A) > len(B):\n        return False\n    i = 0\n    for j in range(len(B)):\n        if A[j] == B[i]:\n            i += 1\n            if i == len(B):\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A or not B: \n        return False \n\n    # Traverse A list \n    i = 0 \n    j = 0 \n\n    # Traverse B list \n    while i < len(A) and j < len(B): \n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n        else: \n            i = i - j + 1 \n            j = 0 \n\n    # If all elements of B are matched, then B is sublist of A \n    if j == len(B): \n        return True \n    else: \n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    else:\n        return A in B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(len(B)):\n            if A[0:i+1] == B[i:i+1]:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A)):\n        if B in A[i:]:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    elif len(A) < len(B):\n        return False\n    else:\n        for i in range(len(B)):\n            if A[i]!= B[i]:\n                return False\n        return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)):\n        if B[i] in A:\n            if i == len(B) - 1 or B[i+1] not in A:\n                return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a Python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Initialize the result variable with the last digit of the factorial\n    result = int(str(n)[-1])\n    # Return the result variable\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        print(\"Factorial of negative number is not possible.\") \n        return None \n\n    # initialize the result with 0\n    result = 0\n\n    # loop through the digits of n and multiply each digit by its factorial\n    while n > 0: \n        digit = n % 10 \n        factorial = 1 \n        for i in range(1, digit+1): \n            factorial *= i \n        result += factorial \n        n = n // 10 \n\n    # return the last digit of the result\n    return result % 10 "
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return int(factorial % 10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer input and returns the last digit of the factorial of that number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of its factorial.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return last_Digit_Factorial(n // 10) + n % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize result variable to store the last digit of the factorial\n    result = 0\n\n    # Convert the input number to string\n    n = str(n)\n\n    # Loop through each digit of the input number\n    for digit in n:\n        # Convert the digit to integer and add it to the result variable\n        result += int(digit)\n\n    # Return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a number as input and returns the last digit of the factorial of that number.\n    '''\n    # Convert the number to string\n    num_str = str(n)\n\n    # Find the last digit of the factorial\n    last_digit_factorial = int(num_str[-1])\n\n    # Return the last digit of the factorial\n    return last_digit_factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        factorial = 1\n        while n > 0:\n            factorial *= n\n            n //= 10\n        return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the number to a string\n    n = str(n)\n\n    # Find the last digit in the string\n    last_digit = int(n[-1])\n\n    # Return the last digit in the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize the result variable\n    result = 0\n\n    # loop through each digit in the number\n    while n > 0:\n        # get the last digit of n\n        last_digit = n % 10\n\n        # add the last digit to the result variable\n        result += last_digit\n\n        # remove the last digit from n\n        n //= 10\n\n    # return the result\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the final interleaved list\n    interleaved_list = []\n\n    # Loop through the lists and add the elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists are the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must be the same length.\")\n\n    # Initialize the result list\n    result = []\n\n    # Interleave the 3 lists\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n        \n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n        \n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n        \n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n        \n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n        \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create a new empty list to hold the interleaved lists\n    interleaved = []\n    # Loop through each list and add its elements to the new list\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    # Return the interleaved list\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    \n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    \n    if i < len(list1):\n        result.extend(list1[i:])\n    elif i < len(list2):\n        result.extend(list2[i:])\n    else:\n        result.extend(list3[i:])\n        \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # create a new empty list to store the interleaved list\n    interleaved_list = []\n\n    # loop through each element in the lists\n    for i in range(len(list1)):\n        # add the first element of each list to the new list\n        interleaved_list.append(list1[i])\n        # add the second element of each list to the new list\n        interleaved_list.append(list2[i])\n        # add the third element of each list to the new list\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Concatenate the three lists and return it\n    return list1 + list2 + list3"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    diff = set(test_tup1) ^ set(test_tup2)\n    return list(diff)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    dissimilar_elements = []\n\n    # Loop through each element in the two tuples\n    for element in test_tup1:\n        if element not in test_tup2:\n            # If the element is not present in the second tuple, add it to the dissimilar list\n            dissimilar_elements.append(element)\n\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # If the element is not equal to the corresponding element in the second tuple, add it to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    \n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of dissimilar elements between the two tuples.\n    \"\"\"\n    # Get the length of both tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Loop through the first tuple\n    for i in range(len1):\n        # Check if the element at index i of the first tuple is present in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # If it is not present, append it to the dissimilar list\n            dissimilar.append(test_tup1[i])\n\n    # Loop through the second tuple\n    for i in range(len2):\n        # Check if the element at index i of the second tuple is present in the first tuple\n        if test_tup2[i] not in test_tup1:\n            # If it is not present, append it to the dissimilar list\n            dissimilar.append(test_tup2[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elements of the first tuple that are not present in the second tuple.\n    '''\n    # create a set of the elements in the first tuple\n    set1 = set(test_tup1)\n    # create a set of the elements in the second tuple\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    intersect = set1.intersection(set2)\n    # find the elements of the first tuple that are not present in the intersection set\n    dissimilar = set1.difference(intersect)\n    # return the dissimilar elements as a list\n    return list(dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a set of unique elements in both tuples\n    common_set = set(test_tup1).intersection(set(test_tup2))\n\n    # Return a list of the elements that are not in both tuples\n    return sorted(list(set(test_tup1) - common_set))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the input tuple is a nested mixed tuple\n    if not isinstance(test_tuple, tuple):\n        raise ValueError('The input is not a nested mixed tuple.')\n    # Flatten the tuple to a list\n    flat_tuple = [item for sublist in test_tuple for item in sublist]\n    # Check if all elements of the flattened tuple are even\n    if all(even_fnc(item) for item in flat_tuple):\n        # Return the flattened tuple with even elements only\n        return tuple(filter(lambda x: even_fnc(x), flat_tuple))\n    else:\n        raise ValueError('The input contains uneven elements.')"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            uneven_elements.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            uneven_elements.append(item)\n    return uneven_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if even_fnc(item):\n            result.append(item)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(item) for item in test_tuple if isinstance(item, tuple)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        else:\n            even_list.append(even_fnc(item))\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            result.append(i)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elem in test_tuple:\n        if type(elem) == tuple:\n            even_list.append(even_fnc(elem))\n        elif type(elem) == list:\n            for subelem in elem:\n                if type(subelem) == tuple:\n                    even_list.append(even_fnc(subelem))\n        else:\n            even_list.append(elem)\n    return even_list\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((b+s)*s)/2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 6*b**2 + 6*s**2 - 12*b*s + 6*b**3 + 6*s**3 - 30*b**2*s + 18*b*s**2 - 6*b*s**3"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2*b*s + 2*(b+s)*b + 2*b*b\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 2 * b + 2 * s\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * base * height + 2 * base * base + 2 * base * height + base * base + 2 * base * height + base * base"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes a base edge and height as input and returns the surface area of a square pyramid.\n    '''\n\n    # Calculate the length of the sides of the pyramid\n    side_length = base / 2\n\n    # Calculate the surface area of the base\n    base_area = side_length * side_length\n\n    # Calculate the surface area of the top and bottom faces of the pyramid\n    top_area = side_length * (height / 2)\n    bottom_area = side_length * (height / 2)\n\n    # Add the surface areas of the base, top, and bottom faces to get the overall surface area\n    surface_area = base_area + top_area + bottom_area\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 6 * b * s\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the area of each half of the pyramid\n    area_half1 = b * s\n    area_half2 = b * s\n\n    # Add up the areas of the two halves to get the total area of the pyramid\n    total_area = area_half1 + area_half2\n\n    # Calculate the surface area of the pyramid using Heron's formula\n    surface_area = 2 * b * s * (s + b) / 3\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 2 * s * b + 2 * b * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)+(b*b)+(s*s)\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1.keys()) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    This function calculates the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 4*catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0]*(num+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    for i in range(2, num+1):\n        for j in range(i):\n            catalan[i] += catalan[j]*catalan[i-j-1]\n    \n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    catalan = [1]\n    for i in range(1, n+1):\n        catalan.append(2*i*catalan[i-1] - catalan[i-2])\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n\n    :param n: The index of the Catalan number to be returned.\n    :return: The nth Catalan number.\n    \"\"\"\n\n    def binomial_coefficient(n, k):\n        \"\"\"\n        This function returns the binomial coefficient of n over k.\n\n        :param n: The number of items.\n        :param k: The number of selected items.\n        :return: The binomial coefficient.\n        \"\"\"\n\n        if k > n:\n            return 0\n\n        if k == 0 or k == n:\n            return 1\n\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\n    def catalan(n):\n        \"\"\"\n        This function returns the nth Catalan number.\n\n        :param n: The index of the Catalan number to be returned.\n        :return: The nth Catalan number.\n        \"\"\"\n\n        catalan_numbers = [0] * (n + 1)\n        catalan_numbers[0] = 1\n        catalan_numbers[1] = 1\n\n        for i in range(2, n + 1):\n            for j in range(i):\n                catalan_numbers[i] += catalan_numbers[j] * catalan_numbers[i - j - 1]\n\n        return catalan_numbers[n]\n\n    return catalan(n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    numerator = 1\n    denominator = 1\n    for i in range(1, n+1):\n        numerator = numerator * (i * (2*i-1)) // (i + 1)\n        denominator = denominator * (i * (2*i)) // (i + 1)\n    return numerator // denominator"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        catalan = [0]*(n+1)\n        catalan[1] = 1\n        for i in range(2, n+1):\n            catalan[i] = catalan[i-1] + catalan[i-2]\n        return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    # Calculate the first n terms of the series\n    catalan = [1]\n    for i in range(1, n+1):\n        term = (2*i - 1) * catalan[i-1] / i\n        catalan.append(term)\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return num * catalan_number(num-1) / (1-2*(num-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2*num*catalan_number(num-1))/(num+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2 * catalan_number(num - 1)) / (num + 1)\n\nnum = int(input(\"Enter the number of terms: \"))\nprint(\"The\", num, \"Catalan number is:\", catalan_number(num))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use the re.finditer() method to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n\n    # Iterate over all matches and store the position of the adverb in the positions list\n    for match in matches:\n        positions.append(match.start())\n\n    # Return the list of positions of the adverbs\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b(?:(?:^|\\W)\\bly\\b(?:\\W|$))\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize empty list to store positions of adverbs\n    positions = []\n\n    # Iterate over the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n\n    # Return the list of adverb positions and their corresponding adverbs\n    return positions, matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\b\\w*[aeiouAEIOU]y\\b\\w*'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        adverbs.append((match.start(), match.end()))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Use regular expressions to find all adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\b([a-zA-Z]+ly)\\b', text)\n    \n    # Create a list of tuples with the first adverb and its position in the text\n    adverb_positions = []\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((adverb, i))\n    \n    # Return the list of tuples\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use a regular expression to find all instances of \"ly\" at the end of a word\n    ly_pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Use the re.finditer function to find all instances of the pattern in the text\n    matches = re.finditer(ly_pattern, text)\n    # Initialize an empty list to store the positions of the first adverb found\n    adverb_positions = []\n    # Iterate over each match and add its position to the list of adverb positions\n    for match in matches:\n        adverb_positions.append(match.start())\n    # If no adverbs were found, return an empty list\n    if not adverb_positions:\n        return []\n    # Otherwise, return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+\\s*[-\u2013]?ly\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        print(f\"{match} found at position {text.find(match)}\")\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function takes a string as input and returns a list of tuples containing the first adverb ending with 'ly' and its positions in the string.\n    \"\"\"\n    # Define the regular expression pattern to find the adverb ending with 'ly'\n    pattern = r'\\b([a-zA-Z]+ly)\\b'\n\n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples containing the first adverb ending with 'ly' and its positions in the string\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        start_pos = text.find(match)\n        end_pos = start_pos + len(match)\n        result.append((match, start_pos, end_pos))\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+(ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    for item in items:\n        heapq.heappush(heap, item)\n        \n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for _, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n\n    heap = []\n    # loop through the items and add each item to the heap if it's cheaper than the top item in the heap\n    for item in items:\n        if len(heap) < n or item[1] < heap[0][1]:\n            heapq.heappush(heap, item)\n        # if the heap has more than n items and the item's price is cheaper than the top item in the heap, remove the top item from the heap\n        elif len(heap) == n and item[1] < heap[0][1]:\n            heapq.heappop(heap)\n    # return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes in a list of items and an integer n as input and returns a list of the n most expensive items.\n    \"\"\"\n    heap = []\n    \n    # Iterate over the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        \n        # If the heap has more than n items, remove the smallest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n            \n    # Return the n most expensive items from the heap\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input\n    and returns a list of the n most expensive items in the dataset.\n    '''\n    # Sort the items in descending order of their value\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Get the first n elements of the sorted list\n    top_n_items = sorted_items[:n]\n\n    # Extract the values of the top n items and return them as a list\n    top_n_values = [item[1] for item in top_n_items]\n\n    return top_n_values"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    heap = []\n    max_heap = []\n\n    # Insert the first n items into the heap\n    for item in items[:n]:\n        heapq.heappush(heap, -item)\n\n    # Add the remaining items to the max heap\n    for item in items[n:]:\n        if item > -heap[0]:\n            heapq.heappushpop(heap, -item)\n        else:\n            heapq.heappush(heap, -item)\n\n    # Return the n most expensive items\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[0] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a heap to store the n most expensive items\n    heap = []\n    # iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        # if the heap size exceeds n, remove the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # return the n most expensive items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Sort the items in descending order of price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Initialize a min heap of size n\n    min_heap = []\n\n    # Fill the min heap with the first n items\n    for i in range(n):\n        min_heap.append(sorted_items[i])\n\n    # Add the remaining items to the min heap\n    for item in sorted_items[n:]:\n        heapq.heappush(min_heap, item)\n\n    # Return the items in the min heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Initialize a min heap of size n\n    min_heap = [(-price, item) for item, price in items[:n]]\n    heapq.heapify(min_heap)\n\n    # Iterate through the remaining items\n    for item, price in items[n:]:\n        # If the price is less than the price of the smallest item in the heap,\n        # then remove the smallest item from the heap and add the new item.\n        if price < -heapq.heappop(min_heap)[0]:\n            heapq.heappush(min_heap, (-price, item))\n\n    # Extract the n most expensive items from the heap and return them\n    return [price for price, item in min_heap]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if n is valid input\n    if n < 0 or n > len(l):\n        return \"Invalid input\"\n    else:\n        # Split the list at the nth element and add the first part to the end\n        split_list = l[:n] + [l[n]] + l[n+1:]\n        return split_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    \n    part1 = l[:n]\n    part2 = l[n:]\n    \n    l = part2 + part1\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # Check if the length of the list is less than n\n    if len(l) < n:\n        print(\"The length of the list is less than the nth element.\")\n        return l\n    \n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Add the first part to the end of the second part\n    result = first_part + second_part\n    \n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr1 = []\n    for i in range(n):\n        arr1.append(l.pop(0))\n    arr1.extend(l)\n    return arr1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n\n    # add part1 to part2 and return it\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n == 0:\n        return l\n    else:\n        mid = len(l) // 2\n        first = l[:mid]\n        second = l[mid:]\n        return split_Arr(second, n-1) + first"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"Error: List length is less than the nth element\"\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part2 + part1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    # check if n is less than or equal to the length of l\n    elif n > len(l):\n        raise ValueError(\"n must be less than or equal to the length of l\")\n    # split the list at the nth element\n    split_list = l[:n] + [l[n]]\n    # return the new list\n    return split_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n+1:], n)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the minimum and maximum values in the list\n    min_num = min(nums)\n    max_num = max(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_num - min_num\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum and minimum value in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    # Calculate the difference between the maximum and minimum value\n    diff = max_num - min_num\n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 'List must have at least two elements'\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables to store the smallest and largest values\n    smallest = float('inf')\n    largest = float('-inf')\n    \n    # loop through the list of numbers and update the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    \n    # return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Find the difference between largest and smallest value\n    diff = nums[-1] - nums[0]\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all possible values of x between a and b\n    for x in range(int(a**0.5)+1, int(b**0.5)+1):\n        # if x is a perfect square\n        if x**2 == a or x**2 == b:\n            # print x\n            print(x)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        if i * i == a:\n            count += 1\n        elif i * i == b:\n            count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    result = []\n    for i in range(int(a), int(b) + 1):\n        for j in range(int(a), int(b) + 1):\n            if i * i == j * j:\n                result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == sum_of_squares(a, square):\n            print(square)\n\ndef sum_of_squares(start, end):\n    '''\n    Write a function to sum of squares between two given numbers.\n    '''\n    return (end*end + start*start)//2"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # loop through the range of values between a and b (inclusive)\n    for i in range(a, b+1):\n\n        # calculate the square root of the current value\n        sqrt_i = i**0.5\n\n        # check if the square root is an integer\n        if sqrt_i.is_integer():\n\n            # if it is, check if the current value is also a perfect square\n            if i == int(sqrt_i**2):\n\n                # if it is, print the current value\n                print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize an empty list to store the perfect squares\n    perfect_square_list = []\n    \n    # loop through the range of numbers between a and b (inclusive)\n    for i in range(a, b+1):\n        # calculate the square root of i\n        square_root = int(i ** 0.5)\n        # check if the square root is an integer\n        if square_root ** 2 == i:\n            # if it is, append it to the perfect square list\n            perfect_square_list.append(square_root)\n    \n    # return the perfect square list\n    return perfect_square_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 0 or b < 0:\n        return 'Both numbers must be non-negative.'\n    \n    # calculate the largest number that can be expressed as a square of a number in b's range\n    c = int((b**0.5)**2)\n    \n    # loop through the range of numbers that can be expressed as squares of c\n    for i in range(c+1):\n        # check if i can be expressed as a square of a number in a's range\n        if a**(0.5) + i*i > b**(0.5):\n            break\n    \n    # return the largest perfect square that can be expressed between a and b\n    return i**2"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function will find all the perfect squares between two given numbers a and b.\n    '''\n    # Firstly, we check if a is less than or equal to b\n    if a > b:\n        # If a is greater than b, we swap them so that a is less than or equal to b\n        a, b = b, a\n\n    # We then check if a is equal to 0, which would mean there is only one perfect square\n    if a == 0:\n        return [0]\n\n    # We then initialize a variable to store the perfect squares\n    perfect_squares_list = []\n\n    # We start iterating from 1 to b, since we have already checked that a is less than or equal to b\n    for i in range(1, b+1):\n        # We check if i is a perfect square\n        square = i*i\n        if square == i:\n            # If i is a perfect square, we add it to the list of perfect squares\n            perfect_squares_list.append(square)\n\n    # Finally, we return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        j = i\n        while j**2 <= i:\n            j += 1\n        if j == i:\n            print(i, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize a variable to keep track of the perfect squares found\n    perfect_squares = []\n\n    # loop through all numbers between the given values a and b\n    for num in range(a, b+1):\n\n        # loop through all numbers from 1 to the square root of the current number\n        for root in range(1, num):\n\n            # if the square root of the current number is equal to the current number\n            if root**2 == num:\n\n                # add the current number to the list of perfect squares found\n                perfect_squares.append(num)\n\n    # return the list of perfect squares found\n    return perfect_squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # convert polar coordinates to complex number\n    z = x + y*1j\n\n    # calculate rectangular coordinates\n    r = abs(z)\n    theta = cmath.phase(z)\n\n    # return results as a tuple\n    return (r, theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters\n    ----------\n    r : float\n        The magnitude of the complex number.\n    theta : float\n        The angle of the complex number in radians.\n        \n    Returns\n    -------\n    x : float\n        The x-coordinate of the rectangular coordinates.\n    y : float\n        The y-coordinate of the rectangular coordinates.\n        \n    Examples\n    --------\n    >>> polar_rect(3, 45)\n    (5.0, 3.0)\n    \"\"\"\n    # Convert polar coordinates to complex number\n    z = r * cmath.exp(theta * 1j)\n    # Convert complex number to rectangular coordinates\n    x = z.real\n    y = z.imag\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates (r,theta) to rectangular coordinates\n    \"\"\"\n\n    # Convert r from radians to degrees\n    r = cmath.degrees(r)\n\n    # Compute x and y coordinates using the formulas\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    return r*cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the point.\n    theta (float): The angle in radians.\n\n    Returns:\n    (x, y): The corresponding rectangular coordinates.\n\n    '''\n    # Convert angle to degrees\n    theta_deg = theta * 180 / cmath.pi\n    \n    # Convert radius to pixels\n    r_pixels = r * 50\n    \n    # Calculate x and y components\n    x = r_pixels * cmath.cos(theta)\n    y = r_pixels * cmath.sin(theta)\n\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in the radius and angle of a point in polar coordinates\n    and returns the x and y coordinates of that point in rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    This function takes in a list as a parameter, interchanges the first and last elements of the list and returns the modified list.\n    '''\n    # Swap first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"Error: List must have at least two elements.\"\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Get the length of the list\n    length = len(newList)\n    \n    # If the length is less than 2, return the original list as it is\n    if length < 2:\n        return newList\n    \n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"List must have at least two elements\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has only one element\n    if len(newList) == 1: \n        return newList\n    \n    # get the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # remove the last element from the list\n    newList.pop()\n    \n    # add the last element to the beginning of the list\n    newList.insert(0, last)\n    \n    # add the first element to the end of the list\n    newList.append(first)\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n\n    if len(newList) < 2:\n        return newList\n\n    # First element\n    if newList[0] == newList[-1]:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    sum_prod = 0\n    for i in range(1,k+1):\n        sum_prod += i*binomial_Coeff(n-1,k-i)\n\n    return sum_prod\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k, n+1):\n        sum += i*(n-i+1)/(k+1)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize a variable to store the sum of product of consecutive binomial coefficients\n    sum_prod = 0\n    \n    # Calculate the product of consecutive binomial coefficients\n    for i in range(1,n+1):\n        binomial_prod = 1\n        for j in range(i+1,i+k+1):\n            binomial_prod *= j\n        sum_prod += binomial_prod\n    \n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n == k:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1 \n    else: \n        return (binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)) "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    sum_product = 0\n    for i in range(k):\n        product *= n - i\n    for i in range(1, n+1):\n        product //= i\n        sum_product += product\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    # Write a function to find the sum of the product of consecutive binomial co-efficients.\n    # Input: n, k - integers\n    # Output: The sum of the product of consecutive binomial co-efficients\n    \n    # Initialize a variable to store the sum of consecutive binomial co-efficients\n    sum = 0\n    \n    # Loop from 0 to k, inclusive\n    for i in range(k+1):\n        # Calculate the product of binomial co-efficients for i and n-i\n        prod = 1\n        for j in range(i+1):\n            prod *= (n-i+j) / j\n        # Add the product of binomial co-efficients to the sum\n        sum += prod\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        return n * binomial_Coeff(n-1,k-1)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = re.compile(r'(\\d{1,3}\\.){3}\\d{1,3}')\n    return re.sub(ip_pattern, r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\d+\\.\\d+\\.\\d+\\.0', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regex to remove leading zeroes\n    ip = re.sub(r'^\\D+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each octet\n    ip = re.sub(r'^\\d+\\.0', '', ip)\n    ip = re.sub(r'^0+\\.', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        return ip\n    else:\n        return removezero_ip(re.sub(r'^\\d+\\.', '', ip))"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern to match an IP address\n    pattern = r'^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$'\n\n    # Use the re.match() function to match the pattern against the input IP address\n    match = re.match(pattern, ip)\n\n    # If the IP address matches the pattern, return the IP address with leading zeroes removed\n    if match:\n        ip_without_zeroes = ''.join(str(ip.split('.')[i]) for i in range(len(ip.split('.'))))\n        return ip_without_zeroes\n    # Otherwise, return the original IP address\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return re.sub(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.', '', ip)\n    else:\n        print('Invalid IP address format.')\n        return ip\n\nip = input('Enter an IP address: ')\nnew_ip = removezero_ip(ip)\nprint('New IP address without zeroes:', new_ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = None\n    odd_number = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_number is None:\n                even_number = num\n            else:\n                even_number = num - even_number\n        else:\n            if odd_number is None:\n                odd_number = num\n            else:\n                odd_number = num - odd_number\n    if even_number is None or odd_number is None:\n        return None\n    return even_number - odd_number"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(list1) < 2:\n        return 'Error: List should have at least two elements'\n\n    # Initialize variables for even and odd indices\n    even_idx = -1\n    odd_idx = -1\n\n    # Find the first even number index\n    for i, num in enumerate(list1):\n        if num % 2 == 0:\n            even_idx = i\n            break\n\n    # Find the first odd number index\n    for i, num in enumerate(list1[even_idx + 1:], start=even_idx + 1):\n        if num % 2!= 0:\n            odd_idx = i\n            break\n\n    # Check if we found both even and odd numbers\n    if even_idx == -1 or odd_idx == -1:\n        return 'Error: Unable to find both even and odd numbers in the list'\n\n    # Return the difference between the even and odd numbers\n    return abs(list1[even_idx] - list1[odd_idx])"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_sum = 0\n    first_even = 0\n    first_odd = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_odd_sum += i\n            if first_even == 0:\n                first_even = i\n        else:\n            even_odd_sum += i\n            if first_odd == 0:\n                first_odd = i\n    \n    diff = first_even - first_odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n\n    first_even = first_odd = None\n    even_count = odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 == 0:\n            even_count += 1\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n        elif num % 2!= 0:\n            odd_count += 1\n\n    if first_even is None or first_odd is None:\n        print(\"The list contains no even or odd numbers.\")\n        return\n\n    diff = abs(first_even - first_odd)\n\n    print(f\"The difference between the first even and first odd number is: {diff}\")"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables\n    even_num = 0\n    odd_num = 0\n    \n    # loop through the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            even_num = num\n        # check if the number is odd\n        else:\n            odd_num = num\n    \n    # return the difference of even and odd numbers\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return None\n    # check if the first number is even or odd\n    if list1[0] % 2 == 0:\n        even = list1[0]\n        odd = list1[1]\n    else:\n        even = list1[1]\n        odd = list1[0]\n    # calculate the difference of even and odd numbers\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = list1[0]\n    odd_number = list1[-1]\n    diff = even_number - odd_number\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    # iterate over the list\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n            \n    # check if even_num and odd_num are both greater than zero\n    if even_num > 0 and odd_num > 0:\n        # return the difference between the even and odd numbers\n        return even_num - odd_num\n    else:\n        # if even_num or odd_num is zero, return None\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list is not empty\n    if not list1:\n        return \"Error: List is empty\"\n    \n    # Find the first even and first odd number of the list\n    even_number = list1[0]\n    odd_number = list1[1]\n    \n    # Check if the first number is even or odd\n    if even_number % 2 == 0:\n        # Return the difference of the even and odd numbers\n        return odd_number - even_number\n    else:\n        # Return the difference of the odd and even numbers\n        return even_number - odd_number"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number\n    even_index = next((index for index, value in enumerate(list1) if value % 2 == 0), None)\n    if even_index is not None:\n        even_number = list1[even_index]\n    else:\n        return 'The list does not have any even number'\n    # Find the first odd number\n    odd_index = next((index for index, value in enumerate(list1[even_index:]) if value % 2 == 1), None)\n    if odd_index is not None:\n        odd_number = list1[even_index+odd_index]\n    else:\n        return 'The list does not have any odd number'\n    # Calculate the difference between the even and odd numbers\n    diff = odd_number - even_number\n    # Return the difference\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings into integer arrays\n    arr1 = [int(x) for x in str1]\n    arr2 = [int(x) for x in str2]\n\n    # Find the length of the binary strings\n    n = max(len(arr1), len(arr2))\n\n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Loop through all possible swaps\n    for i in range(n):\n        for j in range(n):\n            # Swap the i-th digit with the j-th digit\n            arr1[i], arr1[j] = arr1[j], arr1[i]\n            arr2[i], arr2[j] = arr2[j], arr2[i]\n\n            # Check if the binary strings are equal\n            if arr1 == arr2:\n                # If yes, calculate the number of swaps required to convert the binary strings\n                num_swaps = (i + j) // 2\n                if num_swaps < min_swaps:\n                    min_swaps = num_swaps\n\n            # Undo the swaps\n            arr1[i], arr1[j] = arr1[j], arr1[i]\n            arr2[i], arr2[j] = arr2[j], arr2[i]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    swaps = 0\n    i = 0\n    j = 0\n\n    # Traverse the two strings simultaneously\n    while i < n1 and j < n2:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            # If characters are different, swap the characters\n            if str1[i] < str2[j]:\n                str1[i], str2[j] = str2[j], str1[i]\n            swaps += 1\n            # Shift the remaining characters of str2 to the left\n            for k in range(j, n2):\n                str2[k], str2[k-1] = str2[k-1], str2[k]\n            n2 -= 1\n\n    # If there are any remaining characters in str1, swap them with the last character of str2\n    while i < n1:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            # If characters are different, swap the characters\n            if str1[i] < str2[j]:\n                str1[i], str2[j] = str2[j], str1[i]\n            swaps += 1\n            # Shift the remaining characters of str2 to the left\n            for k in range(j, n2):\n                str2[k], str2[k-1] = str2[k-1], str2[k]\n            n2 -= 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2): \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Initialize variables for count and total swaps\n    count = 0\n    total_swaps = 0\n    \n    # Check for equal length of strings\n    if len(str1)!= len(str2):\n        return -1\n    \n    # Check for leading zeros\n    if str1.startswith(\"0\"):\n        str1 = str1[1:]\n    if str2.startswith(\"0\"):\n        str2 = str2[1:]\n    \n    # Convert strings to binary\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n    \n    # Check for equal lengths\n    if len(bin1)!= len(bin2):\n        return -1\n    \n    # Count swaps\n    for i in range(len(bin1)):\n        if bin1[i]!= bin2[i]:\n            count += 1\n    \n    # Calculate total swaps\n    total_swaps = count\n    \n    # Return minimum number of swaps\n    return total_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    i = 0\n    j = 0\n\n    while i < n and j < n:\n        # Compare the current characters of str1 and str2\n        if str1[i]!= str2[j]:\n            # If they are not equal, we need to swap one of them\n            if str1[i] == '0':\n                str1 = str1[:i] + '1' + str1[i+1:]\n            elif str1[i] == '1':\n                str1 = str1[:i] + '0' + str1[i+1:]\n            else:\n                raise ValueError('Invalid character in str1')\n\n            if str2[j] == '0':\n                str2 = str2[:j] + '1' + str2[j+1:]\n            elif str2[j] == '1':\n                str2 = str2[:j] + '0' + str2[j+1:]\n            else:\n                raise ValueError('Invalid character in str2')\n\n            # Update i and j to skip the swapped character\n            i += 1\n            j += 1\n        else:\n            # If they are equal, skip both characters\n            i += 1\n            j += 1\n\n    # At this point, i should be equal to n\n    # j should be equal to n\n    # Check if the remaining characters of str1 and str2 are equal\n    while i < n:\n        if str1[i]!= str2[i]:\n            # If not, there is at least one character that needs to be swapped\n            return 1\n        i += 1\n\n    while j < n:\n        if str1[j]!= str2[j]:\n            # If not, there is at least one character that needs to be swapped\n            return 1\n        j += 1\n\n    # If no swaps are needed, return 0\n    return 0"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert the first string to the second string.\n\n    \"\"\"\n    # Checking if both the binary strings have same length\n    if len(str1)!= len(str2):\n        return \"Both binary strings should have same length\"\n\n    # Converting binary strings to lists of 0's and 1's\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Initializing variables to keep track of the number of swaps and the last index of each string\n    swaps = 0\n    i = j = len(list1) - 1\n\n    # Looping through the binary strings until the last index\n    while i >= 0:\n        # If the current digits of both the binary strings are different, then swapping the digits\n        if list1[i]!= list2[j]:\n            # Incrementing the number of swaps and swapping the digits\n            swaps += 1\n            list1[i], list2[j] = list2[j], list1[i]\n        i -= 1\n        j -= 1\n\n    # Returning the number of swaps required to convert the binary strings\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            if str1[i] == '0':\n                str1[i] = '1'\n                str2[i] = '0'\n                swaps += 1\n            else:\n                str1[i] = '0'\n                str2[i] = '1'\n                swaps += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Convert integers to binary strings\n    bin1 = bin(num1)[2:]  # remove '0b' from the beginning of the string\n    bin2 = bin(num2)[2:]\n\n    # Initialize variables to store the count of swaps required\n    count = 0\n    i = 0  # index of the first non-matching digit\n\n    # Compare the two binary strings\n    while i < len(bin1) and i < len(bin2):\n        if bin1[i]!= bin2[i]:\n            # If there is a mismatch, increment the count and find the index of the first non-matching digit\n            count += 1\n            i = 0  # reset the index for the next iteration\n            while i < len(bin1) and bin1[i]!= bin2[i]:\n                i += 1\n        else:\n            i += 1  # move to the next non-matching digit\n\n    return count  # return the count of swaps required"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to store the swaps required\n    swap1 = swap2 = 0\n\n    # Initialize variables to store the maximum and minimum digits in the two binary strings\n    max1 = max2 = 0\n    min1 = min2 = 1000000000\n\n    # Loop through each digit of the binary strings\n    for digit in range(len(str1)):\n        # Check if the current digit is maximum in the first binary string\n        if int(str1[digit]) == max1:\n            swap1 += 1\n        else:\n            # Check if the current digit is minimum in the first binary string\n            if int(str1[digit]) == min1:\n                swap1 += 1\n                min1 = int(str2[digit])\n            # Check if the current digit is maximum in the second binary string\n            elif int(str2[digit]) == max2:\n                swap2 += 1\n            else:\n                # Check if the current digit is minimum in the second binary string\n                if int(str2[digit]) == min2:\n                    swap2 += 1\n                    min2 = int(str1[digit])\n                # Check if the current digit is maximum in either binary string\n                elif int(str1[digit]) == max1 or int(str2[digit]) == max2:\n                    swap1 += 1\n                else:\n                    # Check if the current digit is minimum in either binary string\n                    if int(str1[digit]) == min1 or int(str2[digit]) == min2:\n                        swap2 += 1\n                    # If the current digit is neither maximum nor minimum, swap it with the previous maximum or minimum digit in both binary strings\n                    else:\n                        if int(str1[digit]) < int(str2[digit]):\n                            swap1 += 1\n                        else:\n                            swap2 += 1\n\n    # Return the minimum number of swaps required\n    return min(swap1, swap2)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the input strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Find the number of set bits in each binary number\n    bits1 = bin(num1).count('1')\n    bits2 = bin(num2).count('1')\n    \n    # Calculate the minimum number of swaps required to convert the binary numbers\n    swaps = min(bits1, bits2)\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    # Make the strings equal in length by adding zeros to the shorter one\n    if n < m:\n        str1 = str1.zfill(m)\n    elif n > m:\n        str2 = str2.zfill(n)\n    # Find the number of swaps required to convert str1 to str2\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            # Swap the characters at indices i and n-i-1\n            str1[i], str1[n-i-1] = str1[n-i-1], str1[i]\n            swaps += 1\n            # If we have swapped all characters, no more swaps are possible\n            if swaps == n:\n                break\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # create an empty list to store the size of each tuple element\n    element_sizes = []\n    \n    # iterate over each tuple in the list\n    for i in range(len(tuple_list)):\n        # get the size of the current tuple element\n        element_size = sys.getsizeof(tuple_list[i])\n        \n        # append the size to the list\n        element_sizes.append(element_size)\n    \n    # calculate the total size of all tuple elements\n    total_size = sum(element_sizes)\n    \n    # return the total size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # check if the input is a tuple\n    if not isinstance(tuple_list, tuple):\n        print(\"Error: Input is not a tuple.\")\n        sys.exit()\n    # calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # iterate over each tuple in the list\n    for i in range(len(tuple_list)):\n        # calculate the size of the tuple in bytes\n        tuple_size = sys.getsizeof(tuple_list[i])\n        # add the size of the tuple to a running total\n        total_size += tuple_size\n    # return the total size of the list of tuples in bytes\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for i in range(len(tuple_list)):\n        tuple_size += sys.getsizeof(tuple_list[i])\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_bytes = 0\n    for item in tuple_list:\n        size_bytes += sys.getsizeof(item)\n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size\n\nprint(tuple_size((1,2,3)))  # Output: 24"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if k == 1:\n        return arr1[i]\n    elif k == 2:\n        return arr2[j]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    # If i or j is not equal to len(arr1) or len(arr2), it means we have reached the end of one of the arrays\n    # and the other one is empty. In that case, we just need to compare the remaining elements of both arrays.\n    # If the length of arr1 is greater, we need to find the kth element in arr2.\n    if i < len(arr1):\n        return find_kth(arr1[i+1:], arr2, k)\n    else:\n        return find_kth(arr1, arr2[j+1:], k)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three parameters: \n    arr1: a sorted array\n    arr2: another sorted array\n    k: the value of k for the kth element to be found\n    \n    This function returns the kth smallest element from the given two sorted arrays.\n    \"\"\"\n\n    # Check if both arrays are sorted or not\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    # Find the kth smallest element in the first array\n    for i in range(len(arr1)):\n        if k == 1:\n            return arr1[i]\n        k -= 1\n        arr1 = arr1[i+1:]\n\n    # Find the kth smallest element in the second array\n    for i in range(len(arr2)):\n        if k == 1:\n            return arr2[i]\n        k -= 1\n        arr2 = arr2[:i] + arr2[i+1:]\n\n    # If kth element is not found, raise an error\n    raise ValueError(\"The kth element is not found in the arrays.\")"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # find the length of the smaller array\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # initialize two pointers to the first element of both arrays\n    i = 0\n    j = 0\n\n    # initialize two variables to store the kth element\n    kth1 = None\n    kth2 = None\n\n    # while both pointers are within the bounds of both arrays\n    while i < n1 and j < n2:\n        # compare the first element of both arrays\n        if arr1[i] < arr2[j]:\n            # if the first element of arr1 is smaller, increment the pointer of arr1\n            kth1 = arr1[i]\n            i += 1\n        elif arr1[i] > arr2[j]:\n            # if the first element of arr2 is smaller, increment the pointer of arr2\n            kth2 = arr2[j]\n            j += 1\n        else:\n            # if the first element of both arrays is equal, use it as the kth element\n            kth1 = arr1[i]\n            kth2 = arr2[j]\n            i += 1\n            j += 1\n\n    # if the kth element is not found in one of the arrays, use the last element of the other array\n    if kth1 is None:\n        kth1 = arr2[j-1]\n    if kth2 is None:\n        kth2 = arr1[i-1]\n\n    return kth1, kth2"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i == len(arr1) or j == len(arr2):\n            break\n    return arr1[i - 1]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    A number is said to be Armstrong if it is equal to the sum of its own digits raised to the power of the number of digits.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    sum_of_digits = sum(digits) ** len(digits)\n    return n == sum_of_digits\n\ndef armstrong_number(number):\n    if number < 10:\n        return True\n    else:\n        return is_armstrong(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string to find its digits\n    digits = str(number)\n    # Calculate the sum of the cubes of the digits\n    cube_sum = sum(int(digit) ** 3 for digit in digits)\n    # Check if the number is equal to the cube sum\n    if number == cube_sum:\n        print(\"The given number is an Armstrong number.\")\n    else:\n        print(\"The given number is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # converting the number to a string\n    num_str = str(number)\n    # initializing a variable to keep track of the sum of the cubes of each digit\n    sum_of_cubes = 0\n    # converting each digit of the number to an integer and squaring it\n    for digit in num_str:\n        digit_int = int(digit)\n        digit_sq = digit_int ** 2\n        sum_of_cubes += digit_sq\n    # checking if the sum of the cubes of each digit is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    # convert the number to a string and remove any non-numeric characters\n    number_string = ''.join(filter(str.isdigit, str(number)))\n    \n    # calculate the sum of the powers of each digit in the number\n    sum_of_powers = 0\n    for digit in number_string:\n        power = len(str(digit))\n        sum_of_powers += int(digit) ** power\n    \n    # check if the sum of the powers of each digit is equal to the original number\n    if sum_of_powers == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize variables\n    sum = 0\n    temp = number\n    \n    # Calculate sum of the cube of digits\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n        \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number = str(number)\n    # Initialize the sum of the digits to 0\n    sum_of_digits = 0\n    # Convert the string to a list of integers\n    list_of_digits = [int(digit) for digit in number]\n    # Calculate the sum of the digits\n    for digit in list_of_digits:\n        sum_of_digits += digit ** len(list_of_digits)\n    # Compare the sum of the digits with the original number\n    if sum_of_digits == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number))!= len(set(map(int, str(number)))):\n        return False\n    else:\n        num = number\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit ** 3\n            num //= 10\n        if sum == number:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # convert the given number to a list of digits\n    number_list = [int(digit) for digit in str(number)]\n    \n    # calculate the power of each digit in the list\n    power_list = [digit**len(number_list) for digit in number_list]\n    \n    # calculate the sum of the powers\n    sum_of_powers = sum(power_list)\n    \n    # check if the sum of powers is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    digits = [int(d) for d in str(number)]\n    total = sum(d**len(digits) for d in digits)\n    if number == total:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    temp = num\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n        \n    if num == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables to 0\n    total = 0\n    count = 0\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # add the number to the total and increment the count\n        total += i\n        count += 1\n    # calculate the average\n    average = total/count\n    # return the sum and average\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_ += i\n        count += 1\n    average = sum_/count\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n\nprint(sum_average(10))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    # calculate sum of first n natural numbers\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n        \n    # calculate average of first n natural numbers\n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1, number+1):\n        total += i\n        count += 1\n    \n    average = total / count\n    \n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    # initialize sum and count to zero\n    total = 0\n    count = 0\n    # iterate over the first n numbers\n    for i in range(n):\n        # add the current number to the sum\n        total += i\n        # increment the count\n        count += 1\n    # calculate the average and return a tuple with the sum and average\n    return (total, total / count)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n    average = total / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize variables\n    sum_of_numbers = 0\n    count = 0\n    average = 0\n\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # add each number to the sum\n        sum_of_numbers += i\n\n        # increment the count\n        count += 1\n\n    # calculate the average\n    average = sum_of_numbers / count\n\n    # print the results\n    print(\"The sum of the first\", n, \"natural numbers is:\", sum_of_numbers)\n    print(\"The average of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables for sum and average\n    total = 0\n    count = 0\n    # loop through the first n natural numbers and add them to the total and count variables\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n    # calculate the sum and average and return them as a tuple\n    average = total / count\n    return (total, average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer n as input and returns True if n is even and False if it's odd.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize variables for first repeated character and its index\n    first_char = ''\n    first_index = -1\n    \n    # loop through the string and check if the current character is the same as the previous character\n    for i in range(len(str1)):\n        if str1[i] == first_char:\n            return first_char, i\n        else:\n            first_char = str1[i]\n            first_index = i\n    \n    # if we reach this point, the first repeated character was not found in the string\n    return first_char, -1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n\n    :param str1: The given string.\n    :return: The first repeated character in the string.\n    \"\"\"\n\n    # Initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is already in the dictionary\n        if char in char_count:\n            # If the character is already in the dictionary, increment its count by 1\n            char_count[char] += 1\n        else:\n            # If the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n\n    # Initialize variables to store the first repeated character and its count\n    first_repeated = None\n    count = 0\n\n    # Loop through each character in the string again\n    for char in str1:\n        # Check if the character is in the dictionary and its count is greater than the current count\n        if char in char_count and char_count[char] > count:\n            # If the character is in the dictionary and its count is greater than the current count,\n            # set the first repeated character and its count to the current character and its count\n            first_repeated = char\n            count = char_count[char]\n\n    # Return the first repeated character\n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = list(set(str1))  # create a list of unique characters in the string\n    for char in char_list:\n        if str1.count(char) > 1:  # check if the character appears more than once in the string\n            return char  # if it does, return the first repeated character\n    return None  # if no repeated characters are found, return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            return char\n        else:\n            freq[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # Find the character with the count of 2 or more in the dictionary\n    for char, count in char_count.items():\n        if count >= 2:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it to the dictionary with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # Initialize a variable to store the first repeated character\n    first_repeat = None\n    \n    # Loop through each character in the string again\n    for char in str1:\n        # If the character is in the dictionary and its frequency is greater than 1, return it\n        if char in freq and freq[char] > 1:\n            if first_repeat is None:\n                first_repeat = char\n            else:\n                return first_repeat\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i == 1:\n            ludic_numbers.append(i)\n        elif i == 2:\n            ludic_numbers.append(i)\n        elif i % 2 == 0:\n            ludic_numbers.append(2 * i + 1)\n        elif i % 3 == 0:\n            ludic_numbers.append(3 * i - 1)\n        elif i % 4 == 0:\n            ludic_numbers.append(4 * i + 3)\n        elif i % 5 == 0:\n            ludic_numbers.append(5 * i - 3)\n        elif i % 6 == 0:\n            ludic_numbers.append(6 * i + 5)\n        elif i % 7 == 0:\n            ludic_numbers.append(7 * i - 5)\n        elif i % 8 == 0:\n            ludic_numbers.append(8 * i + 7)\n        elif i % 9 == 0:\n            ludic_numbers.append(9 * i - 7)\n        elif i % 10 == 0:\n            ludic_numbers.append(10 * i + 9)\n        elif i % 11 == 0:\n            ludic_numbers.append(11 * i - 9)\n        elif i % 12 == 0:\n            ludic_numbers.append(12 * i + 11)\n        elif i % 13 == 0:\n            ludic_numbers.append(13 * i - 11)\n        elif i % 14 == 0:\n            ludic_numbers.append(14 * i + 13)\n        elif i % 15 == 0:\n            ludic_numbers.append(15 * i - 13)\n        elif i % 16 == 0:\n            ludic_numbers.append(16 * i + 15)\n        elif i % 17 == 0:\n            ludic_numbers.append(17 * i - 15)\n        elif i % 18 == 0:\n            ludic_numbers.append(18 * i + 17)\n        elif i % 19 == 0:\n            ludic_numbers.append(19 * i - 17)\n        elif i % 20 == 0:\n            ludic_numbers.append(20 * i + 19)\n        elif i % 21 == 0:\n            ludic_numbers.append(21 * i - 19)\n        elif i % 22 == 0:\n            ludic_numbers.append(22 * i + 21)\n        elif i % 23 == 0:\n            ludic_numbers.append(23 * i - 21)\n        elif i % 24 == 0:\n            ludic_numbers.append(24 * i + 23)\n        elif i % 25 == 0:\n            ludic_numbers.append(25 * i - 23)\n        elif i % 26 == 0:\n            ludic_numbers.append(26 * i + 25)\n        elif i % 27 == 0:\n            ludic_numbers.append(27 * i - 25)\n        elif i % 28 == 0:\n            ludic_numbers.append(28 * i + 27)\n        elif i % 29 == 0:\n            ludic_numbers.append(29 * i - 27)\n        elif i % 30 == 0:\n            ludic_numbers.append(30 * i + 29)\n        elif i % 31 == 0:\n            ludic_numbers.append(31 * i - 29)\n        elif i % 32 == 0:\n            ludic_numbers.append(32 * i + 31)\n        elif i % 33 == 0:\n            ludic_numbers.append(33 * i - 31)\n        elif i % 34 == 0"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    ludic_nums = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            if i**3 == i:\n                ludic_nums.append(i)\n\n    return ludic_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(1, n+1):\n        lucid_nums.append(i*i*i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid.append(i)\n        i += 1\n    return lucid\n\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    i = 1\n    while i <= int(n**0.5):\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    current_number = 1\n    while current_number <= n:\n        lucid_numbers.append(current_number)\n        current_number += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        lucid_number = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                lucid_number = False\n                break\n        if lucid_number:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 1\n    while num <= n:\n        lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the number is a lucid number\n        if is_lucid(i):\n            # Add the number to the lucid_numbers list\n            lucid_numbers.append(i)\n\n    # Return the lucid numbers list\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a given integer is a lucid number.\n    A lucid number is a number that when squared, it becomes 1.\n    For example, 25 is a lucid number because 25^2 = 625.\n    '''\n    # Loop through all numbers from 1 to the square root of the given number\n    for i in range(1, int(n**0.5) + 1):\n        # Check if the given number is divisible by the i-th prime number\n        if n % i == 0:\n            return False\n    # If none of the prime numbers divide the given number, it must be a lucid number\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucids = []\n    for i in range(1, n+1):\n        if i > 1 and i % 2 == 0 and i % 3 == 0:\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert string to list of words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    # Join the reversed words into a single string\n    reversed_s = \" \".join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    reversed_string =''.join(words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse each word in the list\n    words = [word[::-1] for word in words]\n    # join the reversed words into a single string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    words = [word[::-1] for word in words]\n    # join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string by spaces\n    words = s.split()\n    # Reverse the words\n    words = words[::-1]\n    # Join the words back together with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n\n    # loop through the list of words in reverse order\n    for i in range(len(words)-1, -1, -1):\n\n        # reverse the characters in each word\n        words[i] = words[i][::-1]\n\n    # join the words back into a string\n    reversed_words =''.join(words)\n\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    # return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the given integer is less than 2\n    if num < 2:\n        return False\n\n    # Check if the given integer is divisible by any number between 2 and the square root of the given integer\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the given integer is greater than 2 and not divisible by any number between 2 and its square root, then it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))  # Output: True\nprint(is_prime(12))  # Output: False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is equal to 2\n    if num == 2:\n        return True\n    \n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    # If the number is not divisible by any number between 2 and the square root of the number, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Search for pattern in text\n    matches = re.findall(pattern, text)\n    # Check if matches are found\n    if matches:\n        # Return the first match\n        return matches[0]\n    # If no matches are found, return None\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][2], matches[0][3]\n    else:\n        return None, None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    regex = re.compile(pattern)\n    \n    # Find all matches of the regex pattern in the text\n    matches = regex.findall(text)\n    \n    # If there are matches, return the matching substrings, a start index and an end index\n    if matches:\n        # Extract the start and end indices of the first match\n        start_index = matches[0].start()\n        end_index = matches[0].end()\n        \n        # Loop through the matches and extract their start and end indices\n        for match in matches[1:]:\n            start_index = min(start_index, match.start())\n            end_index = max(end_index, match.end())\n        \n        # Return the matching substrings, start and end indices\n        return matches[0], start_index, end_index\n    \n    # If there are no matches, return None\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], len(matches[0][0]) + matches[0][1]\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start = text.find(match)\n            end = start + len(match)\n            yield match, start, end\n    else:\n        yield None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches a string for a regex pattern and returns the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match_num, match in enumerate(matches, start=1):\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Match {match_num}: Literal: '{literal}', Start index: {start_index}, End index: {end_index}\")"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0, 1, 1]  # initialize the list of bell numbers\n\n    for i in range(2, n):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n\n    return bell_numbers[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n\n    Parameters:\n    n (int): The nth bell number to find.\n\n    Returns:\n    int: The nth bell number.\n    \"\"\"\n    a, b = 1, 1\n    for i in range(1, n):\n        a, b = b, a + b\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell_num = 0\n        for i in range(2, n+1):\n            bell_num = bell_num + i * bell_Number(i-1)\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    This function finds the nth Bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n + 1) * bell_Number(n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return (2**n - 1) * (4**(n-1))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 * bell_Number(n-1) + 1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) <= k:\n        raise ValueError(\"The length of the list must be greater than or equal to k.\")\n    \n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < L:\n        return []\n    elif L == 1:\n        return list1[:1]\n    else:\n        new_list = list1[:L-1]\n        return new_list + list1[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1.copy()\n    new_list.pop(L-1)\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # remove the kth element from the list\n    list1.pop(L-1)\n    # return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) > L:\n        return list1[:L] + list1[L+1:]\n    else:\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Get the length of the list\n    length = len(list1)\n    # If the length is less than or equal to k, return the original list\n    if length <= L:\n        return list1\n    # If the length is greater than k, create a new list without the kth element\n    else:\n        new_list = list1[:L-1] + list1[L:]\n        return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L <= len(list1):\n        return list1[:L-1] + list1[L:]\n    else:\n        return list1\n    "
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k > len(list1):\n        return []\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    result = []\n    for row in test_list:\n        col_max = max(row[i] for i in range(len(row)))\n        result.append(col_max)\n    return result"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Calculate the number of rows and columns in the matrix\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n    # Check if the N value is within the range of the matrix dimensions\n    if N < 1 or N > num_cols:\n        return \"Invalid input: N must be between 1 and the number of columns in the matrix.\"\n    # Initialize a variable to store the max value\n    max_val = float('-inf')\n    # Loop through each row in the matrix and compare the nth column to the current max value\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j == N-1:\n                return max(test_list[i][j])\n    return None"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # find the length of the longest row\n    max_length = 0\n    for row in test_list:\n        if len(row) > max_length:\n            max_length = len(row)\n\n    # initialize the list to store the max of each column\n    max_list = [0] * max_length\n\n    # iterate through each row and find then'th column's max\n    for i in range(len(test_list)):\n        max_list[i % max_length] = max(max_list[i % max_length], test_list[i][N-1])\n\n    # return the max of each column\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Iterate over each row of the matrix and find the max value of then'th column\n    max_val = 0\n    for row in matrix:\n        if N > len(row):\n            continue\n        max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Returns the maximum value of the Nth column in a given matrix.\n    \"\"\"\n    if len(matrix) == 0:\n        return None\n    elif len(matrix[0]) == 0:\n        return None\n    \n    n = len(matrix[0])\n    for i in range(n):\n        max_val = max(matrix[j][i] for j in range(len(matrix)))\n        if i == N-1:\n            return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Convert the list of lists to a matrix\n    matrix = [[row[i] for row in test_list] for i in range(len(test_list[0]))]\n    \n    # Find the max of then'th column\n    max_val = max(row[N-1] for row in matrix)\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = -float('inf')\n    for i in range(len(test_list)):\n        if i == N - 1:\n            break\n        max_val = max(max_val, test_list[i][N - 1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the input is a list of lists or not\n    if not all(isinstance(row, list) for row in test_list):\n        raise TypeError('Input should be a list of lists')\n\n    # Check if the input list has at least N+1 rows or not\n    if len(test_list[0]) < N+1:\n        raise ValueError('Input list should have at least N+1 rows')\n\n    # Initialize the max value with the first element of the first row\n    max_value = test_list[0][N]\n\n    # Iterate over the remaining rows and check if then'th element is greater than the current max value\n    for row in test_list[1:]:\n        if row[N] > max_value:\n            max_value = row[N]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    merged_lst = []\n\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append((sublist[0], sublist[1]))\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in lst:\n        if len(i) == 2:\n            merged_lst.append([i[0], i[1]])\n        else:\n            print(\"Invalid input, please enter a list of lists containing two elements.\")\n            return None\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n        if i!= len(test_list) - 1:\n            total += test_list[i+1]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Add the first element of the tuple to the cumulative sum\n        cum_sum += tup[0]\n        \n        # Add the rest of the elements of the tuple to the cumulative sum\n        for i in range(1, len(tup)):\n            cum_sum += tup[i]\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][1]\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n\n    # Iterate through the tuple list and append the cumulative sum of each value to the list\n    for value in test_list:\n        cum_sum.append(sum(value))\n\n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][0]\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Define a list to store the average values\n    averages = []\n    \n    # Iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average value for this tuple\n        avg = sum(tup) / len(tup)\n        # Add the average value to the list of averages\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        averages.append(total / len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = sum(nums[i])\n        average = total / len(nums[i])\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = sum(num)\n        average = total / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Define an empty list to store the average values for each tuple\n    average_list = []\n    \n    # Iterate over each tuple in the input tuple of tuples\n    for i in nums:\n        # Calculate the sum of all values in the tuple\n        total = sum(i)\n        \n        # Calculate the average value of the tuple\n        average = total / len(i)\n        \n        # Append the average value to the average_list\n        average_list.append(average)\n    \n    # Return the average_list\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        total = sum(tup)\n        avg_list.append(total/len(tup))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_set in nums:\n        total = 0\n        count = len(num_set)\n        for num in num_set:\n            total += num\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        # Calculate the sum of all elements in the current tuple\n        sum = 0\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        # Calculate the average of all elements in the current tuple\n        average = sum / len(nums[i])\n        # Append the average to the list of averages\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    avg_values = []\n    \n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Initialize a variable to store the sum of values\n        total = 0\n        \n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the total\n            total += val\n            \n        # Calculate the average value by dividing the total by the number of values in the tuple\n        avg = total / len(tup)\n        \n        # Append the average value to the list of average values\n        avg_values.append(avg)\n    \n    # Return the list of average values\n    return avg_values"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two input tuples should have the same length.\")\n        return\n\n    # Perform element-wise modulo operation\n    result_tup = tuple(num1 % num2 for num1, num2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    while i <= steps:\n        jumps += 1\n        i += d\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    i = 0\n    count = 0\n    jumps = 0\n\n    # Loop through each step in the list\n    while i < len(steps):\n        # If we've reached the destination point, exit the loop\n        if steps[i] == d:\n            break\n\n        # Calculate the number of jumps required to reach the destination point\n        jumps = min(jumps + 1, steps[i] - i)\n\n        # Update the i variable for the next step\n        i += jumps\n\n    # Return the minimum number of jumps needed\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    def binarySearch(start, end, d):\n        if start > end:\n            return -1\n        mid = (start + end) // 2\n        if d == steps[mid]:\n            return mid\n        elif d < steps[mid]:\n            return binarySearch(start, mid - 1, d)\n        else:\n            return binarySearch(mid + 1, end, d)\n\n    return binarySearch(0, len(steps) - 1, d) + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    pos = 0\n    curr_pos = 0\n    step_count = 0\n\n    while step_count < steps:\n        if pos == (d, 0):\n            return jumps\n        if curr_pos == 0:\n            pos = pos[0] + 1, 0\n            curr_pos = 1\n        elif curr_pos == 1:\n            pos = pos[0] - 1, 0\n            curr_pos = 0\n        elif curr_pos == 2:\n            pos = pos[0], pos[1] + 1\n            curr_pos = 2\n        elif curr_pos == 3:\n            pos = pos[0], pos[1] - 1\n            curr_pos = 3\n        jumps += 1\n        step_count += 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Calculate the number of jumps required for each step\n    jumps = []\n    for i in range(1, steps+1):\n        jumps.append(max(1, (d-i)/i))\n\n    # Initialize variables to keep track of the minimum number of jumps and the index of the minimum number of jumps\n    min_jumps = steps\n    min_index = len(jumps)-1\n\n    # Loop through the list of jumps and update the minimum number of jumps and index if a smaller number is found\n    for i in range(len(jumps)-2, -1, -1):\n        if jumps[i] < min_jumps:\n            min_jumps = jumps[i]\n            min_index = i\n\n    return min_index+1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    curr_x = 0 # current position x\n    curr_y = 0 # current position y\n    curr_steps = 0 # steps taken so far\n    jumps = 0 # number of jumps required\n    \n    # iterate through steps\n    while curr_steps < steps:\n        # move up\n        if curr_y == 0:\n            curr_y += 1\n            curr_steps += 1\n        # move right\n        elif curr_x < d:\n            curr_x += 1\n            curr_steps += 1\n        # move down\n        elif curr_y == d:\n            curr_y += 1\n            curr_steps += 1\n        # move left\n        elif curr_x > 0:\n            curr_x -= 1\n            curr_steps += 1\n        # if all 4 directions fail, increase number of jumps and move back\n        else:\n            jumps += 1\n            curr_y -= 1\n            curr_x = d - 1\n            curr_steps += 1\n    \n    # return number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    steps_left = steps\n    jumps = 0\n    current_height = 0\n    \n    # loop while steps remain\n    while steps_left > 0:\n        # check if we can cross the desired height\n        if current_height + d >= 0:\n            # jump to desired height and decrement steps left\n            current_height += d\n            steps_left -= 1\n            jumps += 1\n        # otherwise, we need to step down\n        else:\n            # increment current height and decrement steps left\n            current_height += 1\n            steps_left -= 1\n    \n    # return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    curr_pos = 0\n    curr_height = 0\n    \n    while curr_pos < len(steps) and curr_height < d:\n        if curr_pos < len(steps) - 1:\n            next_pos = curr_pos + steps[curr_pos]\n            if curr_height + steps[curr_pos] >= d:\n                jumps += 1\n            curr_pos = next_pos\n            curr_height += steps[curr_pos]\n        else:\n            jumps += 1\n            break\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initializing variables\n    steps = list(range(steps))\n    jumps = []\n    count = 0\n\n    # Looping through each step\n    for i in steps:\n        # Checking if the point has been reached\n        if (i, 0) in jumps:\n            # Checking if the point is reached in minimum jumps\n            if jumps.count((i, 0)) == 1:\n                # Updating the count of jumps\n                count += 1\n            # Updating the count of jumps\n            jumps.append((i, 0))\n        else:\n            # Updating the count of jumps\n            jumps.append((i, 0))\n\n            # Checking for jumps with different length\n            for j in range(1, d+1):\n                # Checking if the point has been reached\n                if (i+j, 0) in jumps:\n                    # Checking if the point is reached in minimum jumps\n                    if jumps.count((i+j, 0)) == 1:\n                        # Updating the count of jumps\n                        count += 1\n                        # Updating the count of jumps\n                        jumps.append((i+j, 0))\n                else:\n                    # Updating the count of jumps\n                    jumps.append((i+j, 0))\n    \n    # Returning the count of minimum jumps\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    # check if the given point (d, 0) is reachable from origin\n    if d == 0:\n        return steps\n    \n    # check for the number of jumps required\n    jumps = 0\n    while d > 0:\n        d = max(d-1, 0)\n        jumps += 1\n    \n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have equal length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            result.append(float('inf'))\n            \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have equal length\")\n        return\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as inputs and returns a new list containing the element-wise division of the two input lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    # divide each element of the two lists and append to a new list\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] / nums2[i])\n\n    return new_list"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and divides each element of the first list with the element of the second list.\n    The result is stored in a new list.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns the element-wise division of the two lists.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The lists must have the same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    numbers = ''.join(filter(str.isdigit, test_str))\n    if numbers:\n        # remove all non-digits from the string\n        test_str = ''.join(filter(str.isalpha, test_str))\n        # split the string into words and join them again with spaces\n        words = test_str.split()\n        # split the numbers from the words and join them back together\n        result =''.join(filter(str.isdigit, numbers))\n        # join the words with the numbers\n        return words + result\n    else:\n        # no numbers found, just return the original string\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    numbers = \"\"\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n\n    return numbers + test_str[numbers:]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    # initialize variables to keep track of the last digit and the position of the first digit\n    last_digit = None\n    first_digit = None\n    # iterate over the characters in the string\n    for i in range(len(test_str)):\n        # if the character is a digit, update the last digit and first digit variables\n        if test_str[i].isdigit():\n            last_digit = test_str[i]\n            if first_digit is None:\n                first_digit = i\n    # if there is no first digit, the string does not have any numbers\n    if first_digit is None:\n        return test_str\n    # move all the numbers to the end of the string by swapping them with the last digit\n    for i in range(first_digit, len(test_str)):\n        test_str[i], test_str[i+1] = test_str[i+1], test_str[i]\n    # return the modified string\n    return ''.join(test_str)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    numbers.sort(reverse=True)\n    return ''.join(numbers) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    num_list.sort()\n    for i in test_str:\n        if i not in num_list:\n            print(i, end=' ')\n    for i in num_list:\n        print(i, end=' ')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    # Convert the string to a list of characters\n    test_list = list(test_str)\n\n    # Iterate through the list and move all the digits to the end\n    for i in range(len(test_list)):\n        if test_list[i].isdigit():\n            # Get the index of the digit\n            digit_index = i\n\n            # Move the digit to the end of the list\n            while digit_index < len(test_list) - 1:\n                test_list[digit_index], test_list[digit_index + 1] = test_list[digit_index + 1], test_list[digit_index]\n                digit_index += 1\n\n            # Move the digit to the front of the list\n            while digit_index > 0:\n                test_list[digit_index], test_list[digit_index - 1] = test_list[digit_index - 1], test_list[digit_index]\n                digit_index -= 1\n\n    # Convert the list back to a string and return it\n    return ''.join(test_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize two empty lists to store numbers and non-numbers\n    nums = []\n    non_nums = []\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the nums list\n        if char.isdigit():\n            nums.append(char)\n        # Otherwise, append it to the non_nums list\n        else:\n            non_nums.append(char)\n            \n    # Combine the two lists and return the resulting string\n    return ''.join(non_nums) + ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort()\n    for num in num_list:\n        test_str = test_str.replace(num, '')\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        num_str = ''.join(num_list)\n        test_str = test_str.replace(num_str, '')\n        test_str += num_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alpha_list = []\n\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n\n    return ''.join(num_list) + ''.join(alpha_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n        max_size = max(max_size, dp[i])\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a dictionary to store the size of the largest subset for every pair of numbers in the list\n    pairs = {}\n    \n    # Iterate through the list of numbers\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # Check if the numbers are divisible and if so, update the size of the largest subset for these numbers\n            if a[i] % a[j] == 0 and (j-i+1) > pairs.get((a[i],a[j]), 0):\n                pairs[(a[i],a[j])] = j-i+1\n                \n    # Find the largest subset size in the dictionary\n    largest_size = 0\n    for size in pairs.values():\n        if size > largest_size:\n            largest_size = size\n            \n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    m = n // 2\n    max_size = 0\n    max_start = 0\n    for i in range(n-1):\n        if a[i] + a[i+1] % m == 0:\n            max_size += 1\n            max_start = i\n        else:\n            max_size = 0\n            max_start = i + 1\n        if max_size > max_start:\n            max_start = i + 1\n    return max_start + 1"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a set to keep track of the numbers that are divisible by 2\n    divisible_by_2 = set()\n    \n    # Initialize a variable to keep track of the length of the largest subset found so far\n    max_length = 0\n    \n    # Iterate through the list of numbers\n    for num in a:\n        # If the number is divisible by 2, add it to the set\n        if num % 2 == 0:\n            divisible_by_2.add(num)\n        \n        # If the set has the size of the list, update the max_length\n        if len(divisible_by_2) == len(a):\n            max_length = max(max_length, len(divisible_by_2))\n        \n        # If the set has the size of the list and the number is not divisible by 2, remove the last number from the set\n        if len(divisible_by_2) == len(a) and num % 2!= 0:\n            divisible_by_2.remove(divisible_by_2.pop())\n            \n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    subsets = [1] * n\n    max_subset_size = 0\n    max_index = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                subsets[i] = max(subsets[i], subsets[j] + 1)\n\n        max_subset_size = max(max_subset_size, subsets[i])\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    a.sort()\n    max_size = 1\n    max_sum = a[0]\n    \n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            max_size += 1\n            max_sum += a[i]\n        else:\n            if max_size > max_sum:\n                max_size = 1\n                max_sum = a[i]\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a boolean array to store whether each number is in the subset or not\n    subset = [False] * len(a)\n    \n    # Initialize the maximum subset size to 0\n    max_size = 0\n    \n    # Loop through each number in the list\n    for num in a:\n        # Set the current number as the starting point for a new subset\n        subset_start = num\n        \n        # Loop through each number in the list and check if the current number is divisible by the starting point\n        for i in range(len(a)):\n            if a[i] % num == 0 and not subset[i]:\n                # If the current number is divisible by the starting point and not in the subset, add it to the subset\n                subset[i] = True\n                \n                # Update the maximum subset size if the current subset size is greater than the maximum subset size\n                if i - subset_start + 1 > max_size:\n                    max_size = i - subset_start + 1\n    \n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    subset_size = 1\n    current_subset_size = 2\n    next_subset_size = 2\n    result = []\n\n    # Iterate through the list\n    for i in range(len(a) - 1):\n        # If the next number is not divisible by the current number, increase the current subset size\n        if a[i+1] % a[i]!= 0:\n            current_subset_size += 1\n        else:\n            # Update the result if the current subset size is larger than the previous one\n            if current_subset_size > subset_size:\n                subset_size = current_subset_size\n                result = [a[i]]\n            current_subset_size = 1\n\n        # If the next number is divisible by the current number, increase the next subset size\n        if a[i+1] % a[i+1]!= 0:\n            next_subset_size += 1\n        else:\n            # Update the result if the next subset size is larger than the previous one\n            if next_subset_size > current_subset_size:\n                current_subset_size = next_subset_size\n\n    # If the last number is not divisible by the last number in the list, increase the current subset size\n    if a[-1] % a[-2]!= 0:\n        current_subset_size += 1\n\n    # Update the result if the current subset size is larger than the previous one\n    if current_subset_size > subset_size:\n        subset_size = current_subset_size\n        result.append(a[-1])\n\n    # Return the result\n    return subset_size, result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    # initialize variables to keep track of maximum subsets and their sizes\n    max_size = 0\n    max_subsets = [0]\n    \n    # loop through the list of numbers\n    for num in a:\n        # check if the current number is divisible by the first number in the max_subsets list\n        if num % max_subsets[0] == 0:\n            # if it is, then add the current number to the max_subsets list and update the max_size if necessary\n            max_subsets.append(num)\n            max_size = max(max_size, len(max_subsets))\n        else:\n            # if it's not, then remove the first number in the max_subsets list and add the current number to its place\n            max_subsets = max_subsets[1:] + [num]\n            max_size = max(max_size, len(max_subsets))\n    \n    # return the maximum size of the largest subset of a list of numbers that is divisible by every other number in the list\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return 0\n    subsets = [[0] * n for _ in range(n)]\n    for i in range(n):\n        subsets[i][i] = 1\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            for mid in range(start, end+1):\n                if a[start] % a[mid] == 0 and a[mid] % a[end] == 0:\n                    subsets[start][end] = max(subsets[start][end], subsets[start][mid] + subsets[mid+1][end])\n    return subsets[-1][-1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n\n    # Calculate the median of the merged list\n    median = sorted(merged_list)[n]\n\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists of size n and returns the median of the two lists.\n    The median is the middle element of the list.\n    '''\n    # Get the median of two sorted lists\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (arr1[n//2 - 1] + arr1[n//2]) / 2\n    else:\n        median = arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two sorted lists into one\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (arr[n // 2 - 1] + arr[n // 2]) / 2\n    else:\n        median = arr[n // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists into a single sorted list\n    merged_list = sorted(arr1 + arr2)\n    \n    # Calculate the middle index of the merged list\n    mid = n // 2\n    \n    # If the length of the merged list is odd, return the middle element\n    if n % 2 == 1:\n        return merged_list[mid]\n    \n    # If the length of the merged list is even, return the average of the middle two elements\n    else:\n        return (merged_list[mid-1] + merged_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (merged_list[mid-1] + merged_list[mid]) / 2\n    else:\n        median = merged_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        mid1 = n // 2\n        mid2 = n // 2\n        median1 = arr1[mid1 - 1]\n        median2 = arr2[mid2 - 1]\n\n        if median1 <= median2:\n            for i in range(mid1 - 1, -1, -1):\n                if arr1[i] < median1 and arr1[i] >= median2:\n                    median1 = arr1[i]\n                else:\n                    break\n        else:\n            for i in range(mid2 - 1, -1, -1):\n                if arr2[i] < median2 and arr2[i] >= median1:\n                    median2 = arr2[i]\n                else:\n                    break\n\n        return (median1 + median2) / 2\n    else:\n        mid1 = n // 2\n        median1 = arr1[mid1 - 1]\n\n        if median1 <= arr2[mid1 - 1]:\n            for i in range(mid1 - 1, -1, -1):\n                if arr1[i] < median1 and arr1[i] >= arr2[mid1 - 1]:\n                    median1 = arr1[i]\n                else:\n                    break\n        else:\n            for i in range(mid1 - 1, -1, -1):\n                if arr2[i] < arr2[mid1 - 1] and arr2[i] >= median1:\n                    median1 = arr2[i]\n                else:\n                    break\n\n        return median1"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort the two arrays and combine them\n    combined = arr1 + arr2\n    combined.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # If the length of the combined array is odd, then the median is the middle element\n    if n % 2 == 1:\n        return combined[median_index]\n    # If the length of the combined array is even, then the median is the average of the middle two elements\n    else:\n        return (combined[median_index - 1] + combined[median_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two arrays into one\n    arr = arr1 + arr2\n\n    # sort the concatenated array\n    arr.sort()\n\n    # find the median\n    if n % 2 == 0:\n        # if the length of the array is even, return the average of the two middle elements\n        return (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        # if the length of the array is odd, return the middle element\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted arrays\n    arr = sorted(arr1 + arr2)\n    # Find the median\n    if n % 2 == 0:\n        return (arr[n//2] + arr[n//2-1]) / 2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n    \n    # Sort the concatenated list\n    arr.sort()\n    \n    # Calculate the length of the list\n    length = len(arr)\n    \n    # If the length is odd, the median is the middle element\n    if length % 2 == 1:\n        return arr[length//2]\n    # If the length is even, the median is the average of the two middle elements\n    else:\n        return (arr[length//2 - 1] + arr[length//2]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i, num in enumerate(nums):\n        nums[i] = num ** n\n    return nums"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase.\n    '''\n\n    for char in string:\n        if char.isupper():\n            return True\n    return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to check if a given string is uppercase or not.\n    \"\"\"\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n\n    # Convert the string to uppercase\n    uppercase_string = string.upper()\n\n    # Return the uppercase string\n    return uppercase_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        raise TypeError('Input must be a string.')\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = string.upper()\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Check if the list has at least two elements\n        if len(newList) >= 2:\n            # Swap the first and last elements of the list\n            newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 2: \n        first, last = newList[0], newList[-1] \n        newList[0], newList[-1] = last, first \n        return newList \n    else: \n        print(\"The list must have at least two elements\") "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and swaps the first and last elements of the list.\n\n    Args:\n    newList (list): A list of integers.\n\n    Returns:\n    None: The function modifies the input list.\n\n    \"\"\"\n\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return None\n\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Print the modified list\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"The given list has less than two elements.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = 0.5 * r ** 2\n    \n    # Print the result\n    print(\"The area of the largest triangle that can be inscribed in a semicircle with radius\", r, \"is:\", area)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 0.5 * r * (r - 1)**0.5\n    area = 0.5 * s * s\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    pi = 3.14159\n    area = 0\n    for i in range(1, 4):\n        area += (pi/2) * (r/i)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula to calculate the area of a triangle with a given base and height\n    # A = (1/2)bh\n    # where b is the semi-perimeter\n    # A = (1/2)br\n    # and b = 2ar\n    def triangle_area_formula(r):\n        return 0.5 * r * r\n\n    # Function to calculate the largest area of a triangle that can be inscribed in the given semicircle\n    def largest_area_inscribed_triangle(r):\n        # Radius of the largest triangle\n        r1 = r * 0.5\n\n        # Calculate the area of the largest triangle that can be inscribed in the semicircle\n        area1 = triangle_area_formula(r1)\n\n        # Calculate the area of the remaining semicircle\n        area2 = (r * (2 - r)) / (4 * r)\n\n        # Return the area of the largest triangle\n        return max(area1, area2)\n\n    # Calculate the area of the largest triangle inscribed in the semicircle\n    area = largest_area_inscribed_triangle(r)\n\n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the area of the circle with radius r\n    area_circle = 3.14159 * r * r\n\n    # Calculate the area of the triangle with sides of length 1 and 2r\n    area_triangle = 0.5 * r * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle with radius r\n    area_largest = max(area_circle, area_triangle)\n\n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-circle's area\n    semi_circle_area = 2 * math.pi * r ** 2\n    \n    # Calculate the perimeter of the largest triangle inscribed in the semicircle\n    largest_triangle_perimeter = math.sqrt(3) * r\n    \n    # Calculate the area of the largest triangle inscribed in the semicircle\n    largest_triangle_area = semi_circle_area / largest_triangle_perimeter\n    \n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-perimeter of the circle\n    semi_perimeter = 2 * r\n    \n    # calculate the area of each triangle\n    area1 = semi_perimeter * (semi_perimeter - 1) / 2\n    area2 = semi_perimeter * (semi_perimeter + 1) / 2\n    \n    # find the larger area\n    area = max(area1, area2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the semi-circle radius\n    s = (2 * r) / (1 + 2 * r)\n\n    # Find the lengths of the sides of the largest triangle\n    a = s * (2 + s)\n    b = s * (1 - s)\n    c = (2 * r * s) / (1 - s)\n\n    # Calculate the area of the largest triangle\n    area = (1/2) * (a**2 + b**2)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # calculate the semi-perimeter of the triangle\n    s = 2 * r\n\n    # calculate the area of the triangle\n    a = math.sqrt(s * (s - r) * (s - r + 2 * r))\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = 0\n    for i in range(3):\n        for j in range(i):\n            max_area = max(max_area, 0.5 * a * r)\n\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def inscribed_area(r):\n        pi = 3.14159\n        area = pi * r ** 2\n        return area\n    \n    def smallest_triangle(r):\n        pi = 3.14159\n        area = pi * r ** 2\n        return area\n    \n    area = inscribed_area(r)\n    if area > smallest_triangle(r):\n        return area\n    else:\n        return smallest_triangle(r)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    This function takes an unsorted list of natural numbers as input and returns the smallest missing number.\n    The function uses binary search to find the first missing number.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if mid == 0 or array[mid-1]!= mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n\n    # This is the binary search part of the code\n    left = 0\n    right = len(array)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number in the list.\n    \n    Parameters:\n        array: a sorted list of natural numbers\n        start: the starting index of the array (default: 0)\n        end: the ending index of the array (default: None)\n        \n    Returns:\n        The smallest missing number in the sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i] == i:\n            return i\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    \n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input, and returns the smallest missing number.\n    If the end index is not specified, it is assumed to be equal to the length of the list.\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if i + 1!= array[i]:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i]!=i:\n            return i\n\n    return len(array)+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    This function takes a list as input and returns a list containing all even numbers in the original list.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only even numbers from the input list.\n    '''\n    new_list = []\n    for num in list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if sub:\n        x = x + sub[0]\n        y = y + sub[1]\n    return [(x-1, y), (x, y-1), (x+1, y), (x, y+1)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x, y-1), (x, y+1), (x-1, y), (x+1, y)]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x+dx, y+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if (dx, dy)!= (0, 0)]\n    return sub + adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent_coords = []\n    x, y = ele\n    if x - 1 >= 0:\n        adjacent_coords.append((x - 1, y))\n    if x + 1 < len(sub):\n        adjacent_coords.append((x + 1, y))\n    if y - 1 >= 0:\n        adjacent_coords.append((x, y - 1))\n    if y + 1 < len(sub[x]):\n        adjacent_coords.append((x, y + 1))\n    return adjacent_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    n = 9  # number of adjacent tiles in a row\n\n    # create the list of adjacent coordinates\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                sub.append((x+i, y+j))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    if x > 0 and y > 0: \n        adj_coords.append((x - 1, y - 1))\n    if x > 0 and y < 9: \n        adj_coords.append((x - 1, y + 1))\n    if x < 9 and y > 0: \n        adj_coords.append((x + 1, y - 1))\n    if x < 9 and y < 9: \n        adj_coords.append((x + 1, y + 1))\n    return adj_coords + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Create a list of all possible adjacent coordinates\n    adj = [\n        (ele[0]+1, ele[1]),\n        (ele[0]-1, ele[1]),\n        (ele[0], ele[1]+1),\n        (ele[0], ele[1]-1)\n    ]\n    # If the sublist is empty, return the original coordinate\n    if not sub:\n        return adj\n    # Add the adjacent coordinates to the sublist and return the updated sublist\n    else:\n        return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = []\n    for i in range(max(x - 1, 0), min(x + 1, 25)):\n        for j in range(max(y - 1, 0), min(y + 1, 25)):\n            if (i, j)!= ele:\n                adj_list.append((i, j))\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # initialize adjacent list\n    adj = []\n\n    # extract x and y coordinates of element\n    x, y = ele\n\n    # loop through all possible adjacent tuples\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # check if adjacent element exists and is not in visited list\n            if 0 <= x+i < len(sub) and 0 <= y+j < len(sub[0]) and (x+i, y+j) not in adj:\n                adj.append((x+i, y+j))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx!= 0 or dy!= 0:\n                nx, ny = x + dx, y + dy\n                if nx < 0 or ny < 0 or nx >= 100 or ny >= 100:\n                    continue\n                adj.append((nx, ny))\n    return sub + adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_count = 0\n    for char in text:\n        if char =='':\n            space_count += 1\n        else:\n            break\n    return text.replace(' ', '_' * space_count)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the text into words\n    words = text.split()\n    # Iterate over the words\n    for i in range(len(words)):\n        # Replace spaces with underscores\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n        # Replace underscores with spaces\n        if '_' in words[i]:\n            words[i] = words[i].replace('_','')\n    # Join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Using two pointers to traverse the list\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            # Move all non-zero elements to their correct position\n            while i < j:\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                i += 1\n            break\n        j += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    num_list_copy = num_list.copy()\n    zero_indices = []\n    for i in range(len(num_list_copy)):\n        if num_list_copy[i] == 0:\n            zero_indices.append(i)\n    for i in range(len(zero_indices)):\n        num_list_copy.pop(zero_indices[i])\n    num_list_copy.extend(zero_indices)\n    return num_list_copy"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            i -= 1\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeros_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zeros_index.append(i)\n    \n    for i in range(len(zeros_index)-1, -1, -1):\n        num_list[zeros_index[i]] = num_list[zeros_index[i]+1]\n        num_list[zeros_index[i]+1] = 0"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            break\n        i += 1\n    if i!= len(num_list):\n        num_list[i:] = sorted(num_list[i:], reverse=True)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = None\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            zero_index = index\n            break\n    if zero_index is not None:\n        num_list[zero_index], num_list[-1] = num_list[-1], num_list[zero_index]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a new list to store the non-zero values\n    non_zero_list = []\n\n    # Traverse the given list\n    for num in num_list:\n        # If the number is not zero, append it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Append all the zeroes to the non-zero list\n    non_zero_list.extend([0] * num_list.count(0))\n\n    # Return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    :param num_list: The list of integers to be modified.\n    :return: The modified list.\n    \"\"\"\n    index = 0\n    while index < len(num_list):\n        if num_list[index]!= 0:\n            index += 1\n        else:\n            num_list[index], num_list[-1] = num_list[-1], num_list[index]\n            index -= 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            j = i+1\n            while j < len(num_list):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                j += 1\n            len_list = len(num_list)\n            i -= 1\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    num_list = [num for num in num_list if num!= 0]\n    num_list.extend([0] * (sum([1 for num in num_list if num == 0]) - len(num_list)))\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum = sum ^ xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize sum variable\n    xor_sum = 0\n    \n    # loop through the list of numbers\n    for i in range(n):\n        for j in range(i+1,n):\n            # find the xor of the two numbers\n            xor = arr[i] ^ arr[j]\n            \n            # add the xor to the sum variable\n            xor_sum += xor\n            \n    # return the xor_sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            total_sum += xor\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 1:\n        return arr[0]\n    else:\n        return (arr[0] ^ pair_xor_Sum(arr[1:], n-1))"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n\n    # Extract the elements from the heap in sorted order\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # convert the list to a heap\n    heap = hq.heapify(iterable)\n    \n    # sort the heap\n    while heap:\n        iterable.append(heapq.heappop(heap))\n    \n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Converting the list into a list of heaps\n    heaps = [[] for _ in iterable]\n    for item in iterable:\n        hq.heappush(heaps[item], item)\n    \n    # Sorting the heaps using heapify() and heappop()\n    for heap in heaps:\n        hq.heapify(heap)\n    \n    # Converting the heaps back into a list and returning it\n    result = []\n    while heaps[0]:\n        result.append(hq.heappop(heaps[0]))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heapsort algorithm.\n    '''\n    # convert the list to a heap\n    hq.heapify(iterable)\n    \n    # sort the heap by extracting elements\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n        \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a min heap\n    min_heap = hq.heapify(iterable)\n\n    # Remove elements from the heap and build the sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(hq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Create a max heap from the given list\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n\n    # Sort the list from max heap to min heap\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heapsort algorithm.\n    '''\n    # Convert the iterable to a list so we can modify it in place\n    lst = list(iterable)\n\n    # Build the heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        hq.heapify(lst, i, len(lst))\n\n    # Extract elements from the heap in sorted order\n    for i in range(len(lst) - 1, 0, -1):\n        # Move the root element to the end\n        lst[0], lst[i] = lst[i], lst[0]\n\n        # Call the heapify function on the reduced heap\n        hq.heapify(lst, 0, i)\n\n    return lst"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= 0 and sale_amount >= 0:\n        return True\n    elif actual_cost >= 0 and sale_amount <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    total_profit = sale_amount - actual_cost\n    if total_profit == 0 and total_profit == sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount >= actual_cost:\n        print(\"Yes, the given amount has no profit and no loss\")\n    else:\n        print(\"No, the given amount has profit and/or loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return \"No profit or loss\"\n    elif actual_cost < sale_amount:\n        return \"Loss\"\n    else:\n        return \"Profit\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculating profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Checking for no profit and no loss\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit is positive and the loss is negative\n    if profit > 0 and loss < 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit or a loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        profit_loss = actual_cost - sale_amount\n        if profit_loss > 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check if the profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n\n    It takes two parameters, actual_cost, which is the actual cost of the sale, \n    and sale_amount, which is the amount of sale.\n\n    It returns True if the sale has no profit and no loss, and False otherwise.\n\n    The sale has no profit if the actual cost of the sale is greater than the sale amount.\n    The sale has no loss if the sale amount is greater than the actual cost of the sale.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return True\n    elif sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Formula for wind chill index:\n    # W = v * (13/8) * (T - 273.15)\n    # T is the temperature in Kelvin\n    # v is the wind velocity in km/h\n    # W is the wind chill in celsius\n    T = t + 273.15  # Convert to Kelvin\n    W = v * (13/8) * (T - 273.15)\n    # Calculate the wind chill in Celsius\n    wc = math.ceil(W - 273.15)  # Convert to Celsius\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # Calculate the formula for wind chill index\n    wci = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5))\n\n    # Calculate the wind chill index rounded to the nearest integer\n    wind_chill_int = math.ceil(wci)\n\n    # Check if the wind chill index is within the valid range of 15-35\n    if wind_chill_int < 15 or wind_chill_int > 35:\n        wind_chill_int = None\n\n    return wind_chill_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert wind velocity to m/s\n    v_ms = v * 1000\n    # calculate temperature in Kelvin\n    T_K = t + 273.15\n    # calculate temperature in Celsius\n    T_C = T_K - 273.15\n    # calculate logarithm of temperature\n    logT = math.log(T_C)\n    # calculate wind chill index\n    WCI = 35.74 + 0.6215 * T_C - 35.75 * T_C**0.16 + 0.4275 * logT + 0.2468 * T_C**1.5\n    # round WCI to the nearest integer\n    WCI = round(WCI)\n    # return WCI value\n    return WCI"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_c = v * 1.60934 # convert km/h to mph\n    wind_chill_c = round((237.3 + (0.6215 * (t - 273.15)) + (0.4275 * (wind_speed_c**0.16)) - (0.0068 * (t - 273.15) * (wind_speed_c**0.16))) / 1.852)\n    return wind_chill_c"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the dew point temperature using the formula:\n    # Dew point temperature = temperature at 1000ft = 1000ft/2.93(temperature at 0ft)\n    # For a temperature in celsius, 1000ft = 33.86 + 1.19*celsius + 0.0019*celsius^2\n    # Where celsius is the temperature in celsius\n    dew_point_temp = 33.86 + 1.19*t + 0.0019*t**2\n\n    # Calculate the heat capacity ratio at the given temperature and wind velocity\n    c_p = 1004.6 / dew_point_temp\n    c_v = 1005.7 / v\n\n    # Calculate the wind chill index\n    w_chill = c_v / c_p - 32\n\n    # Round the wind chill index to the nearest integer\n    w_chill_int = round(w_chill)\n\n    return w_chill_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 0:\n        # calculate the dew point temperature using the ideal gas law\n        dp = t - 0.6219718 * t**1.128 + 11.378028 * math.exp(-0.006518 * t)\n        # calculate the heat index using the formula\n        hi = 8 * dp - 459.67 * math.log(dp) + 17.625 * math.log(t) - 0.37 * v**2\n        # calculate the wind chill index using the formula\n        wc = 13.12 + 0.6215 * t - 11.37 * math.exp(-0.003965 * t) + 0.3965 * v\n        # return the wind chill index rounded to the next integer\n        return int(math.ceil(wc))\n    else:\n        # if the wind velocity is negative, return None\n        return None"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the wind chill index\n    wc_index = (v * (17.27 * math.log(t) + 237.3)) / (133.3 + v * math.log(t))\n\n    # Round the wind chill index to the nearest integer\n    wc_index = round(wc_index)\n\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # Convert temperature from Celsius to Kelvin\n    T_k = (t + 273.15) * 1.8 + 273.15\n\n    # Calculate the relative humidity using the formula RH = 100 * (1 - (0.01 * T_k))\n    RH = 100 * (1 - (0.01 * T_k))\n\n    # Calculate the dew point temperature using the formula dp = T_k - 0.0065 * T_k^2 + 0.0015 * T_k^3\n    dp = T_k - 0.0065 * T_k**2 + 0.0015 * T_k**3\n\n    # Calculate the wind chill index using the formula wci = 13.12 + 0.6215 * v + 10 * (dp - 23) * (RH / 100)\n    wci = 13.12 + 0.6215 * v + 10 * (dp - 23) * (RH / 100)\n\n    # Round the wind chill index to the nearest integer and return the result\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 30:\n        return round(237.3 + (0.6215 * t) + ((v - 20) * 0.0006215))\n    else:\n        return round(237.3 + (0.6215 * t) + ((30 - v) * 0.0006215))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the absolute temperature difference between the temperature and 273.15\n    delta_t = t - 273.15\n\n    # Calculate the dew point temperature using the formula:\n    # Dew point = T - (0.0621 x (T - 273.15))\n    dew_point = t - 0.0621 * (t - 273.15)\n\n    # Calculate the humidity ratio using the formula:\n    # Humidity ratio = (RH / 100) * (1 - (0.016 x (T - 273.15)))\n    humidity_ratio = (v / 100) * (1 - 0.016 * (t - 273.15))\n\n    # Calculate the heat index using the formula:\n    # Heat index = (2 * dew_point) + (0.0065 * delta_t) - (0.00039 * humidity_ratio)\n    heat_index = 2 * dew_point + 0.0065 * delta_t - 0.00039 * humidity_ratio\n\n    # Calculate the wind chill index using the formula:\n    # Wind chill index = 237.3 + 0.6215 * temperature - 11.37 * dew_point\n    #               = 237.3 - 0.3785 * temperature + 11.37 * dew_point\n    #               = 237.3 - 1.1466 * delta_t + 11.37 * dew_point\n    wind_chill_index = 237.3 - 1.1466 * delta_t + 11.37 * dew_point\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_rounded = int(math.ceil(wind_chill_index))\n\n    # Return the wind chill index rounded to the nearest integer\n    return wind_chill_rounded"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # initialize the sum of names to 0\n    sum_length = 0\n\n    # loop through the list of names\n    for name in sample_names:\n\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # skip the name if it does\n            continue\n        else:\n            # add the length of the name to the sum\n            sum_length += len(name)\n\n    # return the sum of names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    def remove_lower(name):\n        '''\n        Function to remove names that start with a lowercase letter.\n        '''\n        return name[0].isupper()\n\n    sum_length = 0\n    for name in sample_names:\n        if not remove_lower(name):\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define the function to remove names that start with a lowercase letter\n    def remove_names(names):\n        return [name for name in names if name[0].isupper()]\n\n    # Remove names that start with a lowercase letter\n    filtered_names = remove_names(sample_names)\n\n    # Sum the length of the names\n    total_length = sum(len(name) for name in filtered_names)\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initializing a variable to store the sum of the lengths of the names that do not start with a lowercase letter\n    total_length = 0\n    \n    # iterating through each name in the list of names\n    for name in sample_names:\n        # checking if the name starts with a lowercase letter\n        if not name[0].islower():\n            # adding the length of the name to the total_length variable\n            total_length += len(name)\n    \n    # returning the total length of the names after removing the names that start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to keep track of the total length of the names that start with a lowercase letter\n    total_len = 0\n    \n    # Loop through the list of names\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it\n            continue\n        else:\n            # If it doesn't, add the length of the name to the total length\n            total_len += len(name)\n    \n    # Return the total length of the names that start with a lowercase letter\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name.isupper() or not name.isalpha():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name.isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with a lowercase letter\n    lowercase_names = []\n    # loop through the sample names\n    for name in sample_names:\n        # if the name starts with a lowercase letter, add it to the list\n        if name[0].islower():\n            lowercase_names.append(name)\n    # sum the lengths of the remaining names in the list\n    total_length = sum([len(name) for name in lowercase_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names after removing lowercase letters\n    filtered_names = []\n    \n    # Loop through each name in the sample names list\n    for name in sample_names:\n        # If the first character of the name is not lowercase, add it to the filtered names list\n        if not name[0].islower():\n            filtered_names.append(name)\n    \n    # Return the sum of the lengths of the filtered names\n    return sum([len(name) for name in filtered_names])"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # Remove all parenthesis from the string\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Remove any parenthesis from the string\n    items = re.sub('\\(.*?\\)', '', items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis from the string using regular expressions\n    pattern = r'\\([^()]*?\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'(\\(.*?\\))')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them from the string.\n    '''\n\n    # Define the regular expression pattern for matching the parenthesis.\n    pattern = re.compile(r'\\((.*?)\\)')\n\n    # Use the search() function to find all occurrences of parenthesis in the string.\n    matches = pattern.finditer(items)\n\n    # Loop through all the matches and replace the matched text with an empty string.\n    for match in matches:\n        items = items.replace(match.group(), '')\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis and what is inbetween them from the string using regular expressions\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function takes a string with parenthesis as input and returns the string without them.\n    \"\"\"\n    pattern = re.compile(r\"\\([^()]*\\)\")\n    return pattern.sub(\"\", items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function returns True if the given number is a nonagonal number and False otherwise.\n    A nonagonal number is a number that when squared, its square will be greater than the number itself.\n    \"\"\"\n    i = 1\n    while i * (i+1) <= n:\n        j = i * (i+1)\n        while j <= n:\n            if j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0: \n        return \"Invalid input\"\n    elif n == 1: \n        return 1\n    else: \n        for i in range(2, n+1): \n            if i % 2 == 0: \n                return \"Invalid input\"\n        return ((n-1) * (2*n-1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n\n    # Define the base of the grid\n    base = 2\n    \n    # Calculate the nth nonagonal number\n    nth_nonagonal = (n * (base * (base + 1)) // 2)\n    \n    return nth_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    def is_prime(num):\n        '''\n        Check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    num = 1\n    nonagonal_count = 1\n\n    while nonagonal_count <= n:\n        if is_prime(num):\n            nonagonal_count += 1\n        num += 1\n\n    return num - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Function to calculate the nth nonagonal number\n    def nth_nonagonal(n): \n        return (n * (n - 1)) // 2\n    # Calling the function to calculate the nth nonagonal number\n    return nth_nonagonal(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first and last nonagonal numbers\n    num1 = 1\n    num2 = 1\n\n    # Loop through the numbers until we reach the nth nonagonal number\n    for i in range(2, n+1):\n        # Calculate the next nonagonal number\n        next_num = num1 + num2\n        # Update the variables with the new values\n        num1 = num2\n        num2 = next_num\n\n    # Return the nth nonagonal number\n    return num2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = 0\n    for i in range(1, n+1):\n        nonagonal_number += 2*i\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(n):\n        print(a)\n        a += b\n        b += c\n        c = 1 + b - a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    nonagonal = 1\n    while i <= n:\n        nonagonal += i\n        i += 1\n    return nonagonal - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Base case: the first nonagonal number is 1\n    if n == 1:\n        return 1\n\n    # Initialize the nonagonal number to 2\n    nonagonal = 2\n\n    # Iterate over the number of rows\n    for i in range(2, n + 1):\n        # Compute the number of nonagonal numbers in the current row\n        num_nonagonal = i * (i - 1) // 2\n\n        # Update the nonagonal number\n        nonagonal += num_nonagonal\n\n    return nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Define regex pattern for finding 'z' at the start and end of the word\n    pattern = r'\\b(z)\\b'\n\n    # Use regex search function to find all matches of 'z' in the text\n    matches = re.findall(pattern, text)\n\n    # Check if there are any matches\n    if matches:\n        # Iterate over each match and replace the 'z' with '*'\n        for match in matches:\n            text = text.replace(match, '*' * len(match))\n\n    # Return the modified text\n    return text"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[a-zA-Z]+[zZ][a-zA-Z]*'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])[zZ](?!$)(?!^)[a-zA-Z]*(?![a-zA-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Remove any non-alphanumeric characters from the text\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Loop through each word and check if it contains 'z'\n    for word in words:\n        if 'z' in word:\n            # Check if the word is at the start or end of the string\n            if word == words[0]:\n                # If it's at the start, check if the previous character is also 'z'\n                if words[0] == words[-1] and words[-1][0] == 'z':\n                    print('The word is at the start and end of the string, and the previous character is also \"z\".')\n            elif word == words[-1]:\n                # If it's at the end, check if the next character is also 'z'\n                if words[0] == words[-1] and words[0][-1] == 'z':\n                    print('The word is at the start and end of the string, and the next character is also \"z\".')\n            else:\n                # If it's neither the start nor the end, print a message\n                print(f'The word \"{word}\" is in the middle of the string.')"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Iterate through each word\n    for word in words:\n        # Check if the word starts with 'z' and ends with 'z'\n        if word[0].lower() == 'z' and word[-1].lower() == 'z':\n            # If it does, return True\n            return True\n    # If no 'z' was found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\w)z(?=\\w)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    \n    # Reverse the array from k to len(input)-1\n    for i in range(k, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = k-1\n    \n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    reverse_array = []\n    for i in range(k-1, n-1):\n        reverse_array.append(input[i])\n    reverse_array.append(input[n-1])\n    reverse_array.append(input[k-1])\n    for i in range(n-k, n-1):\n        reverse_array.append(input[i])\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)-1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if the given position is valid or not\n    if k < 0 or k >= len(input):\n        return None\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Loop through the array starting from the given position to the end of the array\n    for i in range(k-1, len(input)-1, -1):\n        # Swap the elements at the current position with the previous one\n        input[i], input[i-1] = input[i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input) \n    if k >= n or k <= 0: \n        return input \n    else: \n        # Reverse the first k elements \n        input[:k] = input[:k][::-1] \n        # Reverse the remaining elements \n        input[k:] = input[k:][::-1] \n  \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # length of the array\n    n = len(input)\n\n    # If k is greater than or equal to n, reverse entire array\n    if k >= n:\n        return input[::-1]\n\n    # If k is less than or equal to 0, return empty list\n    elif k <= 0:\n        return []\n\n    # If k is between 0 and n-1, reverse the array from position 0 to k-1\n    else:\n        temp = input[0:k]\n        input[0:k] = input[k:n]\n        input[k:n] = temp\n\n        return input[0:n]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array\n    input.reverse()\n\n    # Reverse the array upto k\n    if k < len(input):\n        input[:k] = input[:k][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        if key in test_tup:\n            test_tup[test_tup.index(key)] = test_dict[key]\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = dict(test_dict)\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict.update(test_tup)\n    return test_dict"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict}\n    new_tup = (test_tup, new_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    # create a new dictionary with the contents of the test_dict\n    new_dict = dict(test_dict)\n    # add the new dictionary to the test_tup and return it\n    return (test_tup + (new_dict,),)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict, **test_tup}\n    return tuple(new_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup += (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    visited = [[False]*N for _ in range(N)]\n    path = [[0]*N for _ in range(N)]\n    path[0][0] = (0, 0)\n    visited[0][0] = True\n    max_avg = float('-inf')\n    max_path = None\n    for i in range(N):\n        for j in range(N):\n            for k in range(i, j):\n                if visited[i][j] and visited[i][k] and visited[k][j]:\n                    new_cost = cost[i][j] + cost[i][k] + cost[k][j] - cost[i][i] - cost[j][j] - cost[k][i]\n                    if new_cost > max_avg:\n                        max_avg = new_cost\n                        max_path = path[i][j] + path[i][k] + path[k][j]\n    return max_avg, max_path\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    max_sum = 0\n    max_avg = 0\n\n    # compute the maximum path sum in each direction\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n        max_sum = max(max_sum, dp[i][n-1])\n\n    # compute the maximum average of all paths\n    for j in range(n):\n        dp[j][0] = cost[j][0]\n        dp[0][j] = cost[0][j]\n        for i in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n        max_avg = max(max_avg, dp[n-1][j])\n\n    return max_avg/n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables for maximum average and maximum number of cells visited\n    max_avg = float('-inf')\n    max_cells = 0\n    # Initialize variables for current position and current path\n    current_position = (0, 0)\n    current_path = [(0, 0)]\n    # Loop through all cells\n    for i in range(N):\n        for j in range(N):\n            # Check if current cell is not already in path\n            if (i, j) not in current_path:\n                # Check if the current cell can move right\n                if j < N - 1:\n                    new_position = (i, j + 1)\n                    # Update maximum average if current path is better than previous\n                    if (new_position, ) + current_path + (j, ) > current_path:\n                        current_path = [(new_position, ) + current_path]\n                        # Update maximum average and number of cells visited\n                        avg = sum(cost[i][j] for i, j in current_path)\n                        if avg > max_avg:\n                            max_avg = avg\n                            max_cells = len(current_path)\n                # Check if the current cell can move down\n                if i < N - 1:\n                    new_position = (i + 1, j)\n                    # Update maximum average if current path is better than previous\n                    if (new_position, ) + current_path + (i, ) > current_path:\n                        current_path = [(new_position, ) + current_path]\n                        # Update maximum average and number of cells visited\n                        avg = sum(cost[i][j] for i, j in current_path)\n                        if avg > max_avg:\n                            max_avg = avg\n                            max_cells = len(current_path)\n    # Calculate average and return maximum average\n    avg = sum(cost[i][j] for i, j in current_path)\n    return max_avg, max_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Finding the total number of cells in the matrix\n    N = len(cost)\n    \n    # Finding the maximum value in the matrix\n    max_val = max(cost[i][j] for i in range(N) for j in range(N))\n    \n    # Creating an array to store the averages of all paths\n    path_averages = [0]*(N*N)\n    \n    # Using dynamic programming to find the maximum average of all paths\n    for i in range(1, N):\n        for j in range(1, N):\n            \n            # Moving right\n            if i < N-1:\n                path_averages[i*N + j] = max(path_averages[i*N + j-1], path_averages[i*N + j])\n            \n            # Moving down\n            if j < N-1:\n                path_averages[i*N + j] = max(path_averages[i*N + j], path_averages[i*N + j+1])\n            \n            # Updating the maximum average\n            path_averages[i*N + j] += cost[i-1][j-1]\n            \n            # Updating the total number of visited cells\n            path_averages[i*N + j] /= 2\n            \n    # Finding the maximum average of all paths\n    max_avg = max(path_averages)\n    \n    # Returning the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Calculate the number of cells in the matrix\n    n = len(cost)\n\n    # Initialize variables to store the maximum average and the current average\n    max_avg = float('-inf')\n    curr_avg = 0\n\n    # Iterate over all possible paths from the top-left cell to the bottom right cell\n    for i in range(n):\n        for j in range(n):\n            # Check if the current cell is not already visited\n            if cost[i][j] == float('inf'):\n                continue\n            # Check if the current cell is the last cell in the matrix\n            if i == n-1 and j == n-1:\n                curr_avg += cost[i][j]\n            else:\n                # Update the current average with the current cell's cost\n                curr_avg += cost[i][j]\n                # If the current cell is the bottom right cell, calculate the maximum average\n                if i == n-1 and j == n-1:\n                    max_avg = max(max_avg, curr_avg / 4)\n                # If the current cell is not the bottom right cell, move diagonally down and right\n                elif i < n-1 and j < n-1:\n                    # Calculate the cost of moving diagonally down and right\n                    diag_cost = cost[i][j] + cost[i+1][j+1]\n                    # Move diagonally down and right\n                    cost[i][j] = float('inf')\n                    cost[i+1][j+1] = diag_cost\n                    # Recursively calculate the maximum average of the remaining part of the matrix\n                    max_avg = max(max_avg, maxAverageOfPath(cost))\n                    # Move diagonally down and right back to the original cost\n                    cost[i][j] = diag_cost\n                    cost[i+1][j+1] = cost[i][j]\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False for j in range(N)] for i in range(N)]\n    max_path_avg = float('-inf')\n    path_avg = 0\n    start = (0, 0)\n    end = (N-1, N-1)\n    visited[start[0]][start[1]] = True\n    queue = [(start, 0)]\n    \n    while queue:\n        node, steps = queue.pop(0)\n        if node == end:\n            path_avg += cost[node[0]][node[1]]\n            if steps > max_path_avg:\n                max_path_avg = steps\n                max_path = node\n        else:\n            if not visited[node[0]][node[1]+1] and node[1]+1 < N:\n                visited[node[0]][node[1]+1] = True\n                queue.append((node, steps+1))\n            if not visited[node[0]+1][node[1]] and node[0]+1 < N:\n                visited[node[0]+1][node[1]] = True\n                queue.append((node, steps+1))\n    \n    return max_path_avg / (end[0]*end[1]+1)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    if N == 0:\n        return 0\n\n    max_cost = max(cost[0])\n    min_cost = min(cost[0])\n    total_cost = sum(cost[0])\n\n    for i in range(1, N):\n        for j in range(N):\n            if j == N-1:\n                max_cost = max(max_cost, cost[i][j])\n                min_cost = min(min_cost, cost[i][j])\n                total_cost += cost[i][j]\n            elif i == N-1:\n                max_cost = max(max_cost, cost[i][j])\n                min_cost = min(min_cost, cost[i][j])\n                total_cost += cost[i][j]\n            else:\n                max_cost = max(max_cost, cost[i][j])\n                min_cost = min(min_cost, cost[i][j])\n                total_cost += cost[i][j]\n\n    avg_cost = total_cost / (N*N)\n\n    return max(avg_cost, min_cost)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    max_path_avg = 0\n    max_path_length = 0\n    current_path_avg = 0\n    current_path_length = 0\n    current_cell = (0, 0)\n    \n    # Iterate through the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Check if the current cell is part of a path\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                current_path_avg += cost[i][j]\n                current_path_length += 1\n                # Update max_path_avg and max_path_length if needed\n                if current_path_avg > max_path_avg:\n                    max_path_avg = current_path_avg\n                    max_path_length = current_path_length\n                # Reset current_path_avg and current_path_length\n                current_path_avg = 0\n                current_path_length = 0\n            # If the current cell is not part of a path, move to the next cell\n            else:\n                current_cell = (i, j)\n                if i + 1 < len(cost):\n                    next_cell = (i + 1, j)\n                    if cost[i][j] <= cost[i+1][j]:\n                        # Move right\n                        if cost[i][j] + cost[i+1][j] > cost[i][j]:\n                            current_path_avg += cost[i][j]\n                            current_path_length += 1\n                        current_cell = next_cell\n                        current_path_avg += cost[i+1][j]\n                        current_path_length += 1\n                    else:\n                        # Move down\n                        if cost[i][j] + cost[i][j+1] > cost[i][j]:\n                            current_path_avg += cost[i][j]\n                            current_path_length += 1\n                        current_cell = (i, j+1)\n                        current_path_avg += cost[i][j+1]\n                        current_path_length += 1\n    \n    # Calculate average for the last path\n    if current_path_length > 0:\n        current_path_avg /= current_path_length\n    else:\n        current_path_avg = 0\n    \n    # Check if the last path is the max\n    if current_path_avg > max_path_avg:\n        max_path_avg = current_path_avg\n        max_path_length = current_path_length\n    \n    # Return max_path_avg and max_path_length\n    return max_path_avg, max_path_length"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = float('-inf')\n    visited = [[False] * N for _ in range(N)]\n    path = []\n    def dfs(i, j):\n        if i == N-1 and j == N-1:\n            total_cost = sum(cost[path[i]][path[j]])\n            avg_cost = total_cost / (i+1 + j+1)\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n            return\n        if visited[i][j]:\n            return\n        visited[i][j] = True\n        dfs(i+1, j)\n        dfs(i, j+1)\n        visited[i][j] = False\n    dfs(0, 0)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[0]*N for i in range(N)]\n    total_cost = 0\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            visited[i][j] = 1\n            if i == N-1 and j == N-1:\n                if visited[i][j] == 2:\n                    total_cost += cost[i][j]\n                    if total_cost > max_avg:\n                        max_avg = total_cost\n                continue\n            if i < N-1:\n                visited[i][j] += visited[i+1][j]\n            if j < N-1:\n                visited[i][j] += visited[i][j+1]\n            if visited[i][j] > 2:\n                total_cost += cost[i][j]\n                visited[i][j] -= 2\n                if total_cost > max_avg:\n                    max_avg = total_cost\n                visited[i][j] += 2\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[name] = student_info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    # create an empty list to store the filtered students\n    filtered_students = []\n\n    # iterate over each student in the input dictionary\n    for student, data in students.items():\n        # unpack the data tuple\n        height, weight = data\n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # if yes, append the student name to the filtered list\n            filtered_students.append(student)\n\n    # return the filtered list of students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through each element in the first list\n    for i in range(len(nums1)):\n        # Check if the element at the current index is equal to the corresponding element in the second list\n        if eq(nums1[i], nums2[i]):\n            # If it is, increment the count\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize a dictionary to store the counts of each value\n    counts = {}\n    \n    # loop through each value in the lists\n    for i in range(len(nums1)):\n        # check if the value is already in the dictionary\n        if nums1[i] in counts:\n            # increment the count if it is\n            counts[nums1[i]] += 1\n        else:\n            # otherwise, add the value to the dictionary with a count of 1\n            counts[nums1[i]] = 1\n        \n        # check if the value is already in the dictionary\n        if nums2[i] in counts:\n            # increment the count if it is\n            counts[nums2[i]] += 1\n        else:\n            # otherwise, add the value to the dictionary with a count of 1\n            counts[nums2[i]] = 1\n            \n    # initialize a list to store the indices of values with the same count\n    indices = []\n    \n    # loop through each value in the dictionary\n    for i in counts:\n        # check if the count is equal to 1\n        if counts[i] == 1:\n            # add the index to the indices list\n            indices.append(i)\n            \n    # return the indices list\n    return indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i] and nums2[i] in nums1:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # initialize an empty dictionary to store the count of same values\n    count_dict = {}\n\n    # iterate over the lists and increment the count of the same values in the dictionary\n    for i in range(len(nums1)):\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n\n    # iterate over the second list and increment the count of the same values in the dictionary\n    for j in range(len(nums2)):\n        if nums2[j] in count_dict and count_dict[nums2[j]] > 0:\n            count_dict[nums2[j]] -= 1\n\n    # count the number of same values in the dictionary\n    same_count = sum([1 for count in count_dict.values() if count == 0])\n\n    return same_count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Iterate over each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Calculate the digit raised to the power\n        digit_pow = digit_int ** power\n        \n        # Add the digit raised to the power to the sum\n        sum += digit_pow\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += base // 10\n        base %= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string\n    base_str = str(base)\n    # initialize sum to 0\n    sum_digits = 0\n    # loop through each digit in base string\n    for digit in base_str:\n        # convert digit to integer\n        digit_int = int(digit)\n        # calculate sum of digits to the specified power\n        sum_digits += digit_int ** power\n    # return sum of digits to the specified power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum to 0\n    total_sum = 0\n    # loop through each digit of the base\n    for digit in str(base):\n        # convert each digit to an integer and add it to the total sum\n        total_sum += int(digit) ** power\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    for i in range(power):\n        total_sum += int(str(base)[i])\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    num = base\n    while power > 0:\n        digit = num % 10\n        total_sum += digit ** power\n        power -= 1\n        num //= 10\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and split it into a list of digits\n    digits = list(str(base))\n    \n    # calculate the sum of digits raised to the power\n    result = 0\n    for digit in digits:\n        result += int(digit) ** power\n    \n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to find quotation marks\n    pattern = r'\"([^\"]*)\"'\n    \n    # Use the regular expression pattern to find all occurrences of quotation marks in the given text\n    quotations = re.findall(pattern, text1)\n    \n    # Return a list of all quotation marks found in the given text\n    return quotations"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Use regular expression to find all occurrences of double quotes \" \"\n    # inside the text string.\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    \n    # Loop through the matches and return the values.\n    result = []\n    for match in matches:\n        result.append(match)\n    \n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"(.*?)\"'\n    # Use the re.search() method to find all occurrences of the pattern in the given string\n    matches = re.findall(pattern, text1)\n    # Convert the matches list to a string and return it\n    return ''.join(matches)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = re.compile(r'(?<!\\\\)\"([^\"]*)\"')\n    matches = quotation_pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = [None] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = [0] * N\n    for i in range(N-1):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # create an empty list to store the result\n    result = []\n    # loop through the elements of the tuple, starting from the second element\n    for i in range(1, len(test_tup)):\n        # multiply the current element with the element after it\n        result.append(test_tup[i-1] * test_tup[i])\n    # return the resulting list as a tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # create an empty list to store the result\n    result = []\n    \n    # loop through the tuple and multiply each pair of elements\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n        \n    # return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) // 2\n    result_tup = (test_tup[0] * test_tup[2], test_tup[1] * test_tup[3])\n    for i in range(N-1):\n        result_tup += (test_tup[i+2] * test_tup[i+4],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the output tuple with the first element of the input tuple\n    output_tup = (test_tup[0],)\n    # loop through the input tuple starting from the second element\n    for i in range(1, len(test_tup)):\n        # multiply the current element with the next element in the output tuple\n        output_tup += (test_tup[i] * output_tup[-1],)\n    return output_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = tuple(x * test_tup[i+1] for i, x in enumerate(test_tup))\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each element in the first list\n    for i in range(len(lst1)):\n        # Add the corresponding element in the second list to the result list\n        result.append(lst1[i] + lst2[i])\n        \n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through each element in the first list\n    for i in range(len(lst1)):\n        # add the corresponding element from the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n\n    Args:\n    nums: list of integers\n\n    Returns:\n    list of integers\n    \"\"\"\n    # Group the numbers by their count\n    groups = groupby(enumerate(nums), lambda x: x[1] == x[0])\n    # Filter out groups with more than one element\n    return [num for group in groups if len(list(group)) == 1][-1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: not any(y == x for y in g), groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [k[0] for k, g in groupby(nums) if not (k==g[0] and g[1] is None)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(enumerate(nums), lambda x: x[0] - x[1]))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == 1:\n            for n in group:\n                yield n\n        else:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    if not nums:\n        return []\n\n    result = []\n    current_num = nums[0]\n    for num in nums[1:]:\n        if num == current_num:\n            continue\n        else:\n            result.append(num)\n            current_num = num\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def consecutive_duplicates(nums):\n    # group the numbers by their value and then by their index\n    grouped_by_value = groupby(enumerate(nums), lambda x: x[1])\n    # return only the groups where the next value is different from the current one\n    return [x for _, x in grouped_by_value if not any(y[0] + 1 == x[0] for _, y in grouped_by_value)]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi * (r**2))\n    area = ((s / 3) * h)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3*math.pi*r**2*h)/2\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula\n    # 2h * pi * r^2\n    lateral_area = 2*h*math.pi*r**2\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    \"\"\"\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone with a given radius r and height h.\n    '''\n    # Formula to find the lateral surface area of a cone\n    lateral_surface_area = (math.pi * r**2 * h) / 3\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n\nprint(lateralsurface_cone(2,3))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "Here is the implementation of the function:"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius r and height h of a cone and calculates\n    the lateral surface area using the formula:\n\n    A = 1/3 * r^2 * h\n\n    This function returns the lateral surface area of the cone.\n    '''\n    \n    A = 1/3 * r**2 * h\n    \n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Define the lateral surface area\n    s_lateral = (2*r*h)/3\n    # Return the lateral surface area\n    return s_lateral"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r**2 * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match spaces, commas, or dots\n    pattern = r'[\\s.,;]'\n    \n    # Use the pattern to replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(pattern, ':', text)\n    \n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function takes a string as input and replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(\\s|,|\\.)'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[^a-zA-Z0-9]+'\n    repl = ':'\n    return re.sub(pattern, repl, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', text).replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]', '', text).replace('.', ':').replace(',', ':').replace(' ', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'\\s+|,\\s+|\\.+|!', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[.,]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+|\\,\\s*|\\.\\s*|\\s*,\\s*|\\s*:\\s*|\\s*\\.\\.\\s*|\\s*@\\s*', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\. ]+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\.', ':', text)\n    text = re.sub(r',', ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # binary search for first occurrence of x in A\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # if x is not found in A, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A):\n        return -1\n    j = i\n    while j < len(A) and A[j] == x:\n        j += 1\n    if j == len(A):\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize variables to keep track of the search range\n    left, right = 0, len(A) - 1\n    \n    # loop until we find the first occurrence\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # if the middle element is equal to x, we have found the first occurrence\n        if A[mid] == x:\n            return mid\n        \n        # if the middle element is greater than x, we need to search the right half of the array\n        elif A[mid] < x:\n            left = mid + 1\n        \n        # if the middle element is less than x, we need to search the left half of the array\n        else:\n            right = mid - 1\n    \n    # if we reach this point, the search range is empty (i.e., the number was not found)\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Search for the first occurrence of x in the sorted array\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # If x is found, search for the last occurrence\n            while mid < right and A[mid + 1] == x:\n                mid += 1\n\n            return mid\n\n        elif A[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize variables for the left and right indices\n    left = 0\n    right = len(A) - 1\n    # Initialize variable for the first occurrence index\n    first_occurrence_index = -1\n    \n    # If the array is empty or if the target number is not present, return -1\n    if len(A) == 0 or x not in A:\n        return -1\n    \n    # Binary search for the first occurrence of the target number\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            first_occurrence_index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A):\n        return -1\n    while i < len(A) and A[i] == x:\n        i += 1\n    if i == len(A):\n        return -1\n    return i - 1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = []\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            result.append(prod)\n            \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * n\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    prod_sum = [0] * n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            prod_sum[i] += prefix_sum[j] - prefix_sum[i]\n\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [1]*n\n    max_product = 1\n    max_product_start = 0\n    for i in range(1, n):\n        dp[i] = max(dp[i-1]*arr[i], max_product)\n        if dp[i] > max_product:\n            max_product = dp[i]\n            max_product_start = i-max_product+1\n    return sum(dp)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function returns the sum of products of all possible sublists of a given list.\n    \"\"\"\n\n    n = len(arr)\n\n    # Initialize the result array with zeros\n    result = [0] * n\n\n    # Initialize the previous result array with zeros\n    prev_result = [0] * n\n\n    # Calculate the previous result array\n    for i in range(1, n):\n        prev_result[i] = prev_result[i-1] + arr[i-1]\n\n    # Calculate the result array\n    for i in range(1, n):\n        for j in range(i, n):\n            result[j] = result[j] + arr[i-1] * arr[j] * prev_result[j]\n\n    # Calculate the sum of products of all possible sublists of the given list\n    sublist_prod_sum = 0\n    for i in range(1, n):\n        sublist_prod_sum += result[i]\n\n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    \n    # calculate product of first element of each sublist\n    for i in range(n):\n        prod *= arr[i]\n    \n    # calculate sum of products of sublists of size 1\n    subarray_sum = prod * (n + 1) // 2\n    \n    # calculate sum of products of sublists of size 2\n    for i in range(1, n):\n        subarray_sum += prod * arr[i] * (n - i) // 2\n    \n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i][j] = arr[j] * dp[i - 1][j]\n    result = 0\n    for i in range(n):\n        result += dp[i + 1][i]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    max_product = float('-inf')\n    dp = [[0 for j in range(n)] for i in range(2)]\n    dp[0][0] = arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i-1] * arr[i], dp[1][i-1])\n        max_product = max(max_product, dp[0][i])\n        \n        dp[1][i] = max(dp[1][i-1] * arr[i], dp[0][i-1])\n        max_product = max(max_product, dp[1][i])\n    \n    return max_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize the sum of products of all sublists\n    prod_sum = 0\n\n    for i in range(1, n+1):\n        # Calculate the product of the first i elements of the list\n        prod = 1\n        for j in range(i):\n            prod *= arr[j]\n        # Calculate the sum of products of all possible sublists of length i\n        prod_sum += prod\n\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the prefix sum array and the sum of products array\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = 0\n    product_sum = [0] * (n + 1)\n    product_sum[0] = 1\n    # Compute the prefix sum array\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    # Compute the sum of products of all possible sublists\n    for i in range(1, n + 1):\n        for j in range(i):\n            product_sum[i] += arr[i - 1] * arr[j] * prefix_sum[i]\n    return sum(product_sum)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes in a list as input and returns the sum of products of all possible sublists of the list.\n    \"\"\"\n    n = len(arr)\n    sublists = []\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            sublists.append(arr[j:j+i])\n    subarray_prods = []\n    for sublist in sublists:\n        prod = 1\n        for num in sublist:\n            prod *= num\n        subarray_prods.append(prod)\n    return sum(subarray_prods)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    first_bit = n & (n ^ (n >> 1))\n    last_bit = n & (n ^ (n << 1))\n    return first_bit ^ last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize two variables to keep track of the first and last bits\n    first = n & 1\n    last = n & (2**31-1)\n    \n    # shift the bits to the right by 1 and add the first and last bits\n    n = n >> 1\n    n = n + first + last\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    if n < 0:\n        return set_middle_bits(-n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    bit_length = 1\n    while bit_length < len(bin(n)[2:]) and bin(n)[2:].count('1') < bit_length:\n        bit_length <<= 1\n    if bin(n)[2:].count('1') == bit_length // 2:\n        n ^= 1 << (bit_length - 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Finding the number of bits in the number\n    num_bits = len(bin(n)[2:])\n\n    # Creating a list of bits from the number\n    bits = [int(bit) for bit in bin(n)[2:]]\n\n    # Finding the first and last bits\n    first_bit = bits[0]\n    last_bit = bits[-1]\n\n    # Creating a list of bits to be toggled\n    toggle_bits = [first_bit, last_bit]\n\n    # Finding the index of the middle bits\n    middle_bits_index = num_bits // 2\n\n    # Iterating through the list of bits to be toggled\n    for i in range(middle_bits_index):\n        toggle_bits.append(bits[i] ^ bits[i + 1])\n        toggle_bits.append(bits[i] ^ bits[-i - 1])\n\n    # Toggle the bits\n    for bit in toggle_bits:\n        if bit:\n            n = n ^ (1 << num_bits - 1)\n        else:\n            n = n ^ (0 << num_bits - 1)\n\n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    \n    # create a string representation of n in binary format\n    bin_n = bin(n)[2:]\n    \n    # length of binary string\n    n_length = len(bin_n)\n    \n    # toggle the bits of the number except the first and last bit\n    for i in range(n_length-2):\n        if bin_n[i] == '0':\n            bin_n[i] = '1'\n        else:\n            bin_n[i] = '0'\n    \n    # convert the binary string to integer\n    bin_n = int(bin_n, 2)\n    \n    # return the toggled number\n    return bin_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Find the first and last bit positions\n    first_bit_pos = 0\n    last_bit_pos = 0\n    while n & (1 << first_bit_pos):\n        first_bit_pos += 1\n    while n & (1 << last_bit_pos):\n        last_bit_pos += 1\n\n    # Toggle all bits except the first and last bit positions\n    for i in range(first_bit_pos, last_bit_pos):\n        n ^= 1 << i\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the left and right bits\n    left_bits = (n & 1)\n    right_bits = (n >> 1) & 1\n    \n    # Toggle the left and right bits\n    toggled_bits = left_bits ^ right_bits\n    \n    # Combine the toggled bits with the other bits\n    result = left_bits << 1\n    result |= toggled_bits\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # function to toggle bits of the number except the first and the last bit\n    def toggle_bits(num):\n        # initialize variables\n        carry = False\n        toggle_count = 0\n        result = 0\n        \n        # iterate through the bits of the number\n        for bit in bin(num)[2:]:\n            # if the current bit is 1\n            if bit == '1':\n                # if the carry is 1, then toggle the bit\n                if carry:\n                    result |= (1 << toggle_count)\n                else:\n                    result &= ~(1 << toggle_count)\n                    \n                # increment the toggle count\n                toggle_count += 1\n                \n            # if the current bit is 0, then carry is 0\n            else:\n                carry = False\n                \n        # if there is a carry, then toggle the bit\n        if carry:\n            result |= (1 << toggle_count)\n            \n        # return the resulting number\n        return result\n    \n    # toggle bits of the number except the first and the last bit\n    result = toggle_bits(n)\n    \n    # return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # Toggle the first and last bit of n\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    toggled_n = n ^ first_bit ^ last_bit\n\n    # Toggle the middle bit of toggled_n\n    middle_bit = toggled_n & (1 << (toggled_n.bit_length() // 2))\n    toggled_middle_bit = middle_bit ^ 1\n    middle_bit = middle_bit ^ toggled_middle_bit\n\n    # Set the middle bit of toggled_n\n    toggled_n = toggled_n | middle_bit\n\n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # find the length of the number\n    length = len(bin(n)[2:])\n    \n    # iterate through all the bits in the number\n    for i in range(length):\n        \n        # if the bit is the first or the last bit, skip it\n        if i == 0 or i == length-1:\n            continue\n        \n        # toggle the bit\n        n = n ^ (1 << i)\n    \n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Perform binary search on the sorted array to find the left insertion point\n    i = bisect.bisect_left(a, x)\n    \n    # If the value is not found in the array, return the length of the array\n    if i == len(a):\n        return i\n    \n    # Check if the value is already present in the array\n    elif a[i-1] == x:\n        return i - 1\n    \n    # Otherwise, return the left insertion point\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    # Use the bisect_left function from the bisect module to locate the left insertion point\n    i = bisect.bisect_left(a, x)\n    # If the value is not found, insert it at the end of the list\n    if i == len(a):\n        a.append(x)\n        return i\n    # If the value is already present, return the index where it is found\n    elif a[i] == x:\n        return i\n    # If the value is greater, insert it at the left of the index i\n    else:\n        a.insert(i, x)\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return low"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i!= 0 and a[i-1]!= x:\n        return i-1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(a) - 1\n\n    # Perform binary search on the left half of the array\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If the value is found, return the left pointer\n        if a[mid] == x:\n            return mid\n\n        # If the value is greater than the mid value, search on the right half of the array\n        elif a[mid] < x:\n            left = mid + 1\n\n        # If the value is smaller than the mid value, search on the left half of the array\n        else:\n            right = mid - 1\n\n    # If the value is not found, return the left pointer of the right half of the array\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    i = bisect.bisect_left(a, x)  # bisect_left returns the index where to insert x in a\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        j = i - 1\n        while j >= 0 and a[j] > x:\n            j -= 1\n        return j + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        if a[0] < x:\n            return 0\n        else:\n            return 1\n    else:\n        if a[index-1] < x:\n            return index\n        else:\n            return index+1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    This function checks whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # base case\n    if n == 1:\n        return 1\n\n    # recursive case\n    else:\n        return n * (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(10))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The geometric sum of\", n, \"-\", n-1, \"is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n\n    # Find the smallest triangular number with n digits\n    smallest_triangular_number = 10 ** n\n\n    # Initialize a binary search variable\n    left, right = smallest_triangular_number, smallest_triangular_number + 1\n\n    # Find the index of the smallest triangular number with n digits\n    while right - left >= 1:\n        mid = (left + right) // 2\n        triangular_number = mid * (mid + 1) // 2\n        if triangular_number == smallest_triangular_number:\n            return mid\n        elif triangular_number < smallest_triangular_number:\n            left = mid\n        else:\n            right = mid\n\n    # If the while loop exited without finding the smallest triangular number with n digits, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Calculate the total number of digits in the smallest triangular number with n digits\n    digits = n * (n + 1) // 2\n\n    # Find the sum of digits in the smallest triangular number with n digits\n    total_sum = 0\n    for i in range(digits):\n        total_sum += (i + 1) ** 2 * (digits - i) / 2\n\n    # Find the smallest triangular number with n digits\n    triangular_number = (total_sum // digits) ** 2\n\n    # Find the index of the smallest triangular number with n digits\n    index = 0\n    for i in range(1, int(math.sqrt(triangular_number)) + 1):\n        if triangular_number - i * i * (i + 1) / 2 >= 0:\n            index += 1\n            triangular_number -= i * i * (i + 1) / 2\n        else:\n            break\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Initialize the smallest triangular number with n digits to be 1\n    smallest_triangular = 1\n    \n    # Loop through the digits of n\n    for i in range(n):\n        # Calculate the next triangular number by adding the previous smallest triangular number and the current smallest triangular number\n        next_triangular = smallest_triangular + smallest_triangular\n        \n        # Check if the next triangular number has more digits than the current smallest triangular number\n        if len(str(next_triangular)) > len(str(smallest_triangular)):\n            smallest_triangular = next_triangular\n    \n    # Return the index of the smallest triangular number\n    return math.floor(math.log10(smallest_triangular))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function takes an integer n and returns the index of the smallest triangular number with n digits.\n\n    '''\n    min_num = math.pow(10, n-1)\n    triangular_num = min_num\n    index = 1\n    \n    while True:\n        triangular_num += min_num\n        index += 1\n        \n        if triangular_num >= math.pow(10, n):\n            break\n            \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        triangular_number = 2**(n-1)\n        index = int(math.log(triangular_number, 2)) + 1\n        return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # initialize the maximum value of n to 1000000\n    max_n = 1000000\n\n    # loop through all possible values of n \n    for i in range(2, max_n + 1): \n\n        # calculate the value of the triangular number \n        triangular = (i * (i + 1) * (i + 2)) // 6 \n\n        # check if the triangular number is equal to or less than the maximum value \n        if triangular <= max_n: \n\n            # check if the triangular number has n digits \n            if triangular // 10**n == 0: \n\n                # if the triangular number has n digits, print its index \n                print(f\"The index of the smallest triangular number with {n} digits is {triangular // 10**n}\")\n\n                # exit the loop \n                break "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # Check if n is greater than 0\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Check if n is less than or equal to 9\n    if n > 9:\n        raise ValueError(\"Input must be less than or equal to 9\")\n\n    # Initialize variables\n    min_triangular = 1\n    triangular_digits = 1\n    triangular_length = 1\n\n    # Loop until we find the index of the smallest triangular number with n digits\n    while triangular_digits < n:\n        # Calculate the next triangular number\n        next_triangular = triangular_length * min_triangular\n\n        # Check if the next triangular number has n digits\n        if int(math.log10(next_triangular)) == n - 1:\n            return triangular_digits\n\n        # Update variables\n        min_triangular = next_triangular\n        triangular_digits = triangular_length + 1\n        triangular_length += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # initialize a variable to store the smallest triangular number with n digits\n    min_triangular = 10**n - 1\n\n    # initialize a variable to store the index of smallest triangular number with n digits\n    min_triangular_index = 0\n\n    # loop through all possible triangular numbers with n digits\n    for i in range(1, 10**n): \n\n        # calculate the square of the current triangular number\n        square = i*i\n\n        # check if the square is smaller than the smallest triangular number with n digits\n        if square < min_triangular: \n\n            # if it is, update the smallest triangular number and its index\n            min_triangular = square\n            min_triangular_index = i\n\n    # return the index of smallest triangular number with n digits\n    return min_triangular_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Initialize two variables to store the smallest and largest triangular numbers\n    smallest = math.pow(10,n-1)\n    largest = math.pow(10,n-1)\n    \n    # While the smallest triangular number is less than the largest triangular number\n    while smallest < largest:\n        \n        # Find the midpoint of the current range\n        mid = (smallest + largest) / 2\n        \n        # Check if the midpoint is a triangular number\n        if is_triangular(mid):\n            \n            # If it is, check if it has n digits\n            if len(str(mid)) == n:\n                \n                # If it has n digits, return the index of the smallest triangular number with n digits\n                return math.floor(math.log10(smallest)) + 1\n                \n        # If the midpoint is not a triangular number, update the largest triangular number to mid\n        else:\n            largest = mid\n            \n    # If the loop completes without finding a triangular number with n digits, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    # function to find index of smallest triangular number with n digits\n    def find_triangular(n):\n        triangular = 0\n        for i in range(n):\n            triangular += math.factorial(n-i)\n        return triangular\n\n    # function to find smallest triangular number with n digits\n    def find_smallest_triangular(n):\n        return find_triangular(n)\n\n    # function to find index of smallest triangular number with n digits\n    def find_index(n):\n        triangular = find_smallest_triangular(n)\n        triangular_str = str(triangular)\n        index = len(triangular_str) - n\n        return index\n\n    # call the function to find the index of smallest triangular number with n digits\n    result = find_index(n)\n    print(\"The index of the smallest triangular number with\", n, \"digits is:\", result)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # convert the tuple to a list\n    test_list = list(test_tup)\n    # create an empty dictionary\n    my_dict = {}\n    # iterate over the list and add adjacent elements as keys and values to the dictionary\n    for i in range(len(test_list)-1):\n        key = test_list[i]\n        value = test_list[i+1]\n        my_dict[key] = value\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # creating an empty dictionary\n    d = {}\n    # using a for loop to iterate through the tuple\n    for i in range(len(test_tup)):\n        # adding the current element as the key and the next element as the value in the dictionary\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # iterate through the tuple\n    for i in range(len(test_tup)-1):\n        # add key-value pair to dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    dict_ = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    key = test_tup[0]\n    value = test_tup[1]\n    result = {key: value}\n    for i in range(2, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    i = 0\n    while i < len(test_tup):\n        result[i] = test_tup[i+1]\n        i += 2\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_ = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    result = {}\n    # Loop over the tuple elements and add each pair of adjacent elements as a key-value pair to the dictionary\n    for i in range(0, len(test_tup)-1, 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Check if the string has only one character\n    if len(s) == 1:\n        return True\n    \n    # Initialize a variable to keep track of the first character\n    first_char = s[0]\n    \n    # Loop through the string and check if each character is the same as the first character\n    for char in s:\n        if char!= first_char:\n            return False\n    \n    # If all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if all the characters in the string are the same\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Check if the length of the string is 0\n    if len(s) == 0:\n        return True\n\n    # Check if the length of the string is 1\n    elif len(s) == 1:\n        return False\n\n    # Check if the length of the string is greater than 1\n    else:\n        # Initialize a variable to store the first character of the string\n        first_char = s[0]\n\n        # Iterate over the rest of the string and check if each character is the same as the first character\n        for char in s[1:]:\n            if char!= first_char:\n                return False\n\n        # If the loop completes without returning False, then all characters are the same\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # converting the string to a list to make the comparisons easier\n    s_list = list(s)\n    # getting the first character from the list\n    first_char = s_list[0]\n    # looping through all the characters in the list\n    for char in s_list:\n        # if the first character is not equal to the current character, then all the characters are not same\n        if char!= first_char:\n            return False\n    # if all the characters are same, then all_Characters_Same function returns True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    \n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) <= 1:\n        return True\n    elif s[0]!= s[1]:\n        return False\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[2:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    s = (a + b + c) / 2.0\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron.\n    \"\"\"\n    s = (side**2)/3\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = 1/4 * side ** 2\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(semi_perimeter * (semi_perimeter - side) * (semi_perimeter - 2 * side) * (semi_perimeter + side))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for the area of a tetrahedron\n    area = (1/6) * side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side ** 2 * math.tan(math.pi / 12)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = 1/3 * side**2\n    height = math.sqrt(3)/2 * side\n    return math.sqrt(3)/4 * base * height\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = side / 3\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(semi_perimeter ** 2 * (semi_perimeter - math.sqrt(semi_perimeter ** 2 - 4 * side ** 3)))\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3) * side * side * side"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[n - m:] = list[:n - m]\n    list[:n - m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Handle the case when m > n\n    if m > n:\n        m %= n\n    # Reverse the first m items\n    list[:m] = list[:m][::-1]\n    # Reverse the remaining elements\n    list[m:] = list[m:][::-1]\n    # Reverse the entire list\n    list = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    list[m:], list[:m] = list[:m], list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and an integer n as input and rotates the list by n items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n    # Get the last item of the list\n    last_item = list[-1]\n    # Remove the last item from the list\n    list = list[:-1]\n    # Add the last item to the beginning of the list\n    list = last_item + list\n    # Rotate the list by the required number of times\n    for i in range(m):\n        temp = list[-1]\n        list = list[:-1]\n        list = temp + list\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n  # if m is greater than or equal to n, then m should be reduced to n.\n\n    # reverse the first n-m items of the list\n    list[:n-m] = list[:n-m][::-1]\n\n    # reverse the remaining items of the list\n    list[n-m:] = list[n-m:][::-1]\n\n    # reverse the entire list\n    list = list[::-1]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n        n += 1\n    return list[:n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    \"\"\"\n    n = len(list)\n    # if m is greater than or equal to n, then there is no rotation required\n    if m >= n:\n        return list\n    # if m is 0, then return the original list\n    if m == 0:\n        return list\n    \n    # create a new list with m elements, and copy the remaining elements from the original list\n    new_list = [None] * m\n    for i in range(m):\n        new_list[i] = list[(i+m-1) % n]\n    \n    # copy the first m elements of the original list to the last m elements of the new list\n    for i in range(m):\n        new_list[(n-i-1) % n] = list[i]\n    \n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[m:] = list[:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for item in test_tup:\n        if item is None:\n            none_count += 1\n            break\n    return none_count == len(test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for item in test_tup:\n        if item is None:\n            none_count += 1\n    if none_count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function that takes a digit and returns a lambda function that checks if the digit is divisible by that digit\n    digit_divisible_by_digit = lambda digit: lambda num: num % digit == 0\n    \n    # Define a lambda function that checks if the number contains every digit that satisfies the digit_divisible_by_digit lambda function\n    has_every_digit = lambda num: all(digit_divisible_by_digit(digit)(num) for digit in str(num))\n    \n    # Loop through the numbers within the given range and check if they are divisible by every digit they contain\n    for num in range(startnum, endnum + 1):\n        if has_every_digit(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        return all(int(digit) in str(num) for digit in str(num))\n\n    return [num for num in range(startnum, endnum+1) if is_divisible(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Returns a list of numbers within the given range where every number is divisible by every digit.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit.\n        \"\"\"\n        digits = str(num)\n        for digit in digits:\n            if int(digit) % 2!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    \n    # Function to check if a number is divisible by a digit\n    def is_divisible_by_digit(number, digit):\n        return number % digit == 0\n    \n    # Function to check if a number is divisible by every digit in a range\n    def is_divisible_by_every_digit(number, startnum, endnum):\n        digits = list(str(startnum) + str(endnum))\n        for digit in digits:\n            if not is_divisible_by_digit(number, int(digit)):\n                return False\n        return True\n    \n    # Using a list comprehension to filter the numbers that are divisible by every digit in the given range\n    divisible_numbers = [num for num in range(startnum, endnum + 1) if is_divisible_by_every_digit(num, startnum, endnum)]\n    \n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(num):\n        digits = list(str(num))\n        for digit in digits:\n            if int(digit) % len(digits)!= 0:\n                return False\n        return True\n\n    numbers = [num for num in range(startnum, endnum+1) if is_divisible(num)]\n    return numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda num: all(d in str(num) for d in str(num)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda n: all(int(d) in str(n) for d in str(n))\n    \n    # Define a list of digits\n    digits = [int(d) for d in str(startnum)]\n    \n    # Filter the numbers within the given range that are divisible by every digit\n    divisible_numbers = list(filter(is_divisible_by_digit, range(startnum, endnum+1)))\n    \n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % 2 == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        # convert the number to a string and convert all non-digit characters to empty strings\n        snum = ''.join(filter(str.isdigit, str(num)))\n        # split the string into a list of digits\n        digits = list(snum)\n        # use a lambda function to check if each digit is divisible by the corresponding index in the list of digits\n        if all(lambda x: x % int(digits[i]) == 0, range(len(digits))):\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate area of sector using Heron's formula\n    s = (3*r*math.sin(math.radians(a/360)))**0.5\n    area = math.pi*(r**2)*s\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * (1 - math.cos(math.radians(a)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = r * r * math.sin(math.radians(a/360))\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    theta = a * math.pi / 180.0\n    area = r * r * theta\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # check if angle is valid\n    if a > 360:\n        return None\n\n    # calculate area of sector using formula\n    area = math.pi * r * r * a / 360\n\n    # return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is greater than 360 degrees\n    if a > 360:\n        return None\n\n    # Convert angle to radians\n    a = math.radians(a)\n\n    # Calculate the area of the sector\n    area = math.pi * r ** 2 * a\n\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is within the valid range\n    if a > 360:\n        return None\n\n    # Calculate the area of the sector using the formula A = r * (angle/360) * pi\n    A = r * (a / 360) * math.pi\n\n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"The angle must be less than or equal to 360 degrees.\")\n        return None\n    area = math.pi * r**2 * a/360\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store length of LCS for all prefixes of X, Y, and Z\n    LCS = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n\n    # print the LCS sequence\n    lcs_seq = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs_seq.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j][k] == LCS[i][j-1][k]:\n            i -= 1\n        elif LCS[i][j-1][k] == LCS[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    lcs_seq.reverse()\n    return ''.join(lcs_seq)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    def helper(X, Y, Z): \n        m = len(X) \n        n = len(Y) \n        p = [[0] * (n + 1) for i in range(m + 1)] \n\n        for i in range(1, m + 1): \n            for j in range(1, n + 1): \n                if X[i-1] == Y[j-1]: \n                    p[i][j] = p[i-1][j-1] + 1 \n                elif X[i-1] > Y[j-1]: \n                    p[i][j] = max(p[i-1][j], p[i][j-1]) \n                else: \n                    p[i][j] = max(p[i][j-1], p[i-1][j]) \n\n        return p, X[p[m][n]:] \n\n    p, X = helper(X, Y, Z) \n    return X "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) # length of X\n    n = len(Y) # length of Y\n    o = len(Z) # length of Z\n    \n    # creating a 2D matrix to store LCS lengths\n    L = [[0 for j in range(o+1)] for i in range(m+1)]\n    \n    # filling the 2D matrix in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][k] = L[i-1][j-1][k]\n                elif X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j][k-1]\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n    \n    # the LCS is the last element of the 2D matrix\n    lcs = X[m-L[m][n][o]:m]\n    \n    # printing the LCS\n    print(\"LCS of three strings is: \", lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n\n    # create a matrix to store the length of the longest common subsequence of each three strings\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # fill the matrix using dynamic programming approach\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                elif X[i - 1] == Y[j - 1]:\n                    dp[i][j] = dp[i - 1][j]\n                elif X[i - 1] == Z[k - 1]:\n                    dp[i][j] = dp[i - 1][j]\n                elif Y[j - 1] == Z[k - 1]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # print the length of the longest common subsequence of each three strings\n    for i in range(m, -1, -1):\n        for j in range(n, -1, -1):\n            for k in range(p, -1, -1):\n                if X[i] == Y[j] and X[i] == Z[k]:\n                    print(dp[i][j])\n                    return\n\n    print(\"No common subsequence found\")\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of longest common subsequences ending at each position\n    table = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # fill the table diagonally from the top left to the bottom right\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    table[i][j] = table[i - 1][j - 1] + 1\n                else:\n                    table[i][j] = max(table[i - 1][j], table[i][j - 1], table[i - 1][k])\n\n    # find the length of the LCS by backtracking from the table\n    i = m\n    j = n\n    k = o\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        elif table[i][j - 1] > table[i - 1][j]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Create a 3x3 matrix to store the lengths of subsequences \n    m = [[0] * (len(Y) + 1) for i in range(len(X) + 1)] \n  \n    # Fill the matrix in bottom up manner. Note that we are only considering the last \n    # element of each string to create the subsequence. \n    for i in range(1, len(X) + 1): \n        for j in range(1, len(Y) + 1): \n  \n            if X[i - 1] == Y[j - 1]: \n                # If the characters match, then the length of LCS for all previous \n                # characters can be obtained by adding 1 to the length of LCS for the \n                # previous 2 characters. \n                m[i][j] = m[i - 1][j - 1] + 1 \n            else: \n                # If the characters do not match, then the length of LCS is maximum of \n                # LCS for previous characters and LCS for previous 2 characters. \n                m[i][j] = max(m[i - 1][j], m[i][j - 1]) \n  \n    # Return the length of LCS for the last element of each string. \n    return m[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Converting the given three string sequence into a list of strings\n    lst = [X, Y, Z]\n\n    # Taking the length of the three strings sequence as the length of the longest common subsequence\n    n = len(lst[0])\n\n    # Creating a 2D table to store the lengths of the longest common subsequences for all possible pairs of suffixes\n    table = [[0] * (n+1) for i in range(len(lst))]\n\n    # Fill the table using dynamic programming\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            for k in range(1):\n                if lst[i][j] == lst[k][j]:\n                    table[i][j] = table[i-1][j-1] + 1\n                else:\n                    table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Finding the lcs using the table\n    lcs = []\n    i = len(lst)-1\n    j = n\n    while i >= 0 and j >= 0:\n        if lst[i][j-table[i][j]] == lst[i][j]:\n            lcs.append(lst[i][j-table[i][j]])\n            i -= 1\n            j -= table[i][j]\n        elif table[i][j] == table[i-1][j]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Converting the list of lcs to a string\n    lcs = ''.join(lcs)\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n\n    # create a 2D table to store the length of LCS for all prefixes \n    L = [[0] * (p+1) for i in range(m+1)] \n\n    # Fill the table in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1 \n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n\n    # Traverse the table to find the LCS \n    lcs = [] \n    i = m \n    j = n \n    k = p \n\n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i-1][j][k] == L[i][j-1][k]: \n            i -= 1 \n        elif L[i][j-1][k] == L[i][j][k-1]: \n            j -= 1 \n        else: \n            k -= 1 \n\n    # Reverse the LCS and return it \n    lcs = lcs[::-1] \n    return ''.join(lcs) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Create a 2D table to store the lengths of LCS of sub-sequences of X, Y and Z \n    table = [[0 for j in range(len(Y) + 1)] for i in range(len(X) + 1)] \n\n    # Fill in the table in bottom up manner \n    for i in range(1, len(X) + 1): \n        for j in range(1, len(Y) + 1): \n            if X[i - 1] == Y[j - 1]: \n                table[i][j] = table[i - 1][j - 1] + 1\n            else: \n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # Backtrack the LCS \n    i = len(X) \n    j = len(Y) \n    lcs = \"\" \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n        elif table[i - 1][j] > table[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function takes three string sequences as input and returns the longest common subsequence (LCS) for these sequences.\n    '''\n\n    # Initialize a 3D list to store LCS values\n    LCS = [[[0 for j in range(len(Z[0]) + 1)] for i in range(len(X) + 1)] for k in range(len(Y) + 1)]\n\n    # Fill the LCS list using dynamic programming approach\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z[0]) + 1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i][j][k - 1])\n\n    # Print the LCS list\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z[0]) + 1):\n                print(LCS[i][j][k], end=\" \")\n            print()\n\n    # Initialize variables to store the index of the LCS subsequence\n    i = len(X)\n    j = len(Y)\n    k = len(Z[0])\n\n    # Initialize an empty list to store the LCS subsequence\n    lcs_seq = []\n\n    # Traverse through the LCS list to find the LCS subsequence\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs_seq.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i - 1][j][k] == LCS[i - 1][j][k - 1]:\n            i -= 1\n        elif LCS[i][j - 1][k] == LCS[i - 1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS subsequence and return it\n    return lcs_seq[::-1]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Regular expression pattern to match capital words\n    pattern = r'(?<=[a-z])([A-Z])(?=[a-z])'\n    # Split the string into words\n    words = re.findall(pattern, str1)\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b[a-z]\\w*\\b', str1)\n    \n    # Capitalize the first letter of each word and join them with spaces\n    result =''.join([word.capitalize() for word in words])\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1.lower())\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # define a pattern for matching capital words\n    pattern = r'(?<=\\p{Ll})(.*?)(?=\\p{Lu})'\n    # use the pattern to find all capital words in the string\n    capital_words = re.findall(pattern, str1)\n    # join the capital words with spaces and return the result\n    return''.join(capital_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define regular expression pattern for capital letters\n    pattern = r'\\b[A-Z]\\w+\\b'\n\n    # Use regular expression to find all matches of capital letters\n    matches = re.findall(pattern, str1)\n\n    # Use list comprehension to add spaces between words starting with capital letters\n    result =''.join([match +'' if not match.startswith(match.lower()) else match for match in matches])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    words = re.findall(r'\\b\\w+\\b', str1)\n    capitalized_words = []\n    for word in words:\n        if word[0].isupper():\n            capitalized_words.append(word)\n        else:\n            capitalized_words.append(word.capitalize())\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # join the words with spaces\n    result =''.join(words)\n    # capitalize the first letter of the first word and all other letters\n    result = re.sub(r'^([a-z])(\\w+)', r'\\1 \\2', result)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Define a regular expression pattern to match capital letters\n    pattern = r'[A-Z][a-z]*'\n\n    # Split the string into words using regular expressions\n    words = re.findall(pattern, str1)\n\n    # Iterate over the words and add spaces between them if the first letter of a word is capital\n    for i in range(len(words)):\n        if i == 0:\n            words[i] = words[i].lower()\n        else:\n            words[i] ='' + words[i].lower()\n\n    # Join the words back into a string with spaces between them\n    result = ''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string by spaces and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w+\\b', str1)\n    words = [' '.join(word.capitalize()) for word in words]\n    # join the words with spaces\n    str2 =''.join(words)\n    return str2"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # Sort the list of integers numerically\n    nums.sort()\n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_str = sorted(nums_str, key=lambda x: [int(s) for s in x.split('.')])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all the numeric strings to integers\n    nums = [int(num) for num in nums_str if num.isdigit()]\n\n    # Sort the integers numerically\n    nums.sort()\n\n    # Convert the sorted integers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    # Join the sorted strings back into a single string\n    sorted_nums_str = ''.join(sorted_nums_str)\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. \n    \"\"\"\n    # convert all strings to float values\n    nums = [float(num) for num in nums_str]\n    # sort the float values numerically\n    nums.sort()\n    # convert the sorted float values back to strings\n    nums_str = [str(num) for num in nums]\n    # return the sorted string values as a list\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. \n    \"\"\"\n    # Split each string into a list of numbers\n    nums_list = [list(map(int, s)) for s in nums_str]\n    \n    # Sort the list of numbers using the built-in `sort()` function\n    nums_list.sort()\n    \n    # Convert the sorted list back to a list of strings\n    sorted_nums_str = [str(nums) for nums in nums_list]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_str.sort(key=lambda x: [int(i) for i in x])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n\n    nums_int.sort()\n\n    nums_str = [str(num) for num in nums_int]\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. \n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    \"\"\"\n    # Split the input list into lists of strings and numbers\n    nums = [int(x) for x in nums_str]\n    strs = [str(x) for x in nums_str]\n\n    # Sort the numbers in ascending order\n    nums.sort()\n\n    # Sort the strings in ascending order\n    strs.sort()\n\n    # Concatenate the sorted lists and return the result\n    return nums + strs"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for s in nums_str:\n        nums.append(float(s))\n\n    nums.sort()\n\n    sorted_nums_str = []\n    for num in nums:\n        sorted_nums_str.append(str(num))\n\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) == tuple:\n            test_list.append(test_tup)\n            break"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for num in test_tup:\n        test_list.append(num)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            test_list[i] += test_tup\n        elif isinstance(test_tup, tuple):\n            test_list[i] = test_list[i] + test_tup\n        else:\n            test_list[i] += test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: If the index is greater than or equal to the length of the array, then it means\n    # the current node is a leaf node and it is already a min heap.\n    if i >= len(arr):\n        return True\n    \n    # If the node at current index is greater than its children, then it violates min heap property.\n    if arr[i] > min(arr[2*i+1], arr[2*i+2]):\n        return False\n    \n    # Recursively call the function for the left and right sub-trees.\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap(arr):\n    n = len(arr)\n\n    # check if the array is a min heap or not\n    for i in range(1, n):\n        if arr[i] < arr[i//2]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a binary heap or not.\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i // 2)\n\ndef check_min_heap(arr):\n    '''\n    Check if a given array represents a binary heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] > arr[i - 1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i - 1)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or arr[i] <= arr[i // 2]:\n        return True\n    else:\n        return False\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0:\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    \n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) // 2 - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    else:\n        return arr[i] >= arr[(i - 1) // 2] and check_min_heap_helper(arr, (i - 1) // 2)\n\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)\n\n\narr = [5, 3, 2, 1, 4, 6, 7]\n\nif check_min_heap(arr):\n    print(\"Array represents a min heap\")\nelse:\n    print(\"Array does not represent a min heap\")"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: the root of the heap is the last element in the array\n    if i == 0:\n        return True\n    # Check if the element at index i is smaller than the element at index (i//2)\n    elif arr[i] < arr[i//2]:\n        return False\n    # Recursively check the left and right sub-heaps\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    # Start with the last element of the array\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) // 2:\n        left = 2 * i\n        right = 2 * i + 1\n        if left < len(arr) and arr[left] > arr[i]:\n            return False\n        if right < len(arr) and arr[right] > arr[i]:\n            return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n    # Check if the array is a min heap or not\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[0]:\n        return False\n    return check_min_heap_helper(arr, i+1)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    # Call the helper function to check if the array is a min heap or not\n    if n > 1 and is_min_heap(arr):\n        return True\n    return check_min_heap_helper(arr, 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    a = 0\n    b = 1\n    while j < n:\n        if j % 2 == 0:\n            j += 1\n            a = a + b\n            b = 0\n        else:\n            j += 1\n            b = b + a\n            a = b\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal_numbers.append(jacobsthal_numbers[-1] + jacobsthal_numbers[-2])\n    return jacobsthal_numbers[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    for _ in range(n):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n // 2) + jacobsthal_num(n // 2) + 1\n    else:\n        return jacobsthal_num((n - 1) // 2) + 1 + jacobsthal_num((n - 1) // 2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    jacobsthal_list = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10925, 21853, 43711, 87425, 174855, 349717, 699441, 1398901, 2797817, 5595641, 11191301, 22382617, 44765251, 89530521, 179061111, 358122341, 716244711, 1432489551, 2864979281, 5729958791, 11459917821, 22919836221, 45839673791, 91679350791, 183358716221, 366717446091, 733434913721, 1466869860121, 2933739873711, 5867479956751, 11734959994471, 23469920088991, 46939840381931, 93879680863911, 187759362951981, 375518727904101, 751037458913051, 1502074928692421, 3004149858146311, 6008299716262911, 12016599432526941, 24033198865054021, 48066397730108201, 96132795460216601, 192265590920433401, 384531181840867101, 769062363681735401, 1538124727363472001, 3076249454726946001, 6152498909453904001, 12304997818907820001, 24609995637815660001, 49219991275631340001, 98439982551262700001]\n    return jacobsthal_list[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_list = [0, 1, 1]  # initialize the list with the first two terms\n    i = 2\n\n    while i < n:\n        jacobsthal_list.append(jacobsthal_list[i-1] + jacobsthal_list[i-2])\n        i += 1\n\n    return jacobsthal_list[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n // 2)\n    else:\n        return 3 * jacobsthal_num((n - 1) // 2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + 1"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list based on first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize minimum count\n    min_count = 0\n\n    # Iterate over the list\n    for i in range(len(test_list)):\n        # Increment the count if we have reached the k-th element\n        if i == K - 1:\n            min_count += 1\n\n        # Remove the first element of the current tuple\n        test_list.pop(0)\n\n    # Return the minimum count\n    return min_count\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a tuple list and an integer K as input.\n    The function returns the minimum K records from the tuple list.\n\n    :param test_list: A list of tuples, where each tuple contains values for two variables.\n    :param K: An integer representing the number of records to be returned.\n\n    :return: A tuple containing the minimum K records from the tuple list.\n    \"\"\"\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Return the first K records from the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # Sort the list in ascending order of the first element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize minimum count as infinity\n    min_count = float('inf')\n\n    # Initialize minimum records as empty list\n    min_records = []\n\n    # Traverse the sorted list and check if the count of records is less than k\n    for i in range(len(test_list)):\n        if len(min_records) < K:\n            min_count = min(min_count, len(test_list) - i)\n            min_records.append(test_list[i])\n        else:\n            min_count = min(min_count, len(test_list) - i + 1)\n\n    # Return the minimum count and the minimum records\n    return min_count, min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort()\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i])\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    # Initialize variables for minimum k records and counter\n    min_rec = []\n    count = 0\n\n    # Iterate through the list and count the number of records\n    for tup in test_list:\n        if len(min_rec) < K:\n            min_rec.append(tup)\n        else:\n            # If length of min_rec is greater than K, remove the smallest record and add the current record\n            if tup[0] < min_rec[0][0]:\n                min_rec.pop(0)\n                min_rec.append(tup)\n            # If length of min_rec is equal to K, keep the smallest record and count the number of records\n            elif tup[0] == min_rec[0][0]:\n                min_rec.pop(0)\n                count += 1\n                min_rec.append(tup)\n\n    # Return the minimum k records\n    return min_rec[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # create a dictionary to store unique keys as values\n    unique_dict = {}\n    \n    # iterate through the list and add keys and values to the dictionary\n    for key, value in test_list:\n        if key in unique_dict:\n            unique_dict[key].append(value)\n        else:\n            unique_dict[key] = [value]\n            \n    # create a list of tuples with keys and values\n    key_value_list = unique_dict.items()\n    \n    # sort the list by value in descending order\n    key_value_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # create a set to store the keys of the first K records\n    min_k_keys = set()\n    \n    # iterate through the sorted list and add keys to the set\n    for i in range(K):\n        if i < len(key_value_list):\n            min_k_keys.add(key_value_list[i][0])\n            \n    # create a set of tuples with the keys of the first K records\n    min_k_set = set(zip(min_k_keys, [unique_dict[key] for key in min_k_keys]))\n    \n    # create a list of tuples with the keys and values of the first K records\n    min_k_list = list(min_k_set)\n    \n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Initialize minimum count and minimum list to None\n    min_count = None\n    min_list = None\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n\n        # If the current count is less than K, update the count and list\n        if len(tup) < K:\n            if min_count is None or len(tup) < min_count:\n                min_count = len(tup)\n                min_list = tup\n        # If the current count is equal to or greater than K, check if it is the minimum count and update if necessary\n        elif len(tup) == K:\n            if min_count is None or len(tup) < min_count:\n                min_count = len(tup)\n                min_list = tup\n\n    # Return the minimum list of length K\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a number k as input and returns the minimum k elements from the list.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    # Iterate through the list of tuples and update the count_dict with the count of each element\n    for tup in test_list:\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        else:\n            count_dict[tup[0]] = 1\n    # Create a list to store the minimum k elements\n    min_list = []\n    # Iterate through the count_dict and add the k smallest elements to the min_list\n    for key in sorted(count_dict.keys()):\n        if count_dict[key] < K:\n            break\n        min_list.append(key)\n    # Return the min_list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the test list based on the first element of the tuples\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize minimum list with first K records\n    min_list = sorted_list[:K]\n\n    # Initialize index of minimum element in minimum list\n    min_index = 0\n\n    # Iterate over the remaining records in the test list\n    for i in range(K, len(sorted_list)):\n        # Check if the minimum list is empty or if the minimum element is greater than the current record\n        if min_list and sorted_list[i][0] > min_list[-1][0]:\n            # If yes, remove the last element from the minimum list\n            min_list.pop()\n            # Add the current record to the beginning of the minimum list\n            min_list.insert(0, sorted_list[i])\n            # Update the index of minimum element\n            min_index = 0\n        # If the minimum list is not empty and the minimum element is less than or equal to the current record, add it to the minimum list\n        elif min_list and sorted_list[i][0] <= min_list[-1][0]:\n            # If yes, add the current record to the beginning of the minimum list\n            min_list.insert(0, sorted_list[i])\n            # Update the index of minimum element\n            min_index = 0\n        # If the minimum list is empty, add the current record to the minimum list\n        else:\n            # Add the current record to the minimum list\n            min_list.append(sorted_list[i])\n            # Update the index of minimum element\n            min_index = len(min_list) - 1\n\n    # Return the minimum list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store the minimum k records for each key\n    min_k_dict = {}\n    # initialize the minimum k value to be infinity\n    min_k_value = float('inf')\n    # loop through the list of tuples\n    for tup in test_list:\n        # get the key for the tuple and check if it exists in the dictionary\n        key = tup[0]\n        if key in min_k_dict:\n            # if the key exists, check if the value for the key is less than the current value in the dictionary\n            if min_k_dict[key] > tup[1]:\n                # if it is, update the value in the dictionary\n                min_k_dict[key] = tup[1]\n        else:\n            # if the key doesn't exist, add the key and value to the dictionary\n            min_k_dict[key] = tup[1]\n        # check if the number of records in the dictionary is less than K and if the current value is less than the minimum k value\n        if len(min_k_dict) < K and min_k_dict[key] < min_k_value:\n            # if it is, update the minimum k value\n            min_k_value = min_k_dict[key]\n    # create a list of tuples to store the minimum k records\n    min_k_list = []\n    # loop through the dictionary again and add the records to the list\n    for key, value in min_k_dict.items():\n        if value == min_k_value:\n            # if the value is equal to the minimum k value, add the key-value pair to the list\n            min_k_list.append((key, value))\n    return min_k_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    # Create an empty dictionary to store the common elements\n    common_elements = {}\n\n    # Loop through each element in l1\n    for elem1 in l1:\n        # Check if the element is present in l2 and l3\n        if elem1 in l2 and elem1 in l3:\n            # Add the element to the dictionary with its indices\n            common_elements[elem1] = (l1.index(elem1), l2.index(elem1), l3.index(elem1))\n\n    # Return the dictionary of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common = set()\n    # Loop through the indices of the first list\n    for i in range(len(l1)):\n        # Check if the element at this index appears in all three lists\n        if l1[i] in l2 and l1[i] in l3:\n            # If it does, add it to the common set\n            common.add(l1[i])\n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Initialize an empty list to hold the common elements\n    common_elements = []\n\n    # Loop through each index in the three lists\n    for i in range(len(l1)):\n\n        # Check if the current element exists in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Loop through all indices in l1\n    for i in range(len(l1)):\n        # If an element is found in all three lists at the current index, add it to the common_elements list\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    \n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns the second smallest number in the list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers, key=lambda x: x[1])"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least two elements.\"\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest:\n                second_smallest = numbers[i]\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The second smallest number in the list.\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=(b))+(?!b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(?:b*)')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\b*'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"This is a test string that contains abbbcabb\"\nprint(text_match_zero_one(text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(?=\\w*b)\"\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"(?i)a(b*)\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.+b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the current string is a reverse of the previous string\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n    n = len(test_list)\n\n    # loop through all pairs of strings\n    for i in range(n):\n        for j in range(i+1, n):\n\n            # check if the reversed string of the current string is in the list\n            reverse_str = test_list[j][::-1]\n            if reverse_str in test_list[i:j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(set(list1))\n    unique_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in unique_dict:\n            unique_dict[sublist] += 1\n        else:\n            unique_dict[sublist] = 1\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple to count its occurrences\n        count = (tuple(sublist), sublist.count(tuple(sublist)))\n        \n        # Check if the tuple exists in the dictionary\n        if count in count_dict:\n            # If it does, increment the count by 1\n            count_dict[count][1] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            count_dict[count] = (sublist, 1)\n    \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublist_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:])\n        if sublist not in sublist_dict:\n            sublist_dict[sublist] = 1\n        else:\n            sublist_dict[sublist] += 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            tup = tuple(sublist)\n            if tup not in count:\n                count[tup] = 1\n            else:\n                count[tup] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of unique sublists\n    count_dict = {}\n    \n    # iterate over the lists in the input list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it is already in the dictionary\n        if tuple(sorted(sublist)) in count_dict:\n            # if the tuple is already in the dictionary, increment its value by 1\n            count_dict[tuple(sorted(sublist))] += 1\n        else:\n            # if the tuple is not in the dictionary, add it with a value of 1\n            count_dict[tuple(sorted(sublist))] = 1\n    \n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    sublist_count = {}\n    \n    # Convert each list to a tuple and store in a dictionary\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n            \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists_dict = {}\n    for i in range(len(list1)):\n        if type(list1[i]) == tuple:\n            if list1[i] in unique_sublists_dict:\n                unique_sublists_dict[list1[i]] += 1\n            else:\n                unique_sublists_dict[list1[i]] = 1\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    counts = {}\n    \n    # Iterate over each sublist in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sorted(sublist)) in counts:\n            # Increment the count of the tuple\n            counts[tuple(sorted(sublist))] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[tuple(sorted(sublist))] = 1\n    \n    # Return the dictionary of sublist counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    count_dict = {}\n    # iterate through each element in the list\n    for elem in list1:\n        # convert the list to tuple\n        tup = tuple(elem)\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # increment the count of the tuple in the dictionary\n            count_dict[tup] += 1\n        else:\n            # if the tuple is not in the dictionary, add it with count of 1\n            count_dict[tup] = 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n\n    num_parts = num.split('.')\n    int_part = num_parts[0]\n    dec_part = num_parts[1]\n\n    if len(int_part) > 1 or len(dec_part) > 2:\n        return False\n\n    for char in int_part:\n        if not char.isdigit():\n            return False\n\n    for char in dec_part:\n        if not char.isdigit():\n            return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the string contains only digits\n    for digit in num:\n        if not digit.isdigit():\n            return False\n\n    # Convert the string to a float with a precision of 2\n    float_num = float(num)\n\n    # Check if the float is a decimal number with a precision of 2\n    if str(float_num).split('.')[1].startswith('0'):\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove all non-digit characters from the string\n    num = ''.join(filter(str.isdigit, num))\n    # Check if the length of the string is 2 (i.e. a decimal number)\n    if len(num) == 2:\n        # Check if the string contains a decimal point\n        if '.' in num:\n            # Split the string at the decimal point and check if the length of the first element is 1\n            if len(num.split('.')[0]) == 1:\n                return True\n        # If no decimal point is found, the string is not a decimal number with a precision of 2\n        return False\n    # If the length of the string is not 2, the string is not a decimal number with a precision of 2\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return num.split('.')[1][:2] == num.split('.')[1][-2:]\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        parts = num.split('.')\n        if len(parts)!= 2 or len(parts[0]) > 2 or len(parts[1]) > 2:\n            return False\n        for i in range(len(parts[0])):\n            if not parts[0][i].isdigit():\n                return False\n        for i in range(len(parts[1])):\n            if not parts[1][i].isdigit():\n                return False\n        if len(parts[0]) + len(parts[1]) > 2:\n            return False\n        if '.' in parts[0] or '.' in parts[1]:\n            return False\n    else:\n        if len(num) > 2:\n            return False\n        for i in range(len(num)):\n            if not num[i].isdigit():\n                return False\n        if '.' in num:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(',', '')\n    if '.' not in num:\n        return False\n    num_parts = num.split('.')\n    if len(num_parts)!= 2:\n        return False\n    for part in num_parts:\n        if not part.isdigit():\n            return False\n        if len(part) > 2:\n            return False\n    if len(num_parts[1]) > 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.find('.') == -1:\n        return False\n    for i in range(len(num)):\n        if num[i] == '.':\n            continue\n        elif num[i] == '-':\n            continue\n        elif not num[i].isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the given string is a float or an integer\n    if '.' in num:\n        # Check if the string contains more than one decimal point\n        if len(num.split('.')) > 1:\n            return False\n        # Check if the string contains more than 2 digits after the decimal point\n        if len(num.split('.')[1]) > 2:\n            return False\n        # Check if the string contains any other non-numeric characters\n        if not num.replace('.', '').isdigit():\n            return False\n        # Convert the string to float and check if it's a decimal number with a precision of 2\n        try:\n            float_num = float(num)\n            if abs(float_num - int(float_num)) > 0.001:\n                return False\n            return True\n        except ValueError:\n            return False\n    else:\n        # Check if the string contains more than 1 digit\n        if len(num) > 1:\n            return False\n        # Check if the string contains any other non-numeric characters\n        if not num.isdigit():\n            return False\n        # Convert the string to integer and check if it's a decimal number with a precision of 2\n        try:\n            int_num = int(num)\n            if abs(int_num - float(num)) > 0.001:\n                return False\n            return True\n        except ValueError:\n            return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Convert the input string to a float with a precision of 2\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if there is only one distinct element in the list,\n    and False otherwise.\n    '''\n    unique = set(arr)\n    return len(unique) == 1"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n    if count == len(arr):\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list does not contain only one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    distinct = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                distinct = False\n                break\n        if not distinct:\n            break\n    return distinct"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    for i in range(len(arr)):\n        if arr[i] in arr[:i] + arr[i+1:]:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize a variable to store the unique element\n    unique_element = arr[0]\n    # Loop through the sorted array\n    for i in range(1, len(arr)):\n        # If the current element is not equal to the previous element, set the unique element to the current element\n        if arr[i]!= unique_element:\n            unique_element = arr[i]\n        # If the loop completes, the unique element is the only distinct element in the array\n        else:\n            return True\n    # If the loop completes and the unique element is not None, it means there were no distinct elements in the array\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid input. Month number should be between 1 and 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid Month Number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 % 2 == 0 and monthnum3 % 3 == 0 and monthnum3 % 5 == 0:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # list of month numbers with 30 days\n    months30 = [4, 6, 9, 11]\n    \n    # check if month number is in the list of month numbers with 30 days\n    if monthnum3 in months30:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the month number is valid\n    if monthnum not in range(1,13):\n        return \"Invalid month number. Please enter a number from 1 to 12.\"\n\n    # Find the number of days in the given month\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if monthnum in [1,3,5,7,8,10,12]:\n        days[1] = 29\n\n    # Return the result\n    return \"The month with {} days contains 30 days.\".format(days[monthnum-1])"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        if ((year % 4 == 0 and year % 100!= 0) or (year % 400 == 0)):\n            return True\n        else:\n            return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum3 in [2]:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return \"29 days\"\n        else:\n            return \"28 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [4, 6, 9, 11]:\n        if monthnum3 % 2 == 0:\n            if monthnum3 in [4, 6, 9]:\n                return True\n            else:\n                return False\n        else:\n            return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid input.\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array of n integers and returns the minimum difference between any two elements in the array.\n    The function first sorts the array in non-descending order. Then, it calculates the minimum difference between any two elements in the sorted array.\n    \"\"\"\n    # sort the array in non-descending order\n    arr.sort()\n    \n    # initialize variables for minimum difference and minimum element\n    min_diff = float('inf')\n    min_element = arr[0]\n    \n    # loop through the sorted array\n    for i in range(1, n):\n        # calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i-1]\n        \n        # update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n            min_element = arr[i]\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Initialize two variables, minimum and current_min, with the first element of the array\n    minimum = arr[0]\n    current_min = arr[0]\n\n    # Loop through the array starting from the second element\n    for i in range(1, n):\n        # If the current element is greater than the current_min, update the minimum and current_min accordingly\n        if arr[i] > current_min:\n            minimum = current_min\n            current_min = arr[i]\n        # If the current element is less than or equal to the current_min, calculate the difference between the current_min and the current element and update the minimum accordingly\n        else:\n            minimum = min(minimum, current_min + arr[i])\n\n    # Return the minimum difference between any two elements in the array\n    return minimum"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n\n    Parameters:\n    arr (list): List of integers\n    n (int): Length of the array\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference to positive infinity\n    min_diff = float('inf')\n\n    # Iterate through the array\n    for i in range(n - 1):\n        # Calculate the difference between current and next element in the array\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference if the calculated difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # sort the array in ascending order\n    min_diff = float('inf')  # initialize minimum difference to positive infinity\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n): \n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array. \n    The function works by using a two-pointer approach where we iterate over the array from the first and last indices, and keep track of the smallest and largest element seen so far. \n    We also keep track of the difference between the smallest and largest elements, which we return at the end of the function.\n    '''\n\n    # Initialize the smallest and largest element seen so far as the first and last elements of the array respectively\n    smallest = arr[0]\n    largest = arr[n-1]\n\n    # Initialize the difference between the smallest and largest elements as the difference between the smallest and largest element\n    diff = largest - smallest\n\n    # Iterate over the array from the first and last indices\n    for i in range(1, n-1):\n\n        # Update the smallest and largest element seen so far if the current element is smaller than the smallest seen so far\n        if arr[i] < smallest:\n            smallest = arr[i]\n\n        # Update the largest element seen so far if the current element is larger than the largest seen so far\n        if arr[i] > largest:\n            largest = arr[i]\n\n        # Update the difference between the smallest and largest elements as the difference between the smallest and largest element if the current element is smaller\n        diff = min(diff, largest - smallest)\n\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum values of the array\n    min_val = arr[0]\n    max_val = arr[n-1]\n\n    # Initialize the minimum difference to be a very large number\n    min_diff = 100000\n\n    # Loop through the array and check if the difference between each element is less than the current minimum difference\n    for i in range(1, n-1):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in non-decreasing order\n    arr.sort()\n    # initialize minimum difference and two pointers\n    diff = float('inf')\n    left = 0\n    right = n - 1\n    while left < right:\n        # calculate the difference between the current pair\n        current_diff = arr[right] - arr[left]\n        # update the minimum difference if necessary\n        if current_diff < diff:\n            diff = current_diff\n        # move the left pointer to the right\n        left += 1\n        # move the right pointer to the left\n        right -= 1\n    return diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(string):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(k):\n        # Check if k is less than or equal to 2\n        if k <= 2:\n            return 1\n\n        # Find the smallest prime number greater than or equal to 3\n        prime = 3\n        while not is_prime(prime):\n            prime += 2\n\n        # Initialize variables for nth polite number\n        n = 3\n        result = 1\n\n        # Iterate until k polite numbers have been found\n        while n <= k:\n            # Check if n is a polite number\n            if is_prime(n):\n                result += 1\n\n            # Increment n and prime\n            n += prime\n            prime += 2\n\n        return result\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number.\n    \"\"\"\n    # Constants\n    a = 1.61803398875\n    b = 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323381944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    count = 0\n    polite_numbers = []\n\n    if n % 10 == 0:\n        n -= 1\n\n    while n!= 0:\n        count += 1\n        if n % 10 == 0:\n            n -= 1\n        else:\n            n -= 1\n            polite_numbers.append(n)\n            n -= 1\n\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 2 * n + 1\n\nn = 10\n\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [1, 5, 21, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125]\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        return abs(a * b) // gcd(a, b)\n\n    def is_valid_polite(num):\n        if num < 10:\n            return True\n\n        prime_factors = [i for i in range(2, int(math.sqrt(num)) + 1) if num % i == 0]\n        for prime_factor in prime_factors:\n            if is_prime(prime_factor):\n                if num % prime_factor == 0:\n                    return False\n\n        return True\n\n    nth_polite = 1\n    polite_number = 10\n\n    while nth_polite < n:\n        polite_number += 1\n\n        if is_valid_polite(polite_number):\n            nth_polite += 1\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 1: \n        return n \n    else: \n        return 2 * is_polite(n-1) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n and returns the nth polite number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        num = 1\n        for i in range(3, n+1, 2):\n            num += i\n        return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Given a positive integer n, this function returns the nth polite number.\n\n    A polite number is a positive integer that is a perfect square. The square of a perfect square is a prime number.\n    Therefore, the nth polite number is the largest prime number that is less than or equal to the nth perfect square.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Check if n is a perfect square\n    if math.isqrt(n) ** 2!= n:\n        raise ValueError(\"n must be a perfect square\")\n\n    # Initialize variables\n    i = 1\n    is_prime = True\n\n    # Loop through odd numbers and check if each is a prime\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            is_prime = False\n            break\n        i += 2\n    \n    # If a prime is found, return its square\n    if is_prime:\n        return i ** 2\n    # If no prime is found, return the smallest positive integer greater than or equal to the nth perfect square\n    else:\n        return i + 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    The nth polite number is the number such that the sum of its digits is equal to n.\n    \"\"\"\n    # Helper function to check if a number is a polite number\n    def is_polite_helper(num):\n        # Initialize the sum of digits to 0\n        sum_of_digits = 0\n        # Iterate through each digit in the number\n        for digit in str(num):\n            # Add the digit to the sum of digits\n            sum_of_digits += int(digit)\n        # Compare the sum of digits to n\n        return sum_of_digits == n\n\n    # Calculate the n-th polite number using the formula\n    nth_polite = 9 * (n//10) + 1\n    # Iterate through all numbers until we find one that is a polite number\n    while not is_polite_helper(nth_polite):\n        nth_polite += 1\n\n    return nth_polite"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of all pairs of consecutive items in that list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i], l1[i+1]])\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n\n    # Loop through each pair of elements in the list\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # If the sum of the current pair of elements is equal to the input sum, increment the count\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the list of elements that are present in li1 but not in li2.\n    \"\"\"\n    diff = []\n    for element in li1:\n        if element not in li2:\n            diff.append(element)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements that are present in li1 but not in li2.\n    '''\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the elements that are present in the first list but not in the second list.\n\n    :param li1: The first list from which we want to find the elements that are not in the second list.\n    :type li1: list\n    :param li2: The second list to compare against.\n    :type li2: list\n    :return: A list containing the elements that are present in the first list but not in the second list.\n    :rtype: list\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between the two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_fourth = 0\n    for i in range(n):\n        sum_fourth += i*i*i*i\n    return sum_fourth"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        num = i + 1\n        if num % 2!= 0:\n            sum += num ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # Initialize sum variable\n    sum = 0\n\n    # Loop through first n odd numbers\n    for i in range(1, n+1):\n\n        # Find fourth power of the odd number and add it to the sum\n        sum += i ** 4\n\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(2, n+1, 2):\n        odd_sum += i**4\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    num = 1\n\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_powers += num ** 4\n        num += 2\n\n    return sum_of_powers\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable\n    sum_of_powers = 0\n    \n    # Iterate over the first n odd natural numbers\n    for num in range(1, n+1, 2):\n        # Calculate the fourth power of the current odd number\n        fourth_power = num ** 4\n        \n        # Add the fourth power to the sum\n        sum_of_powers += fourth_power\n    \n    # Return the sum of fourth powers of odd numbers\n    return sum_of_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_brackets = ['(', '{', '[']\n\n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif bracket == ')' or bracket == '}' or bracket == ']':\n            if not stack:\n                return False\n            expected_bracket = stack.pop()\n            if (bracket == ')' and expected_bracket!= '(') or \\\n               (bracket == '}' and expected_bracket!= '{') or \\\n               (bracket == ']' and expected_bracket!= '['):\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = deque()\n    parentheses = {'(', '[', '{'}\n    for char in exp:\n        if char in parentheses:\n            stack.append(char)\n        elif char in ')' or char in ']' or char in '}':\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ['(', '{', '[']:\n            stack.append(exp[i])\n        elif exp[i] in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if exp[i] == ')' and stack[-1] == '(':\n                stack.pop()\n            elif exp[i] == '}' and stack[-1] == '{':\n                stack.pop()\n            elif exp[i] == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append('(')\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.remove(words[i])\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split()\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            test_list.pop(i)\n            i -= 1\n    new_str = \" \".join(test_list)\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n\n    # use regex to search for pattern in text\n    match = re.search(pattern, text)\n\n    # check if match exists\n    if match:\n        # get start and end positions of match\n        start_pos = match.start()\n        end_pos = match.end()\n\n        # print the match and its position\n        print(\"Match:\", match.group())\n        print(\"Position:\", start_pos)\n        print(\"End position:\", end_pos)\n    else:\n        # print no match message\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n\n    # check if any matches were found\n    if len(matches) == 0:\n        return None\n\n    # find the position of each match in the string\n    positions = []\n    for match in matches:\n        positions.append(text.index(match))\n\n    # create a list of tuples containing the match and its position\n    matches_positions = [(match, position) for match, position in zip(matches, positions)]\n\n    # sort the matches_positions list by their positions in the text\n    matches_positions = sorted(matches_positions, key=lambda x: x[1])\n\n    # return the first match and its position\n    return matches_positions[0][0], matches_positions[0][1]"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    else:\n        for matchNum, match in enumerate(matches, start=1):\n            print(f\"Match {matchNum}: {match.group()}\")\n            print(f\"Match {matchNum}: {match.start()}\")\n            print(f\"Match {matchNum}: {match.end()}\")\n            print()"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    \n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            print(f\"Occurrence {matchNum}: {match.group()}\")\n            print(f\"Position: {match.start()}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            print(f\"Match {matchNum}: {match.group()}\")\n            print(f\"Match {matchNum}: {match.start()}\")\n            print(f\"Match {matchNum}: {match.end()}\")\n        return None\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return (result.group(), result.start(), result.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if count == 0:\n            count = 1\n            if nums[i] % 2!= 0:\n                return False\n        elif nums[i] % 2!= 0:\n            return False\n        count += 1\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if any(num % 2!= 0 for num in nums[i]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0:  # if i is even, it does not contain odd numbers\n            continue\n        else:\n            count = 0\n            for num in nums:\n                if num % 2!= 0 and i % 2!= 0:\n                    count += 1\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # Initialize a flag to keep track of whether all odd indices contain odd numbers\n    all_odd = True\n    \n    # Loop through each index of the list\n    for i in range(len(nums)):\n        # If the index is odd, check if the number at that index is odd\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            # If the number at the odd index is not odd, set the flag to False and break out of the loop\n            all_odd = False\n            break\n    \n    # Return the flag indicating whether all odd indices contain odd numbers\n    return all_odd"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                count += 1\n    return count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    # Initialize a variable to keep track of the number of odd numbers seen so far\n    count = 0\n    # Loop through each element of the list\n    for num in nums:\n        # If the current number is odd, increment the count\n        if num % 2!= 0:\n            count += 1\n        # If we've seen all odd numbers, return True\n        if count == len(nums) // 2:\n            return True\n    # If we make it through the entire list without finding an odd number, return False\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            odd_count += 1\n    return odd_count == len(nums) // 2"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1:\n            if test_str[i] in vowels and test_str[i-1] not in vowels and test_str[i+1] not in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels and test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str)-1:\n            continue\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if i!= 0 and i!= len(test_str)-1:\n            if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # iterate through the list and update the count of each element in the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # initialize the sum to zero\n    sum_non_repeated = 0\n\n    # iterate through the dictionary and add the non-repeated elements to the sum\n    for key, value in count_dict.items():\n        if value == 1:\n            sum_non_repeated += int(key)\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # initialize the sum variable to zero\n    sum_elements = 0\n    # iterate through the unique elements\n    for element in unique_elements:\n        # add the element to the sum variable\n        sum_elements += element\n    # return the sum of unique elements\n    return sum_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_elements = set(arr)\n    # convert set to list and calculate sum of elements\n    result = sum(list(unique_elements))\n    return result"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    # create a set of all the elements in the list\n    unique_elements = set(arr)\n    # sum the unique elements\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the elements of the list\n    unique_elements = set(arr)\n    # Calculate the sum of unique elements\n    sum_unique = sum(unique_elements)\n    # Return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n    # Convert the set to a list\n    unique_list = list(unique_set)\n    # Calculate the sum of the unique list\n    unique_sum = sum(unique_list)\n    # Return the sum of the unique list\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a set to store unique elements\n    unique_set = set()\n    \n    # Iterate through the list and add each element to the set\n    for element in arr:\n        unique_set.add(element)\n    \n    # Convert the set back to a list and sum its elements\n    result_list = list(unique_set)\n    return sum(result_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # calculate the sum of all elements in the list\n    total_sum = sum(unique_elements)\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # loop through the list and increment the count of each element in the dictionary\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n            \n    # create a list of the unique elements in the list\n    unique_elements = list(set(arr))\n    \n    # initialize the sum variable to 0\n    sum_variable = 0\n    \n    # loop through the unique elements in the list\n    for i in unique_elements:\n        # add the value of the element times the count of that element to the sum variable\n        sum_variable += i * count_dict[i]\n    \n    # return the sum variable\n    return sum_variable"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as an argument and returns the sum of non-repeated elements in the list.\n    '''\n    # create a dictionary to store unique elements\n    unique_elements = {}\n    for element in arr:\n        # if element is not in the dictionary, add it with a value of 1\n        if element not in unique_elements:\n            unique_elements[element] = 1\n        else:\n            # if element is already in the dictionary, increment its value by 1\n            unique_elements[element] += 1\n    \n    # calculate the sum of all values in the dictionary\n    total_sum = sum(unique_elements.values())\n    \n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k, list(g)] for k, g in groupby(sorted(list1)) if not k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of sublists where each sublist contains consecutive duplicates of the list elements.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    list: The output list of sublists containing consecutive duplicates.\n    \"\"\"\n    grouped_list = list(groupby(lst))\n    packed_list = []\n    for item in grouped_list:\n        sublist = [x[0] for x in item]\n        if len(sublist) > 1:\n            packed_list.append(sublist)\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            yield [list1[0]]\n        else:\n            yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [''.join(group) for key, group in groupby(list1) if len(list(group)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1] == x[0]):\n        if key == 0:\n            continue\n        result.append(list(group))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Convert the list to a set to remove duplicates\n    list1 = list(set(list1))\n    # Iterate over the list and group consecutive elements together\n    grouped_list = [list(g) for k, g in groupby(list1)]\n    # Return the grouped list\n    return grouped_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublists = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            sublists.append([group[0]])\n        else:\n            sublists[-1].extend(group)\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts of unique lists\n    counts = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in counts:\n            counts[tuple(sublist)] += 1\n        else:\n            counts[tuple(sublist)] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate over the elements of the list\n    for element in list1:\n        # If the element is a list, turn it to a tuple and add it to the counts dictionary\n        if isinstance(element, list):\n            count = counts.get(tuple(element), 0)\n            counts[tuple(element)] = count + 1\n\n    # Return the counts dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        if sublist not in counts:\n            counts[sublist] = 0\n        counts[sublist] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the count of unique sublists\n    count_dict = {}\n\n    # loop through the elements of the input list\n    for element in list1:\n        # check if the element is a list\n        if isinstance(element, list):\n            # turn the list into a tuple to compare it with other tuples\n            sublist_tuple = tuple(element)\n            # check if the tuple is already in the dictionary\n            if sublist_tuple in count_dict:\n                # if it is, increment its count\n                count_dict[sublist_tuple] += 1\n            else:\n                # if it's not, add it to the dictionary with a count of 1\n                count_dict[sublist_tuple] = 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i, x in enumerate(lst):\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert each list to a tuple and count the number of occurrences\n    unique_tuples = {}\n    for i in list1:\n        tuple_i = tuple(i)\n        if tuple_i in unique_tuples:\n            unique_tuples[tuple_i] += 1\n        else:\n            unique_tuples[tuple_i] = 1\n\n    return unique_tuples"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # creating a dictionary to store the unique sublists and their occurrences\n    sublists_dict = {}\n    # looping through the list of lists\n    for sublist in list1:\n        # checking if the sublist is already in the dictionary\n        if sublist in sublists_dict:\n            # incrementing its occurrence count\n            sublists_dict[sublist] += 1\n        else:\n            # adding the sublist to the dictionary and setting its occurrence count to 1\n            sublists_dict[sublist] = 1\n    # returning the dictionary containing the unique sublists and their occurrences\n    return sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the number of occurrences for each unique list\n    counts = {}\n\n    # Loop through the list of lists\n    for sublist in list1:\n        # Convert the list to a tuple\n        sublist = tuple(sublist)\n        # If the tuple is already in the dictionary, increment its count\n        if sublist in counts:\n            counts[sublist] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[sublist] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for item in list1:\n        sublists[tuple(item)] = sublists.get(tuple(item), 0) + 1\n    return sublists"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = combinations(test_list, r=2)\n    for i in comb:\n        if sum(i) == 0:\n            print(i)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Function to find combinations of sums of a tuple\n    def find_combination(arr):\n        arr.sort()\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                yield (arr[i], arr[j])\n\n    # Find all combinations of sums of tuples\n    for comb in find_combination(test_list):\n        if sum(comb) == 0:\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Sort the list of tuples\n    test_list.sort()\n    # Initialize empty list to store the combinations\n    combinations_list = []\n    # Iterate through all possible subsets of the sorted list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            # Check if the combination is a tuple of sums\n            if sum(test_list[k] for k in range(i, j)) == j-i:\n                # Append the combination to the list\n                combinations_list.append(tuple(test_list[k] for k in range(i, j)))\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Find the unique tuples in the given list\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n\n    # Generate all possible combinations of sums\n    combinations_of_sums = combinations(unique_tuples, len(unique_tuples[0]))\n\n    # Filter the combinations that have a sum of 0\n    filtered_combinations = filter(lambda x: sum(x)!= 0, combinations_of_sums)\n\n    # Convert the filtered combinations to lists and return them\n    return list(filtered_combinations)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty dictionary to store the combinations of sums with tuples\n    combinations_dict = {}\n    \n    # Loop through the tuples in the list\n    for tup in test_list:\n        # Initialize an empty list to store the current combination of sums with tuples\n        current_combination = []\n        \n        # Loop through the tuples in the list and check if the current tuple is the same as the previous tuple\n        for i in range(len(tup)-1):\n            if tup[i] == tup[i+1]:\n                current_combination.append(tup[i])\n                break\n        \n        # If a valid combination is found, add it to the dictionary with the current combination as the key and the count of tuples as the value\n        if current_combination:\n            if current_combination not in combinations_dict:\n                combinations_dict[current_combination] = 1\n            else:\n                combinations_dict[current_combination] += 1\n    \n    # Return the dictionary containing the combinations of sums with tuples in the list\n    return combinations_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Check if the list is not empty and has tuples\n    if not test_list or not all(isinstance(i, tuple) for i in test_list):\n        return None\n    \n    # Sort the list of tuples in ascending order\n    sorted_list = sorted(test_list)\n    \n    # Initialize the combination list and the current combination\n    combinations_list = []\n    current_combination = []\n    \n    # Iterate over the tuples in the sorted list\n    for i in sorted_list:\n        # If the current tuple has the same sum as the current combination, add it to the combination list\n        if i[0] + i[1] == current_combination[0] + current_combination[1]:\n            combinations_list.append(current_combination)\n        # If the current tuple has a greater sum than the current combination, add the current combination to the list and initialize a new combination\n        elif i[0] + i[1] > current_combination[0] + current_combination[1]:\n            combinations_list.append(current_combination)\n            current_combination = [i[0], i[1]]\n    \n    # Add the last combination to the list if it is not empty\n    if current_combination:\n        combinations_list.append(current_combination)\n    \n    # Return the combination list\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n\n    # To store the combinations of sums\n    combinations_list = []\n\n    # Iterate through all the tuples in the list\n    for i in range(len(test_list)):\n        # Get the current tuple\n        current_tuple = test_list[i]\n\n        # Create a set of the current tuple\n        current_set = set(current_tuple)\n\n        # Iterate through all the other tuples in the list\n        for j in range(i + 1, len(test_list)):\n            # Get the next tuple\n            next_tuple = test_list[j]\n\n            # Create a set of the next tuple\n            next_set = set(next_tuple)\n\n            # Calculate the sum of the current tuple and the next tuple\n            current_sum = sum(current_set)\n            next_sum = sum(next_set)\n\n            # Check if the sum is equal to the target sum\n            if current_sum == next_sum:\n                # If the sum is equal, create a combination of the current and the next tuple\n                combination = (current_tuple, next_tuple)\n\n                # Append the combination to the list of combinations of sums\n                combinations_list.append(combination)\n\n    # Return the list of combinations of sums\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list of all possible combinations of sums\n    all_combinations = list(combinations(test_list, r=len(test_list)))\n    # filter out combinations with duplicate tuples\n    combinations_set = set()\n    for combination in all_combinations:\n        if tuple(sorted(combination)) not in combinations_set:\n            combinations_set.add(tuple(sorted(combination)))\n    # convert the set to a list and return it\n    return list(combinations_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(test_list)\n    all_combinations = combinations(test_list, len(test_list))\n    for combination in all_combinations:\n        if sum(combination) == total:\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    all_combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                all_combinations.append((test_list[i], test_list[j], test_list[k]))\n    return all_combinations"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. \n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    \n    def count_divisors_helper(n, count): \n        if n == 1: \n            return count \n        \n        if n % 2 == 0: \n            return count_divisors_helper(n//2, count+1) \n        else: \n            return count_divisors_helper(n-1, count+1) \n    \n    divisors = count_divisors_helper(n, 0) \n    if divisors % 2 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    count = len(divisors)\n    even_count = 0\n    for i in range(2, count+1, 2):\n        if count % i == 0:\n            even_count += 1\n    if even_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # Calculate the sum of the divisors of n\n    divisors_sum = sum(range(1, n+1))\n\n    # Check whether the count of divisors is even or odd\n    if divisors_sum == 2*n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > n/i:\n                break\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n    if n > 1:\n        divisors.append(n)\n    return even_divisors(divisors)\n\ndef even_divisors(divisors):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = len(divisors)\n    even_count = sum(1 for i in divisors if i % 2 == 0)\n    return count == even_count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count % 2 == 0\n\nprint(count_divisors(12)) # Output: False\nprint(count_divisors(28)) # Output: True\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sub_arr = arr[i:j+1]\n            odd_sum = sum([x for x in sub_arr if x % 2!= 0])\n            sum += odd_sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_of_odd_subarrays = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            sum_of_odd_subarrays += sum(arr[i:j+1])\n\n    return sum_of_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through each array element\n    for i in range(len(arr)):\n        # loop through each element in the current subarray\n        for j in range(i, len(arr)):\n            # check if the subarray length is odd\n            if j - i + 1 % 2!= 0:\n                # add the subarray sum to the total sum\n                sum += arr[i:j+1].sum()\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        if i % 2 == 0:\n            subarr_sum = sum(arr[i:i+2])\n            result += subarr_sum\n            \n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum_arr = []\n    for i in range(len(arr)):\n        if len(arr[i]) % 2 == 0:\n            sum_arr.append(sum(arr[i]))\n    return sum_arr"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+2, len(arr)+1, 2):\n            subarray = arr[i:j]\n            sum += sum(subarray)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n-1):\n            sum += arr[j] - arr[i-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            subarray = arr[j:j+i]\n            if sum(subarray) % 2!= 0:\n                result += sum(subarray)\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_subarrays = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the length of the subarray is odd\n            if (j-i+1) % 2!= 0:\n                # Calculate the sum of the subarray\n                subarray_sum = 0\n                for k in range(i, j+1):\n                    subarray_sum += arr[k]\n                # Add the sum of the subarray to the sum of all odd subarrays\n                sum_odd_subarrays += subarray_sum\n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            sum += arr[i]\n        else:\n            start = i\n            while i < n and i % 2 == 1:\n                sum += arr[i]\n                i += 1\n\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        s = delta / max_value\n\n    v = max_value\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0\n    s = 0\n    v = max_val / 255.0\n    if delta == 0:\n        h = 0\n        s = 0\n    elif max_val == r:\n        h = ((g - b) / delta) % 6\n    elif max_val == g:\n        h = (b - r) / delta + 2\n    elif max_val == b:\n        h = (r - g) / delta + 4\n    h = h / 6\n    if h < 0:\n        h = h + 1\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * v - 1))\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    h = 0\n    s = 0\n    \n    if delta == 0:\n        h = 0\n    elif max_color == r:\n        h = 60 * ((g - b) / delta)\n    elif max_color == g:\n        h = 60 * ((b - r) / delta) + 120\n    elif max_color == b:\n        h = 60 * ((r - g) / delta) + 240\n    \n    if max_color == 0:\n        s = 0\n    else:\n        s = delta / max_color\n    \n    v = max_color\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to R, G and B intensities\n    r_int = r >> 8\n    g_int = g >> 8\n    b_int = b >> 8\n\n    # Find the maximum intensity in the RGB color\n    max_intensity = max(r_int, g_int, b_int)\n\n    # Calculate the value of the hue by finding the angle between the three colors\n    if r_int == max_intensity:\n        hue = (g_int - b_int) / (max_intensity - min(g_int, b_int))\n    elif g_int == max_intensity:\n        hue = 2 + (b_int - r_int) / (max_intensity - min(r_int, b_int))\n    else:\n        hue = 4 + (r_int - g_int) / (max_intensity - min(g_int, b_int))\n\n    # Convert the hue value to degrees\n    if hue < 0:\n        hue += 6\n\n    # Find the minimum and maximum intensity in the RGB color\n    min_intensity = min(r_int, g_int, b_int)\n    max_intensity = max(r_int, g_int, b_int)\n\n    # Calculate the value of the saturation by finding the distance between the maximum and minimum intensities\n    if max_intensity == 0:\n        saturation = 0\n    else:\n        saturation = (max_intensity - min_intensity) / max_intensity\n\n    # Calculate the value of the value by finding the distance between the maximum and minimum intensities\n    if max_intensity == 0:\n        value = 0\n    else:\n        value = max_intensity\n\n    # Return the converted hsv values\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model\n    \n    Parameters\n    ----------\n    r : int or float\n        Red color component of the color in the range [0, 255]\n    g : int or float\n        Green color component of the color in the range [0, 255]\n    b : int or float\n        Blue color component of the color in the range [0, 255]\n    \n    Returns\n    -------\n    h : int or float\n        Hue value of the color in the range [0, 360]\n    s : int or float\n        Saturation value of the color in the range [0, 1]\n    v : int or float\n        Value of the color in the range [0, 1]\n    \"\"\"\n    \n    # Convert RGB to XYZ color space using D65 standard\n    X = 0.4124 * r + 0.3576 * g + 0.1805 * b\n    Y = 0.2126 * r + 0.7152 * g + 0.0722 * b\n    Z = 0.0193 * r + 0.1192 * g + 0.9505 * b\n    \n    # Convert XYZ to Lab color space\n    x, y, z = X / 100, Y / 100, Z / 100\n    \n    lab_color = rgb_to_lab(r, g, b)\n    \n    # Convert Lab to HSV color model\n    if lab_color[0] == 0:\n        h = 0\n    elif lab_color[0] > 0:\n        h = 60 * ((lab_color[1] - lab_color[2]) / (lab_color[0] + lab_color[2]))\n        if lab_color[1] == lab_color[2]:\n            h = 0\n        elif lab_color[1] < lab_color[2]:\n            h += 360\n    else:\n        h = 60 * ((lab_color[1] - lab_color[2]) / (lab_color[0] + lab_color[2])) + 360\n    \n    if h < 0:\n        h += 360\n    \n    s = max(lab_color[1], lab_color[2])\n    v = max(lab_color[0], lab_color[1], lab_color[2])\n    \n    return int(h), int(s * 100), int(v * 100)\n\ndef rgb_to_lab(r, g, b):\n    \"\"\"\n    Convert RGB color to Lab color model\n    \n    Parameters\n    ----------\n    r : int or float\n        Red color component of the color in the range [0, 255]\n    g : int or float\n        Green color component of the color in the range [0, 255]\n    b : int or float\n        Blue color component of the color in the range [0, 255]\n    \n    Returns\n    -------\n    L : int or float\n        Lightness value of the color in the range [0, 100]\n    a : int or float\n        Achromatic value of the color in the range [0, 100]\n    b : int or float\n        Brightness value of the color in the range [0, 100]\n    \"\"\"\n    \n    r, g, b = r / 255, g / 255, b / 255\n    \n    X = 0.4124564 * r + 0.3575761 * g + 0.1804375 * b\n    Y = 0.2126729 * r + 0.7151522 * g + 0.0721750 * b\n    Z = 0.0193339 * r + 0.1191920 * g + 0.9503041 * b\n    \n    X = X / 95.047   # Reference white D65\n    Y = Y / 100     # Reference white D65\n    Z = Z / 108.883 # Reference white D65\n    \n    epsilon = 216/24389   # F/24389 = 7.787\n    kappa = 24389/27"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    delta = max_color - min_color\n    \n    if max_color == min_color:\n        h = 0\n    else:\n        if max_color == r:\n            h = (g - b) / delta\n        elif max_color == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h * 60\n        \n        if h < 0:\n            h += 360\n            \n    v = max_color\n    \n    if v == 0:\n        s = 0\n    else:\n        s = delta / v\n    \n    hsv_color = (h, s, v)\n    \n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    h = 0.0\n    s = 0.0\n    v = 0.0\n\n    # Convert RGB to XYZ color space\n    r_xyz = (r / 255.0) * 1.088541\n[Truncated]\n    hsv_color = (h, s, v)\n    return hsv_color\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0.0\n    s = 0.0\n    v = max_value\n    \n    if delta == 0:\n        h = 0.0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2.0 + (b - r) / delta\n        else:\n            h = 4.0 + (r - g) / delta\n        \n        if h < 0:\n            h += 6.0\n        \n        h *= 60.0\n        \n        if h < 0:\n            h += 360.0\n        \n        s = delta / max_value\n        \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    del_val = max_val - min_val\n    \n    if max_val == min_val:\n        h = s = 0\n    else:\n        if r == max_val:\n            h = (g - b) / del_val\n        elif g == max_val:\n            h = 2 + (b - r) / del_val\n        else:\n            h = 4 + (r - g) / del_val\n        \n        if h < 0:\n            h += 6\n        \n        s = del_val / max_val\n    \n    v = max_val\n    \n    hsv = (h, s, v)\n    \n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. \n    '''\n    # Convert RGB to HSV\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n    if delta_rgb == 0:\n        hsv_color = (0, 0, 0)\n    elif max_rgb == r:\n        hsv_color = ((g - b) / delta_rgb, 60 * (g - b) / delta_rgb, 0)\n    elif max_rgb == g:\n        hsv_color = (2 + (b - r) / delta_rgb, 60 * (b - r) / delta_rgb, 0)\n    else:\n        hsv_color = (4 + (r - g) / delta_rgb, 60 * (r - g) / delta_rgb, 0)\n    \n    # Convert HSV to HSL\n    h = hsv_color[0]\n    s = hsv_color[1]\n    v = hsv_color[2]\n    if s == 0:\n        hsl_color = (h, 0, v)\n    else:\n        max_color = max(hsv_color[1], hsv_color[2])\n        min_color = min(hsv_color[1], hsv_color[2])\n        l = (max_color + min_color) / 2\n        if max_color == min_color:\n            h = 0\n        else:\n            if l < 0.5:\n                h = 60 * (max_color - min_color) / (max_color + min_color)\n            elif l < 0.5 + 0.5:\n                h = 60 * (max_color - min_color) / (6.0 - max_color - min_color)\n        hsl_color = (h, s, l)\n    \n    return hsl_color"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n        if count == 2:\n            return num * lst[0]\n    return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count == odd_count:\n            product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            product *= num\n            even_count -= 1\n            odd_count -= 1\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list of numbers as input and returns the product of first even and odd numbers.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count == 0 or odd_count == 0:\n        return \"No even or odd numbers found\"\n    else:\n        return lst[0] * lst[0+1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd numbers in the list.\n    '''\n    num = 1\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n        num += 1\n    \n    if even_count == 0:\n        return 0\n    else:\n        return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    \n    if even_count == 0:\n        return 0\n    \n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            break\n            \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(test_str, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # Split the input string into a list of strings\n    split_str = test_str.split()\n\n    # Check if the length of the list is even\n    if len(split_str) % 2!= 0:\n        raise ValueError(\"Input must have an even length.\")\n\n    # Convert each string to an integer\n    int_list = [int(item) for item in split_str]\n\n    # Check if the list contains any negative integers\n    if any(num < 0 for num in int_list):\n        raise ValueError(\"List must not contain negative integers.\")\n\n    # Convert the list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes in a tuple string as input and returns an integer tuple.\n    \"\"\"\n    return tuple(int(x) for x in test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\").split(\",\"))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(map(int, test_str.split(',')))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # convert the string to a tuple\n        tup = tuple(test_str.split(','))\n        \n        # convert each element in the tuple to an integer\n        int_tup = tuple(int(i) for i in tup)\n        \n        return int_tup\n        \n    except ValueError:\n        print('Invalid input. Please enter a tuple string separated by commas.')"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(int(x) for x in test_str.split(','))\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(int(x) for x in test_str.split(','))\n    except ValueError:\n        print('Invalid input')"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        result = tuple(map(int, test_str.split(',')))\n    except ValueError:\n        print(\"Invalid tuple string format\")\n    else:\n        return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove whitespace and convert string to list\n    test_list = list(filter(str.isdigit, test_str.replace(' ', '')))\n    # Convert list to tuple and return it\n    return tuple(int(i) for i in test_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    # Initialize an empty list to store the integer tuples\n    int_list = []\n    # Loop through each character in the list\n    for char in char_list:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If it is, convert it to an integer and append to the list\n            int_list.append(int(char))\n    # Convert the list of integers into a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a string and converts it into a tuple of integers.\n    '''\n    int_tuple = ()\n    for char in test_str:\n        try:\n            int_tuple += (int(char),)\n        except ValueError:\n            pass\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        # x is greater than all elements in a\n        return len(a)\n    elif i == 0 or a[i-1]!= x:\n        # x is in the correct location or x is greater than all elements in a[0:i]\n        return i\n    else:\n        # x is in the correct location or x is greater than all elements in a[0:i-1]\n        return i-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Args:\n        a (list): A sorted list of numbers.\n        x (int): The value to search for.\n\n    Returns:\n        int: The index of the right insertion point for the specified value in the sorted list.\n    \"\"\"\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index of the first element greater than or equal to x\n    i = bisect.bisect_left(a, x)\n    # If x is already in the list, return its index\n    if i!= len(a) and a[i] == x:\n        return i\n    # If x is greater than all the elements in the list, return the length of the list\n    elif i == len(a):\n        return len(a)\n    # If x is smaller than the first element in the list, return 0\n    elif x < a[0]:\n        return 0\n    # If x is between two elements in the list, return the index of the right element\n    else:\n        return i+1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'[ab]{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w{3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w{2}b\\w{2}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\1{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    result = re.findall(pattern, text)\n    if result:\n        print(f'The text \"{text}\" contains the pattern \"{pattern}\"')\n    else:\n        print(f'The text \"{text}\" does not contain the pattern \"{pattern}\"')"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Converting the given list to tuple\n    list_tuple = tuple(test_list)\n\n    # Adding the given string to the tuple\n    new_tuple = (test_str,) + list_tuple\n\n    # Returning the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_str + test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string into a list of characters\n    char_list = list(test_str)\n    # Create a new empty tuple\n    new_tuple = ()\n    # Loop through each character in the list and add it to the new tuple\n    for char in char_list:\n        new_tuple = new_tuple + (char,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string into a single string\n    concat_str = test_str.join(test_list)\n    # Convert the concatenated string into a tuple\n    new_tuple = tuple(concat_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + str(i) for i in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = []\n    for i in range(len(test_str)):\n        new_tuple_list.append(test_list[i])\n    new_tuple = tuple(new_tuple_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list of values to be included in the new tuple.\n    test_str (str): A string of characters to be included in the new tuple.\n\n    Returns:\n    A tuple containing the concatenation of `test_list` and `test_str`.\n    \"\"\"\n    return tuple(test_list + [ord(char) for char in test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the two lists into a single list\n    combined_list = list(test_list) + [test_str]\n    # Convert the list into a tuple\n    new_tuple = tuple(combined_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # initialize a variable to store the result\n    result = True\n\n    # loop through each number in the list\n    for num in nums:\n\n        # if the current number is odd, set the result to False and break out of the loop\n        if num % 2!= 0:\n            result = False\n            break\n\n        # if the current number is even and its index is even, check if the next number is also even\n        if num % 2 == 0 and nums.index(num) % 2 == 0:\n\n            # if the next number is odd, set the result to False and break out of the loop\n            if nums[nums.index(num) + 1] % 2!= 0:\n                result = False\n                break\n\n    # return the result\n    return result"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([x for x in nums[i:] if x % 2 == 0]) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    even_indices = []\n    odd_indices = []\n\n    for i, num in enumerate(nums):\n        if i % 2 == 0:\n            even_indices.append(i)\n        else:\n            odd_indices.append(i)\n\n    for index in even_indices:\n        if not any(num % 2 == 0 for num in nums[even_indices[0]:index + 1]):\n            return False\n\n    for index in odd_indices:\n        if not any(num % 2 == 0 for num in nums[odd_indices[0]:index + 1]):\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # Check if the list is empty\n    if not nums:\n        return True\n    \n    # Initialize a variable to store the length of the first even number\n    first_even_len = 0\n    \n    # Iterate through the list to find the first even number and its length\n    for num in nums:\n        if num % 2 == 0:\n            first_even_len = len(str(num))\n            break\n    \n    # Iterate through the list again to check if the even numbers contain even numbers\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if i // 2 >= first_even_len:\n                return False\n    \n    # If all even numbers contain even numbers, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            for j in range(i, len(nums)):\n                if nums[j] % 2 == 0:\n                    if j - i == 0:\n                        return True\n                    elif j - i == 1:\n                        return False\n                    else:\n                        return \"Invalid input\"\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums if num % 2 == 0 and num == nums[i]]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and not nums[i]:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_indices = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_indices.append(i)\n    for index in even_indices:\n        count = 0\n        for num in nums[index:]:\n            if num % 2 == 0:\n                count += 1\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result_list.extend(remove_nested(item))\n        else:\n            result_list.append(item)\n    return result_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_list.append(sub_item)\n        else:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple and recursively removes nested tuples from it.\n    '''\n    # if the given tuple is empty, return the tuple as is\n    if not test_tup:\n        return test_tup\n    \n    # if the given tuple has only one element, return the element\n    elif len(test_tup) == 1:\n        return test_tup[0]\n    \n    # if the given tuple has more than one element, iterate through each element\n    else:\n        new_tup = []\n        for elem in test_tup:\n            # if the element is a tuple, recursively remove nested tuples and add them to a new list\n            if isinstance(elem, tuple):\n                new_tup.extend(remove_nested(elem))\n            # if the element is not a tuple, add it to the new list\n            else:\n                new_tup.append(elem)\n        return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create an empty list to store the final result\n    final_list = []\n    # Loop through each element in the input tuple\n    for elem in test_tup:\n        # Check if the element is a tuple\n        if isinstance(elem, tuple):\n            # If it is a tuple, recursively call the function to remove the tuples\n            nested_list = remove_nested(elem)\n            # Loop through each element in the nested tuple and add it to the final list\n            for nested_elem in nested_list:\n                final_list.append(nested_elem)\n        else:\n            # If it is not a tuple, append it to the final list\n            final_list.append(elem)\n    # Return the final list\n    return final_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # remove tuples from the tuple\n    while isinstance(test_tup, tuple):\n        test_tup = test_tup[0]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes all nested tuples.\n    '''\n    result_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result_list.extend(remove_nested(item))\n        else:\n            result_list.append(item)\n    return result_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            new_tup.extend(elem)\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        return tuple(remove_nested(x) for x in test_tup)\n    else:\n        return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n        elif isinstance(item, str):\n            count += 0\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for sub_list in input_list:\n        if isinstance(sub_list, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n    return count "
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the first element greater than or equal to x\n    i = bisect_left(arr, x)\n    # Find the index of the last element less than x\n    j = bisect_right(arr, x) - 1\n    # Return the index of the last element less than x\n    return j"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the left and right pointers of the array\n    left = 0\n    right = len(arr)-1\n    # Initialize the last position to -1\n    last_position = -1\n    \n    # Loop while the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the midpoint of the array\n        mid = (left + right) // 2\n        # If the midpoint element is equal to the target element\n        if arr[mid] == x:\n            # Update the last position to mid\n            last_position = mid\n            # Search to the left of the midpoint for the last occurrence of x\n            left = mid + 1\n        # If the midpoint element is greater than the target element\n        elif arr[mid] > x:\n            # Update the right pointer to mid-1\n            right = mid - 1\n        # If the midpoint element is less than the target element\n        else:\n            # Update the left pointer to mid+1\n            left = mid + 1\n    \n    # Return the last position of the target element\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position as -1\n    last_position = -1\n    \n    # Iterate through the array from the first element to the last one\n    for i in range(len(arr)):\n        # If the current element is equal to the searched element, update the last position\n        if arr[i] == x:\n            last_position = i\n    \n    # Return the last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr)-1\n    while left<=right:\n        mid = (left+right)//2\n        if arr[mid]==x:\n            left = mid+1\n        elif arr[mid]<x:\n            left = mid+1\n        else:\n            right = mid-1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the last occurrence of x\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element x in a sorted array arr.\n\n    Parameters:\n    - arr (list): a sorted array\n    - x (any): the element to search for\n\n    Returns:\n    - int: the index of the last occurrence of x in arr, or -1 if x is not found.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i if i >= 0 else -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\b[ab]\\w+b\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    \"\"\"\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<![a-zA-Z])[a-zA-Z]+(?=b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    sum = 0 \n    for i in range(1, n+1, 2): \n        sum += i \n    return sum "
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum variable\n    total = 0\n\n    # loop through the range of numbers\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the number to the total\n            total += i\n\n    # return the total\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = int(input(\"Enter lower limit: \")), int(input(\"Enter upper limit: \"))\n    s = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            s += i\n    print(\"Sum of odd natural numbers between\", l, \"and\", r, \"is\", s)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two integer parameters l and r which represent the lower and upper limit of the range.\n    It then returns the sum of all odd natural numbers within this range.\n    '''\n    total = 0\n    for num in range(l, r+1, 2):\n        total += num\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, 0, -1):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, `l` and `r`, which specify the range of odd natural numbers to be summed.\n    It then calculates the sum of all odd natural numbers within this range using a for loop and an if statement.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for num in arr:  \n        total += num  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize a variable to store the sum of the array elements\n    sum = 0\n    \n    # Iterate over the array elements and add them to the sum variable\n    for num in arr:\n        sum += num\n        \n    # Return the sum of the array elements\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:  \n        total += i  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates the bits of a given number n to the left by d bits.\n    \"\"\"\n    # Compute the shift amount by dividing d by the width of the number\n    shift_amount = d // 32\n    \n    # Extract the last shift_amount bits of n\n    last_shifted_bits = n & ((1 << shift_amount) - 1)\n    \n    # Shift the bits of n to the right by shift_amount\n    n >>= shift_amount\n    \n    # Shift the shifted bits to the left by d % 32\n    n <<= d % 32\n    \n    # Or the last shifted bits to the rotated bits\n    return n | last_shifted_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = (1 << d) - 1  # mask to keep only the d least significant bits\n    rotated = (n << d) | (n >> (32 - d))  # rotate the bits to the left by d bits\n    return rotated & mask  # keep only the d least significant bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n\n    # Convert decimal to binary representation of the input number\n    bin_n = bin(n)[2:]\n\n    # Pad the binary representation with leading zeros\n    if len(bin_n) < 32:\n        bin_n = '0' * (32 - len(bin_n)) + bin_n\n\n    # Calculate the number of rotations required\n    rotations = d % 32\n\n    # Perform the rotations\n    new_bin = bin_n[-rotations:] + bin_n[:-rotations]\n\n    # Convert the new binary representation to decimal and return the result\n    return int(new_bin, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Find the number of bits required to represent n\n    bits = len(bin(n)[2:])\n\n    # Calculate the number of bits to rotate left\n    rot = bits - d\n\n    # If d is greater than or equal to the number of bits required to represent n, we don't need to rotate\n    if d >= rot:\n        return n\n\n    # Find the mask that will be applied to the number to get a left rotation of d bits\n    mask = 0\n    for i in range(d):\n        mask |= 1\n        mask <<= 1\n\n    # Apply the mask to the number and return the result\n    return (n & mask) | ((n >> rot) & (~mask))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    # convert n to binary string\n    binary_string = bin(n)[2:]\n    # get number of bits in binary string\n    num_bits = len(binary_string)\n    # calculate new left rotation position\n    new_left_rotation = (num_bits - d) % num_bits\n    # calculate new right rotation position\n    new_right_rotation = num_bits - new_left_rotation - 1\n    # calculate new binary string after left rotation\n    new_binary_string = binary_string[new_left_rotation:] + binary_string[:new_left_rotation]\n    # convert binary string to decimal\n    new_number = int(new_binary_string, 2)\n    return new_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    # rotate left d bits using bitwise operations\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff  # the & 0xffffffff is to ensure that the result is always 32 bits wide"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the given number to binary string\n    num_bin = bin(n)[2:]\n\n    # Pad the binary string with 0's to make it 32 bits\n    num_bin = '0'*(32 - len(num_bin)) + num_bin\n\n    # Get the left shift bits of the binary string and convert them to an integer\n    left_shift_bits = int(num_bin[:d], 2)\n\n    # Get the right shift bits of the binary string and convert them to an integer\n    right_shift_bits = int(num_bin[d:], 2)\n\n    # Rotate left the right shift bits by left shift bits and concatenate them with the left shift bits\n    rotated_bits = (right_shift_bits << left_shift_bits) | (left_shift_bits << (32 - left_shift_bits))\n\n    # Convert the rotated bits to binary string\n    rotated_bin = bin(rotated_bits)[2:]\n\n    # Pad the rotated binary string with 0's to make it 32 bits\n    rotated_bin = '0'*(32 - len(rotated_bin)) + rotated_bin\n\n    # Convert the binary string to an integer\n    rotated_num = int(rotated_bin, 2)\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to a binary string\n    binary_str = bin(n)[2:]\n    # Pad the binary string with leading zeros\n    binary_str = \"0\"*(32-len(binary_str)) + binary_str\n    \n    # Rotate the binary string by d bits\n    rotated_binary_str = binary_str[-d:] + binary_str[:-d]\n    \n    # Convert the rotated binary string back to an integer\n    rotated_num = int(rotated_binary_str, 2)\n    \n    # Return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n\n    # Convert number to binary string\n    binary_str = bin(n)[2:]\n\n    # Get number of digits in binary string\n    num_digits = len(binary_str)\n\n    # Check if d is within range of number of digits in binary string\n    if d > num_digits:\n        d = d % num_digits\n\n    # Calculate the number of bits to be shifted\n    shift = d % num_digits\n\n    # Add leading zeroes to binary string\n    binary_str = '0' * shift + binary_str\n\n    # Convert binary string to decimal number\n    decimal_num = int(binary_str, 2)\n\n    # Rotate the bits left\n    rotated_num = (decimal_num >> shift) | (decimal_num << (32 - shift))\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert n to binary format\n    bin_n = bin(n)[2:]\n\n    # Get number of bits in binary format of n\n    n_bits = len(bin_n)\n\n    # Add zeroes at the beginning to make d-bit binary format\n    d_bits = '0'*(d-n_bits) + bin_n\n\n    # Convert d-bit binary format to an integer\n    d_int = int(d_bits, 2)\n\n    # Perform left rotation and convert back to binary format\n    rotated_bits = (d_int << n_bits) | (n & ((1 << n_bits) - 1))\n    rotated_bin = bin(rotated_bits)[2:]\n\n    # Convert rotated binary format back to an integer\n    rotated_int = int(rotated_bin, 2)\n\n    # Return rotated integer\n    return rotated_int"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regex to remove all whitespaces from the string\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    pattern = r'\\s+'\n    text = re.sub(pattern, '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define a regular expression pattern to match all whitespace characters\n    pattern = r'\\s+'\n    # Use the `sub()` method to replace all occurrences of whitespace characters with an empty string\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function counts the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n\n    # check if all numbers are equal\n    if x == y == z:\n        count += 1\n\n    # check if any two numbers are equal\n    if x == y or x == z or y == z:\n        count += 1\n\n    # check if any three numbers are equal\n    if x == y or x == z or y == z or x == z:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(3):\n        for j in range(i+1,3):\n            for k in range(j+1,3):\n                if x == y == z == i:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z or x == z!= y or y == z!= x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    elif x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    # check if all three numbers are same\n    if x == y == z:\n        count += 1\n    # check if there are any pairs of numbers that are same\n    elif x == y or x == z or y == z:\n        count += 1\n    # check if there are any triples of numbers that are same\n    elif x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        if i==y or i==z or i==x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    # initialize count variable to 0\n    count = 0\n    \n    # loop through the three numbers and check if they are equal\n    for num in [x,y,z]:\n        if num == x:\n            count += 1\n        elif num == y:\n            count += 1\n        elif num == z:\n            count += 1\n    \n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    # Check if the array is already sorted\n    if len(arr) == 1:\n        return 0\n    \n    # Initialize the number of rotations to 0\n    count = 0\n    \n    # Initialize the first and last elements of the array\n    first = arr[0]\n    last = arr[-1]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)-1):\n        # If the current element is greater than the previous element\n        if arr[i] > arr[i-1]:\n            # Increment the count of rotations by 1\n            count += 1\n            \n            # If the current element is greater than the last element, update it to the current element\n            if arr[i] > last:\n                last = arr[i]\n    \n    # If the last element is not greater than the first element, then it means that the array is already sorted\n    if last <= first:\n        return 0\n    \n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the largest element in the array\n    max_elem = max(arr)\n    # Traverse the array from the largest element to the smallest element\n    for i in range(max_elem, -1, -1):\n        # Count the number of occurrences of the current element in the array\n        count = 0\n        for j in range(n):\n            if arr[j] == i:\n                count += 1\n        # If there are odd number of occurrences, we need to rotate the array to generate a sorted array\n        if count % 2!= 0:\n            # Find the smallest element greater than the current element in the array\n            smallest = min(arr[j] for j in range(n) if arr[j] > i)\n            # Swap the current element with the smallest element\n            arr[arr.index(i)] = smallest\n            # Increment the count of rotations required\n            count += 1\n        # Count the number of elements greater than the current element in the array\n        count_greater = 0\n        for j in range(n):\n            if arr[j] > i:\n                count_greater += 1\n        # If there are more elements greater than the current element, we need to rotate the array to generate a sorted array\n        if count_greater > 1:\n            # Find the smallest element greater than the current element in the array\n            smallest = min(arr[j] for j in range(n) if arr[j] > i)\n            # Swap the current element with the smallest element\n            arr[arr.index(i)] = smallest\n            # Increment the count of rotations required\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        # Find the maximum element in the sub-array to the left of index i\n        left = i + 1\n        while left < n and arr[left] > arr[i]:\n            left += 1\n\n        # Find the minimum element in the sub-array to the right of index i\n        right = i - 1\n        while right >= 0 and arr[right] < arr[i]:\n            right -= 1\n\n        # If both left and right indices are not crossed, it means that\n        # the maximum and minimum element in the sub-array to the left and right of i are same.\n        if left >= right:\n            count += n - left\n\n        # If the maximum element in the sub-array to the left of i is greater than the element at index i,\n        # then there is a rotation required to generate a sorted array.\n        elif arr[left] > arr[i]:\n            count += n - left - 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            return i\n\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    while n > 1:\n        if arr[0] < arr[n - 1]:\n            n -= 1\n        else:\n            arr[0], arr[n - 1] = arr[n - 1], arr[0]\n            count += 1\n            n -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    i = 0\n    while i < n-1:\n        if arr[i] > arr[i+1]:\n            break\n        i += 1\n    if i == n-1:\n        return 0\n    k = i + 1\n    while k < n:\n        if arr[k] < arr[i]:\n            break\n        k += 1\n    return k - i"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array of integers and returns the minimum number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n\n    # If the array is already sorted, return 0\n    if all(arr[i] <= arr[i + 1] for i in range(n - 1)):\n        return 0\n\n    # If the array is already sorted in reverse, return 0\n    if all(arr[i] >= arr[i + 1] for i in range(n - 1)):\n        return 0\n\n    # Find the smallest element in the array\n    min_element = min(arr)\n\n    # Find the smallest index of the smallest element in the array\n    smallest_index = arr.index(min_element)\n\n    # Find the largest element in the array\n    max_element = max(arr)\n\n    # Find the largest index of the largest element in the array\n    largest_index = arr.index(max_element)\n\n    # If the smallest element is greater than the largest element, return 0\n    if min_element > max_element:\n        return 0\n\n    # If the array is already sorted after all rotations, return 0\n    if all(arr[i] <= arr[i + 1] for i in range(n - 1)):\n        return 0\n\n    # If the array is already sorted in reverse after all rotations, return 0\n    if all(arr[i] >= arr[i + 1] for i in range(n - 1)):\n        return 0\n\n    # Find the rotation count\n    rotation_count = 0\n\n    # Find the rotation point\n    rotation_point = -1\n\n    # Check if the array can be sorted by swapping the smallest element with the largest element\n    if arr[smallest_index] > arr[largest_index]:\n        rotation_point = smallest_index\n        rotation_count = 1\n\n    # If the rotation point is not found, try swapping the smallest element with the second smallest element\n    if rotation_point == -1:\n        rotation_count = 1\n        rotation_point = smallest_index\n        if arr[smallest_index] > arr[smallest_index + 1]:\n            rotation_point = smallest_index + 1\n\n    # Check if the array can be sorted by swapping the smallest element with the second smallest element\n    if arr[smallest_index] > arr[rotation_point]:\n        rotation_count = 1\n\n    # Count the remaining rotations\n    remaining_rotations = 0\n    for i in range(rotation_point, n - 1):\n        if arr[i] < arr[i + 1]:\n            remaining_rotations += 1\n\n    # Return the minimum number of rotations required to generate the sorted array\n    return rotation_count + remaining_rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if the array is sorted\n    if n > 1 and arr[0] <= arr[1]:\n        # If the array is already sorted, return 0 rotations\n        return 0\n    # Initialize the count of rotations as 0\n    rot_count = 0\n    # Initialize two pointers, left and right, at the beginning and end of the array, respectively\n    left = 0\n    right = n - 1\n    # While the left pointer is less than the right pointer\n    while left < right:\n        # Swap the elements at the left and right pointers\n        arr[left], arr[right] = arr[right], arr[left]\n        # Increment the count of rotations\n        rot_count += 1\n        # If the array is already sorted, return the count of rotations\n        if left == 0 and arr[right] >= arr[left]:\n            return rot_count\n        # If the array is not sorted yet, move the left pointer to the right\n        if arr[left] <= arr[right]:\n            left += 1\n        # If the array is not sorted yet, move the right pointer to the left\n        else:\n            right -= 1\n    # If the while loop completes without returning the count of rotations, then the array is not sorted\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    :param arr: the input array\n    :return: the number of rotations required to generate a sorted array\n    \"\"\"\n    n = len(arr)\n    count = 0\n    # Traverse the array twice\n    for i in range(n):\n        # If the element at i is greater than or equal to n-i-1 then the array is already sorted\n        if arr[i] >= n - i - 1:\n            continue\n        # Initialize the index j of the smallest element in the remaining array\n        j = i + 1\n        # Traverse the remaining array\n        while j < n:\n            # If the current element is greater than the element at index j then move the index j\n            if arr[j] > arr[i]:\n                break\n            j += 1\n        # If the element at index j is greater than or equal to n-i-1 then we have rotated the array\n        if arr[j] >= n - i - 1:\n            count += 1\n            i = j - 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    a, b = 0, n\n    while a <= b:\n        mid = (a + b) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            a = mid + 1\n        else:\n            b = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # First, check if n is negative or zero\n    if n <= 0:\n        return False\n    \n    # Now, check if the number is a perfect square or not\n    # We can do this by repeatedly dividing the square root of n by 2, and comparing it to the original n\n    # We can use the fact that the square of any number is the sum of the squares of its digits\n    sqrt_n = int(n ** 0.5)\n    while sqrt_n ** 2!= n:\n        sqrt_n = (sqrt_n + n // sqrt_n) // 2\n    \n    # If the square root of n is an integer, it means that n is a perfect square\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return False\n    # check if n is a perfect square\n    left, right = 0, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n\n    # loop until square root of n is less than 1\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return True\n            break\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Convert the number to a float to avoid integer division\n    n = float(n)\n    # Check if the number is an integer\n    if n.is_integer():\n        return False\n    # Check if the number is a perfect square by checking the square root of the number\n    sqrt_n = int(n ** 0.5)\n    # Check if the square root is an integer and if it is less than or equal to the original number\n    if sqrt_n ** 2 == n:\n        return True\n    # If none of the above conditions are met, the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    -----------\n    n : int\n        A positive integer.\n\n    Returns:\n    --------\n    bool\n        True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n\n    # Check if the given number is negative\n    if n < 0:\n        return False\n\n    # Calculate the square root of the given number\n    sqrt_n = math.sqrt(n)\n\n    # Check if the square root of the given number is an integer\n    if sqrt_n % 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is a perfect square, else False.\n    \"\"\"\n    import math\n    \"\"\"\n    Using the fact that a perfect square can be expressed as the sum of its squares, we can check if the given number is a perfect square or not.\n    If the number is not a perfect square, then we need to check the difference between the square root of the number and the number itself.\n    \"\"\"\n    sqrt_n = math.sqrt(n)\n    if sqrt_n**2 == n:\n        return True\n    else:\n        diff = sqrt_n - n\n        if diff**2 == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    if n < 0:\n        return False\n    # check if the number is a square\n    for i in range(int(n**0.5)+1):\n        if n**2 == i**2:\n            return True\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list as an argument and checks whether the product of numbers in the list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return \"Product is even\"\n    else: \n        return \"Product is odd\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    # Initialize variables to store the product and its parity\n    product = 1\n    parity = 1\n\n    # Iterate through the array and update the product and its parity\n    for num in arr:\n        product *= num\n        parity *= -1 if num % 2!= 0 else 1\n\n    # Check if the product is even\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    # Initialize a variable to store the product of the first two numbers in the list\n    product = arr[0] * arr[1]\n\n    # Iterate over the remaining numbers in the list\n    for i in range(2, len(arr)):\n        # Update the product variable with the current number multiplied by the previous product\n        product *= arr[i]\n\n        # Check if the product is even\n        if product % 2 == 0:\n            # If it is, return True\n            return True\n\n    # If no even products were found, return False\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # initialize variables\n    product = 1\n    is_even = True\n\n    # iterate over the list\n    for num in arr: \n        product *= num \n\n    # check if the product is even or not\n    if product % 2 == 0: \n        is_even = True\n    else: \n        is_even = False\n\n    # return the result\n    return is_even"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in the list of lists\n    whose sum of elements is the highest. If there are multiple lists in the input list\n    whose sum of elements is the highest, it returns the first such list.\n    '''\n    # Step 1: Calculate the sum of each sublist in the input list\n    sublist_sum = [sum(sublist) for sublist in lists]\n    # Step 2: Find the index of the maximum sublist sum\n    max_sum_index = sublist_sum.index(max(sublist_sum))\n    # Step 3: Create a new list containing only the sublist with the maximum sum\n    max_sublist = lists[max_sum_index]\n    # Step 4: Return the new list as output\n    return max_sublist\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and the current sum of the current list\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Loop through each element in the list\n        for num in lst:\n            # Add the element to the current sum\n            current_sum += num\n\n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n        # Reset the current sum to 0\n        current_sum = 0\n\n    # Return the list whose sum of elements is the maximum\n    return lists[lists.index(max(lists, key=sum))]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = []\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_lists = lst\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Get the maximum sum\n    max_sum = float('-inf')\n\n    # Loop through all possible combinations of lists\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            if i!= j:\n                # Calculate the sum of elements\n                sum_elements = lists[i][0] + lists[j][0]\n\n                # If the sum is greater than the maximum sum, update the maximum sum and the corresponding list\n                if sum_elements > max_sum:\n                    max_sum = sum_elements\n                    max_list = [lists[i][0], lists[j][0]]\n\n    # Return the maximum list and its sum\n    return max_list, max_sum"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            sub_list = lists[i][:j] + lists[i][j+1:]\n            sub_sum = sum(sub_list)\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n                max_list = sub_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')  # initialize max_sum to negative infinity\n    max_list = []\n    for sublist in lists:\n        # calculate the sum of the elements in this sublist\n        sublist_sum = sum(sublist)\n        # if the sum is greater than max_sum, update max_sum and max_list\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    # return the list with the highest sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables\n    max_list = None\n    max_sum = 0\n\n    # Loop through the list of lists\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n        # Check if the sum is greater than the current maximum\n        if sublist_sum > max_sum:\n            # If so, update the maximum and maximum list\n            max_sum = sublist_sum\n            max_list = sublist\n\n    # Return the maximum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [(lists[i][j], i, j)]\n            elif lists[i][j] == max_sum:\n                max_list.append((lists[i][j], i, j))\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize a variable to store the maximum sum of all sublists\n    max_sum = float('-inf')\n\n    # loop through each sublist in the list of lists\n    for sublist in lists:\n        # initialize a variable to store the current sum of the sublist\n        current_sum = 0\n\n        # loop through each element in the sublist and add it to the current sum\n        for element in sublist:\n            current_sum += element\n\n        # check if the current sum is greater than the maximum sum so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # create a list of tuples containing the sublist and its sum\n    sublist_sum_tuples = [(sublist, current_sum) for sublist in lists for current_sum in sublist]\n\n    # sort the list of tuples by the sum in descending order\n    sorted_sublist_sum_tuples = sorted(sublist_sum_tuples, key=lambda x: x[1], reverse=True)\n\n    # return the first sublist from the sorted list of tuples\n    return sorted_sublist_sum_tuples[0][0]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            sublist = [lists[i][k] for k in range(len(lists[i])) if k!= j]\n            sublist.append(lists[i][j])\n            sublist_sum = sum(sublist)\n            if sublist_sum > max_sum:\n                max_sum = sublist_sum\n                max_list = sublist\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start_index = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            start_index = i + 1\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run, test_str[start_index - max_run: start_index]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    i = 0\n\n    while i < len(test_str):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n        i += 1\n\n    if curr_run > max_run:\n        max_run = curr_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables for the maximum run and the current run\n    max_run = 0\n    current_run = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n\n        # If the current character is uppercase\n        if test_str[i].isupper():\n\n            # If the current run is greater than the maximum run\n            if current_run > max_run:\n                max_run = current_run\n\n            # Reset the current run to 0\n            current_run = 0\n\n        # Otherwise, add the current character to the current run\n        else:\n            current_run += 1\n\n    # If the current run is greater than the maximum run\n    if current_run > max_run:\n        max_run = current_run\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    max_run = 0\n    start = 0\n\n    for i in range(n):\n        if test_str[i].isupper():\n            if i == n - 1 or not test_str[i+1].isupper():\n                max_run = max(max_run, i - start + 1)\n                start = i\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    prev_char = None\n    max_count = 0\n    max_start = 0\n\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            if prev_char is None or not prev_char.isupper():\n                count += 1\n            else:\n                count = 1\n            if count > max_count:\n                max_count = count\n                max_start = i\n            prev_char = char\n        else:\n            count = 0\n            prev_char = None\n\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_count = 1\n    max_start = 0\n    current_start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = current_start\n        else:\n            count = 1\n            current_start = i + 1\n\n    return test_str[max_start:max_start+max_count]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = ''\n    # iterate through the string\n    for char in test_str:\n        # if the current character is uppercase\n        if char.isupper():\n            # if the current run is longer than the current maximum run\n            if current_run > max_run:\n                # update the maximum run\n                max_run = current_run\n            # reset the current run and current character\n            current_run = 1\n            current_char = char\n        # if the current character is lowercase\n        else:\n            # increment the current run\n            current_run += 1\n    # if the current run is longer than the maximum run\n    if current_run > max_run:\n        # update the maximum run\n        max_run = current_run\n    # return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n    \n    # iterate through the string\n    for char in test_str:\n        \n        # if the character is uppercase, increment the uppercase count\n        if char.isupper():\n            uppercase_count += 1\n            \n            # if the uppercase count is greater than the current run, update the max run\n            if uppercase_count > current_run:\n                max_run = current_run\n                current_run = uppercase_count\n                \n        # if the character is not uppercase, reset the uppercase count\n        else:\n            current_run = 0\n            \n    # return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1:\n                max_run += 1\n            else:\n                if not test_str[i+1].isupper():\n                    max_run += 1\n        else:\n            start = i\n            max_run = 1\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes in a list of numbers and returns the first odd number in the list.\n    If there are no odd numbers in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function checks if the given tuples contain the k or not.\n    \"\"\"\n    # Check if the length of the tuples is greater than K\n    if len(test_tup) > K:\n        # Return False if the length of the tuples is greater than K\n        return False\n    \n    # Check if the length of the tuples is equal to K\n    elif len(test_tup) == K:\n        # Check if all elements of the tuples are equal to K\n        if all(x == K for x in test_tup):\n            # Return True if all elements of the tuples are equal to K\n            return True\n    \n    # If the length of the tuples is less than K\n    else:\n        # Check if all elements of the tuples are equal to K\n        if all(x == K for x in test_tup):\n            # Return True if all elements of the tuples are equal to K\n            return True\n    \n    # If the length of the tuples is not equal to K, return False\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Checking if all tuples contain K or not\n    if all(i in K for tup in test_tup for i in tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(\"The K is present in the given tuples.\")\n    else:\n        print(\"The K is not present in the given tuples.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        if test_tup[K-1] in test_tup[:K-1]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(f\"The element {i} of the first tuple is smaller than its corresponding element in the second tuple.\")\n            return\n    \n    print(\"All elements in the second tuple are smaller than or equal to their corresponding elements in the first tuple.\")\n    return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The length of the two tuples must be equal.\"\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"The second tuple contains an element that is not smaller than the corresponding element in the first tuple.\"\n\n    return \"All elements of the second tuple are smaller than the corresponding elements in the first tuple.\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]