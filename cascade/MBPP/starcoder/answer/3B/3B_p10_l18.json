[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            common_elements.append(test_tup1[i])\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common_elements.append(i)\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in shared_elements:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the shared elements\n    common_elements = set1.intersection(set2)\n    # convert back to tuples and return\n    return tuple(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared = []\n    # iterate over the two lists and compare the elements\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared.append(elem)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Get the sets of elements in both lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n    # Convert the intersection set to a list\n    shared_list = list(shared_set)\n    # Return the list of shared elements\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    # Loop through the two lists and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n == 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than or equal to 1\n    if n <= 1:\n        return True\n    # check if n is divisible by 2\n    elif n % 2 == 0:\n        return False\n    # check odd numbers from 3 to the square root of n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sieve_of_eratosthenes(limit):\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if primes[i]:\n            for j in range(i*i, limit + 1, i):\n                primes[j] = False\n    \n    return primes\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    if n < 2:\n        return False\n    \n    limit = int(math.sqrt(n)) + 1\n    primes = sieve_of_eratosthenes(limit)\n    \n    if primes[n]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = hq.nlargest(n, nums)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n and add the first n elements of the list to it\n    heap = hq.nsmallest(n, nums)\n    \n    # Remove and return the largest element from the min heap\n    for _ in range(n):\n        heapq.heappop(heap)\n        \n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of size n\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n\n    # pop the top n elements from the heap and return them in a list\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list into a min heap\n    heap = [-num for num in nums]\n    hq.heapify(heap)\n    # return the n largest integers from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    max_heap = [nums[i] for i in range(n)]\n    hq.heapify(max_heap)\n\n    # Extract and remove the largest elements from the heap\n    for i in range(n, len(nums)):\n        if nums[i] > max_heap[0]:\n            max_heap[0] = nums[i]\n            hq.heapify(max_heap)\n        else:\n            # Since the elements are in descending order, we can exit the loop once the n largest elements have been found\n            break\n\n    # Convert the min heap back to a list and return it\n    return [max_heap[i] for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n\n    max_heap = hq.nlargest(n, nums)\n\n    # Extract the largest n elements from the heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(max_heap[0])\n        hq.heappop(max_heap)\n\n    # Return the largest n elements in descending order\n    return largest_nums\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function finds the n largest integers from a given list of numbers,\n    returned in descending order.\n    \"\"\"\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return [-x for x in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    largest = []\n    for num in nums:\n        hq.heappush(largest, num)\n        if len(largest) > n:\n            hq.heappop(largest)\n    return largest"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1)!= 0:\n        if x & 1 == 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0: #checking if x is a power of two\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0 and (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        if x & (x - 1)!= 0:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert x to binary representation and check if it contains only one bit set\n    binary_representation = bin(x)[2:]\n    if len(binary_representation) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # if x has only one bit set, then x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2:\n        return False\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return is_Power_Of_Two(x >> 1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0: \n        return \"The number cannot be negative.\"\n    count = 0\n    while x > 1: \n        if x % 2 == 1: \n            count += 1\n        x = x // 2\n    if count == 1: \n        return \"The numbers differ at one bit position only.\"\n    else: \n        return \"The numbers do not differ at one bit position.\""
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Check if the first bit is set to 1 in the binary representation of the number.\n    if bin(x)[2] == '1':\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0: # check if x has only one set bit\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    char_long_words = []\n\n    for word in words:\n        if len(word) >= 4:\n            char_long_words.append(word)\n\n    return char_long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Compile a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    \n    # Use the search() method of the pattern to find all the words that match the pattern\n    matches = pattern.findall(text)\n    \n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # remove all special characters and numbers from the text string\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # split the text into individual words\n    words = text.split()\n\n    # initialize an empty list to store the words with at least 4 characters\n    long_words = []\n\n    # loop through the list of words\n    for word in words:\n        # check if the length of the word is at least 4\n        if len(word) >= 4:\n            # if the length is at least 4, add the word to the list\n            long_words.append(word)\n\n    # return the list of words with at least 4 characters\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Splitting the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Finding all words which are at least 4 characters long\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    \n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize two pointers: i and j, pointing to the first and last characters of the string, respectively\n    i = 0\n    j = n - 1\n    count = 0\n    \n    while i < j:\n        # If the characters at i and j are not equal, return the current count of rotations\n        if str[i]!= str[j]:\n            return count\n        \n        # Move the pointers towards each other\n        i += 1\n        j -= 1\n        \n        # Increment the count of rotations\n        count += 1\n    \n    # If the characters at i and j are equal, return the current count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Convert the given string to lowercase\n    str = str.lower()\n\n    # Initialize the length of the string\n    n = len(str)\n\n    # Initialize the minimum number of rotations\n    min_rotations = 0\n\n    # Loop through all possible substrings\n    for i in range(n):\n        # Check if the substring is equal to the string\n        if str[i:n] == str:\n            # If it is, increment the minimum number of rotations\n            min_rotations += 1\n        # Check if the substring is greater than the string\n        elif str[i:n] > str:\n            # If it is, break the loop as we can't rotate the substring\n            break\n        else:\n            # If it's not, rotate the substring by 1 character\n            str = str[:i] + str[i+1:n] + str[i]\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Initialize variables for length of string and count of rotations\n    length = len(str)\n    count = 0\n\n    # Loop through all possible rotations of the string\n    for i in range(length):\n        # Check if the current rotation is a valid rotation\n        if is_valid_rotation(str, length, i):\n            count += 1\n\n    # Return the minimum number of rotations required\n    return count\n\ndef is_valid_rotation(str, length, i):\n    '''\n    Helper function to check if a given rotation is valid.\n    '''\n    # Initialize variables for first character of string, last character of string, and last character of the rotation\n    first_char = str[0]\n    last_char = str[length-1]\n    rotated_char = str[i]\n\n    # Check if the rotation is a palindrome\n    if first_char == rotated_char and last_char == rotated_char:\n        return True\n    else:\n        return False"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n    # Initialize a list to store the minimum rotations required\n    min_rot = []\n    # Loop through all possible rotations of the string\n    for i in range(n):\n        # Initialize two pointers, one for each end of the string\n        left = i\n        right = n - 1 - i\n        # Initialize two variables, one for the length of the substrings\n        len1 = 0\n        len2 = 0\n        # Keep moving the pointers towards the middle until they meet in the middle\n        while left < right:\n            # Calculate the length of the substrings between the pointers\n            len1 += right - left\n            len2 += right - left\n            # Move the pointer towards the middle until they meet in the middle\n            left += 1\n            right -= 1\n        # Check if the length of the substrings is equal to the length of the original string\n        if len1 == n or len2 == n:\n            # If they are equal, add 1 to the minimum rotations required\n            min_rot.append(1)\n        else:\n            # If they are not equal, check which one is longer\n            if len1 > len2:\n                # If the length of the shorter substring is longer, subtract 1 from the minimum rotations required\n                min_rot.append(len1 - n)\n            else:\n                # If the length of the longer substring is longer, add 1 to the minimum rotations required\n                min_rot.append(len2 - n)\n    # Return the minimum rotations required\n    return min(min_rot)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    # Initialize the minimum number of rotations to infinity\n    minRot = float('inf')\n    # Iterate through each possible rotation of the string\n    for i in range(len(str)):\n        # Iterate through each possible rotation of the string\n        for j in range(i+1, len(str)):\n            # If the rotations are different and the lengths of the two strings are not equal, then there is a rotation of the string\n            if str[j]!= str[i] and len(str)!= len(str[i]):\n                # Calculate the minimum number of rotations required to get the same string after each rotation\n                minRot = min(minRot, find_Rotations(str[j]))\n                # Add 1 to the minimum number of rotations\n                minRot += 1\n    # If there is a rotation of the string, return its length as the minimum number of rotations required\n    if minRot!= float('inf'):\n        return minRot\n    else:\n        return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 1:\n        return 0\n    elif n == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 2\n    else:\n        for i in range(n):\n            for j in range(i+1, n):\n                if str[i] == str[j]:\n                    return 2\n                elif str[i] == str[j] and str[j] == str[0]:\n                    return 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    # Check if the string is already a single character\n    if n == 1:\n        return 0\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = n\n    # Initialize two variables to keep track of the current and previous characters in the string\n    current = str[0]\n    prev = str[-1]\n    # Iterate over the string, swapping the current and previous characters if they are different\n    for i in range(1, n-1):\n        if str[i]!= current:\n            current = str[i]\n            prev = str[i-1]\n            min_rotations = min(min_rotations, i)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Initialize a list to store the count of each character in the string\n    char_count = [0] * 26\n    for char in str:\n        char_count[ord(char) - ord('a')] += 1\n\n    # Calculate the GCD of the character counts\n    gcd = 1\n    for i in range(26):\n        if char_count[i] > 0:\n            gcd = gcd * (char_count[i] // gcd)\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n\n    # Iterate through each character in the string and calculate the required rotations\n    for i in range(26):\n        # Calculate the required rotations for the current character\n        if char_count[i] > 0:\n            # Calculate the required rotations for the current character\n            rotations = gcd // char_count[i]\n            min_rotations = min(min_rotations, rotations)\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Calculate the length of the string\n    n = len(str)\n    \n    # Initialize the minimum number of rotations to be found\n    min_rotations = float('inf')\n    \n    # Iterate through all possible rotations of the string\n    for i in range(n):\n        for j in range(i+1, n):\n            # If the rotated string is equal to the original string, increment the minimum number of rotations found\n            if str[i:j+1] == str:\n                min_rotations = min(min_rotations, j-i+1)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for i in range(n):\n        if str[i] in freq:\n            freq[str[i]] += 1\n        else:\n            freq[str[i]] = 1\n    # find the maximum frequency of any character in the string\n    max_freq = max(freq.values())\n    # create a new string with the same characters as the original string but with the max frequency\n    new_str = \"\"\n    for i in range(n):\n        if freq[str[i]] == max_freq:\n            new_str += str[i]\n    # find the minimum number of rotations required to get the same string\n    rotations = 0\n    while new_str!= str:\n        rotations += 1\n        # create a new string with the same characters as the original string but with the max frequency\n        new_str = \"\"\n        for i in range(n):\n            if freq[str[i]] == max_freq:\n                new_str += str[i]\n        # check if the new string is the same as the original string\n        if new_str == str:\n            break\n    return rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    return s.replace(ch, '')[:len(s)-2] + s.replace(ch, '')[-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0: \n        return \"\" \n    if s[0] == ch: \n        return remove_Occ(s[1:], ch) \n    if s[-1] == ch: \n        return remove_Occ(s[:-1], ch) \n    if s.count(ch) > 1: \n        return remove_Occ(s[1:-1], ch) \n    return s[:1] + s[2:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # First remove the first occurrence of the character\n    s = s.replace(ch, '')\n    # Then remove the last occurrence of the character\n    s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into a list of characters\n    s_list = list(s)\n    # Remove the first occurrence of the character\n    if s_list[0] == ch:\n        s_list.pop(0)\n    # Remove the last occurrence of the character\n    if s_list[-1] == ch:\n        s_list.pop()\n    # Convert the list of characters back to a string\n    result = ''.join(s_list)\n    # Return the result\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s == ch*2:\n        return ''\n    elif s.startswith(ch):\n        return s[1:]\n    elif s.endswith(ch):\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    # Split the string into a list of characters\n    chars = list(s)\n\n    # Initialize the index of the first and last occurrence of ch\n    index1 = index2 = -1\n\n    # Loop through the list of characters\n    for i in range(len(chars)):\n        if chars[i] == ch:\n            # If the character is the first occurrence, set the index to i\n            if index1 == -1:\n                index1 = i\n            # If the character is the second occurrence, set the index to i+1\n            elif index2 == -1:\n                index2 = i+1\n\n    # If no occurrences of ch were found, return the original string\n    if index1 == -1 and index2 == -1:\n        return s\n\n    # If only one occurrence of ch was found, remove it from the string and return\n    elif index1 == -1 or index2 == -1:\n        return ''.join(chars[index2+1:])\n\n    # If two occurrences of ch were found, remove both occurrences from the string and return\n    else:\n        return ''.join(chars[:index1]) + ''.join(chars[index2+1:])"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if len(s) < 2:\n        return s\n    \n    if s[0] == ch:\n        s = s[1:]\n    \n    if s[-1] == ch:\n        s = s[:-1]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    # initialize variables for first and last index\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    # remove first occurrence and return the modified string\n    s = s.replace(ch, \"\", first_index)\n    # remove last occurrence and return the modified string\n    s = s.replace(ch, \"\", last_index)\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Loop through each row in the matrix\n    for i in range(n):\n        # Initialize the minimum element in the row to the first element\n        min_element = M[i][0]\n        # Loop through the remaining elements in the row\n        for j in range(1, n):\n            # If the current element is smaller than the minimum element, update it\n            if M[i][j] < min_element:\n                min_element = M[i][j]\n        # If there is a minimum element in the row, swap it with the first element\n        if min_element!= M[i][0]:\n            for k in range(n):\n                # Swap the minimum element with the first element in the row\n                M[i][k], M[0][k] = M[0][k], M[i][k]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # create a list of tuples with the row sums\n    row_sums = [(row_sum(M[i]), i) for i in range(n)]\n    # sort the list of tuples by row sums in ascending order\n    row_sums.sort()\n    # create a new sorted matrix using the row sums\n    sorted_M = [[M[i][j] for i, s in row_sums if s[1] == j] for j in range(n)]\n    return sorted_M\n\n\ndef row_sum(row):\n    '''\n    Write a function to calculate the sum of a given row.\n    '''\n    return sum(row)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        # find the minimum value in the current row\n        min_val = M[i][0]\n        min_idx = 0\n        for j in range(1, cols):\n            if M[i][j] < min_val:\n                min_val = M[i][j]\n                min_idx = j\n        # swap the minimum value with the first element of the row\n        M[i][0], M[i][min_idx] = M[i][min_idx], M[i][0]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Sort the rows of the matrix\n    for i in range(n):\n        M[i] = sorted(M[i])\n    # Calculate the sum of the rows\n    row_sums = [sum(row) for row in M]\n    # Sort the matrix in ascending order of row sums\n    for i in range(n):\n        for j in range(n-i-1):\n            if row_sums[j] > row_sums[j+1]:\n                row_sums[j], row_sums[j+1] = row_sums[j+1], row_sums[j]\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the maximum sum in the row\n        max_sum = M[i][0]\n        for j in range(1, n):\n            max_sum = max(max_sum, M[i][j])\n        # Swap the maximum sum with the first element of the row\n        M[i][0], M[i][n-1] = M[i][n-1], M[i][0]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Initialize a variable to store the sum of the row\n        row_sum = 0\n        # Loop through each element in the row\n        for elem in row:\n            # Add the element to the row sum\n            row_sum += elem\n            # Append the row sum to the sorted matrix\n            sorted_matrix.append(row_sum)\n\n    # Sort the sorted matrix in ascending order\n    sorted_matrix.sort()\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n\n    # Sort the matrix based on the row sums\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # sort the matrix by row sums\n    sorted_matrix = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i] + M[j][j]:\n                # swap rows i and j\n                M[i], M[j] = M[j], M[i]\n                # reverse the submatrix in rows i+1 to n-1\n                M[i+1:n] = list(reversed(M[i+1:n]))"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the row with the maximum sum\n        max_sum = M[i][i]\n        max_row = i\n        for j in range(i+1, n):\n            if M[j][i] > max_sum:\n                max_sum = M[j][i]\n                max_row = j\n        # Swap the rows\n        M[i], M[max_row] = M[max_row], M[i]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a Python function to find the volume of a triangular prism.\n    \n    Parameters:\n    l (float): Length of the base of the prism\n    b (float): Length of the top of the prism\n    h (float): Length of the side of the prism\n    \n    Returns:\n    float: The volume of the prism\n    \"\"\"\n    area = (l * b * h) / 2\n    volume = area * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Find the volume of a triangular prism.\n\n    :param l: Length of the base of the prism.\n    :param b: Length of the height of the prism.\n    :param h: Length of the width of the prism.\n    :return: The volume of the prism.\n    \"\"\"\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n\n    Args:\n        l (float): length of the side of the triangle\n        b (float): base of the triangle\n        h (float): height of the triangle\n\n    Returns:\n        float: the volume of the triangle\n    \"\"\"\n    volume = l * b * h / 6.0\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function finds the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h  # Formula for volume of a triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h  # Use Heron's formula to compute the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in three parameters l, b, and h, which represent the lengths of the base, height, and length of the prism.\n    The function returns the volume of the prism as a floating point number.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[a-z])'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<![a-zA-Z])([a-z]+)_([a-z]+)(?!_)\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z])')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-zA-Z])_([a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z_]+[_a-z]*$'\n    match = re.match(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z])(_[a-z]+)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-zA-Z])[a-z]+(?![a-zA-Z])_'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define regular expression pattern\n    pattern = r'\\b[a-z]*_[a-z]*\\b'\n    \n    # Use regular expression match method to check if the input string matches the pattern\n    result = re.match(pattern, text)\n    \n    # Check if match was found and return true or false based on the result\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # define pattern to match lowercase letters\n    pattern = r'[a-z]+'\n\n    # check if pattern matches any string in text\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    result = ''\n    for char in string:\n        if char not in char_set:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()  # convert string to lowercase\n    set_chars = set(string)  # convert string to set to remove duplicates\n    list_chars = list(set_chars)  # convert set to list to preserve order\n    list_chars.sort()  # sort list in ascending order\n    result = []\n    for char in string:\n        if char not in list_chars:\n            result.append(char)\n    return ''.join(result)  # convert list to string and join with empty string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in string_to_remove]\n\nstring_to_remove = \"aeiou\"\nstring = \"hello world\"\nresult = str_to_list(string)\nprint(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a dictionary to store the frequency of each character in the first string\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Create a new string without the characters present in the second string\n    new_string = \"\"\n    for char in string:\n        if char not in freq_dict or freq_dict[char] <= 0:\n            new_string += char\n        else:\n            freq_dict[char] -= 1\n    \n    # Convert the new string to a list of characters and return it\n    return list(new_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    result = ''\n    for char in string:\n        if char not in char_set:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes a string as an input and returns a new string in which all the characters from the first string are removed\n    which are present in the second string.\n\n    Args:\n    string (str): The string to remove characters from.\n\n    Returns:\n    str: The new string with all the characters from the first string removed.\n\n    \"\"\"\n    char_list = list(string)\n    char_set = set(string)\n    for char in char_list:\n        if char in char_set:\n            char_list.remove(char)\n    return ''.join(char_list)\n\nNO_OF_CHARS = 256\n\nstring1 = \"This is a string which contains all the characters from 0 to 255.\"\nstring2 = \"aeiou\"\n\nnew_string = str_to_list(string1, string2)\nprint(new_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    unique_chars = set(string)\n    return [char for char in string if char not in unique_chars]\n\nstring1 = \"hello world\"\nstring2 = \"dlro wolleh\"\nresult = str_to_list(string1)\nprint(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the given string to a list of characters\n    char_list = list(string)\n    # Convert the given string to a set of characters\n    char_set = set(string)\n    # Iterate over the characters of the first string\n    for char in char_list:\n        # Check if the character is present in the second string\n        if char in char_set:\n            # If it is, remove it from the list\n            char_list.remove(char)\n    # Convert the list of characters back to a string\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    char_list = []\n    for char in string:\n        if char not in char_list:\n            char_list.append(char)\n\n    return ''.join(char_list)\n\ndef main():\n    string1 = input(\"Enter the first string: \")\n    string2 = input(\"Enter the second string: \")\n\n    result = str_to_list(string1, string2)\n    print(\"The resulting string after removing characters present in the second string: \", result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_set = set(string)\n    second_set = set(string)\n    first_set.remove(max(first_set))\n    second_set.remove(min(second_set))\n    return ''.join(list(second_set))\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the number of occurrences of each element\n    count_dict = {}\n\n    # iterate over the array\n    for num in arraynums:\n        # if the number is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # otherwise, add it to the dictionary with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # iterate over the dictionary and check if any element has a count greater than 1\n    for num, count in count_dict.items():\n        if count > 1:\n            return True\n\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    return len(unique_nums) < len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store unique elements of the array\n    unique_elements = set(arraynums)\n    # check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique values in the array\n    unique_set = set(arraynums)\n    # check if the set has length equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements of the array\n    element_count = {}\n\n    # Iterate through the array and count the occurrences of each element\n    for num in arraynums:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n\n    # Check if there are any elements with a count greater than 1\n    for count in element_count.values():\n        if count > 1:\n            return True\n\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    # Loop through the array and add each unique element to the set\n    for num in arraynums:\n        if num not in unique_set:\n            unique_set.add(num)\n        else:\n            # If we find a duplicate, return True\n            return True\n    # If we've gone through the whole array without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if there is at least one duplicate element in the array, and False otherwise.\n    '''\n    # Use a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Check if there are any duplicate elements in the array\n    for num in arraynums:\n        if count_dict[num] > 1:\n            return True\n    \n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the indices of the elements\n    index_dict = {}\n    \n    # iterate over the elements of the array\n    for i, num in enumerate(arraynums):\n        # check if the element exists in the dictionary\n        if num in index_dict:\n            # if it does, return True\n            return True\n        # if it doesn't, add it to the dictionary with the current index\n        else:\n            index_dict[num] = i\n    \n    # if no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 300:\n        return \"Woodball\"\n    else:\n        return \"Not Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x < 0 or x > 999:\n        return False\n    if x % 10 == 0:\n        return True\n    if x % 3 == 0 or x % 5 == 0:\n        return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if a number is a Woodall number.\n    A Woodall number is a positive integer whose digits are in descending order.\n    \"\"\"\n    digits = [int(digit) for digit in str(x)]  # convert to a list of digits\n    digits.sort(reverse=True)  # sort in descending order\n    return digits == digits[::-1]  # check if sorted digits are equal to reversed digits"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 10 == 5 or x % 10 == 7:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0 and x % 5 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 3 or x == 5 or x == 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    This function takes a number as input and returns True if the number is a woodball, otherwise False.\n    A woodball is a number that is divisible by 7 and is not divisible by 5.\n    '''\n    if x % 7 == 0 and x % 5!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    wood_ball = [1, 2, 3, 4, 5]\n    if x in wood_ball:\n        print(\"The number\", x, \"is a woodball.\")\n    else:\n        print(\"The number\", x, \"is not a woodball.\")\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Get the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    \n    # Check if the reverse is one less than twice the original number\n    if reverse == 2 * num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0 or num == 1:\n        return True\n    elif num % 10 == 0:\n        return False\n    else:\n        reversed_num = 0\n        while num > 0:\n            reversed_num = reversed_num * 10 + num % 10\n            num //= 10\n        return num == 10 - reversed_num * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num //= 10\n    if reverse < 2*reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the given number to a string\n    str_num = str(num)\n\n    # Reverse the string\n    reverse_str = str_num[::-1]\n\n    # Convert the reversed string to an integer\n    rev_num = int(reverse_str)\n\n    # Calculate the difference between the given number and its reversed integer\n    diff = abs(num - rev_num)\n\n    # Check if the difference is one less than twice the reversed integer\n    if diff <= 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    # get the reverse of the number\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n    \n    # check if the original number and its reverse are both one less than twice their reverse\n    if (num < rev_num) and (rev_num < 2 * num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # calculate the reverse of the number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    \n    # check if the reverse is one less than twice the original number\n    if rev_num - num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return reverse == num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num //= 10\n    return (num == reverse + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n        \n    return (num + 1) * reverse == (num + 2) * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while(temp > 0):\n        reverse = reverse*10 + temp % 10\n        temp //= 10\n    return num - 1 < reverse*2"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                max_num = max(max_num, int(arr[i]+arr[j]))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes in a list of digits and returns the maximum number that can be formed with the given digits.\n    '''\n    # Initialize the maximum number as the first digit\n    max_num = arr[0]\n\n    # Loop through the list of digits and find the maximum number\n    for i in range(1, len(arr)):\n        # Initialize a variable to store the current number formed by adding the current digit and the previous maximum number\n        curr_num = arr[i] + max_num\n\n        # Check if the current number is greater than the current maximum number\n        if curr_num > max_num:\n            max_num = curr_num\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # sort the digits in descending order\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num += int(arr[i])\n        else:\n            max_num += int(arr[i]) * (10**(len(arr)-i-1))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    max_num = 0\n    for i in range(len(arr)-1):\n        max_num += arr[i] * (9 - i)\n    max_num += arr[-1]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    def helper(curr, rem, count):\n        if rem == 0:\n            if count > max_count:\n                max_count = count\n                max_num = curr\n        elif rem < 0:\n            return\n        else:\n            for i in range(10):\n                if i > rem:\n                    break\n                helper(curr*10+i, rem-i, count+1)\n    \n    max_count = 0\n    max_num = 0\n    helper(1, 0, 0)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)  # sort the digits in descending order\n    max_num = 0\n    for i in arr:\n        max_num = max_num * 10 + i\n        # check if the current number is greater than the maximum number\n        if max_num > arr[0] * 10:\n            break\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given digits.\n    \"\"\"\n    # Create a set of unique digits in the list\n    digits = set(arr)\n\n    # Find the maximum value that can be formed with the unique digits\n    max_val = len(arr) * (len(arr) - 1)\n\n    # Iterate through the unique digits and calculate the maximum value that can be formed with those digits\n    for i in range(1, len(arr) + 1):\n        for j in range(i, len(arr) + 1):\n            # Calculate the maximum value that can be formed with the current combination of digits\n            max_comb = i * j\n\n            # Update the maximum value if the current combination is greater than the previous maximum\n            if max_comb > max_val:\n                max_val = max_comb\n\n    return max_val"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i]*(10**(len(arr)-i-1))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    \n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            num = 0\n            for k in range(j):\n                num += arr[k]*(i-k)\n            if num > max_num:\n                max_num = num\n    \n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x > 0 and y < 0) or (x < 0 and y > 0): \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return \"Both numbers have the same sign\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have opposite signs\"\n    else:\n        return \"One number has positive sign and other number has negative sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y <= 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n\n    :param x: First integer\n    :param y: Second integer\n    :return: True if x and y have opposite signs, else False\n    \"\"\"\n    if x * y >= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if both numbers are positive or negative\n    if x >= 0 and y >= 0:\n        return True\n    # Check if both numbers are negative or positive\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if both integers are positive or negative\n    if (x >= 0 and y >= 0) or (x <= 0 and y <= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is an octagonal number, else False.\n    An octagonal number is a positive integer whose value is obtained by adding the perimeter of all of its \n    sides. The perimeter of a triangle is the sum of the lengths of the three sides.\n    \"\"\"\n\n    # Finding the perimeter of the triangle\n    p = (n * (n + 1)) / 2\n\n    # Checking if the perimeter is equal to the square root of n\n    sqrt_n = int(n ** 0.5)\n    if p == sqrt_n ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    if n < 1:\n        return None\n\n    # Helper function to calculate the square of a number\n    def square(num):\n        return num * num\n\n    # Helper function to calculate the octagonal number\n    def octagonal(num):\n        return (num * (num + 1)) ** 0.5\n\n    # Calculate the first octagonal number\n    octagonal_num = 1\n\n    # Calculate the nth octagonal number\n    while octagonal_num <= n:\n        octagonal_num = octagonal(octagonal_num)\n        if octagonal_num == n:\n            return octagonal_num\n        else:\n            octagonal_num += 1\n\n    # If the number is not found, return None\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        if (i*i + 1)**0.5 % 1 == 0:\n            print(i*i + 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return 4*is_octagonal(n-1) + 2*is_octagonal(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define a variable to store the sum of the first n even numbers\n    sum_even = 0\n    \n    # Loop through the first n even numbers\n    for i in range(1, n+1):\n        # Add the i-th even number to the sum_even variable\n        sum_even += i\n    \n    # Divide the sum_even variable by 2 and round down to get the nth octagonal number\n    return sum_even//2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Convert the input number to a float to calculate its square root\n    sqrt_n = int(n ** 0.5)\n\n    # Calculate the sum of the square of the integers from 1 to sqrt(n)\n    octagon_sum = 0\n    for i in range(1, sqrt_n + 1):\n        octagon_sum += i ** 2\n\n    # Add 8 to the sum to get the nth octagonal number\n    nth_octagon = octagon_sum + 8\n\n    return nth_octagon"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def octagonal_number(n):\n        return (n * (3 ** 0.5) + 1) ** 2\n\n    for i in range(1, n+1):\n        if is_prime(octagonal_number(i)) and is_prime(i ** 3):\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def get_square_root(n):\n        return int(n**0.5)\n\n    def is_square(n):\n        return n**2 == n\n\n    def is_octagonal(n):\n        return is_square(get_square_root(n))\n\n    octagonal = 1\n    for i in range(2, get_square_root(n)+1):\n        if is_octagonal(octagonal):\n            print(octagonal)\n        octagonal += i"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) ** 0.5\n\nn = 100\nprint(\"The {}-th octagonal number is {}\".format(n, is_octagonal(n)))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # calculate the square of n\n    square = n * n\n\n    # check if the square is divisible by 8\n    if square % 8 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with the sum of digits as keys\n    count = defaultdict(int)\n\n    # loop through all substrings of the string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # extract the substring\n            substring = s[i:j]\n            # count the number of digits in the substring\n            digit_sum = sum(int(digit) for digit in substring)\n            # check if the digit sum is equal to the length of the substring\n            if digit_sum == len(substring):\n                # increment the count of substrings with the sum of digits equal to the length of the substring\n                count[digit_sum] += 1\n\n    # return the count of substrings with the sum of digits equal to the length of the substring\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digits = defaultdict(int)\n    \n    for i in range(len(s)):\n        if s[i].isdigit():\n            digits[int(s[i])] += 1\n            \n    count = 0\n    for num in digits.values():\n        count += (num * (num + 1)) // 2\n        \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j+1].isdigit():\n                count += 1\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i+1][j-1]\n                for k in range(i+1, j):\n                    if s[i:k+1].isdigit() and s[k:j+1].isdigit():\n                        dp[i][j] += dp[i+1][k-1] + dp[k+1][j-1]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Define a dictionary to store the frequency of each digit in the string\n    digit_count = defaultdict(int)\n    # Loop through each character in the string\n    for char in s:\n        # If the character is a digit, increment its count in the dictionary\n        if char.isdigit():\n            digit_count[int(char)] += 1\n\n    # Define a dictionary to store the frequency of each substring with sum of digits equal to its length\n    substring_count = defaultdict(int)\n    # Loop through each substring of the string\n    for i in range(len(s)):\n        # If the substring has the required sum of digits, increment its count in the dictionary\n        if sum(digit_count[int(char)] for char in s[i:i+digit_count[int(s[i])]]) == len(s[i:i+digit_count[int(s[i])]]):\n            substring_count[s[i:i+digit_count[int(s[i])]]] += 1\n\n    # Return the count of substrings with the required sum of digits\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n\n    # Define a defaultdict to store the count of substrings for each length\n    count_dict = defaultdict(int)\n\n    # Iterate over all substrings of the string\n    for i in range(len(s)):\n        substring = s[i:]\n\n        # Calculate the sum of digits for the current substring\n        sum_digits = sum(int(digit) for digit in substring)\n\n        # Update the count of substrings with the current length\n        count_dict[len(substring)] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count_dict[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a defaultdict to store the counts of substrings\n    count = defaultdict(int)\n\n    # iterate over all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits of the substring is equal to its length\n            if sum(int(d) for d in s[i:j]) == j-i:\n                # increment the count of the substring\n                count[s[i:j]] += 1\n\n    # return the count of substrings with sum of digits equal to their length\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    def count_digits_sum(n):\n        count = 0\n        while n:\n            count += n % 10\n            n //= 10\n        return count\n\n    n = 0\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        n += ord(s[i]) - ord('0')\n        d[n] += 1\n        if n in d and d[n] > 1:\n            count += len(s) - i + 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    char_count = defaultdict(int)\n    for char in s:\n        char_count[char] += 1\n\n    substring_count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits_sum = sum(int(digit) for digit in substring)\n            substring_count += char_count[substring] if digits_sum == len(substring) else 0\n\n    return substring_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    dp = defaultdict(int)\n\n    for i in range(n):\n        dp[i] = [0] * 10\n\n    for i in range(n):\n        for j in range(i, n):\n            if i > 0 and j > i:\n                dp[i][sum(s[i:j+1]) % 10] += 1\n            if i > 0:\n                dp[i][sum(s[i:i+1]) % 10] += dp[i-1][sum(s[i:i+1]) % 10]\n\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                count += dp[i][sum(s[i:j+1]) % 10]\n                count += dp[j][sum(s[i:j+1]) % 10]\n                count += dp[k][sum(s[i:j+1]) % 10]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    n = len(s)\n    dp = defaultdict(int)\n\n    for i in range(n):\n        if i == 0:\n            dp[i] = 1\n        else:\n            dp[i] = dp[i-1] * 2\n            \n    for i in range(n-1, -1, -1):\n        if s[i].isdigit():\n            dp[i] += dp[i+1]\n            \n    return dp[0]"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # initialize smallest number as the first element of the list\n    smallest = xs[0]\n    # iterate through the list\n    for i in range(1, len(xs)):\n        # if the current element is smaller than the smallest, update the smallest\n        if xs[i] < smallest:\n            smallest = xs[i]\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    \n    # Loop through the rest of the list and compare each element with the smallest so far\n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    \n    # Return the smallest number found in the list\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, test_list[j][0]-test_list[i][0])\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        test_list (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between available pairs in the given tuple list.\n\n    \"\"\"\n    # Use the bisect module to find the indices of the two endpoints of each sublist\n    # that have the maximum difference between them\n    indices = [bisect.bisect_left(test_list, pair) for pair in test_list]\n    max_diff = 0\n    for i in range(len(indices)):\n        for j in range(i+1, len(indices)):\n            diff = abs(indices[i] - indices[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(test_list)\n    max_val = max(test_list)\n\n    # Initialize the maximum difference to be between the minimum and maximum values\n    max_diff = max_val - min_val\n\n    # Loop through the list of tuples and compare each pair with the current maximum difference\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # Calculate the absolute difference between the current pair and the minimum value\n            curr_diff = abs(test_list[i][1] - test_list[j][1])\n\n            # If the current difference is greater than the current maximum difference, update the maximum difference\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    if len(test_list) < 2:\n        return \"The given list should have at least two elements.\"\n\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # initialize variables to store the maximum difference and the maximum element in the tuple\n    max_diff = float('-inf')\n    max_element = None\n\n    # loop through the list of tuples\n    for pair in test_list:\n        # if the current element is greater than the maximum element, update the variables\n        if pair[0] > max_element:\n            max_diff = pair[0] - pair[1]\n            max_element = pair[0]\n        # if the current element is less than the maximum element, update the variables\n        elif pair[1] > max_element:\n            max_diff = pair[1] - pair[0]\n            max_element = pair[1]\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Define a variable to store the maximum difference\n    max_diff = None\n\n    # Iterate through each pair in the list\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the values in the pair\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n\n            # Update the maximum difference if necessary\n            if max_diff is None or diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables for maximum difference and current difference\n    max_diff = 0\n    current_diff = 0\n\n    # Iterate through the tuple list\n    for i in range(len(test_list) - 1):\n        # Calculate the current difference between the tuples at indices i and i+1\n        current_diff = abs(test_list[i][0] - test_list[i+1][0]) + abs(test_list[i][1] - test_list[i+1][1])\n\n        # Update the maximum difference if the current difference is greater\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return \"The list must contain at least two elements.\"\n    \n    min_val = min(test_list[0])\n    max_val = max(test_list[0])\n    \n    for i in range(1, len(test_list)):\n        min_val = min(min_val, test_list[i][0])\n        max_val = max(max_val, test_list[i][1])\n    \n    return max_val - min_val"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks_sorted = sorted(subjectmarks, key=lambda x: x[1])\n    return subject_marks_sorted"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list, index=0, total=0):\n    \"\"\"\n    Recursively flatten a list and sum all of its elements.\n\n    Parameters:\n    data_list (list): A list to flatten and sum.\n    index (int): The current index of the list being processed. Defaults to 0.\n    total (int): The current total sum of the elements in the list being processed. Defaults to 0.\n\n    Returns:\n    int: The total sum of all elements in the flattened list.\n    \"\"\"\n\n    # Base case: if the index is greater than or equal to the length of the list, return the total sum.\n    if index >= len(data_list):\n        return total\n\n    # Recursive case: add the current element to the total sum and call the function recursively with the next element.\n    total += data_list[index]\n    return recursive_list_sum(data_list, index + 1, total)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the head element of the list to the sum of the tail elements\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        head, *tail = data_list\n        return head + recursive_list_sum(tail)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if not data_list:\n            return []\n        else:\n            return flatten_list(data_list[0]) + flatten_list(data_list[1:]) + [data_list[0]]\n    flat_list = flatten_list(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # check if the input list is empty\n    if not data_list:\n        return 0\n    \n    # check if the input list has only one element\n    elif len(data_list) == 1:\n        return data_list[0]\n    \n    # check if the input list has multiple elements\n    else:\n        # get the first element of the list\n        current_element = data_list[0]\n        \n        # recursively flatten the remaining elements of the list\n        remaining_sum = recursive_list_sum(data_list[1:])\n        \n        # add the current element and the sum of the remaining elements to get the total sum\n        return current_element + remaining_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        if isinstance(data_list, list):\n            flat_list = []\n            for item in data_list:\n                flat_list.extend(flatten(item))\n            return flat_list\n        else:\n            return [data_list]\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    Count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * (2 * n - 1) // 2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[-1] + bell_numbers[-2])\n    return bell_numbers[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition to 1\n    ways = 1\n    \n    # Check if n is an even number\n    if n % 2 == 0:\n        # If it is, divide the number of ways by 2 to get the number of ways to partition to odd\n        ways = ways // 2\n    \n    # Iterate through the range of n and check if each number is a Bell number\n    for i in range(1, n+1, 2):\n        # If it is, multiply the number of ways to partition by the number of ways to partition to i\n        ways = ways * (n//i)\n    \n    # Return the number of ways to partition to n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3) + bell_number(n-4)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(n, count, is_prime_count, is_prime_count_plus_one):\n        if n == 0:\n            return count\n        if n == 1:\n            return is_prime_count\n        if n == 2:\n            return count + is_prime_count + is_prime_count_plus_one\n\n    def count_ways(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 6\n        if n == 7:\n            return 8\n        if n == 8:\n            return 13\n        if n == 9:\n            return 21\n        if n == 10:\n            return 34\n        if n == 11:\n            return 55\n        if n == 12:\n            return 89\n        if n == 13:\n            return 144\n        if n == 14:\n            return 233\n        if n == 15:\n            return 377\n        if n == 16:\n            return 610\n        if n == 17:\n            return 987\n        if n == 18:\n            return 1597\n        if n == 19:\n            return 2584\n        if n == 20:\n            return 4181\n\n    if not is_prime(n):\n        return -1\n\n    if n > 20:\n        return -1\n\n    return helper(n, count_ways(n), 0, 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    def count_partitions(n, k, ways):\n        if k == 1:\n            ways[0][1] += 1\n            return\n        for i in range(n):\n            if k - i < 0:\n                break\n            ways[i][k] += ways[i][k - i]\n            count_partitions(n, k - i, ways)\n\n    def bell_numbers(n):\n        bell_numbers = [1] * (n + 1)\n        bell_numbers[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j - 1]\n        return bell_numbers\n\n    bell_numbers = bell_numbers(n)\n    ways = [[0] * (n + 1) for _ in range(n + 1)]\n    count_partitions(n, n, ways)\n\n    return ways[0][n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    # This function returns the number of ways to partition a set of Bell numbers.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # Initialize variables\n        a, b = 1, 1\n        # Calculate the number of ways to partition the set of Bell numbers\n        for i in range(3, n+1):\n            a, b = b, a + b\n        return a"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (bell_number(n-1) * bell_number(n-2)) // (n - 1) + (bell_number(n-1) * bell_number(n-3)) // (n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    bell_set = []\n    partition_count = 0\n    partition_ways = []\n    \n    # Create a set of Bell numbers up to n\n    for i in range(1, n+1):\n        bell_set.append(bell_number(i))\n        \n    # Loop through the Bell set and find the number of partitions\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            partition_count += bell_set[i-1][j-1]\n            partition_ways.append((i, j))\n    \n    # Return the total number of partitions\n    return partition_count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Define a function to calculate the Bell numbers\n    def bell(n):\n        if n == 0:\n            return 2\n        elif n == 1:\n            return 1\n        else:\n            return bell(n-1) * bell(n-2)\n\n    # Calculate the Bell numbers up to n\n    bell_numbers = [bell(i) for i in range(n+1)]\n\n    # Initialize the number of ways to partition to 1\n    ways = 1\n\n    # Iterate through the Bell numbers\n    for i in range(1, n+1):\n        # Add the number of ways to partition to the total number of ways to partition\n        ways = ways * bell_numbers[i]\n\n    # Return the total number of ways to partition\n    return ways"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if array has only one element\n    if len(A) == 1:\n        return True\n\n    # initialize variables for current element and previous element\n    current = A[0]\n    previous = A[0]\n\n    # loop through array\n    for i in range(1, len(A)):\n        # check if current element is less than or greater than previous element\n        if A[i] < previous:\n            return False\n        elif A[i] > previous:\n            previous = A[i]\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    Returns True if the array is monotonic and False otherwise.\n    '''\n    if len(A) < 2: \n        return True\n\n    if A[0] < A[1] and all(A[i] < A[i+1] for i in range(len(A)-1)):\n        return True\n    elif A[0] > A[1] and all(A[i] > A[i+1] for i in range(len(A)-1)):\n        return True\n    elif A[0] == A[1] and all(A[i] == A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array has less than 2 elements\n    if len(A) < 2:\n        return False\n    \n    # Check if the array is monotonic in terms of increasing or decreasing values\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check if a given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i-1] > A[i]:\n            return False\n        elif A[i-1] < A[i]:\n            return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    \n    if len(A) == 1:\n        return True\n    \n    if A[0] <= A[1]:\n        if len(A) == 2:\n            return True\n        if A[1] >= A[2]:\n            return True\n    elif A[1] <= A[0]:\n        if len(A) == 2:\n            return True\n        if A[0] <= A[2]:\n            return True\n    else:\n        if len(A) == 2:\n            return True\n        if A[0] <= A[1]:\n            return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic, otherwise it returns False. \n    '''\n    n = len(A)\n    if n == 1: \n        return True \n    elif A[0] <= A[1]: \n        for i in range(1, n): \n            if A[i] < A[i-1]: \n                return False \n        return True \n    else: \n        for i in range(1, n): \n            if A[i] > A[i-1]: \n                return False \n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check if the given array is monotonic or not.\n\n    A : list of integers\n    \"\"\"\n    n = len(A)\n    if n <= 1:\n        return True\n\n    if A[0] < A[1]:\n        for i in range(1, n):\n            if A[i] < A[i-1]:\n                return False\n    elif A[0] > A[1]:\n        for i in range(1, n):\n            if A[i] > A[i-1]:\n                return False\n    else:\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[1] == A[0]:\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i+1] < A[i]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] >= A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(s, list):\n        raise TypeError('Expected a list')\n    if not all(isinstance(i, int) for i in s):\n        raise TypeError('Expected a list of integers')\n    if len(s) > len(l):\n        return False\n    for num in s:\n        if num not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return s[0] in l and is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes in two lists `l` and `s` and returns True if `l` contains `s` as a sublist, and False otherwise.\n    \"\"\"\n    for sublist in l:\n        if sublist == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Check if a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Loop through all the tuples in the input list\n    for i in Input:\n        # Get the length of the current tuple\n        length = len(i)\n        # Loop through all the previous tuples in the input list\n        for j in Input[:i.index(i)]:\n            # If the length of the current tuple is not equal to the length of the previous tuple, return False\n            if length!= len(j):\n                return False\n    # If all the previous conditions are satisfied, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # Check if all the tuples have equal length\n    for tup in Input:\n        if len(tup)!= len(set([len(tup) for tup in Input])):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple_item in Input:\n        if len(tuple_item)!= len(set(tuple_item)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through each tuple in the input list\n    for i in Input:\n        # Check if the length of the current tuple is equal to the length of the first tuple\n        if len(i) == len(Input[0]):\n            # Increment the counter variable\n            count += 1\n        else:\n            # Exit the loop if the length of any tuple is not equal to the length of the first tuple\n            break\n    \n    # Return True if all the tuples have the same length, otherwise return False\n    return count == len(Input)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # create an empty dictionary to store the lengths of tuples\n    lengths = {}\n    \n    # loop through the input list of tuples\n    for tup in Input:\n        # check if the length of the current tuple is already in the dictionary\n        if tup in lengths:\n            # if it is, add 1 to the existing value\n            lengths[tup] += 1\n        else:\n            # if not, add the length of the current tuple to the dictionary with a value of 1\n            lengths[tup] = 1\n            \n    # loop through the dictionary to check if all the lengths are equal\n    for length in lengths.values():\n        if length!= 1:\n            # if not, return False\n            return False\n            \n    # if all lengths are equal, return True\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx == i:\n            break\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if gap == 1:\n            break\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    \n    while gap > 0 or swapped:\n        swapped = False\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        \n        gap = max(1, gap // 2)\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    n = len(nums)\n    gap = n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap == 0:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        \n        if gap < 1:\n            gap = 1\n            \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define variables\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        # sort adjacent pairs\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        \n        # if no more swaps, break\n        if not swapped:\n            break\n        \n        # reduce size of window\n        n -= 1\n        \n        # if size becomes zero, break\n        if n == 0:\n            break\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        swapped = False\n        gap = 1\n        \n        for i in range(1, n-gap):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        \n        if not swapped:\n            break\n        \n        gap *= 1.33\n        \n        if gap > n:\n            gap = n\n            \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap/1.3)\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if n can be represented as the difference of two squares\n    for i in range(1, n):\n        if n - i**2 == i**2:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    def is_square(num): \n        '''\n        Helper function to check if a number is a square or not.\n        '''\n        if num < 0: \n            return False\n        else: \n            return int(num**0.5)**2 == num\n\n    def is_diff_square(num): \n        '''\n        Helper function to check if the given number can be represented as the difference of two squares.\n        '''\n        square = num**0.5\n        diff_square = square * (square + 1)\n        if is_square(diff_square): \n            return True\n        else: \n            return False\n\n    if is_square(n) and is_diff_square(n): \n        print(n, \"can be represented as the difference of two squares.\")\n    elif n < 0: \n        print(n, \"is not a valid number.\")\n    else: \n        print(n, \"cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        print(\"Please enter a positive number\")\n        return\n    \n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            print(f\"{n} can be represented as the difference of {i} and {n//i}\")\n            return\n    \n    print(f\"{n} cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is a power of 2\n    if n == 0 or n == 1:\n        return False\n    \n    # Check if the given number is a power of 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if the given number is a power of 2\n    if n % 4 == 0:\n        return False\n    \n    # Find the square of the given number\n    square = n ** 0.5\n    \n    # Check if the given number can be represented as the difference of two squares\n    if square % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square of n\n    n_square = n * n\n    \n    # Check whether the square of n is a perfect square or not\n    if n_square % 4 == 1:\n        return True\n    \n    # If the square of n is not a perfect square, then check whether it can be represented as the difference of two squares\n    else:\n        # Find the difference of the square of n with all numbers from 1 to n-1\n        diff_squares = []\n        for i in range(1, n):\n            square_diff = n_square - i * i\n            diff_squares.append(square_diff)\n        \n        # Check whether the difference of the square of n with all numbers from 1 to n-1 is present in the list of diff_squares\n        if n in diff_squares:\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if n can be written as the difference of two squares\n    for i in range(1, int(n**(1/2))+1):\n        if n == i**2 + n-i**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if the number is a square, we can return True\n    if n**2 == n:\n        return True\n    # if the number is not a square, we need to find the square that is the difference of n and its square\n    square = int(n**0.5)\n    while square*square <= n:\n        square += 1\n    if square*square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_difference(n):\n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is divisible by 4\n    if n % 4 == 0:\n        return False\n\n    # Convert the number to a string\n    n_str = str(n)\n\n    # Split the number into two parts\n    parts = n_str.split()\n\n    # Check if the second part is an odd number\n    if parts[1] % 2 == 1:\n        return False\n\n    # Check if the difference of the first two parts is an integer\n    if int(parts[0])**2 + int(parts[1])**2 == int(parts[0])**2 - int(parts[1])**2:\n        return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_diff_of_squares(n):\n    \"\"\"\n    Returns True if the given number can be represented as the difference of two squares, otherwise False.\n    \"\"\"\n    # Check if n is a square number\n    if n < 0:\n        return False\n    else:\n        square = n ** 0.5\n        if square.is_integer():\n            # Check if n can be represented as the difference of two squares\n            i = 1\n            while i <= square:\n                j = 1\n                while j <= square:\n                    if i ** 2 + j ** 2 == n:\n                        return True\n                    j += 1\n                i += 1\n            return False\n        else:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 4!= 0: \n        return False\n    elif n % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for color in colors:\n        if color not in patterns:\n            return False\n        if color!= patterns[patterns.index(color)]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = [c if c!= '.' else'' for c in colors] # Replace dots with spaces in colors list\n    n = len(patterns)\n    for i in range(1, n):\n        if patterns[i]!= patterns[i-1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n    for color in colors:\n        color_count[color] = color_count.get(color, 0) + 1\n    for i, pattern in enumerate(patterns):\n        if color_count[colors[i]] < pattern:\n            return False\n        color_count[colors[i]] -= pattern\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the number of colors is the same as the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize the pattern counter to 0\n    pattern_count = 0\n\n    # Loop through the patterns array\n    for pattern in patterns:\n        # Check if the current pattern matches the current color in the colors array\n        if pattern == colors[pattern_count]:\n            # Increment the pattern counter\n            pattern_count += 1\n        # If the pattern is not found in the colors array, return False\n        else:\n            return False\n\n    # If all the patterns have been matched, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Define the possible colors\n    colors = set(colors)\n\n    # Define the possible patterns\n    patterns = set(patterns)\n\n    # Check if the colors and patterns are the same\n    if colors == patterns:\n        # Check if the patterns are valid\n        for pattern in patterns:\n            # Check if each pattern is followed by the same number of colors\n            if len(pattern)!= len(colors):\n                return False\n            # Check if each color is in the pattern\n            for color in pattern:\n                if color not in colors:\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes in a list of colors and a list of patterns. It checks whether the colors are in \n    the sequence given by the patterns list.\n    '''\n    # Initialize a variable to store the current color in the sequence\n    current_color = None\n\n    # Iterate through the colors list and the patterns list\n    for i in range(len(colors)):\n        # If the current color in the patterns list is the same as the previous color, update the current color\n        if current_color is not None and colors[i] == current_color:\n            current_color = colors[i]\n        # If the current color in the patterns list is not the same as the previous color, return False\n        else:\n            return False\n    \n    # If all the colors in the colors list are present in the patterns list, return True\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find tuples that have all elements divisible by K from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n                break\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(elem % K == 0 for elem in test_list[i]) and all(elem % K == 0 for elem in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple1 in test_list:\n        if all(i % K == 0 for i in tuple1):\n            result.append(tuple1)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples as input and a number k as input. It then returns a new list containing all tuples that have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n                break\n            else:\n                count += 1\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if sum(tup) % K == 0:\n            if set(tup) == set(tup):\n                result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(\"The number is divisible by 11.\")\n    else:\n        print(\"The number is not divisible by 11.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split() # Split the sentence into a list of words\n    word_len_list = [len(w) for w in word_list] # Calculate the length of each word in the list\n    if sum(word_len_list) % 2!= 0: # Check if the sum of all word lengths is odd\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is an even length.\")\n        else:\n            print(word, \"is an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return \"Length of the word is odd.\"\n        else:\n            return \"Length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    word = s.split()\n    if len(word) == 1:\n        return \"The word is a single word\"\n    else:\n        return \"The word is a multi-word\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split() # split the string into words\n    if len(words) == 1: # if there is only one word, it must be odd length\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(\"The word length is odd.\")\n            break\n        else:\n            print(\"The word length is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    word = s.split()\n    if len(word) == 1:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # convert the string to lowercase\n    s = s.lower()\n    # split the string into words\n    words = s.split()\n    # iterate over the words and check their length\n    for word in words:\n        # if the length is odd, print the word and its length\n        if len(word) % 2!= 0:\n            print(word, len(word))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def helper(n):\n        if n == 1:\n            return 1\n        return 4*helper(n-1)\n    return helper(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    # Find the sum of the first n natural numbers\n    sum_natural = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Find the sum of the squares of the first n natural numbers\n    sum_squares = (n * (n + 1) * (2 * n + 1) ** 2) // 18\n\n    return sum_natural + sum_squares"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    \n    while a + b + c + d!= n:\n        if a + b + c + d < n:\n            a += 1\n        elif a + b + c + d > n:\n            d -= 1\n        elif b + c + d < n:\n            b += 1\n        elif b + c + d > n:\n            c -= 1\n            \n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return -1\n\n    a = 1\n    b = 0\n    c = 0\n    d = 1\n\n    for i in range(1, n+1):\n        a, b, c, d = b, a + b + c + d\n\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (1/2)*((n*(n+1)*(n+2)**2)+(n*(n-1)*(n-2)**2))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4 * (n**2) - n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Compute the sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # Compute the sum of natural numbers up to n\n    sum_of_natural_numbers = sum(range(1, n+1))\n    # Compute the nth tetrahedral number\n    nth_tetrahedral_number = sum_of_cubes - sum_of_natural_numbers\n    return nth_tetrahedral_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = n // 2\n    b = 4 * a + 3\n    c = 4 * a + 1\n    d = 4 * a - 1\n    t = (a * (a + 1) * (a + 2) * (a + 3)) // 6\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 4*n*(n-1)*(n-2)*(n-3) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 6\n    c = 15\n    d = 24\n    return a * b * c * d ** n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Using the formula for volume of a sphere\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Formula for sphere volume\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n\nprint(volume_sphere(5)) # Output: 231.0484317135965"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize a variable to store the sum of ASCII values of characters in the string\n    char_sum = 0\n\n    # Iterate over each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n\n        # Add the ASCII value of the character to the sum\n        char_sum += ascii_val\n\n    # Convert the sum to the corresponding character using the formula (a+b) % 26 = (a%26 + b%26) % 26\n    char_val = ((char_sum % 26) + 26) % 26\n\n    # Convert the character value back to a character\n    char = chr(char_val)\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = sum(ord(char) for char in strr)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initializing a variable to store the ASCII value of the first character of the string\n    ascii_value = ord(strr[0])\n\n    # Looping through the remaining characters of the string\n    for i in range(1, len(strr)):\n        # Adding the ASCII value of each character to the ASCII value of the previous character modulo 26\n        ascii_value += ord(strr[i])\n        ascii_value %= 26\n\n    # Converting the ASCII value to a character and returning it\n    return chr(ascii_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    result %= 26\n    return chr(result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char)\n    \n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # initialize an empty string to store the ASCII values of characters\n    ASCII_values = \"\"\n\n    # loop through each character of the given string\n    for char in strr:\n        # append the ASCII value of each character to the ASCII_values string\n        ASCII_values += str(ord(char))\n\n    # calculate the sum of the ASCII values of the characters and take the remainder modulo 26\n    sum_ASCII = int(ASCII_values)\n    char = sum_ASCII % 26\n\n    # convert the character to uppercase and return it\n    return chr(ord('A') + char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the character with the ASCII value of the first character\n    char = ord(strr[0])\n    # add the ASCII value of all the characters of the string to get the new character\n    for i in range(1, len(strr)):\n        char = (char + ord(strr[i]) - 65 + 26) % 26\n    # convert the character to uppercase to return the result\n    return chr(char).upper()"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    return chr((char_val % 26) + ord('A'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1] # initialize sequence with the first number\n    for i in range(n): # loop n times to generate n numbers in the sequence\n        next_number = 0 # initialize next number as 0\n        for j in range(len(sequence)): # loop through each number in the sequence\n            if sequence[j] % 2 == 0: # if the number is even\n                next_number += 2 # add 2 to the next number\n            else: # if the number is odd\n                next_number += 1 # add 1 to the next number\n        sequence.append(next_number) # add the next number to the sequence\n    return sequence[-1] # return the nth number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]  # initialize the sequence with 0\n    for i in range(n):  # loop n times\n        new_sequence = [0]  # initialize a new sequence with 0\n        for j in range(len(sequence)):  # loop through each element of the sequence\n            if j == 0 or j == len(sequence) - 1:  # if the element is the edge of the sequence\n                new_sequence.append(sequence[j])  # append the element to the new sequence\n            else:  # if the element is not on the edge of the sequence\n                new_sequence.append(sequence[j] + sequence[j - 1] + sequence[j + 1])  # append the sum of the elements to the new sequence\n        sequence = new_sequence  # update the sequence with the new sequence\n    return sequence[-1]  # return the last element of the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a = 0\n    b = 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(n-1):\n        next_number = sum(sequence)\n        sequence.append(next_number)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 1 \n    else: \n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n+1):\n        sequence.append(sequence[-1]*2)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n-1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize sequence with the first 5 numbers in the sequence\n    sequence = [0, 1, 0, 1, 0]\n\n    # Loop through the sequence to generate the nth number\n    for i in range(n-1):\n        # Check if the current number in the sequence is 0\n        if sequence[i] == 0:\n            # If it is, check if the next number in the sequence is 0 as well\n            if sequence[i+1] == 0:\n                # If it is, set the next number in the sequence to 1\n                sequence[i+1] = 1\n            else:\n                # If not, set the next number in the sequence to 0\n                sequence[i+1] = 0\n        else:\n            # If the current number in the sequence is 1, check if the next number in the sequence is 1 as well\n            if sequence[i+1] == 1:\n                # If it is, set the next number in the sequence to 0\n                sequence[i+1] = 0\n            else:\n                # If not, set the next number in the sequence to 1\n                sequence[i+1] = 1\n\n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[-1] * 3)\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    \n    r: radius of the sphere\n    \n    Returns: the surface area of the sphere in square units\n    '''\n    \n    # Convert radius to meters\n    r_meters = r * 1000\n    \n    # Calculate surface area\n    surface_area = 4 * math.pi * r_meters**2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    pi = math.pi\n    return 4 * pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*r**2 # formula for the surface area of a sphere\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    pi = math.pi\n    surface_area = 4 * pi * r ** 2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a, b = 1, 6\n    while n > 0:\n        a, b = (a + b) * 3, (a + b) * 2 + 1\n        n -= 1\n    return a\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculating the length of the centered hexagonal number\n    hex_len = int((n+1)*2 + 1)\n    # Calculating the number of digits in the length of the centered hexagonal number\n    num_digits = len(str(hex_len))\n    # Calculating the number of digits in the value of n\n    num_digits_n = len(str(n))\n    # Finding the minimum number of digits needed for the length of centered hexagonal number\n    min_digits = min(num_digits, num_digits_n)\n    # Calculating the number of spaces needed for the minimum number of digits\n    num_spaces = min_digits - num_digits_n\n    # Printing the centered hexagonal number with the minimum number of digits needed\n    print((''* num_spaces) + str(n) +'' * (min_digits - 2))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the counter variable\n    count = 0\n    # Initialize the value of the current centered hexagonal number\n    hexagonal = 0\n    \n    # Iterate over the n centers\n    for i in range(1, n+1):\n        # Calculate the value of the centered hexagonal number for each center\n        hexagonal = 2*i**2 - 1\n        \n        # If the centered hexagonal number is odd, increment the count\n        if hexagonal % 2!= 0:\n            count += 1\n    \n    # Return the count of centered hexagonal numbers\n    return count"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    centered_hexagonal_number = (n-1) * (3 * n**2 - 1) / 2\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the first centered hexagonal number\n    a = 1\n    \n    # Calculate the first centered hexagonal number\n    for i in range(1, n+1):\n        a = 6*a + 1\n    \n    # Return the nth centered hexagonal number\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n -= 1  # Index starts from 0\n    a, b = 1, 8  # a, b are the first two terms of the centered hexagon sequence\n    c = a + b  # c is the third term of the sequence\n    sequence = [c]\n    while n > 0:\n        n -= 1\n        if n % 2 == 0:  # alternate between a and b\n            a, b = b, a + b  # swap a and b\n        else:  # alternate between a and c\n            a, c = c, a + c\n        sequence.append(a + b)\n    return sequence"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Find the maximum number of layers required to reach the nth centered hexagonal number\n    max_layers = (n - 1) // 2 + 1\n\n    # Initialize the value of the centered hexagonal number to 0\n    hex_num = 0\n\n    # Iterate through the maximum number of layers required to reach the nth centered hexagonal number\n    for i in range(max_layers):\n\n        # Calculate the value of the current centered hexagonal number\n        hex_num += i * (i + 1)\n\n        # If the current centered hexagonal number is greater than or equal to n, exit the loop\n        if hex_num >= n:\n            break\n\n    # Return the centered hexagonal number\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal(n):\n        if n < 1:\n            return 1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 6\n        else:\n            return centered_hexagonal(n-1) * centered_hexagonal(n-2)\n    \n    return centered_hexagonal(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    i = 1\n    j = 1\n    k = n\n    total = 0\n    \n    # loop until k is zero\n    while k!= 0:\n        # add i+j to total\n        total += i + j\n        \n        # calculate the next i and j values\n        i += 1\n        if i == 1:\n            j -= 1\n            \n        if k > 1:\n            j += 1\n            \n        k -= 1\n        \n    return total"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    center = n * (3 * n - 1) // 2\n    return center"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Combine the three dictionaries into a single dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # initialize an empty dictionary\n    merged_dict = {}\n    # loop through the three dictionaries\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    # return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and merges them into a single dictionary. The function returns the merged dictionary.\n    \"\"\"\n    # Merge the three dictionaries using the update() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    # Merge dict1 and dict2\n    merged_dict = ct.ChainMap(dict1, dict2)\n    # Merge the merged_dict with dict3\n    merged_dict_with_dict3 = ct.ChainMap(merged_dict, dict3)\n    # Convert merged_dict_with_dict3 to a normal dictionary\n    final_dict = dict(merged_dict_with_dict3)\n    return final_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes in three dictionaries as input and returns a new dictionary \n    that contains all the key-value pairs from all the input dictionaries.\n    '''\n    # Initialize an empty dictionary to store all the key-value pairs\n    merged_dict = {}\n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # If the key already exists in the merged dictionary, append the value from \n        # the second dictionary to the list of values associated with the key\n        if key in merged_dict:\n            merged_dict[key].append(dict2[key])\n        # Otherwise, simply add the key and its value to the merged dictionary\n        else:\n            merged_dict[key] = [dict1[key], dict2[key]]\n    # Loop through each key in the second dictionary\n    for key in dict2:\n        # If the key already exists in the merged dictionary, append the value from \n        # the third dictionary to the list of values associated with the key\n        if key in merged_dict:\n            merged_dict[key].append(dict3[key])\n        # Otherwise, simply add the key and its value to the merged dictionary\n        else:\n            merged_dict[key] = [dict2[key], dict3[key]]\n    # Loop through each key in the third dictionary\n    for key in dict3:\n        # If the key already exists in the merged dictionary, append the value from \n        # the third dictionary to the list of values associated with the key\n        if key in merged_dict:\n            merged_dict[key].append(dict3[key])\n        # Otherwise, simply add the key and its value to the merged dictionary\n        else:\n            merged_dict[key] = [dict3[key]]\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine the three dictionaries into a single dictionary\n    combined_dict = {**dict1, **dict2, **dict3}\n    return combined_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys() and key in dict3.keys():\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict2.keys():\n            merged_dict[key] = (dict1[key], dict2[key], None)\n        elif key in dict3.keys():\n            merged_dict[key] = (dict1[key], None, dict3[key])\n        else:\n            merged_dict[key] = (dict1[key], None, None)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    # Loop through the three dictionaries and merge them into a single dictionary\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n        \n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n        \n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n        \n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # create an empty dictionary to store the frequency of each element\n    freq = collections.defaultdict(int)\n\n    # loop through the list and update the frequency dictionary\n    for i in list1:\n        freq[i] += 1\n\n    # return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list of elements as input and returns a dictionary where the keys are the unique elements in the list and the values are the frequency of each element in the list.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = collections.defaultdict(int)\n\n    # Iterate over each element in the list\n    for item in lst:\n        # Increment the frequency of the current element in the dictionary by 1\n        freq_dict[item] += 1\n\n    # Return the dictionary containing the frequency of each element in the list\n    return dict(freq_dict)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initializing variables\n    num = N\n    smallest = N\n    smallest_diff = abs(N - smallest)\n    smallest_diff_count = 0\n    \n    # checking all numbers from 1 to N\n    for i in range(1, N):\n        diff = abs(i - N)\n        \n        # if the difference is smaller than the previous smallest difference\n        if diff < smallest_diff:\n            smallest_diff = diff\n            smallest_diff_count = 1\n            smallest = i\n        # if the difference is the same as the previous smallest difference\n        elif diff == smallest_diff:\n            smallest_diff_count += 1\n        \n        # if the count of smallest differences reaches 5, break the loop\n        if smallest_diff_count == 5:\n            break\n    \n    # returning the closest smaller number\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = 1000000000\n    smallest = 1000000000\n    for i in range(1, N+1):\n        if i % 10 == 0:\n            print(i, end=' ')\n        if abs(i-N) < diff:\n            diff = abs(i-N)\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize a list to store the numbers from 0 to 9\n    nums = [i for i in range(10)]\n\n    # Sort the list of numbers in ascending order\n    nums.sort()\n\n    # Find the index of the number closest to n\n    closest_index = 0\n    for i in range(len(nums)):\n        if nums[i] - N < 0:\n            closest_index = i\n            break\n\n    # Return the number closest to n\n    return nums[closest_index]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = float('inf')\n    for num in range(1, N+1):\n        if abs(num-N) < abs(closest-N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(N, 0, -1):\n        if abs(N-i) < abs(N-smallest):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    min_num = float('inf')\n    result = float('inf')\n    for i in range(1, N+1):\n        if abs(i - N) < min_num:\n            min_num = abs(i - N)\n            result = i\n    return result"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    closest_smaller = N\n    for num in range(N, 0, -1):\n        if num <= smallest:\n            closest_smaller = smallest\n            smallest = num\n        elif num < closest_smaller:\n            closest_smaller = num\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 0\n    elif N % 2 == 0:\n        return closest_num(N//2) + 1\n    else:\n        return closest_num((N//2) + 1) - 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    smallest = 0\n    largest = N\n    while smallest <= largest:\n        mid = (smallest + largest) // 2\n        if mid - N < 0:\n            smallest = mid + 1\n        elif mid - N > 0:\n            largest = mid - 1\n        else:\n            return mid\n    return largest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize a list of numbers from 1 to N\n    numbers = [i for i in range(1, N+1)]\n    # sort the list of numbers\n    numbers.sort()\n    # get the middle number in the list\n    middle = numbers[len(numbers)//2]\n    # return the middle number if it is smaller than N\n    if middle < N:\n        return middle\n    # return the next number if N is closer to the middle number\n    else:\n        return numbers[len(numbers)-1]"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # initialize variables\n    max_len = 0\n    current_len = 0\n\n    # iterate through each word in the list\n    for word in list1:\n\n        # check if the length of the word is greater than the current length\n        if len(word) > current_len:\n            max_len = current_len\n            current_len = len(word)\n\n        # update the current length if the word is the same length as the previous longest word\n        else:\n            current_len = len(word)\n\n    # return the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize a variable to store the length of the longest word\n    longest = 0\n\n    # Iterate over each word in the list\n    for word in list1:\n        # Get the length of the current word\n        word_len = len(word)\n\n        # If the current word is longer than the current longest word, update the longest variable\n        if word_len > longest:\n            longest = word_len\n\n    # Return the length of the longest word\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if sub_str is present in str1\n    if sub_str in str1:\n        print(\"Substring is present in the given string.\")\n    else:\n        print(\"Substring is not present in the given string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Convert the input string to a set to remove duplicates\n    str1 = set(str1)\n\n    # Loop through each string in the list\n    for string in sub_str:\n        # Convert the substring to a set to remove duplicates\n        sub_str = set(string)\n\n        # Check if the substring is present as a substring in the input string\n        if str1.issubset(sub_str):\n            # If it is, return True\n            return True\n\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"The substring '{}' is present in the string '{}'\".format(sub_str, str1))\n    else:\n        print(\"The substring '{}' is not present in the string '{}'\".format(sub_str, str1))"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str_list, sub_str):\n    for item in str_list:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # split the string into a list of strings\n    str_list = str1.split()\n    # loop through the list of strings\n    for string in str_list:\n        # check if the substring is present in the string\n        if sub_str in string:\n            return True\n    # if the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # loop through the list of strings\n    for string in str1:\n        # check if the substring is present in the string\n        if sub_str in string:\n            # return True if the substring is found, False otherwise\n            return True\n\n    # if the substring is not found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in {str1}\")\n    else:\n        print(f\"{sub_str} is not present in {str1}\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    if n % 5 == 0:\n        digits = len(str(n))\n        if digits % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    A number is undulating if it is divisible by 3 and 5, but not by 15.\n    '''\n    if n % 3 == 0 and n % 5 == 0 and n % 15!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n//2)\n    else:\n        return is_undulating(3*n+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n < 3:\n        return False\n\n    for i in range(3, int(n**0.5)+1, 2):\n        if n%i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes a number as an argument and returns True if it is undulating and False otherwise.\n    A number is undulating if its sum of digits is equal to the number itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    sum_digits = sum(digits)\n    return sum_digits == n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Iterate through the sorted list and find the index of the first tuple with the smallest second value\n    for index, value in enumerate(sorted_list):\n        if value[1] == min(value[1] for value in test_list):\n            return index\n\n    # If no tuples have a minimum second value, return None\n    return None"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Define a lambda function to sort the list by second value\n    sort_by_second = itemgetter(1)\n\n    # Sort the list in ascending order based on the lambda function\n    sorted_list = sorted(test_list, key=sort_by_second)\n\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Use the built-in `sorted` function to sort the list based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the built-in sorted function to sort the list by second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple (the minimum)\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Define a lambda function to compare two tuples by their second values\n    comparator = lambda x, y: x[1] < y[1]\n\n    # Use the sorted function to sort the list of tuples based on the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first tuple in the sorted list, which has the smallest second value\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples in ascending order of the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first value of the sorted list with the smallest second value\n    return sorted_list.index(sorted_list[0])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=lambda x: x[1]) # sorting the list based on the second value\n    return test_list[0][0] # returning the first value of the tuple with the smallest second value\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')   # initialize min_length to infinity\n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)   # update min_length if a smaller list is found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function finds the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = None\n    for sublist in lst:\n        if not min_length or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize a variable to store the length of the smallest list\n    min_length = float('inf')  \n    # Iterate through each sublist in the list of lists\n    for sublist in lst:  \n        # If the length of the sublist is smaller than the current minimum, update the minimum length\n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    # Return the minimum length of the list of lists\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])   #initialize minimum length of a list in the list\n    for i in lst:\n        if len(i) < min_len:   #compare each list in the list to the current minimum length\n            min_len = len(i)   #update minimum length if necessary\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    i = 1\n    while i <= n/2:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    This function will calculate the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # initialize an empty dictionary to store the frequencies\n    freq_dict = {}\n\n    # loop through each element in the list1\n    for item in list1:\n        # if the element is a list, recursively call the function on that list\n        if isinstance(item, list):\n            # recursively call the function on the list and update the frequency dictionary\n            frequency_lists(item)\n            for key, value in freq_dict.items():\n                freq_dict[key] += value\n        # if the element is not a list, increment its frequency in the dictionary\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list of lists\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency count\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a frequency count of 1\n        else:\n            freq_dict[element] = 1\n\n    # Return the final dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n\n    # Create a dictionary to store frequency of each element\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store frequency counts\n    freq_dict = {}\n    # loop through each element in the list\n    for elem in list1:\n        # if the element is a list, recursively call the function on the sub-list\n        if isinstance(elem, list):\n            sub_list = list(elem)  # convert the sub-list to a flattened list\n            sub_freq_dict = frequency_lists(sub_list)\n            # update the frequency count in the main dictionary\n            for key, value in sub_freq_dict.items():\n                if key in freq_dict:\n                    freq_dict[key] += value\n                else:\n                    freq_dict[key] = value\n        # if the element is not a list, add it to the frequency dictionary\n        else:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    # return the final frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # create a dictionary to store the frequencies\n    freq_dict = {}\n    # iterate over the flattened list and update the frequencies in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # Iterate over each element in the list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[elem] = 1\n            \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store frequency of each element\n    freq_dict = {}\n\n    # loop through each element in the list\n    for item in list1:\n        # if the item is not a list, add it to the dictionary with frequency 1\n        if not isinstance(item, list):\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n        # if the item is a list, recursively call the function on it\n        else:\n            sub_freq_dict = frequency_lists(item)\n            # add the sub-frequency dictionary to the main dictionary\n            for key, value in sub_freq_dict.items():\n                if key not in freq_dict:\n                    freq_dict[key] = value\n                else:\n                    freq_dict[key] += value\n\n    # return the final dictionary\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers and divide with the length of the list\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    :param n: An integer representing the decimal number.\n    :return: A string representing the binary equivalent of the given decimal number.\n    \"\"\"\n    # Convert the decimal number to binary using recursion\n    def helper(num, result):\n        if num == 0:\n            return result\n        else:\n            return helper(num // 2, result + str(num % 2))\n\n    # Call the helper function and return the result\n    return helper(n, \"\")"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = ''\n    while n > 0: \n        rem = n % 2 \n        binary_str = str(rem) + binary_str \n        n = n // 2 \n    \n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    \n    binary_representation = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_representation = str(remainder) + binary_representation\n        n = n // 2\n        \n    return binary_representation"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        # convert the remaining digits to binary recursively\n        binary = decimal_to_binary(n//2)\n        # add the least significant digit of n to binary\n        binary = binary + str(n%2)\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    elif n < 0:\n        return \"-\" + decimal_to_binary(-n)\n    else:\n        return str(n % 2) + decimal_to_binary(n // 2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0: \n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    # Initialize the result string and the current remainder\n    result = \"\"\n    remainder = n\n    \n    # Convert the number from base 10 to base 2\n    while remainder > 0:\n        remainder, digit = divmod(remainder, 2)\n        result = str(digit) + result\n        \n    # Remove leading zeros\n    while result[0] == '0':\n        result = result[1:]\n        \n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to store the binary number\n    binary = \"\"\n    # loop through each digit of the decimal number from right to left\n    for i in range(len(str(n))):\n        # get the current digit of the decimal number\n        digit = int(str(n)[-i-1])\n        # if the current digit is greater than 0, add it to the binary string\n        if digit > 0:\n            binary = str(digit) + binary\n    # return the binary string\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Create a string representation of the input number\n    num_str = str(num)\n\n    # Find the largest palindrome that is less than or equal to the input number\n    largest_palindrome = int(num_str[::-1])\n\n    # Find the smallest palindrome that is greater than the largest palindrome\n    smallest_palindrome = largest_palindrome + 1\n\n    # Find the next smallest palindrome\n    while True:\n        next_palindrome = smallest_palindrome + 1\n        if is_palindrome(next_palindrome):\n            break\n        smallest_palindrome = next_palindrome\n\n    # Return the next smallest palindrome\n    return next_palindrome\n\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_number = 10**9 + 1\n    next_number = 0\n\n    for i in range(max_number, -1, -1):\n        if is_palindrome(i):\n            next_number = i\n            break\n\n    return next_number\n\ndef is_palindrome(num):\n    '''\n    Check if a given number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        return num + 1\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    next_num = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", next_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Initialize variables\n    min_num = sys.maxsize\n    is_palindrome = False\n    \n    # Check if the input number is a palindrome\n    for i in range(10**num-1, 0, -1):\n        if str(i) == str(i)[::-1]:\n            is_palindrome = True\n    \n    # If the input number is not a palindrome, increment the number by 1 and check if the resulting number is a palindrome\n    if not is_palindrome:\n        num += 1\n        for i in range(10**num-1, 0, -1):\n            if str(i) == str(i)[::-1]:\n                is_palindrome = True\n    \n    # If the input number is still not a palindrome, increment the number by 1 and check if the resulting number is a palindrome\n    if not is_palindrome:\n        num += 1\n        for i in range(10**num-1, 0, -1):\n            if str(i) == str(i)[::-1]:\n                is_palindrome = True\n    \n    # Return the next smallest palindrome\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n    \n    # Check if the number is less than 10\n    if num < 10:\n        return next_smallest_palindrome(num+1)\n    \n    # Check if the number is greater than 10 but less than 100\n    if num >= 10 and num < 100:\n        return next_smallest_palindrome(num+10)\n    \n    # Check if the number is greater than 999\n    if num >= 100:\n        return next_smallest_palindrome(num+100)\n    \n    # Check if the number is greater than 9999\n    if num >= 1000:\n        return next_smallest_palindrome(num+1000)\n    \n    # Check if the number is greater than 99999\n    if num >= 10000:\n        return next_smallest_palindrome(num+10000)\n    \n    # If the number is not a palindrome, return the smallest palindrome greater than the input number\n    return next_smallest_palindrome(num+1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if is_palindrome(num):\n        return num + 1\n    else:\n        for i in range(num+1, sys.maxsize):\n            if is_palindrome(i):\n                return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num + 1\n    else:\n        # If the input number is not a palindrome, then we need to start over from the beginning\n        max_num = int(str(num)[::-1]) * 10 + 9\n        while num >= max_num:\n            num -= 1\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the given number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num\n    else:\n        # Check if the number is positive\n        if num > 0:\n            # Initialize the smallest possible palindrome\n            smallest_palindrome = 10**(len(str(num))+1) - 1\n            # Find the next smallest palindrome\n            for i in range(10**(len(str(num))+1), 10**len(str(num))+1, -1):\n                if int(str(i)[::-1]) < smallest_palindrome and int(str(i)[::-1]) % num == 0:\n                    smallest_palindrome = i\n            # Return the next smallest palindrome\n            return smallest_palindrome\n        else:\n            # Check if the number is negative\n            if num < 0:\n                # Initialize the smallest possible palindrome\n                smallest_palindrome = -10**(len(str(num))+1) + 1\n                # Find the next smallest palindrome\n                for i in range(-10**(len(str(num))+1) - 1, -1, -1):\n                    if int(str(i)[::-1]) > smallest_palindrome and int(str(i)[::-1]) % num == 0:\n                        smallest_palindrome = i\n                # Return the next smallest palindrome\n                return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    n = num\n    if num % 2 == 0:\n        n -= 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    result = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n    \n    # Find the largest palindrome smaller than or equal to num\n    largest_palindrome = 0\n    for i in range(10**num, 10**(num+1)):\n        if is_palindrome(i):\n            largest_palindrome = i\n            break\n    \n    # If there is no such palindrome, return the next smallest palindrome\n    if largest_palindrome == 0:\n        return next_smallest_palindrome(num+1)\n    \n    # If there is a palindrome smaller than the current number, return the next smallest palindrome\n    return largest_palindrome + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert k to index\n    k = k - 1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If we have found kth element, return its value\n        if i == k:\n            return arr[i]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError('k must be between 1 and the length of the array (inclusive)')\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    left = 1\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid - 1] == k:\n            return mid\n        elif arr[mid - 1] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        print(\"Invalid index.\")\n        return\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The 1-based index of the element to find.\n\n    Returns:\n        int: The kth element in the input array.\n\n    Example:\n        >>> arr = [1, 2, 3, 4, 5]\n        >>> kth_element(arr, 3)\n        3\n        >>> kth_element(arr, 5)\n        5\n        >>> kth_element(arr, 6)\n        None\n    \"\"\"\n\n    # Check if the input array is valid\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if the index k is valid\n    if not isinstance(k, int) or k < 1 or k > len(arr) + 1:\n        raise ValueError(\"Index must be a positive integer less than or equal to the length of the array plus 1.\")\n\n    # Find the kth element using binary search\n    left = 1\n    right = len(arr)\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid - 1] <= k:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Check if kth element was found\n    if left <= k <= len(arr):\n        return arr[left - 1]\n    else:\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if array is empty or k is invalid\n    if len(arr) == 0 or k <= 0:\n        return None\n\n    # Calculate the length of the array\n    n = len(arr)\n\n    # Initialize the first and last pointers\n    first = 1\n    last = n\n\n    # Calculate the step size\n    step = n // 2\n\n    # While the pointers are not crossed\n    while first <= last:\n        # Calculate the middle index\n        middle = first + (last - first) // 2\n\n        # If the kth element is found, return its value\n        if middle == k:\n            return arr[middle-1]\n\n        # If the kth element is in the left half\n        elif middle < k:\n            first = middle + 1\n\n        # If the kth element is in the right half\n        else:\n            last = middle - 1\n\n    # If the kth element is not found, return None\n    return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Example:\n    Input: \"snake_case_string\"\n    Output: \"snakeCaseString\"\n    \"\"\"\n\n    # Convert the snake case string to a list of words\n    words = word.split('_')\n\n    # Initialize a variable to keep track of the camel case string\n    camel_case_string = ''\n\n    # Iterate over the list of words\n    for word in words:\n        # Capitalize the first letter of the current word\n        capitalized_word = word.capitalize()\n        # Append the capitalized word to the camel case string\n        camel_case_string += capitalized_word\n\n    # Return the camel case string\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        elif i > 0 and letter.isupper():\n            camel_case += \"_\" + letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i].isupper():\n            camel_case += \"_\"\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() if x.islower() else x for x in re.findall(r'(\\b\\w+\\b)', word))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for char in word:\n        if char.isupper():\n            camel_case += char\n        else:\n            camel_case += '_' + char.lower()\n    return camel_case.lstrip('_')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter = True\n    camel_case_word = ''\n    for letter in word:\n        if first_letter:\n            camel_case_word += letter.upper()\n            first_letter = False\n        else:\n            camel_case_word += letter.lower()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0 or char.isupper():\n            camel_case += char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0 or (i > 0 and char!= '_'):\n            camel_case += char.upper()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n    # Convert the first letter to lowercase and the rest to uppercase\n    camel_word = words[0].lower() + ''.join([word.capitalize() for word in words[1:]])\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Initialize the camel case string\n    camel_case = \"\"\n\n    # Loop through each character of the snake case string\n    for char in word:\n        # If the character is a space, skip it\n        if char == \" \":\n            continue\n        # If the character is the first character, convert it to uppercase and append it to the camel case string\n        elif char.isupper():\n            camel_case += char\n        # If the character is a lowercase letter, convert it to uppercase and append it to the camel case string\n        elif char.islower():\n            camel_case += char.upper()\n        # If the character is a number, append it to the camel case string as is\n        else:\n            camel_case += char\n\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize the count variable\n    count = 0\n\n    # Generate a random walk of length n on the graph\n    random_walk = []\n    for i in range(n):\n        random_walk.append(i+1)\n\n    # Check if each vertex is included in the random walk\n    for i in range(m):\n        if random_walk.count(i+1) == 1:\n            count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if m <= n:\n        return 0\n\n    def phi(n):\n        if n <= 1:\n            return 1\n        phi = 0\n        for i in range(2, n + 1):\n            if n % i == 0:\n                phi += 1\n        return phi\n\n    def totient(n):\n        return (n - 1) * phi(n)\n\n    def eulerian_poly(n, m):\n        if n == 0:\n            return 1\n        p = 1\n        for i in range(1, m + 1):\n            p = (p * (2 * i - n)) % n\n        return p\n\n    def count_divisors(n, k):\n        count = 0\n        for i in range(2, n):\n            if n % i == 0:\n                count += 1\n                if count == k:\n                    return i\n        return n\n\n    eulerian_nums = []\n    for i in range(1, n + 1):\n        p = 1\n        for j in range(1, m + 1):\n            p = (p * (2 * j - i)) % n\n        if is_prime(p):\n            eulerian_nums.append(p)\n\n    eulerian_poly_val = eulerian_poly(n, m)\n\n    for num in eulerian_nums:\n        if totient(num) == eulerian_poly_val:\n            return num\n\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the result as 0\n    result = 0\n    # Loop through all possible values of n\n    for i in range(1, n + 1):\n        # Loop through all possible values of m\n        for j in range(1, m + 1):\n            # Check if the current combination is a valid Eulerian number\n            if i + j == n:\n                # If it is, add 1 to the result\n                result += 1\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a += m**i*(1-2*m)**(n-i)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Check if n is odd\n    if n % 2!= 0:\n        return -1\n    \n    # Calculate the factorial of n and m\n    factorial_n = 1\n    for i in range(1, n+1):\n        factorial_n *= i\n    factorial_m = 1\n    for i in range(1, m+1):\n        factorial_m *= i\n    \n    # Calculate the Eulerian number using formula\n    return factorial_n // factorial_m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # If either n or m is less than or equal to 0, return 1\n    if n <= 0 or m <= 0:\n        return 1\n\n    # If n is odd and m is even, return 1\n    if n % 2 == 1 and m % 2 == 0:\n        return 1\n\n    # If n is even and m is odd, return 0\n    if n % 2 == 0 and m % 2 == 1:\n        return 0\n\n    # If n is even and m is even, return 0\n    if n % 2 == 0 and m % 2 == 0:\n        return 0\n\n    # If n is odd and m is odd, return 0\n    if n % 2 == 1 and m % 2 == 1:\n        return 0\n\n    # If n is 1 and m is 1, return 1\n    if n == 1 and m == 1:\n        return 1\n\n    # If none of the above conditions are met, raise an error\n    raise ValueError(\"Invalid input\")"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize the matrix to store the edges\n    edges = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # add the edges to the matrix\n    for i in range(n):\n        for j in range(m):\n            edges[i+1][j+1] = 1\n\n    # initialize the matrix to store the distances\n    distances = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    # add the distances to the matrix\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                distances[i+1][j+1] = 0\n            elif i < j:\n                distances[i+1][j+1] = edges[i+1][j+1] + distances[i+1][j]\n\n    # find the Eulerian number\n    a = 1\n    for i in range(n+1):\n        a = a * distances[i][i] % 1000000007\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        return (2 * eulerian_num(n-1, m)) - eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (m * (n-1)) + eulerian_num(n-1, m-1)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Convert the sublist to a set to remove duplicates\n        sublist_set = set(sublist)\n        # Convert the sublist back to a list to sort\n        sublist_sorted = list(sublist_set)\n        # Sort the sublist in place using the sorted function\n        sublist_sorted.sort()\n        # Convert the sorted sublist back to a string and update the original list\n        sublist_str = ''.join(sublist_sorted)\n        input_list[input_list.index(sublist)][0] = sublist_str"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    This function takes a list of lists as input and sorts each sublist of strings.\n\n    Args:\n    input_list (list): A list of lists containing sublists of strings\n\n    Returns:\n    The same input_list with each sublist of strings sorted in ascending order.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Using extend() method of list to add the list to the tuple\n    test_tup.extend(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    new_tup = tuple(test_list) + tuple(test_tup)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    \n    # append the lists to the tuples\n    test_list.extend(test_tup)\n    \n    # convert the lists back to tuples\n    test_list = tuple(test_list)\n    \n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new tuple with the given list appended to the given tuple\n    new_tup = test_tup + (test_list,)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the test list to the test tup\n    test_tup += test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for item in test_list:\n        test_tup.append(item)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Using heapq module to merge three lists into a single sorted list\n    # Since heapq is a min-heap, we will use min() function to get the minimum element\n    # from each list and append it to a new list\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heappush(merged_list, heapq.heappop(num1))\n    heapq.heapify(num2)\n    heapq.heappush(merged_list, heapq.heappop(num2))\n    heapq.heapify(num3)\n    heapq.heappush(merged_list, heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Use a min heap to merge the three lists\n    min_heap = []\n    heapq.heapify(min_heap)\n    heapq.heappush(min_heap, num1)\n    heapq.heappush(min_heap, num2)\n    heapq.heappush(min_heap, num3)\n\n    # Merge the lists by removing smallest elements from the heap\n    merged_list = []\n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists in sorted order\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create three lists to merge\n    lists = [num1, num2, num3]\n    \n    # Initialize an empty list to hold the merged list\n    merged_list = []\n    \n    # Iterate through each list and add elements to the merged list\n    for list in lists:\n        for element in list:\n            heapq.heappush(merged_list, element)\n    \n    # Return the sorted merged list\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the first two lists into a single list\n    merged_list = sorted(num1 + num2)\n    # Merge the merged list with the third list\n    return sorted(merged_list + num3)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Use a max heap to sort the combined list\n    heapq.heapify(combined_list)\n    \n    # Extract the sorted elements from the heap and return them as a list\n    sorted_list = []\n    while combined_list:\n        sorted_list.append(heapq.heappop(combined_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Merge the two sorted lists\n    merged_list = num1 + num2\n    \n    # Merge the merged list with the third list\n    merged_list = heapq.merge(merged_list, num3)\n    \n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # initialize an empty list to store the final sorted list\n    sorted_list = []\n\n    # add all elements of the first two lists to the sorted list\n    sorted_list.extend(heapq.merge(num1, num2))\n\n    # add the remaining elements of the third list to the sorted list\n    sorted_list.extend(num3)\n\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge num1, num2 and num3\n    merged = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged.append(num2[j])\n            j += 1\n        else:\n            merged.append(num3[k])\n            k += 1\n    # Add remaining elements of num1, num2 and num3\n    merged += num1[i:]\n    merged += num2[j:]\n    merged += num3[k:]\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert the list to set to remove duplicates\n    num1 = set(num1)\n    num2 = set(num2)\n    num3 = set(num3)\n    # combine all the sets into one set\n    combined_set = num1.union(num2, num3)\n    # convert the set back to list to sort\n    sorted_list = sorted(list(combined_set))\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables for the odd count and the binary string\n    odd_count = 0\n    binary_string = s\n    \n    # Rotate the binary string the given number of times\n    for i in range(n):\n        new_string = \"\"\n        for j in range(len(binary_string)):\n            if binary_string[j] == \"0\":\n                new_string += \"0\"\n            else:\n                new_string += \"1\"\n        binary_string = new_string\n    \n    # Count the number of odd characters in the rotated binary string\n    for i in range(len(binary_string)):\n        if binary_string[i] == \"1\":\n            odd_count += 1\n    \n    # Return the odd count\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    binary_s = bin(int(s))[2:]\n    n = n % len(binary_s)\n    for i in range(n):\n        binary_s = binary_s[-1] + binary_s[:-1]\n    for i in range(len(binary_s)):\n        if binary_s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    oddCount = 0 \n    i = 0 \n    while i < len(s): \n        if s[i] == '1': \n            oddCount += 1 \n        i += n \n        i %= len(s) \n    return oddCount "
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # check if the binary string is valid\n    if not s.isdigit():\n        print(\"Invalid binary string\")\n        return\n    \n    # convert the binary string to an integer\n    num = int(s, 2)\n    \n    # rotate the binary string the given number of times\n    for i in range(n):\n        num = (num << 1) | (num & 1)\n    \n    # count the number of odd numbers in the rotated binary string\n    count = 0\n    while num!= 0:\n        if num & 1 == 1:\n            count += 1\n        num >>= 1\n        \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Find the length of the binary string\n    length = len(s)\n    \n    # Initialize the count of odd numbers\n    count = 0\n    \n    # Initialize the current index\n    index = 0\n    \n    # Loop n times\n    for i in range(n):\n        # Calculate the new index by taking the current index modulo the length of the binary string\n        new_index = (index + length) % length\n        \n        # If the current index is a multiple of 2, then it's an odd number\n        if new_index % 2!= 0:\n            count += 1\n            \n        # Set the current index to the new index\n        index = new_index\n    \n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    :param s: binary string to be rotated\n    :param n: number of rotations\n    :return: the number of odd values when rotating the binary string the given number of times\n    \"\"\"\n    odd_count = 0\n    for i in range(n):\n        if sum(int(j) for j in s[::-1]) % 2!= 0:\n            odd_count += 1\n        s = s[::-1] + s[::-1][:len(s)-1]\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    This function takes a binary string s and a positive integer n as input and returns the number of odd values when rotating the string n times.\n\n    Example:\n    odd_Equivalent(\"1010\", 2) returns 2 (because the binary string \"1010\" is rotated 2 times and the odd values are 1 and 0).\n\n    Note: The length of the binary string should be at most 10^5.\n    \"\"\"\n\n    # initialize count variable\n    count = 0\n\n    # convert binary string s to an array of integers\n    arr = [int(x) for x in s]\n\n    # rotate the array by n positions\n    arr = arr[n:] + arr[:n]\n\n    # loop through the array and check if each element is odd\n    for num in arr:\n        if num % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    count = 0\n\n    # Convert the binary string to a list\n    s = list(s)\n\n    # Rotate the binary string the given number of times\n    for i in range(n):\n        # Append the last element to the beginning\n        s.append(s.pop(0))\n\n    # Iterate through the rotated binary string and count the odd numbers\n    for num in s:\n        if num % 2 == 1:\n            count += 1\n\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # Function to check if a number is odd\n    def is_odd(num):\n        return num % 2 == 1\n    \n    # Function to rotate a binary string\n    def rotate(s, n):\n        return s[-n:] + s[:-n]\n    \n    # Find the length of the binary string\n    length = len(s)\n    \n    # Find the number of odd numbers after rotating the binary string\n    odd_count = 0\n    for i in range(n):\n        s = rotate(s, length)\n        for j in range(length):\n            if is_odd(ord(s[j])):\n                odd_count += 1\n    \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common_list.append(nestedlist[i][j])\n            else:\n                if nestedlist[i][j] in common_list:\n                    common_list.remove(nestedlist[i][j])\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty dictionary to store common elements\n    common = {}\n    # loop through each list in the nested list\n    for i in nestedlist:\n        # loop through each element in the current list\n        for j in i:\n            # check if the element is already in the dictionary\n            if j in common:\n                # if it is, increment the count\n                common[j] += 1\n            # if the element is not in the dictionary, add it with a count of 1\n            else:\n                common[j] = 1\n    # create a new list with the common elements\n    common_list = []\n    for key, value in common.items():\n        if value == len(nestedlist):\n            common_list.append(key)\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for sublist in nestedlist:\n        if sublist not in common:\n            common.append(sublist)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j] and nestedlist[j] in nestedlist[i]:\n                common_elements.append(nestedlist[i])\n                common_elements.append(nestedlist[j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            for k in range(j+1, len(nestedlist)):\n                if nestedlist[i] in nestedlist[j] and nestedlist[i] in nestedlist[k] and nestedlist[j] in nestedlist[k]:\n                    common_elements.append(nestedlist[i])\n                    break\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        list1 = common_in_nested_lists(nestedlist[0])\n        list2 = common_in_nested_lists(nestedlist[1:])\n        return list(set(list1) & set(list2))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set()\n    set2 = set()\n    for i in nestedlist:\n        set1.update(i)\n    for i in nestedlist:\n        set2.update(i)\n    common_set = set1.intersection(set2)\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Find the length of the first list\n    length_1 = len(nestedlist[0])\n    # Find the length of the second list\n    length_2 = len(nestedlist[1])\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Loop through each element of the first list\n    for i in range(length_1):\n        # If the element is present in both lists, add it to the common set\n        if nestedlist[0][i] in nestedlist[1]:\n            common.add(nestedlist[0][i])\n\n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if not i:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_flag = True\n    for i in list1:\n        if len(i) > 0:\n            empty_flag = False\n            break\n    return empty_flag"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if not dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n        else:\n            continue\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:  # if dictionary is not empty, loop breaks\n            return False  # return False if any dictionary is not empty\n    return True  # if all dictionaries are empty, return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize an empty integer variable to store the sum of the tuple's elements\n    result = 0\n    \n    # Iterate through each element in the tuple\n    for num in nums:\n        # Add the current element to the result variable\n        result += num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    :param nums: a tuple of positive integers\n    :return: the sum of the integers in the input tuple\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the result to 0\n    result = 0\n    # Iterate over the list and add each element to the result\n    for num in nums_list:\n        result += num\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            if isinstance(item, (int, float)):\n                continue\n            try:\n                float(item)\n            except ValueError:\n                return False\n            else:\n                row[test_list.index(row)] = float(item)\n    return True"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n                result.append(float(element))\n            except ValueError:\n                result.append(element)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                new_element = float(element)\n                sublist[sublist.index(element)] = new_element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for element in item:\n            if isinstance(element, float):\n                pass\n            elif isinstance(element, str):\n                try:\n                    float(element)\n                except ValueError:\n                    pass\n                else:\n                    item[item.index(element)] = float(element)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n\n    # convert the string to a list of characters\n    char_list = list(string)\n\n    # initialize an empty list to store the list of words\n    word_list = []\n\n    # initialize a flag to keep track of whether a word has been started or not\n    in_word = False\n\n    # loop through the list of characters\n    for char in char_list:\n\n        # if the character is a space, start a new word\n        if char =='':\n            if in_word:\n                word_list.append(''.join(char_list[i:j] for i,j in zip(char_list.index(char_list[i]), char_list.index(char_list[i+1]))))\n                in_word = False\n\n        # if the character is a letter, add it to the current word\n        elif char.isalpha():\n            if not in_word:\n                word_list.append('')\n            word_list[-1] += char\n            in_word = True\n\n    return word_list"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] == arr[1]:\n        return search(arr[2:])\n    else:\n        for i in range(1, len(arr)-1):\n            if arr[i] == arr[i-1] and arr[i] == arr[i+1]:\n                return arr[i]\n        return search(arr[1:])"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        # if current element is not equal to next element, then we have found the element that appears only once\n        if arr[i]!= arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables\n    count = 0\n    unique_element = None\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is the first one to appear\n        if count == 0:\n            unique_element = arr[i]\n        # If the current element is the same as the previous one, increment the count\n        elif arr[i] == unique_element:\n            count += 1\n        # If the current element is different from the previous one, reset the count\n        else:\n            count = 0\n            unique_element = arr[i]\n    \n    # If no element appeared only once, return None\n    if count == 0:\n        return None\n    \n    # Otherwise, return the unique element\n    else:\n        return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in arr:\n        if count[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_elements = {}\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements[element] = 1\n        else:\n            del unique_elements[element]\n    return next(iter(unique_elements))"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        count = 1\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n                if count > 1:\n                    return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Iterate through the array and increment the frequency of each element in the dictionary\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Iterate through the dictionary and return the key with frequency equal to 1\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes in an array of integers and returns the element that appears only once in the array.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        The element that appears only once in the array.\n    \"\"\"\n\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Loop through the array and update the count_dict\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Loop through the array and find the element that appears only once\n    for num in arr:\n        if count_dict[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    count = 0\n    for element in arr:\n        if element == unique_element:\n            count += 1\n        else:\n            unique_element = element\n            count = 1\n\n    if count == len(arr):\n        return unique_element\n    else:\n        return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    '''\n    Function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_prod = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            prod = abs(lst[i][0] * lst[j][1])\n            max_prod = max(max_prod, prod)\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    max_product = float('-inf')\n\n    # loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the absolute difference between the numbers in the tuples\n            diff = abs(list1[i][0] - list1[j][0]) + abs(list1[i][1] - list1[j][1])\n\n            # update the maximum product if necessary\n            if diff > max_product:\n                max_product = diff\n\n    # return the maximum absolute product between numbers in pairs of tuples\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate through the list\n    for i in range(len(list1)):\n        # Check if the current element is a tuple\n        if isinstance(list1[i], tuple):\n            # If it is, check if the next element is also a tuple\n            if isinstance(list1[i+1], tuple):\n                # If it is, calculate the product of the two numbers and check if it is greater than the current maximum product\n                if abs(list1[i][0] * list1[i+1][1]) > max_product:\n                    max_product = abs(list1[i][0] * list1[i+1][1])\n                    current_product = abs(list1[i][0] * list1[i+1][1])\n            # If the next element is not a tuple, check if it is a number\n            elif isinstance(list1[i+1], (int, float)):\n                # If it is, calculate the product of the current number and the next number and check if it is greater than the current maximum product\n                if abs(list1[i][0] * list1[i+1]) > max_product:\n                    max_product = abs(list1[i][0] * list1[i+1])\n                    current_product = abs(list1[i][0] * list1[i+1])\n            # If the next element is neither a tuple nor a number, continue\n            else:\n                continue\n        # If the current element is not a tuple, check if it is a number\n        elif isinstance(list1[i], (int, float)):\n            # If it is, calculate the product of the current number and the next number and check if it is greater than the current maximum product\n            if abs(list1[i] * list1[i+1]) > max_product:\n                max_product = abs(list1[i] * list1[i+1])\n                current_product = abs(list1[i] * list1[i+1])\n            # If the next element is neither a tuple nor a number, continue\n            else:\n                continue\n        # If the current element is neither a tuple nor a number, continue\n        else:\n            continue\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product > 0:\n                abs_product = abs(product)\n            else:\n                abs_product = abs(product) * -1\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0])) > max_product:\n                max_product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = max(pair[0], pair[1]) * abs(pair[0] * pair[1])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable_pair(n):\n    '''\n    Write a function to check if a given number is an amicable pair.\n    '''\n    if n < 12:\n        return False\n    for i in range(1, n):\n        if n % i == 0 and i!= n/i:\n            return True\n    return False\n\ndef sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable_pair(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_amicable_numbers(limit):\n    '''\n    Function to find the sum of all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num > 1:\n            for div in range(2, num):\n                if num % div == 0:\n                    break\n            else:\n                amicable_numbers.append(num)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        # check if i is amicable with all numbers from 1 to sqrt(i)\n        if i == sum_of_amicable_numbers + i and i!= sum_of_amicable_numbers:\n            sum_of_amicable_numbers += i\n        elif i == sum_of_amicable_numbers - i and i!= sum_of_amicable_numbers:\n            sum_of_amicable_numbers -= i\n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize a list to store the prime numbers\n    primes = []\n    # loop through all numbers from 2 to limit\n    for i in range(2, limit+1):\n        # check if the number is amicable\n        is_amicable = True\n        for j in range(2, int(limit/i)+1):\n            if i % j == 0:\n                is_amicable = False\n                break\n        # if the number is amicable, add it to the list of prime numbers\n        if is_amicable:\n            primes.append(i)\n    # calculate the sum of all prime numbers\n    prime_sum = sum(primes)\n    return prime_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        is_amicable = False\n        for factor in range(1, num):\n            if num % factor == 0:\n                is_amicable = True\n                break\n        if is_amicable:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Creating a list of all numbers from 1 to limit\n    numbers = list(range(1, limit+1))\n\n    # Defining a function to check if a number is amicable\n    def is_amicable(num):\n        # If the number is less than or equal to 1, it is not amicable\n        if num <= 1:\n            return False\n\n        # Finding the sum of the squares of the divisors of the number\n        square_sum = sum([x**2 for x in range(1, int(num**0.5)+1) if num % x == 0])\n\n        # Returning True if the number is amicable and False otherwise\n        return square_sum == num\n\n    # Filtering the list of numbers to keep only those that are amicable\n    amicable_numbers = [num for num in numbers if is_amicable(num)]\n\n    # Returning the sum of the amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a dictionary to store the prime factors of each number\n    prime_factors = {}\n    for num in range(2, limit+1):\n        # check if the number is prime\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        # if the number is prime, store its prime factors\n        if is_prime:\n            prime_factors[num] = []\n            for i in range(2, num):\n                if num % i == 0:\n                    prime_factors[num].append(i)\n            # remove duplicates from the list of prime factors\n            prime_factors[num] = list(set(prime_factors[num]))\n\n    # iterate over all pairs of numbers up to the limit\n    amicable_sum = 0\n    for num1 in range(2, limit+1):\n        # check if the number is amicable to any other number\n        for num2 in range(2, limit+1):\n            if num2!= num1 and is_amicable(num1, num2):\n                amicable_sum += num1 + num2\n                break\n\n    return amicable_sum\n\n\ndef is_amicable(num1, num2):\n    '''\n    Check if num1 and num2 are amicable by checking if their prime factors sum up to the original number.\n    '''\n    # check if the prime factors of both numbers sum up to the original number\n    prime_factors1 = prime_factors[num1]\n    prime_factors2 = prime_factors[num2]\n    if set(prime_factors1)!= set(prime_factors2) or prime_factors1[0]!= prime_factors2[0]:\n        return False\n    # check if num2 is a factor of num1\n    for prime in prime_factors1:\n        if prime**2 % num1 == 0:\n            return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum_of_two_numbers(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_two_numbers(num):\n    '''\n    Write a function to find the sum of two numbers.\n    '''\n    for i in range(1, num):\n        if num % i == 0:\n            return i + num // i\n    return None"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_amicable_number(num, limit):\n    \"\"\"\n    Returns True if a number is amicable to the limit, False otherwise.\n    \"\"\"\n    if num == 1 or num == limit:\n        return False\n    \n    sum_of_proper_divisors = 0\n    for i in range(2, limit):\n        if num % i == 0:\n            sum_of_proper_divisors += i\n    \n    if num == sum_of_proper_divisors:\n        return True\n    else:\n        return False\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the limit.\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for num in range(1, limit + 1):\n        if is_amicable_number(num, limit):\n            sum_of_amicable_numbers += num\n    \n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Create a list of all numbers from 1 to limit\n    numbers = list(range(1, limit+1))\n\n    # Create a dictionary to store the sum of amicable numbers\n    amicable_sum = {}\n\n    # Loop through all numbers in the list\n    for num in numbers:\n        # Check if the number is amicable\n        if is_amicable(num):\n            # If the number is amicable, add it to the sum dictionary\n            amicable_sum[num] = sum([i for i in range(1, num) if num % i == 0])\n\n    # Sum up all the amicable numbers and return the result\n    return sum(amicable_sum.values())\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    # Check if the number is divisible by any number between 1 and its square root\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = cmath.degrees(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_radian = cmath.phase(a+b*1j)\n    angle_degree = cmath.degrees(angle_radian)\n    return angle_degree"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = cmath.degrees(angle_rad)\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    angle = round(angle,2)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns the angle of the complex number in radians.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle in degrees.\n    '''\n    angle = cmath.phase(a+b)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle.real\n    \n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            if count > max_diff:\n                max_diff = count\n            count = 0\n    if count > max_diff:\n        max_diff = count\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count = 0\n        max_diff = max(max_diff, count)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    def count_zeros(substring):\n        return substring.count('0')\n\n    def count_ones(substring):\n        return substring.count('1')\n\n    max_diff = 0\n    current_diff = 0\n\n    for i in range(len(string) - 1):\n        substring = string[i:i+2]\n        if count_zeros(substring) > count_ones(substring):\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)-1):\n        diff = 0\n        for j in range(i+1, len(string)):\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '1':\n            dp[i][i] = 1\n            max_diff = max(max_diff, 1)\n        else:\n            dp[i][i] = 0\n    for length in range(2, n):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if string[i] == '1' and string[j] == '0':\n                dp[i][j] = dp[i+1][j-1] + 1\n                max_diff = max(max_diff, dp[i][j])\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize the maximum difference to be 0\n    max_diff = 0\n    \n    # Loop through each sub-string of the binary string\n    for i in range(len(string)):\n        # Initialize the number of 0s and 1s in the sub-string\n        count_0s = 0\n        count_1s = 0\n        \n        # Loop through each character in the sub-string\n        for j in range(i, len(string)):\n            # If the character is a 0, increment the count of 0s\n            if string[j] == '0':\n                count_0s += 1\n            # If the character is a 1, increment the count of 1s\n            else:\n                count_1s += 1\n            \n            # Update the maximum difference if the count of 0s is greater than the count of 1s\n            if count_0s > count_1s:\n                max_diff = max(max_diff, count_0s - count_1s)\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    zeros = 0\n    ones = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        diff = abs(zeros - ones)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)-1):\n        if string[i] == '0' and string[i+1] == '1':\n            diff = i+1 - string.find('0', i+1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n\n    for i in range(1, n):\n        diff = 0\n        for j in range(i):\n            if string[j] == '0' and string[i] == '0':\n                diff += 1\n            elif string[j] == '1' and string[i] == '1':\n                diff -= 1\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    length = len(string)\n    max_diff = 0\n    diff = 0\n\n    for i in range(length):\n        if string[i] == '0':\n            diff += 1\n        else:\n            diff = 0\n\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # finding all the divisors of a and b\n    divisors = []\n    divisor = 1\n    while divisor <= a:\n        if a % divisor == 0 and b % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n\n    # finding the sum of common divisors\n    sum_of_divisors = 0\n    for i in range(len(divisors)):\n        if divisors[i] % b == 0:\n            sum_of_divisors += divisors[i]\n\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # iterate through the range of numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # check if both numbers are divisible by i\n        if (a % i == 0) and (b % i == 0):\n            # if they are, add i to the sum\n            result = a // i + b // i\n            # return the sum\n            return result\n    # if no common divisor is found, return None\n    return None"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    # check if the two numbers are valid\n    if num1 <= 1 or num2 <= 1:\n        return \"Invalid input. Both numbers must be greater than 1.\"\n\n    # find the common divisors of the two numbers\n    common_divisors = []\n    for i in range(2, num1 + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n    common_divisors.sort()\n\n    # calculate the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding all the divisors of a and b\n    div1 = set(set(a).intersection(set(b)))\n    div2 = set(set(b).intersection(set(a)))\n    \n    # Calculating the sum of common divisors\n    sum_div = sum(div1) + sum(div2)\n    \n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = [i for i in range(1, min(a, b)+1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    # Find the set of common divisors of two numbers\n    divisors = set(set(a).intersection(set(b)))\n\n    # Find the sum of common divisors\n    result = 0\n    for divisor in divisors:\n        result += divisor\n\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize variables to store common divisors\n    common_divisors = []\n\n    # Iterate through the range of numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to the list of common divisors\n            common_divisors.append(i)\n\n    # Calculate the sum of common divisors\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers using the Euclidean algorithm.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        This function finds the greatest common divisor of two given numbers using the Euclidean algorithm.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Finding the greatest common divisor of the two given numbers using Euclidean algorithm\n    gcd_value = gcd(a, b)\n\n    # Finding the sum of common divisors by dividing the two given numbers by their gcd value\n    sum_of_common_divisors = (a // gcd_value) + (b // gcd_value)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two positive integers as input and returns the sum of their common divisors.\n    '''\n    common_divisors = []\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # initialize sum of common divisors as zero\n    sum_cd = 0\n    \n    # loop through all integers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # if both numbers are divisible by i, add it to the sum of common divisors\n        if a % i == 0 and b % i == 0:\n            sum_cd += i\n            \n    return sum_cd"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    # Split the input string into words\n    words = str.split()\n\n    # Initialize an empty list to store the longer words\n    long_words_list = []\n\n    # Iterate through each word in the input list\n    for word in words:\n        # Check if the length of the current word is greater than `n`\n        if len(word) > n:\n            # If the length is greater than `n`, add it to the `long_words_list`\n            long_words_list.append(word)\n\n    # Return the `long_words_list`\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes two parameters: n (integer) and words (list of strings). \n    The function returns a list of words that are longer than n characters from the list of words.\n\n    Example:\n    >>> long_words(5, [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"])\n    [\"banana\", \"elderberry\"]\n    \"\"\"\n\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Iterate over the list of words\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Append the word to the list of long words\n            long_words_list.append(word)\n\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # initializing an empty list to store the long words\n    long_words_list = []\n\n    # iterating through the list of words\n    for word in words:\n        # checking if the length of the word is greater than n characters\n        if len(word) > n:\n            # appending the long word to the long_words_list\n            long_words_list.append(word)\n\n    # returning the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        # Check rows\n        for j in range(n):\n            if not (i+j) % 2:\n                # Check even numbers in the first half of the matrix\n                if my_matrix[i][j]!= my_matrix[j][i]:\n                    return False\n        # Check columns\n        for j in range(n):\n            if not (i+j) % 2:\n                # Check even numbers in the first half of the matrix\n                if my_matrix[j][i]!= my_matrix[j][n-i-1]:\n                    return False\n    # Check diagonal\n    for i in range(n):\n        if not (i+n) % 2:\n            # Check even numbers in the first half of the matrix\n            if my_matrix[i][i]!= my_matrix[n-i-1][n-i-1]:\n                return False\n    # Check the other diagonal\n    for i in range(n):\n        if not (i+n) % 2:\n            # Check even numbers in the first half of the matrix\n            if my_matrix[i][n-i-1]!= my_matrix[i][i]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    # Check if the matrix is a magic square\n    row_sum = [0] * n\n    col_sum = [0] * n\n    for i in range(n):\n        row_sum[i] = sum(my_matrix[i])\n        col_sum[i] = sum(my_matrix[j][i] for j in range(n))\n    return row_sum == col_sum == [n * n for _ in range(n)]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the input matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize the sum of the rows and columns\n    total_sum = sum(sum(row) for row in my_matrix)\n\n    # Initialize the sum of the main diagonals\n    main_diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Initialize the sum of the secondary diagonals\n    sec_diag_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    # Return True if the matrix is a magic square, False otherwise\n    return main_diag_sum == sec_diag_sum == total_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    def is_magic_square(matrix):\n        rows, cols = len(matrix), len(matrix[0])\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j]!= sum(matrix[k][j] for k in range(rows)) - sum(matrix[i][k] for k in range(cols)):\n                    return False\n        return True\n    \n    if len(set(map(sum, my_matrix)))!= 1:\n        return \"Matrix is not a square.\"\n    \n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return \"Matrix is not a square.\"\n    \n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if my_matrix[i][j] == my_matrix[i][k] == my_matrix[j][k] == 0:\n                    return False\n                elif my_matrix[i][j] == my_matrix[i][k] == my_matrix[j][k] == 1:\n                    continue\n                elif my_matrix[i][j] == my_matrix[i][k] == my_matrix[j][k] == 2:\n                    return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        if not all(isinstance(x, int) for x in row):\n            return False\n    \n    # Initialize the sum of the diagonal elements\n    diagonal_sum = 0\n    \n    # Iterate through the rows of the matrix\n    for row in my_matrix:\n        # Check if the row sums up to 0\n        if sum(row)!= 0:\n            return False\n        \n        # Check if the column sums up to 0\n        for i in range(len(my_matrix)):\n            if row[i] == my_matrix[i][i]:\n                diagonal_sum += row[i]\n            else:\n                break\n        if diagonal_sum!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    sum_of_row = sum_of_col = 0\n    \n    for i in range(rows):\n        for j in range(cols):\n            sum_of_row += matrix[i][j]\n            sum_of_col += matrix[j][i]\n    \n    for i in range(rows):\n        if sum_of_row!= 0:\n            break\n        else:\n            sum_of_row = 0\n            \n    for i in range(cols):\n        if sum_of_col!= 0:\n            break\n        else:\n            sum_of_col = 0\n            \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j]!= (i+j+1):\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check the dimensions of the matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # create the magic square\n    magic_square = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    # check that all elements in the matrix are in the magic square\n    for row in my_matrix:\n        for element in row:\n            if element not in magic_square:\n                return False\n\n    # check that all elements in the magic square are in the matrix\n    for row in magic_square:\n        for element in row:\n            if element not in my_matrix:\n                return False\n\n    # if we made it this far, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    n = len(my_matrix)\n    magic_sum = sum(sum(row) for row in my_matrix)\n\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if row_sum!= col_sum:\n            return False\n\n    for i in range(n):\n        sub_matrix_sum = sum(my_matrix[i:i+3])\n        if sub_matrix_sum!= magic_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the size of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    # Check if the matrix is a square\n    if rows!= cols:\n        return False\n    \n    # Check if the matrix contains only unique elements\n    if len(set([num for row in my_matrix for num in row]))!= rows * cols:\n        return False\n    \n    # Check if the matrix contains only numbers from 1 to n^2\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int) or num < 1 or num > rows**2:\n                return False\n    \n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            # Check if the element is in its correct row\n            if my_matrix[i][j]!= i+1:\n                return False\n            \n            # Check if the element is in its correct column\n            if my_matrix[j][i]!= j+1:\n                return False\n            \n            # Check if the element is in its correct square (3x3 submatrix)\n            submatrix = my_matrix[i:i+3, j:j+3]\n            submatrix = [row[k] for row in submatrix for k in range(3)]\n            if submatrix!= list(range(1, rows+1)):\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix has the same dimensions as a magic square\n    size = len(my_matrix)\n    if size**2!= sum(sum(row) for row in my_matrix) + 6:\n        return False\n\n    # Check if the sum of the elements in each row and column is the same\n    for i in range(size):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(size))\n        if row_sum!= col_sum:\n            return False\n\n    # Check if the sum of the elements in each 3x3 submatrix is the same\n    submatrix_sum = sum(sum(row) for i in range(size - 2) for row in my_matrix[i:i+3])\n    if submatrix_sum!= 0:\n        return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    count = defaultdict(int)\n\n    for num in nums:\n        count[num] += 1\n\n    max_num = 0\n    max_count = 0\n\n    for num, freq in count.items():\n        if freq > max_count:\n            max_num = num\n            max_count = freq\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency and return it\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n            \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, freq in count.items():\n        if freq > max_count:\n            max_count = freq\n            max_item = item\n\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the count of each item in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    \n    # find the item with the maximum frequency\n    max_count = max(count_dict.values())\n    max_item = None\n    for item, count in count_dict.items():\n        if count == max_count:\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency in the dictionary\n    max_freq = max(freq.values())\n    for item, freq in freq.items():\n        if freq == max_freq:\n            return item\n\n    # If no item has maximum frequency, return None\n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    # Iterate over each item in the list and increment its frequency in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n    # Find the item with the maximum frequency and return it\n    return max(freq_dict, key=freq_dict.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_num = None\n    max_count = 0\n    \n    for num, count in freq_dict.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    \n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for c in s:\n        if c in vowels:\n            result.append(c)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = []\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2.append(str1[i])\n    return ''.join(str2)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_str = ''.join(vowels)\n    reversed_vowels = vowels_str[::-1]\n    result = []\n    for i in str1:\n        if i not in vowels:\n            result.append(i)\n        elif i in reversed_vowels:\n            result.append(i)\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_count = 0\n    vowel_reversed = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_reversed += str1[len(str1)-1-i]\n            vowel_count += 1\n    if vowel_count == 0:\n        return str1\n    else:\n        return vowel_reversed"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    reversed_string = \"\"\n    for char in string:\n        if char in vowels:\n            reversed_string = char + reversed_string\n        else:\n            reversed_string = reversed_string + char\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reverse_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reverse_str += str1[i]\n    return reverse_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            new_str = char + new_str\n    return new_str[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a list\n    lst = list(tup1)\n    # join the list elements with commas\n    return \",\".join(str(x) for x in lst)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Converting the tuple to a list\n    list1 = list(tup1)\n    # Joining the list elements using the comma as separator\n    str1 = \",\".join(str(x) for x in list1)\n    # Returning the converted string\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string using the str() function\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string\n    string_tup = str(tup1)\n    return string_tup"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = 0\n    for num in nums:\n        if num < 0:\n            negatives += num\n    return negatives"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * ((3 * n) ** 0.5) + n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    \n    hexagonal_num = 1\n    for i in range(1, n+1):\n        hexagonal_num = hexagonal_num + 6*i - 1\n    \n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    def get_hexagonal_num(n):\n        if n == 1:\n            return 1\n        else:\n            return get_hexagonal_num(n-1) + 2*get_hexagonal_num(n-1)\n\n    return get_hexagonal_num(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    for i in range(n):\n        a += i * (2 * i - 1)\n    return a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) / 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * hexagonal_num(n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Define the maximum number of rows and columns\n    max_rows = 10\n    max_cols = 10\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate over the number of rows and columns\n    for i in range(max_rows):\n        for j in range(max_cols):\n\n            # Check if the current row and column form a hexagon\n            if i + j == n:\n                result = (i * (2 * i - 1)) + (j * (2 * j - 1))\n                return result\n\n    # If the result is still 0, it means that there is no such number\n    return \"There is no such number\""
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Convert n to hexadecimal and convert it to a float\n    hex_n = hex(int(n))[2:].replace('L', '')\n    hex_n = float(hex_n)\n    \n    # Calculate the nth hexagonal number and return it as an integer\n    return int(hex_n * (3 * (10**12) + 1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5 * n * n - 3 * n) // 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))  # Create an array of zeros of the same length as nums\n    \n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1  # Increment the corresponding index in the zeros array if num is zero\n        \n    nonzeros = len(nums) - sum(zeros)  # Calculate the number of non-zero elements in the array\n    \n    return zeros[0] / nonzeros\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = array('i')\n    non_zeros = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            non_zeros.append(1)\n\n    zeros_count = sum(zeros)\n    non_zeros_count = sum(non_zeros)\n\n    if non_zeros_count == 0:\n        return 0.0\n    else:\n        return zeros_count / non_zeros_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    if non_zeros == 0:\n        return 0\n    else:\n        return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_ones = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_ones += 1\n    \n    ratio = count_zeroes / count_ones\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    ratio = non_zeros / zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def zero_count(nums):\n    \"\"\"\n    Find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        float: The ratio of zeroes to non-zeroes in the array.\n\n    Examples:\n        >>> zero_count([0, 1, 2, 0, 3, 0, 4, 0])\n        0.6666666666666666\n        >>> zero_count([0, 0, 0, 0, 0, 0, 0])\n        1\n    \"\"\"\n    zeros = 0\n    nonzeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Convert array to list to make it mutable\n    nums = list(nums)\n    # Initialize zero count and non-zero count\n    zero_count = 0\n    non_zero_count = 0\n    # Loop through the list of numbers and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the list of integers to an array of integers\n    arr = array('i', nums)\n\n    # Initialize variables to keep track of zeroes and non-zeroes\n    zeroes = 0\n    non_zeroes = 0\n\n    # Iterate through the array and count the number of zeroes and non-zeroes\n    for num in arr:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zeroes / non_zeroes if non_zeroes!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Define a function to check if a number is a power of 2\n    def is_power_of_2(num):\n        return num & (num-1) == 0\n    \n    # Initialize two variables to store the sum and the power of 2\n    sum_powers_of_2 = 0\n    power_of_2 = 1\n    \n    # Loop until the power of 2 is greater than the number\n    while power_of_2 <= n:\n        # If the number is divisible by the power of 2\n        if n % power_of_2 == 0:\n            # Add the power of 2 to the sum of powers of 2\n            sum_powers_of_2 += power_of_2\n            # Remove the power of 2 from the number\n            n -= power_of_2\n        \n        # Increment the power of 2 by 1\n        power_of_2 <<= 1\n    \n    # If the number is a power of 2, add it to the sum of powers of 2\n    if n == 1:\n        sum_powers_of_2 += 1\n    \n    # Return True if the number can be represented as sum of powers of 2, False otherwise\n    return True if sum_powers_of_2 == n else False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if the number is a power of 2\n    if n & (n - 1) == 0: \n        return True\n\n    # check if the number can be written as sum of non-zero powers of 2\n    i = 1\n    while n > 0: \n        # check if the current power of 2 is greater than the remaining bits in the number\n        if n & (1 << i) == 0 and i < 31: \n            n -= 1 << i\n            i += 1\n        else: \n            i += 1\n            if i == 32: \n                return False\n            else: \n                n += 1 << i\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize the sum of powers of 2 as 0\n    sum_of_powers_of_two = 0\n    \n    # Loop through the digits of n\n    for digit in str(n):\n        # Convert the digit to an integer\n        digit = int(digit)\n        \n        # Check if the digit is equal to 0\n        if digit == 0:\n            continue\n        \n        # Check if the digit can be represented as a power of 2\n        if digit == 1 or digit == 2:\n            continue\n        else:\n            # Check if the digit can be represented as a sum of non-zero powers of 2\n            is_power_of_two = False\n            power = 2\n            while power <= digit:\n                if digit % power == 0:\n                    is_power_of_two = True\n                    break\n                else:\n                    power *= 2\n            \n            # If the digit is not a sum of non-zero powers of 2, break the loop\n            if not is_power_of_two:\n                break\n            \n            # Add the power of 2 to the sum of powers of 2\n            sum_of_powers_of_two += digit\n    \n    # Check if the sum of powers of 2 is equal to n\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n & (n-1) == 0:\n        return False\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % (2*i) == 0:\n                if is_Sum_Of_Powers_Of_Two(n-2*i) and is_Sum_Of_Powers_Of_Two(i):\n                    return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the given number is a power of 2\n    if n & (n - 1) == 0:\n        # Calculate the sum of non-zero powers of 2\n        sum_of_powers_of_two = 0\n        while n!= 0:\n            if n & 1 == 1:\n                sum_of_powers_of_two += 1\n            n = n >> 1\n        # Check if the sum of non-zero powers of 2 is equal to the given number\n        if sum_of_powers_of_two == n:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # initialize variables\n    sum_of_powers = 0\n    power_of_two = 1\n\n    # loop through the bits of the number\n    while n: \n        # check if the bit is 1\n        if n & 1 == 1: \n            # add the power of two to the sum\n            sum_of_powers += power_of_two\n\n        # shift the bit to the left\n        n >>= 1\n\n        # multiply the power of two by 2\n        power_of_two *= 2\n\n    # check if the sum of powers is equal to the number itself\n    return sum_of_powers == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if the given number is a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # Check if the given number can be represented as sum of non-zero powers of 2\n    # by checking whether each power of 2 is present in the given number\n    for i in range(1, 32):\n        if n & (1<<i) > 0:\n            if n - (1<<i)!= (1<<(i-1)) + (1<<(i-2)) +... + (1<<(i-31)):\n                return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the input number to its binary representation\n    binary_representation = bin(n)[2:]\n    # Initialize a list of digits\n    digits = []\n    # Iterate over the binary representation of the number\n    for digit in binary_representation:\n        # If the digit is not 0, append it to the list of digits\n        if digit!= '0':\n            digits.append(int(digit))\n    # Initialize the sum of powers of 2\n    sum_of_powers_of_2 = 0\n    # Iterate over the digits of the number in reverse order\n    for i in range(len(digits)-1, -1, -1):\n        # If the current digit is 1, add its power of 2 to the sum of powers of 2\n        if digits[i] == 1:\n            sum_of_powers_of_2 += 2**(len(digits)-i-1)\n    # If the sum of powers of 2 is equal to the original number, the number can be represented as a sum of powers of 2\n    return n == sum_of_powers_of_2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        n = n & (n-1)\n        count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0:\n        return False\n\n    # Check if the given number is a power of 2\n    is_power_of_two = n & (n - 1) == 0\n    if is_power_of_two:\n        return True\n\n    # Check if the given number can be represented as sum of non-zero powers of 2\n    power_of_two = 1\n    while power_of_two <= n:\n        if (n - power_of_two) % power_of_two == 0:\n            return True\n        power_of_two <<= 1\n\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r # Using formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    \"\"\"\n    This function calculates the circumference of a circle with the given radius.\n    \"\"\"\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2*pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # Formula for calculating the circumference of a circle\n    print(f\"The circumference of the circle with radius {r} is {circumference:.2f} units.\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.141592653589793\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create an empty list to store the flattened numbers\n    flattened_list = []\n    # Loop through each element in the list of lists\n    for sublist in test_list:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element is a number, add it to the flattened list\n            if isinstance(element, (int, float)):\n                flattened_list.append(element)\n    # Return the flattened list of numbers\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Define a set to store the numbers\n    nums = set()\n    # Loop through each element in the list\n    for elem in test_list:\n        # If the element is a list, recursively call the function on it\n        if type(elem) == list:\n            nums.update(extract_singly(elem))\n        # Otherwise, add the element to the set of numbers\n        else:\n            nums.add(elem)\n    # Return the set of numbers\n    return nums"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        if type(item) == list:\n            flattened.extend(extract_singly(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    flat_list = []\n    for sublist in test_list:\n        for element in sublist:\n            flat_list.append(element)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        flattened_list.extend(sub_list)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Initialize an empty list to store the flattened numbers\n    flattened_list = []\n\n    # Iterate through each element in the input list\n    for element in test_list:\n        # If the element is a list, recursively call the function on the list\n        if isinstance(element, list):\n            flattened_list.extend(extract_singly(element))\n        # If the element is a number, append it to the flattened list\n        elif isinstance(element, (int, float)):\n            flattened_list.append(element)\n\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n\n    :param test_list: a list of lists\n    :return: a set of unique numbers from the flattened list\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_numbers(test_list):\n    '''\n    Extracts numbers from a list of lists.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the largest element with the last element in the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # reverse the unsorted part of the list\n        for j in range(i, n-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the Pancake Sort algorithm.\n    '''\n    n = len(nums)\n    # Bubble sort algorithm\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the remaining unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the maximum element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # reverse the unsorted part of the array from i to n-1\n        for j in range(i, n-1, -1):\n            nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the sorted part of the array from i to n-1\n        for j in range(i, n):\n            nums[j], nums[n-1-j] = nums[n-1-j], nums[j]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function sorts a list of elements in ascending order using the pancake sort algorithm.\n\n    The pancake sort algorithm works by sorting the list by breaking it into two halves repeatedly,\n    each halving the size until the list is sorted. The algorithm starts with the largest element,\n    and swaps it with the first element of the unsorted part of the list. It then repeats this process\n    with the second largest element, and the unsorted part, and so on, until the entire list is sorted.\n    \"\"\"\n\n    # Initialize the start and end pointers to the beginning and end of the list, respectively.\n    start = 0\n    end = len(nums) - 1\n\n    # While the start pointer is less than the end pointer, sort the sublist between start and end.\n    while start < end:\n\n        # Find the smallest element in the unsorted sublist between start and end.\n        smallest = start\n        for i in range(start + 1, end + 1):\n            if nums[i] < nums[smallest]:\n                smallest = i\n\n        # Swap the smallest element with the first element of the unsorted sublist.\n        nums[start], nums[smallest] = nums[smallest], nums[start]\n\n        # Move the start pointer to the right to continue sorting.\n        start += 1\n\n        # Move the end pointer to the left to continue sorting.\n        end -= 1\n\n    # Return the sorted list.\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    for i in range(n, 0, -1):\n        # Find the maximum element in the first i elements\n        max_idx = i - 1\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the last element\n        nums[i - 1], nums[max_idx] = nums[max_idx], nums[i - 1]\n        # Reverse the first i elements\n        nums[:i] = nums[:i][::-1]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the maximum element in the list\n    max_val = max(nums)\n    \n    # Create a list of tuples, where each tuple has two elements:\n    # - The value of the maximum element, and\n    # - The index of that value in the input list\n    max_indices = [(val, nums.index(val)) for val in nums if val == max_val]\n    \n    # Sort the list of tuples in descending order of the first element (the value)\n    max_indices.sort(key=lambda x: x[0], reverse=True)\n    \n    # Convert the sorted list of tuples back to a list of values\n    sorted_nums = [tup[0] for tup in max_indices]\n    \n    # Replace the original list with the sorted list\n    nums[:] = sorted_nums\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def pancake_sort_helper(nums, n):\n        if n == 1:\n            return nums\n\n        pivot = nums[n - 1]\n        left = [x for x in nums if x < pivot]\n        middle = [x for x in nums if x == pivot]\n        right = [x for x in nums if x > pivot]\n\n        sorted_left = pancake_sort_helper(left, n - 1)\n        sorted_middle = sorted(middle)\n        sorted_right = pancake_sort_helper(right, n - 1)\n\n        return sorted_left + sorted_middle + sorted_right\n\n    return pancake_sort_helper(nums, len(nums))"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # start from the largest element\n    for i in range(n-1, 0, -1):\n        # find the index of the next largest element\n        max_index = i\n        for j in range(i-1, 0, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the two elements\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the unsorted part of the array from the first element to the maximum element\n        for j in range(i, max_idx, -1):\n            nums[j], nums[max_idx] = nums[max_idx], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # use a pancake sort algorithm to sort the list\n    for i in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the maximum element with the first element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    # return the sorted list\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the count of items that are identical in the same position of all three lists.\n\n    Parameters:\n    list1 (list): First list of items.\n    list2 (list): Second list of items.\n    list3 (list): Third list of items.\n\n    Returns:\n    int: The count of identical items in the same position of all three lists.\n    \"\"\"\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n\n    count = 0\n\n    # Iterate through the lists and compare the items in the same position\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the number of items that are identical in the same position of the three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of items that are identical in the same position of the given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    for i in range(len(list2)):\n        if list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff: \n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() #sort the array in ascending order\n    max_diff = 0\n    \n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        max_diff = max(max_diff, diff)\n        \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize variables for maximum and minimum elements\n    max_diff = float('-inf')\n    min_element = float('inf')\n    \n    # Iterate over the array and find the maximum and minimum elements\n    for i in arr:\n        if i > max_diff:\n            max_diff = i\n        if i < min_element:\n            min_element = i\n    \n    # Return the maximum difference between any two elements in the array\n    return max_diff - min_element"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf') # initialize maximum difference to negative infinity\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-n, n+1):\n        for y in range(-n, n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    # Initialize x and y variables\n    x = y = None\n    \n    # Check if a*x + b*y = n\n    while x is None or y is None:\n        # Calculate x\n        if a % 2 == 0:\n            x = (-b + n//a) // 2\n        else:\n            x = (-b - n//a) // 2\n        \n        # Calculate y\n        if b % 2 == 0:\n            y = (-a + n//b) // 2\n        else:\n            y = (-a - n//b) // 2\n        \n        # Check if a*x + b*y = n\n        if a*x + b*y == n:\n            return (x, y)\n    # No solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    d = a * b - n\n    if d == 0:\n        x = -b // a\n        y = -n // a\n        return (x, y)\n    elif d > 0:\n        x1 = -b // a\n        y1 = -d // b\n        x2 = x1 + 1\n        y2 = d // b\n        return ((x1, y1), (x2, y2))\n    else:\n        x1 = -a // b\n        y1 = -d // a\n        x2 = x1 + 1\n        y2 = -d // a\n        return ((x1, y1), (x2, y2))\n\na = 2\nb = 3\nn = 5\nprint(find_solution(a, b, n))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-1000, 1001):\n        for y in range(-1000, 1001):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Calculate the values of x and y that satisfy the equation\n    x = n / b\n    y = a * x + n\n    \n    # Check if there is a solution by checking if y is an integer\n    if int(y) == y:\n        # Return the solution as a tuple\n        return (x, y)\n    else:\n        # Otherwise, return None\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n\n    x = (-n) / b\n    y = a * x\n\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the given values are valid\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(n, (int, float)):\n        return None\n    if a == 0 or b == 0:\n        return None\n    if a == 1 or b == 1:\n        return None\n\n    # initialize variables for x and y\n    x = 0\n    y = 0\n\n    # iterate n times\n    for i in range(1, n+1):\n        # update x and y by using the quadratic formula\n        temp = b * i * i + 4 * a * n\n        x += (temp - b * i * i) / (2 * a)\n        y += (b * i * i - temp) / (2 * a)\n\n    # check if the solution exists\n    if x * x + y * y == n:\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Finding discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) // (2*a)\n        x2 = (-b - discriminant**0.5) // (2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x1 = -b // (2*a)\n        x2 = x1\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Use the formula for quadratic equations to find the two solutions\n    delta = b*b - 4*a*n\n    if delta < 0:\n        return None\n    elif delta == 0:\n        x1 = -b / (2 * a)\n        return (x1, x1)\n    else:\n        x1 = (-b + delta**0.5) / (2 * a)\n        x2 = (-b - delta**0.5) / (2 * a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0 or b == 0:\n        return None\n    x1 = (-b + (b**2 - 4*a*n) ** 0.5) / (2 * a)\n    x2 = (-b - (b**2 - 4*a*n) ** 0.5) / (2 * a)\n    return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create an empty list to store the new list with no elements removed\n    new_list = []\n\n    # Loop through each element of the first list\n    for item in list1:\n        # Check if the element is not present in the second list\n        if item not in list2:\n            # If it's not, add it to the new list\n            new_list.append(item)\n\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the unique elements in list1\n    unique_list = []\n    # loop through each element in list1\n    for element in list1:\n        # check if the element is not present in list2\n        if element not in list2:\n            # if it is not present in list2, add it to unique_list\n            unique_list.append(element)\n    # return the unique_list\n    return unique_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the first list and remove all elements present in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.extend([elem for elem in list1 if elem not in list2])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # iterate over the elements of the first list\n    for element in list1:\n        # if the element is in the second list, remove it\n        if element in list2:\n            list1.remove(element)\n    # return the modified first list\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Loop through the first list and check if each element is present in the second list\n    for item in list1:\n        if item in list2:\n            # If an element is found, remove it from the first list\n            list1.remove(item)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return 0\n    else:\n        sum_value = 0\n        for i in range(n // 2):\n            sum_value += (n - 2 * i)\n        return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(0, n // 2):\n        total += n - 2 * i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum_series = 0\n    while i <= n // 2:\n        sum_series += n - 2*i\n        i += 1\n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize variables\n    sum_series = 0\n    i = 0\n    \n    # calculate the sum series\n    while i <= n // 2:\n        sum_series += n - 2*i\n        i += 1\n        \n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum_val = 0\n    while n-i >= 0:\n        sum_val += (n-i)\n        i += 1\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the circumference of the polygon\n    c = 2 * s * tan(pi/l)\n\n    # Calculate the area of the polygon\n    area = c * l\n\n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) / 2) * pi\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += (s**2)*tan((i*pi)/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * s) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of one side of the polygon\n    a = s / l\n    \n    # Use the formula for the area of a regular polygon\n    area = 0.5 * s * l * tan(pi/l)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using the formula: A = (s * (s - 2 * pi)) / 4\n    area = (s * (s - 2 * pi)) / 4\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * (s - l) * (s - l) * (s - l) + (s * (s - l) * (s - l) * (s - l) * (s - l))) / (l * (l - 1) * (l - 1) * (l - 1) * (l - 1))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of a side using the formula s = a * sin(pi/n) where a is the length of one side and n is the number of sides\n    a = s / l\n    \n    # Use the formula for the area of a regular polygon: A = 1/2 * s * (tan(pi/n) + tan(pi/2 - pi/n))\n    A = 0.5 * s * (tan(pi/l) + tan(pi/2 - pi/l))\n    \n    return A"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n    div_sum += n\n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    div_sum = sum(div_list)\n    print(f\"The sum of the divisors of {n} are {div_sum}\")\n\n    if div_sum == n:\n        print(f\"{n} has the same divisors as its sum.\")\n    else:\n        print(f\"{n} does not have the same divisors as its sum.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n using a for loop and the fact that the sum of n divided by i is equal to the sum of n divided by i-1\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n/i:\n                divs.append(n/i)\n\n    # Calculate the sum of the divisors\n    div_sum = sum(divs)\n\n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as n and False otherwise.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(divisors(n))\n    \n    # If the sum of the divisors is the same as n, return True\n    if div_sum == n:\n        return True\n    # If the sum of the divisors is different from n, return False\n    else:\n        return False\n\ndef divisors(n):\n    '''\n    This function takes an integer n as input and returns a list of its divisors.\n    '''\n    # Use the trial division method to find all divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    return divisors"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if n // i!= i:\n                div_list.append(n // i)\n    if sum(div_list) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_of_n = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    sum_of_divisors = sum(divisors_of_n)\n    return (sum_of_divisors == n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0])\n\n    # check if the sum of the divisors is equal to n\n    if div_sum == n:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            div_list.append(n//i)\n    if len(div_list) == 0:\n        print(\"The number has no divisors.\")\n    else:\n        print(\"The sum of the divisors is:\", sum(div_list))\n        if sum(div_list) == n:\n            print(\"The sum of the divisors is equal to the original number.\")\n        else:\n            print(\"The sum of the divisors is not equal to the original number.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0 \n    for i in range(1, n+1): \n        if n % i == 0: \n            div_sum += i \n    return div_sum \n\nprint(div_sum(12)) # Output: 36\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    \n    def get_divisors(num):\n        div = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                div.append(i)\n                if i!= num//i:\n                    div.append(num//i)\n        return div\n    \n    a, b = map(int, input(\"Enter two integers: \").split())\n    \n    div_a = get_divisors(a)\n    div_b = get_divisors(b)\n    \n    if sum(div_a) == sum(div_b):\n        print(\"The sum of the divisors of\", a, \"and\", b, \"is the same.\")\n    else:\n        print(\"The sum of the divisors of\", a, \"and\", b, \"is not the same.\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize a dictionary to store the character positions and their counts\n    char_count = {}\n    \n    # convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n    \n    # loop through each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1): \n        # get the character at the current position in the English alphabet\n        char = chr(i)\n        \n        # if the character is present in the string, increment its count in the dictionary\n        if char in str1: \n            if char in char_count: \n                char_count[char] += 1\n            else: \n                char_count[char] = 1\n    \n    # return the final character count dictionary\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the string\n    count_dict = {}\n\n    # Iterate over the characters in the string\n    for i, char in enumerate(str1):\n        # Check if the character is in the English alphabet\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            # If it is, check if the position is already in the dictionary\n            if i in count_dict:\n                # If it is, increment the count by 1\n                count_dict[i] += 1\n            else:\n                # If it isn't, add it to the dictionary with a count of 1\n                count_dict[i] = 1\n\n    # Return the count of characters at each position in the string\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            pos = alphabet.index(char.lower())\n            if pos == str1.lower().index(char.lower()):\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(i+97))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(65+i).lower()) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # initialize a dictionary to store the count of each character\n    count_dict = {}\n    for i in range(26):\n        count_dict[chr(65+i)] = 0\n    # loop through the string and count the characters at the same position in the English alphabet\n    for char in str1:\n        if char.lower() in count_dict:\n            count_dict[char.lower()] += 1\n    # return the dictionary of character counts\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(i+97)) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Initialize a dictionary to store the character count\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n\n        # Check if the character is in the English alphabet\n        if char.isalpha():\n            # If it is, check if the count for that character exists in the dictionary\n            if char in char_count:\n                # If it does, increment the count\n                char_count[char] += 1\n            else:\n                # If it doesn't, add the character to the dictionary with a count of 1\n                char_count[char] = 1\n\n    # Return the dictionary with character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(97, 123):\n        char_count[chr(i)] = 0\n    \n    for char in str1:\n        char = char.lower()\n        if char in char_count:\n            char_count[char] += 1\n    \n    for i in range(97, 123):\n        if char_count[chr(i)] == 0:\n            print(chr(i))"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in str1:\n        if i.lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and (A[i] ^ A[j] & 1) == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and i!= j:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    # Calculate the exponent needed to get the smallest power of 2 greater than or equal to n\n    exp = 1\n    while (2 ** exp) < n:\n        exp += 1\n    \n    # Calculate the smallest power of 2 greater than or equal to n\n    return 2 ** exp"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return n # n is already a power of 2\n    \n    # Find the smallest power of 2 greater than or equal to n\n    while n & (n - 1)!= 0:\n        n = n | (n - 1)\n    \n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1:\n        return 2\n    else:\n        return 2**(int(log2(n))+1)\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2 ** (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 to 1\n    power = 1\n    \n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # Loop while n is less than or equal to the current power of 2\n    while n <= power * power:\n        power *= 2\n    \n    # Return the largest power of 2 that is greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the rightmost set bit\n    r = 0\n    while n >> r:\n        r += 1\n\n    # Double the power of 2 to the right of the rightmost set bit\n    power = 1 << r\n    return power * 2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Base case: n is already a power of 2\n    if n >= 2**31:\n        return n\n    # Binary search until we find the smallest power of 2 greater than or equal to n\n    left = 2\n    right = 2**31\n    while left < right:\n        mid = (left + right) // 2\n        if mid >= n:\n            right = mid\n        else:\n            left = mid + 1\n    # Return the smallest power of 2 greater than or equal to n\n    return left"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # set the initial value of power to 1\n    power = 1\n    \n    # loop until we find the smallest power of 2 greater than or equal to n\n    while power < n:\n        power <<= 1\n        \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power to 1\n    power = 1\n\n    # Loop until we find the smallest power of 2 greater than or equal to n\n    while power < n:\n        power *= 2\n\n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n\n    for i in a: \n        if i == x: \n            count += 1\n\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list and a number as input and returns the count of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list and a number as input, and returns the number of times the number appears in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Error: m should be less than or equal to n\"\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i-1]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the circumference of the pentagon\n    c = 5 * a\n\n    # Calculate the length of the perimeter of the pentagon\n    perimeter = 5 * c\n\n    # Return the calculated perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of a side of the pentagon\n    side = 2 * a\n    \n    # Calculate the number of equal sides\n    num_equal_sides = int(math.sqrt(5) + 1)\n    \n    # Calculate the number of regular sides\n    num_regular_sides = num_equal_sides * 5 - 1\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = side * (num_regular_sides + num_equal_sides)\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the length of one side of the pentagon\n    side = math.sqrt(5) * a\n    \n    # calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    \n    # return the calculated perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of the diagonal\n    diagonal = 5 * a / 4\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * diagonal\n    \n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    This function takes a string as input and returns the number of times the string'std' occurs in it.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = s.find('std')\n    while i!= -1:\n        count += 1\n        i = s.find('std', i+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= type(first_element):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()  # to store data types of all elements of tuple\n    for element in test_tuple:\n        data_types.add(type(element))  # add data type of each element to set\n    return len(data_types) == 1  # check if set has only one element and it is a data type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Create a set of data types to check against\n    data_types = set()\n    # Loop through the tuple and add the data type to the set\n    for item in test_tuple:\n        data_types.add(type(item))\n    # Check if all elements in the set have the same data type or not\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # convert tuple to list\n    lst = list(test_tuple)\n    # get the first element of the list\n    first_elem = lst[0]\n    # loop through the list and check if all elements have same data type or not\n    for elem in lst:\n        # if any element has different data type than the first element, return False\n        if not isinstance(elem, type(first_elem)):\n            return False\n    # if all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(i) for i in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n\n    for item in test_tuple:\n        data_types.append(type(item))\n\n    return all(item == data_types[0] for item in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function takes a tuple as an argument and checks if all the elements have the same data type or not.\n\n    Args:\n    test_tuple (tuple): A tuple to check for data type consistency.\n\n    Returns:\n    bool: True if all the elements in the tuple have the same data type, False otherwise.\n    \"\"\"\n\n    data_types = []\n\n    # Iterate through each element in the tuple\n    for elem in test_tuple:\n        # Append the data type of the element to a list\n        data_types.append(type(elem))\n\n    # Check if all the data types in the list are the same\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set([type(x) for x in test_tuple])\n    return len(data_types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Define a list to store data type of each element in the tuple\n    data_types = []\n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # Append the data type of the current element to the list\n        data_types.append(type(element).__name__)\n    # Check if all the elements in the tuple have same data type\n    if len(set(data_types)) == 1:\n        # If all the elements have same data type, return True\n        return True\n    else:\n        # If all the elements do not have same data type, return False\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Initialize the count of occurrences of the target element to 0\n    count = 0\n    # Iterate through the array\n    for i in range(n):\n        # If the element at the current index is equal to the target element, increment the count\n        if arr[i] == x:\n            count += 1\n    # Check if the count is greater than n/2\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count >= n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize a counter variable to 0\n    count = 0\n    \n    # Loop through the array\n    for i in range(n):\n        # If the current element is equal to the target element\n        if arr[i] == x:\n            # Increment the counter variable\n            count += 1\n    \n    # If the counter variable is greater than n/2\n    if count > n//2:\n        return True\n    \n    # If the counter variable is less than n/2\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n!= 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the count of set bits in it. \n    Set bits are binary digits with value 1, while unset bits are 0. \n    A set bit is represented by a 1, and an unset bit is represented by a 0. \n    '''\n\n    count = 0\n\n    while n > 0: \n        if n & 1 == 1: \n            count += 1\n        n = n >> 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    str_list = list(str)\n    odd_list = []\n    for i, char in enumerate(str_list):\n        if i % 2!= 0:\n            odd_list.append(char)\n    return ''.join(odd_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    # Create a new string to store the odd values\n    new_str = \"\"\n\n    # Loop through each character in the given string\n    for char in str:\n        # Check if the index of the character is odd\n        if ord(char) % 2 == 1:\n            # Add the character to the new string\n            new_str += char\n\n    # Return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Convert string to a list\n    lst = list(string)\n    # Create a new list to store the even characters\n    even_lst = []\n    # Iterate over each character in the list\n    for i in range(len(lst)):\n        # Check if the index is odd\n        if i % 2 == 1:\n            # If the index is odd, append the character to the even_lst\n            even_lst.append(lst[i])\n    # Convert even_lst to a string and return it\n    return ''.join(even_lst)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum number.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function finds the minimum of three numbers and returns it.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c):\n    '''\n    This function takes three arguments and returns the minimum of those numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits\n    count = 0\n\n    # Loop through each bit in the range\n    for i in range(l, r+1):\n        # Check if the bit is set\n        if n & (1 << i) == 0:\n            # If it's set, increment the count\n            count += 1\n        else:\n            # If it's not set, stop looping through the bits\n            break\n\n    # Check if the count is equal to the number of bits in the range\n    if count == (r - l + 1):\n        # If it is, return True\n        return True\n    else:\n        # If it's not, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Function to check if all the bits are set in a number\n    def all_bits_set(num):\n        # Check if num is equal to 0\n        if num == 0:\n            return True\n        # Check if the least significant bit is set\n        elif num & 1:\n            return False\n        # Check if all the bits are set in the remaining number\n        else:\n            return all_bits_set(num >> 1)\n\n    # Check if l is less than r\n    if l >= r:\n        return True\n    # Check if l is equal to 0\n    elif l == 0:\n        # Check if all the bits are set in the number after l\n        return all_bits_set(n & (1 << (r + 1)) - 1)\n    # Check if the least significant bit of n is unset\n    elif n & 1 == 0:\n        # Check if all the bits are set in the number after l\n        return all_bits_set(n >> 1)\n    # If none of the above conditions are met, it means the least significant bit of n is set\n    else:\n        # Check if all the bits are set in the number after l\n        return all_bits_set(n >> 1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments, n (an integer), l (a positive integer) and r (a positive integer)\n    and returns True if all the bits are set in the range l to r of the given number n.\n    '''\n    # Check if the given number is in the range of l to r\n    if n < l or n > r:\n        return False\n    # Find the length of the number\n    num_len = len(bin(n)[2:])\n    # Check if all the bits are set in the range\n    for i in range(l, r+1):\n        # If the bit is not set, check if there is any set bit between l and r in the range\n        if (i & (1 << num_len-1)) == 0 and i!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a boolean variable to true\n    flag = True\n    # Loop through the range of bits\n    for i in range(l, r+1):\n        # Check if the bit is set or not\n        if n & (1 << i):\n            # If it is set, set the flag to false and break out of the loop\n            flag = False\n            break\n    # Return the result of the flag\n    return flag"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        if bin(n&i).count('1') == 0:\n            count += 1\n    if count == (r-l+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert the given range into binary\n    binary_n = bin(n)[2:]\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n\n    # check if all the bits in the binary numbers are set or not\n    if len(binary_n)!= len(binary_l) or len(binary_n)!= len(binary_r):\n        return False\n    else:\n        for i in range(len(binary_n)):\n            if binary_n[i] == '1' and binary_l[i] == '1' and binary_r[i] == '1':\n                return False\n        return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a boolean array to store the bits of n\n    bits = [False] * (r - l + 1)\n\n    # Iterate through the bits array and set them to True\n    for i in range(l, r + 1):\n        bits[i - l] = True\n\n    # Check if all bits are set in the given range\n    if all(bits):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # loop through all the bits in the given range\n    for i in range(l, r+1):\n        # check if the current bit is set to 1\n        if n & (1 << i)!= 0:\n            # if a bit is set to 1, return False\n            return False\n    # if we reach here, all bits are unset in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if the range is valid or not\n    if l < 0 or r >= n:\n        return \"Invalid range\"\n\n    # Check for all the bits in the range\n    for i in range(l, r + 1):\n        # If any bit is set, then return False\n        if bin(i).count('1')!= n:\n            return False\n\n    # If no bit is set, return True\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Loop through the array and count the number of negative and positive elements\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # If the number of negative and positive elements is less than n, then the array cannot be re-arranged\n    if neg_count + pos_count < n:\n        print(\"The array cannot be re-arranged\")\n        return\n\n    # Loop through the array again, and swap the elements if necessary\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg_count] = arr[neg_count], arr[i]\n            neg_count += 1\n        else:\n            arr[i], arr[pos_count] = arr[pos_count], arr[i]\n            pos_count -= 1\n\n    # Print the final array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Check if the array is empty or not\n    if len(arr) == 0 or n == 0:\n        return arr\n    \n    # Initialize two pointers, left and right, at the beginning of the array\n    left = 0\n    right = n - 1\n    \n    # Iterate through the array until the right pointer reaches the end\n    while right < len(arr):\n        # If the element at the left pointer is negative, swap it with the element at the right pointer and move the left pointer one step to the right\n        if arr[left] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            \n        # If the element at the left pointer is positive or zero, move the left pointer one step to the right\n        else:\n            left += 1\n            \n        # If the element at the right pointer is negative, swap it with the element at the left pointer and move the right pointer one step to the left\n        if arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            \n        # If the element at the right pointer is positive or zero, move the right pointer one step to the left\n        else:\n            right += 1\n            \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    count_negative = 0\n    count_positive = 0\n    negative_start = 0\n    negative_end = 0\n    \n    for i in range(n):\n        if arr[i] < 0:\n            count_negative += 1\n            if count_negative == 1:\n                negative_start = i\n            if count_negative == 2:\n                negative_end = i\n        elif arr[i] > 0:\n            count_positive += 1\n            \n    if count_positive > 0:\n        if count_negative == 1:\n            arr[negative_start], arr[negative_end] = arr[negative_end], arr[negative_start]\n        elif count_negative == 2:\n            arr[negative_start], arr[negative_end-1], arr[negative_end] = arr[negative_end-1], arr[negative_start], arr[negative_end]\n            \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize variables to keep track of the indices of positive and negative elements\n    neg_idx = 0\n    pos_idx = n - 1\n\n    # Iterate over the array and swap elements as needed\n    for i in range(n):\n        if arr[i] < 0:\n            # Swap the current element with the element at the negative index\n            arr[i], arr[neg_idx] = arr[neg_idx], arr[i]\n            neg_idx += 1\n        elif arr[i] > 0:\n            # Swap the current element with the element at the positive index\n            arr[i], arr[pos_idx] = arr[pos_idx], arr[i]\n            pos_idx -= 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create a new list to hold the re-arranged elements\n    new_arr = []\n\n    # Loop through the array and add positive elements to the new list\n    for i in range(n):\n        new_arr.append(arr[i])\n\n    # Loop through the array from the next n elements to the end and add negative elements to the new list\n    for i in range(n, len(arr)):\n        new_arr.append(arr[i])\n\n    # Return the re-arranged array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # check if n is valid\n    if n > len(arr):\n        return arr\n\n    # initialize two empty lists for negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # loop through the array and add elements to their respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # concatenate the negative and positive lists in reverse order\n    result = neg_list + pos_list[::-1]\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two pointers, one for positive elements and one for negative elements\n    i = 0\n    j = 0\n    # Traverse through the array\n    while i < n and j < len(arr):\n        # Check if the element at position i is negative\n        if arr[i] < 0:\n            # If it is, shift all elements from position j to position i-1 one position to the left\n            while j < i:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                j += 1\n            # Increment i to move on to the next negative element\n            i += 1\n        # If the element at position i is positive, increment i to move on to the next positive element\n        else:\n            i += 1\n        # Increment j to move on to the next element\n        j += 1\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # sort the array in descending order\n    arr = sorted(arr, reverse=True)\n    \n    # create two empty lists for negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # loop through the sorted array\n    for i in range(n):\n        # if the current element is negative\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        # if the current element is positive\n        else:\n            pos_arr.append(arr[i])\n    \n    # concatenate the negative and positive lists and return the result\n    result = neg_arr + pos_arr\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize three variables to keep track of the positive, negative, and zero counts\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    # loop through the array and count the occurrences of positive, negative, and zero elements\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    \n    # initialize two lists to hold the positive, negative, and zero elements\n    pos_list = []\n    neg_list = []\n    zero_list = []\n    \n    # loop through the array and add the elements to their respective lists\n    for num in arr:\n        if num > 0:\n            pos_list.append(num)\n        elif num < 0:\n            neg_list.append(num)\n        else:\n            zero_list.append(num)\n    \n    # append the remaining elements to their respective lists\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            pos_list.append(arr[i])\n        elif arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            zero_list.append(arr[i])\n    \n    # initialize a new array to hold the final re-arranged array\n    re_arr = []\n    \n    # loop through the lists and add the elements to the new array in their desired order\n    re_arr = neg_list + zero_list + pos_list\n    \n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize variables to keep track of positive and negative elements\n    positive = 0\n    negative = 0\n    \n    # iterate through the array\n    for i in range(n):\n        # if the current element is positive, increment the positive counter\n        if arr[i] > 0:\n            positive += 1\n        # if the current element is negative, increment the negative counter\n        elif arr[i] < 0:\n            negative += 1\n    \n    # initialize a temporary array to store the positive and negative elements\n    temp = []\n    \n    # iterate through the array again, this time re-arranging them\n    for i in range(n):\n        # if the current element is positive, add it to the temporary array\n        if arr[i] > 0:\n            temp.append(arr[i])\n        # if the current element is negative, add it to the temporary array before the first positive element\n        elif arr[i] < 0:\n            while len(temp) < positive:\n                temp.append(0)\n            temp.append(arr[i])\n    \n    # iterate through the temporary array and replace the first n elements with the positive and negative elements\n    for i in range(n):\n        arr[i] = temp[i]"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and a character as input, and replaces all the blank spaces in the string with the given character.\n    \n    Args:\n        str1 (str): String to be processed.\n        char (str): Character to be used to replace all the blank spaces in the string.\n        \n    Returns:\n        str: The modified string with all the blank spaces replaced with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join([char if x =='' else x for x in str1])"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq to maintain a max heap of size n\n    max_heap = []\n    # Iterate over list and add each item to max heap\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        # If max heap size exceeds n, remove the smallest item\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Return the max heap as the result\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Input must be a list.')\n    if not isinstance(n, int) or n < 1:\n        raise ValueError('n must be a positive integer.')\n\n    # Convert the input list to a set to remove duplicates\n    set_list = set(list1)\n\n    # Create a max heap of size n\n    max_heap = []\n    for num in set_list:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n\n    # Convert the max heap back to a list\n    result = [heapq.heappop(max_heap) for i in range(n)]\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    \n    # create a min heap of size n\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    \n    # add the remaining elements to the heap\n    for i in range(n, len(list1)):\n        if -list1[i] > -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -list1[i])\n    \n    # convert the min heap to a list and return it\n    return [-x for x in heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the input list.\n\n    Args:\n    list1 (list): a list of integers\n    n (int): the number of largest items to return\n\n    Returns:\n    list: a list of integers containing the n largest items from the input list\n    \"\"\"\n    # Create a min heap to store the n largest items\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Extract the n largest items from the min heap and return them as a list\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1.pop())\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap with the first n elements of the list\n    max_heap = list1[:n]\n    heapq.heapify(max_heap)\n    \n    # keep track of the remaining elements in the list\n    remaining_list = list1[n:]\n    \n    # add the remaining elements to the heap\n    for i in remaining_list:\n        heapq.heappush(max_heap, i)\n    \n    # extract the largest n elements from the heap and return them as a list\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap\n    min_heap = []\n    # loop through the list and add each item to the min heap\n    for item in list1:\n        heapq.heappush(min_heap, item)\n        # if the number of items in the heap is greater than n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # convert the heap to a list and return it\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    # Sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n\n    # Return the top n largest items from the sorted list\n    return sorted_list[:n]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    LSA = 2*3.14159*r*r*h\n    \n    # Return the lateral surface area of the cylinder\n    return LSA"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateral_surface_area_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = math.pi * r * r\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14159 * r**2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2*3.14159*r*r + 2*3.14159*h*h\n    return s"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*pi*(r**2 + h**2)\n    return surface_area\n\npi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    surface_area = 2 * math.pi * r * h\n    \n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Args:\n        r (float): radius of the cylinder\n        h (float): height of the cylinder\n        \n    Returns:\n        float: lateral surface area of the cylinder\n    \"\"\"\n    \n    area = math.pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return (2 * r * h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*r*h\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l ** 3\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    while n > 0:\n        if n & 1: # check if the last bit is 1\n            result |= 1\n        n >>= 1 # move to the next bit\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for bit in bin(n)[2:]:\n        if int(bit) == 1 and int(str(bin(n)[2:].count('0')) % 2 == 0):\n            even_bits += int(bit)\n        else:\n            continue\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n\n    # Loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) == 0:\n            result = result + 1\n        else:\n            result = result\n\n    # Return the final result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the even bits set\n    even_bits = 0\n\n    # Iterate over each bit in the binary representation of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it in the even_bits variable\n        if int(bit) == 0:\n            even_bits += int(bit)\n\n    # Return the modified number with all even bits set\n    return n ^ even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert n to a string\n    n = str(n)\n    # initialize an empty string to store the result\n    result = ''\n    # iterate through each character in the string\n    for char in n:\n        # if the character is an even number, append it to the result\n        if int(char) % 2 == 0:\n            result += char\n    # convert the result back to an integer and return it\n    return int(result)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize result variable\n    result = 0\n    # loop through each bit of the input number\n    for i in range(32):\n        # check if the current bit is even\n        if n & (1 << i):\n            # set the corresponding bit in the result variable to 1\n            result |= 1 << i\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n << 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Use bitwise AND operation to check if each bit is even\n    even_bits = n & (n-1)\n    # Set all even bits in the given number\n    return n | even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    \n    # iterate over each bit in the binary representation of n\n    for i in range(32):\n        # set the corresponding bit in the result variable\n        if n & (1 << i):\n            result |= (1 << i)\n    \n    # return the result variable\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n    \n    # loop through each tuple in the list\n    for item in test_list:\n        # if the tuple is already in the dictionary, increment its count by 1\n        if item in count_dict:\n            count_dict[item] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[item] = 1\n    \n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        count = count_dict.get(item, 0) + 1\n        count_dict[item] = count\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # use the Counter class from the collections module to count the occurrences of each tuple in the list\n    count = Counter(test_list)\n    \n    # convert the Counter object to a dictionary and return it\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    # loop through the list of tuples\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count\n        if tup in counts:\n            counts[tup] += 1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            counts[tup] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Iterate over the list of tuples\n    for item in test_list:\n        # Use the Counter() function from the collections module to count the occurrences of each tuple\n        count = Counter(item)\n        \n        # Iterate over the count dictionary to add the count of each unique tuple to the final dictionary\n        for key, value in count.items():\n            if key not in count_dict:\n                count_dict[key] = 0\n            count_dict[key] += value\n    \n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    n = len(str) \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n+1): \n            if str[i:j]!= '': \n                count += 1 \n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    # Create a list to store the substrings\n    substrings = []\n\n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Loop through each index greater than the current index\n        for j in range(i+1, len(str)+1): \n            # Add the substring to the list of substrings\n            substrings.append(str[i:j])\n\n    # Return the length of the list of substrings\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str) + 1):\n        for j in range(len(str) + 1):\n            if i == j:\n                count += 1\n            elif str[i - 1] == str[j - 1]:\n                count += number_of_substrings(str[:i] + str[j:])\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring and len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(m + 1):\n        for j in range(2, n + 1):\n            if (i >= 2 * j) and (i < m):\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def is_valid(lst):\n        '''\n        Helper function to check if a list is valid.\n        '''\n        if len(lst)!= n:\n            return False\n        prev = -1\n        for i in range(len(lst)):\n            if prev >= 2*lst[i] and lst[i] >= prev <= m:\n                prev = lst[i]\n            else:\n                return False\n        return True\n\n    def count_sequences(lst):\n        '''\n        Helper function to count the number of sequences in a list.\n        '''\n        valid_sequences = 0\n        for i in range(n):\n            valid_sequences += lst.count(i+1)\n        return valid_sequences\n\n    # Generate all possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    sequences = []\n    for i in range(1, m+1):\n        for j in range(i, m+1):\n            if i < 2*j:\n                break\n            if is_valid([i, j]):\n                sequences.append([i, j])\n\n    # Count the number of valid sequences.\n    return count_sequences(sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    count = 0\n    for i in range(m, m+n):\n        count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    seq = []\n    for i in range(n):\n        if i == 0:\n            seq.append(2)\n        elif seq[-1] + 2 <= m:\n            seq.append(seq[-1] + 2)\n        else:\n            total += len(seq)\n            seq = [seq[-1]]\n    total += len(seq)\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1,m//2+1):\n        count += m//2 + n//2 - i + 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the variables\n    total_sequences = 0\n    current_sequence = 0\n    prev_element = 2\n    # Generate the sequence of elements\n    while current_sequence < n:\n        if current_sequence == 0 or (prev_element >= 2 * prev_element <= m and prev_element!= current_sequence):\n            total_sequences += 1\n        current_sequence += 1\n        prev_element = current_sequence\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Initialize an array to store the previous element\n    prev = [0]*(n+1)\n    \n    # Iterate through the range of elements from 1 to m\n    for i in range(1, m+1):\n        # If the current element is less than or equal to 2*previous element\n        if i <= 2*prev[i-1]:\n            # Increment the count variable by 1\n            count += 1\n        # Otherwise, add the current element to the previous element array and continue iterating\n        else:\n            # Add the current element to the previous element array\n            prev[i] = i\n            # If the current element is equal to m-1, then the sequence is of length n\n            if i == m-1:\n                count += 1\n            # Otherwise, if the current element is less than m, then the sequence is of length n+1\n            elif i < m:\n                count += get_total_number_of_sequences(i,n+1)\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # initialize the count of sequences to 0\n    count = 0\n\n    # loop through all possible sequences of length n\n    for i in range(n, 0, -1):\n        # loop through all possible elements in the sequence\n        for j in range(m + 1):\n            # if the element is greater than or equal to twice the previous element and less than or equal to m, increment the count of sequences\n            if j >= 2 * i and j <= m:\n                count += 1\n\n    # return the count of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Create a list to store all possible sequences\n    sequences = []\n\n    # Use a helper function to generate all possible sequences of length n\n    def generate_sequences(start, length, current_sequence):\n        if length == n:\n            # Check if the sequence is valid (contains only positive integers and has a value within the range)\n            if all(isinstance(x, int) and x >= 2 * current_sequence and x <= m for x in current_sequence) and current_sequence not in sequences:\n                sequences.append(current_sequence)\n            return\n\n        if start <= m - 2 * n:\n            # Generate sequences from the current element\n            generate_sequences(start + 1, length, current_sequence + [start])\n\n            # Generate sequences from the previous element\n            generate_sequences(start + 1, length + 1, current_sequence + [start + 1])\n\n    # Start with a sequence of length 1\n    generate_sequences(1, 1, [1])\n\n    # Return the number of sequences\n    return len(sequences)\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += m\n        else:\n            count += (m - i) * (i + 1) // 2\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the lists\n    length1 = len(list1)\n    length2 = len(list2)\n    # make sure the second list has the same length as the first list\n    if length2!= length1:\n        raise ValueError(\"Second list must have the same length as the first list\")\n    # copy the first list and append the elements of the second list to it\n    list1_new = list1 + list2\n    # set the last element of the first list to be the last element of the second list\n    list1[-1] = list2[-1]\n    # return the new list\n    return list1_new"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Find the last index of the first list\n    last_index = len(list1) - 1\n    \n    # Replace the last element with the elements of the second list\n    list1[last_index] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Replace the last element of the first list with the elements of the second list\n    list1[length-1] = list2\n    # Return the modified first list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # check if the lengths of the two lists are the same\n    if len(list1)!= len(list2):\n        print(\"Error: Lists must be of the same length.\")\n        return\n    \n    # replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    \n    # print the modified list\n    print(list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1):\n        list1[i] = list2[i]\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n\n    # Loop through the first list and replace the last element with the elements of the second list\n    for i in range(length-1):\n        list1[i] = list2[i]\n\n    # Set the last element of the first list to the first element of the second list\n    list1[-1] = list2[-1]\n\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = 0\n    for char in str1:\n        total_charac += 1\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    # Square root of N\n    sqrt_N = math.sqrt(N)\n    # Rounding up to the nearest integer\n    sqrt_N = int(sqrt_N) + 1\n    # Square of the rounded integer\n    square = sqrt_N * sqrt_N\n    # Check if square is greater than N\n    while square > N:\n        # Increase the integer by 1\n        sqrt_N += 1\n        # Square of the rounded integer\n        square = sqrt_N * sqrt_N\n    return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n\n    Parameters:\n    N (integer): A positive integer\n\n    Returns:\n    The next perfect square greater than N.\n\n    \"\"\"\n    # Find the square root of N\n    sqrtN = math.sqrt(N)\n\n    # Round down to the nearest integer\n    sqrtN = int(sqrtN)\n\n    # Check if the square root is already a perfect square\n    if math.isqrt(sqrtN) == sqrtN:\n        # If the square root is already a perfect square,\n        # find the next square greater than it\n        next_square = sqrtN * sqrtN + 1\n    else:\n        # If the square root is not a perfect square,\n        # find the next perfect square\n        next_square = math.isqrt(sqrtN + 1) * math.isqrt(sqrtN + 1) + 1\n\n    # Check if the next square is greater than N\n    if next_square > N:\n        return next_square\n    else:\n        # If the next square is not greater than N,\n        # return N\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    current_square = int(math.sqrt(N))\n    while True:\n        current_square += 1\n        if current_square * current_square > N:\n            break\n    return current_square\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N))\n    while True:\n        if sqrtN*sqrtN == N:\n            break\n        sqrtN += 1\n    return sqrtN*sqrtN\n\nprint(next_Perfect_Square(1))   # Output: 25\nprint(next_Perfect_Square(2))   # Output: 64\nprint(next_Perfect_Square(3))   # Output: 121"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Check if the number is already a perfect square\n    if math.isqrt(N) * math.isqrt(N) == N:\n        return N\n\n    # Find the smallest perfect square greater than N\n    a = N\n    b = math.isqrt(N)\n    while a < b:\n        mid = (a + b) // 2\n        if mid * mid == N:\n            a = mid + 1\n        elif mid * mid > N:\n            b = mid\n    return math.sqrt(N) * (a - 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        num = N * N\n        if num > N:\n            return num\n        N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    sqrt_N = int(math.sqrt(N))\n    for i in range(sqrt_N, 1, -1):\n        if is_prime(i):\n            return i * i * 2\n    \n    return sqrt_N * sqrt_N * 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Initialize variable to store next perfect square greater than N\n    next_square = N\n    \n    # Find the root of the square of the given number\n    root = math.sqrt(N)\n    \n    # Initialize variable to store the decimal part of the root\n    decimal = root % 1\n    \n    # If the decimal part is 0, the next perfect square is equal to the square root of the given number\n    if decimal == 0:\n        next_square = root\n        \n    # If the decimal part is not 0, the next perfect square is the square of the given number plus 1\n    else:\n        next_square = math.sqrt(N) + 1\n        \n    # Return the next perfect square greater than N\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Convert N to integer\n    N = int(N)\n    # Compute square root of N\n    sqrtN = int(math.sqrt(N))\n    # Round up the square root\n    sqrtN += 1\n    # Multiply the rounded-up square root by 2 and round down to the nearest integer\n    next_perfect_square = math.floor((sqrtN * sqrtN) / 2)\n    # Add 1 to the result\n    next_perfect_square += 1\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the largest perfect square less than or equal to N\n    largest_sq = int(math.sqrt(N)) * int(math.sqrt(N))\n    # Find the next largest perfect square greater than the largest square\n    next_largest_sq = largest_sq + 2\n    while next_largest_sq <= N:\n        largest_sq = next_largest_sq\n        next_largest_sq = largest_sq + 2\n    return next_largest_sq"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here += arr[i]\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Check if the array is empty\n    if not arr: \n        return 0\n    \n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = arr[0]\n    current_sum = arr[0]\n    \n    # Loop through the array and calculate the current sum\n    for i in range(1, len(arr)):\n        current_sum += arr[i]\n        \n        # If the current sum is less than or equal to the max sum, update the max sum\n        if current_sum <= max_sum:\n            max_sum = current_sum\n        \n        # If the current sum is greater than the max sum, update the current sum to the max sum\n        else:\n            current_sum = max_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize variables to keep track of the previous and next elements\n    prev = float('-inf')\n    next = float('-inf')\n\n    # Initialize variables to keep track of the maximum sum found so far\n    max_so_far = float('-inf')\n    max_ending_here = float('-inf')\n\n    # Iterate through the array\n    for num in arr:\n        # If the number is increasing, update the max_ending_here variable\n        if num > prev:\n            max_ending_here = num\n\n        # If the number is decreasing, update the max_ending_here variable\n        elif num < prev:\n            max_ending_here = num + max_ending_here\n\n        # If the number is neither increasing nor decreasing, update the max_ending_here variable to be the current number\n        else:\n            max_ending_here = num\n\n        # Update the max_so_far variable if the current sum is greater than the previous maximum sum\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n        # Update the prev and next variables for the next iteration\n        prev = next\n        next = max_ending_here\n\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    max_sum_bitonic = float('-inf')\n    max_sum_increasing = float('-inf')\n    max_sum_decreasing = float('-inf')\n    left_index = 0\n    right_index = len(arr) - 1\n    for i in range(len(arr)):\n        if arr[i] <= arr[i-1]:\n            # increasing subsequence, calculate maximum sum\n            current_sum_bitonic = max_sum_bitonic + arr[i]\n            current_sum_increasing = max_sum_increasing + arr[i]\n            if current_sum_increasing > max_sum_increasing:\n                max_sum_increasing = current_sum_increasing\n                left_index = i\n        else:\n            # decreasing subsequence, calculate maximum sum\n            current_sum_bitonic = max_sum_bitonic + arr[i]\n            current_sum_decreasing = max_sum_decreasing + arr[i]\n            if current_sum_decreasing > max_sum_decreasing:\n                max_sum_decreasing = current_sum_decreasing\n                left_index = i\n    return max_sum_bitonic"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0] < arr[1]:\n            return arr[0] + arr[1]\n        else:\n            return arr[0] - arr[1]\n    if n % 2 == 1:\n        return max_sum(arr[:-1]) + max(arr[-1], arr[-2])\n    else:\n        return max(max_sum(arr[:-1]), max_sum(arr[1:])) + max(arr[0], arr[1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    # Iterate through the array\n    for i in range(len(arr)): \n        # Check if the current element is increasing or decreasing\n        if i % 2 == 0: # increasing element\n            current_sum += arr[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        else: # decreasing element\n            if current_sum > max_sum:\n                max_sum = current_sum\n            current_sum -= arr[i]\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    # Initialize variables to keep track of the maximum sum and whether the current subsequence is increasing or decreasing\n    max_sum_current = max_sum_prev = 0\n    prev_sign = arr[0] # Initialize the previous element to be the first element\n    increasing = True\n\n    # Iterate through the array, updating the maximum sum and the sign of the current element\n    for curr in arr[1:]:\n        if curr > prev_sign:\n            # The current element is increasing, so update the maximum sum and the sign of the previous element\n            max_sum_current = max(max_sum_current, curr - prev_sign)\n        else:\n            # The current element is decreasing, so update the maximum sum and the sign of the previous element\n            max_sum_current = max(max_sum_current, curr + prev_sign)\n\n        # Update the sign of the previous element\n        prev_sign = curr\n\n        # If the current element is increasing, check if the current subsequence is also increasing\n        if curr > prev_sign and increasing:\n            # The current subsequence is also increasing, so update the maximum sum\n            max_sum_current = max(max_sum_current, max_sum_prev + curr)\n\n        # Update the maximum sum of the previous element\n        max_sum_prev = max_sum_current\n\n        # If the current subsequence is now decreasing, update the sign and check if it is now increasing\n        if curr < prev_sign and increasing:\n            increasing = False\n\n    return max_sum_current"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize variables for bitonic sequences and max sum\n    increasing = True\n    curr_sum = arr[0]\n    max_sum = curr_sum\n    \n    for i in range(1, n):\n        # Check if current element is increasing or decreasing\n        if arr[i] > arr[i-1]:\n            increasing = True\n        else:\n            increasing = False\n        \n        # Update current sum based on increasing/decreasing status\n        if increasing:\n            curr_sum += arr[i]\n        else:\n            curr_sum -= arr[i]\n        \n        # Update max sum if current sum is greater than max sum so far\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum_i = max_sum_d = float('-inf')\n\n    for i in range(n):\n        max_sum_i = max(max_sum_i, arr[i])\n        max_sum_d = max(max_sum_d, arr[n-i-1])\n\n    return max(max_sum_i, max_sum_d)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    left_max, right_min = float('-inf'), float('inf')\n    for num in arr:\n        if num < left_max:\n            left_max = num\n        elif num > right_min:\n            right_min = num\n\n    return max(left_max, right_min)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Initialize variables\n    x = 1\n    y = 0\n    delta = 0.0001\n\n    # Calculate the square root\n    while abs(delta) > 0.00000001:\n        x = (x + number / x) / 2\n        y = number / x\n        delta = abs(y - x)\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        x = 1\n        y = number / 2\n        count = 0\n        while abs(x**2 - y) > 0.001:\n            count += 1\n            x_old = x\n            x = y - ((x**2 - y) / (2 * x))\n            y = x_old\n        return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Start with initial guess\n    guess = 0.5\n    # Initial approximation of the square root\n    approx = guess * guess\n    # Maximum number of iterations\n    max_iter = 100\n    # Number of iterations\n    iter_count = 0\n\n    # Loop while the square of the guess is greater than the number and the maximum number of iterations has not been reached\n    while abs(approx**2 - number) > 0.0001 and iter_count < max_iter:\n        # Update the guess and the approximation\n        guess = (approx + number / approx) / 2\n        approx = guess * guess\n        iter_count += 1\n\n    # Check if the maximum number of iterations has been reached\n    if iter_count == max_iter:\n        print(\"Maximum number of iterations reached. Please check the number.\")\n    else:\n        print(\"The square root of\", number, \"is approximately\", approx)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    epsilon = 0.00001\n    while abs(guess*guess - number) > epsilon:\n        guess = (guess + number/guess)/2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    else:\n        guess = number / 2\n        while True:\n            if guess**2 == number:\n                return guess\n            elif guess**2 < number:\n                guess = (guess + number / guess) / 2\n            else:\n                guess = (guess + number / guess) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) >= 0.001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001  # tolerance for convergence\n    guess = number / 2  # initial guess\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize the lower and upper bounds of the interval\n    lower = 0\n    upper = number / 2\n    \n    # check if the interval contains the square root\n    while lower <= upper:\n        # compute the midpoint of the interval\n        mid = (lower + upper) / 2\n        \n        # check if the midpoint is closer to the square root\n        if abs(mid * mid - number) <= abs(lower * lower - number):\n            # if so, update the upper bound of the interval\n            upper = mid\n        else:\n            # if not, update the lower bound of the interval\n            lower = mid\n    \n    # return the square root found\n    return upper"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    epsilon = 0.0001\n    x = number / 2\n    y = x + (number / x) / 2\n    while abs(x - y) > epsilon:\n        x = y\n        y = x + (number / x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    old_guess = 1.0\n    new_guess = 1.0\n    while abs(new_guess**2 - number) > 0.0001:\n        old_guess = new_guess\n        new_guess = (old_guess + number / old_guess) / 2.0\n    return new_guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a table to store the length of the longest palindromic subsequence ending at each index\n    # Initialize it with zeros\n    lps_table = [[0] * n for _ in range(n)]\n\n    # Initialize all entries with 1\n    for i in range(n):\n        lps_table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i + 1][j - 1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i + 1][j], lps_table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return lps_table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    n = len(str) \n\n    # Create a table to store length of longest palindromic subsequence ending at index i \n    table = [[0] * n for i in range(n)] \n\n    # Initialize LPS length to zero for all indexes \n    for i in range(n): \n        table[i][i] = 1 \n\n    # Fill table in bottom up manner \n    for i in range(2, n): \n        for j in range(n-i): \n            if str[j] == str[j+i]: \n                table[j][j+i] = table[j+1][j] + 2\n            else: \n                table[j][j+i] = max(table[j][j+i-1], table[j+1][j+i-1]) \n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    \"\"\"\n    This function takes a string s as input and returns the length of the longest palindromic subsequence in the string.\n    \n    The longest palindromic subsequence is the subsequence with the maximum length that can be formed by reading the same string from both ends.\n    For example, the longest palindromic subsequence of \"babad\" is \"bab\".\n    \"\"\"\n    # create a 2D table to store the lengths of longest palindromic subsequences of the substrings of the input string\n    dp = [[0] * len(s) for _ in range(len(s))]\n    n = len(s)\n    # initialize the table\n    for i in range(n):\n        dp[i][i] = 1\n    # fill the table using the following recurrence relation\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n            if dp[i + 2][i + 2] + 2 > dp[i][i + 1]:\n                dp[i][i + 1] = dp[i + 2][i + 2] + 2\n        else:\n            dp[i][i + 1] = max(dp[i + 1][j] for j in range(i + 2, n)) + 1\n    # return the length of the longest palindromic subsequence\n    return dp[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(s)\n    # Create a 2D table to store the lengths of longest palindromic subsequences\n    # for all substrings of length i\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the base cases\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for len_i in range(2, n+1):\n        for i in range(n-len_i+1):\n            j = i + len_i - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1: \n        return len(str) \n\n    dp = [[0] * len(str) for _ in range(len(str))] \n\n    max_len = 1 \n\n    for i in range(1, len(str)): \n        for j in range(i): \n            if str[i] == str[j]: \n                dp[i][j] = dp[j][i-1] + 2 \n                if dp[i][j] > max_len: \n                    max_len = dp[i][j] \n            else: \n                dp[i][j] = max(dp[i][j-1], dp[j][i]) \n\n    return max_len "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(string):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # create a 2D array to store the length of the longest palindromic subsequence ending at each position in the string\n    lengths = [[0] * len(string) for _ in range(len(string)+1)]\n\n    # initialize the base case where the longest palindromic subsequence is of length 1\n    for i in range(1, len(string)+1):\n        lengths[i][i-1] = 1\n\n    # iterate over all possible pairs of adjacent characters in the string\n    for i in range(len(string)-1):\n        for j in range(i+1, len(string)+1):\n            # if the characters are equal, we extend the palindrome ending at i with a palindrome ending at j\n            if string[i] == string[j]:\n                lengths[j][i] = lengths[i+1][j-1] + 2\n\n            # if the characters are not equal, we can extend the palindrome ending at i with a longer palindrome ending at j\n            else:\n                lengths[j][i] = max(lengths[i+1][j], lengths[j][j-1])\n\n    # return the length of the longest palindromic subsequence\n    return lengths[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return n\n\n    dp = [1] * n\n    longest = 1\n\n    for i in range(2, n):\n        if s[i] == s[i-1]:\n            dp[i] = dp[i-1] + 2\n            if dp[i] > longest:\n                longest = dp[i]\n        else:\n            dp[i] = 1\n            if dp[i] > longest:\n                longest = dp[i]\n\n    return longest"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n\n    # create a 2D table to store the length of longest palindromic subsequences for all prefixes of the given string\n    lps_table = [[0] * n for i in range(n)]\n\n    # fill the table using dynamic programming\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[j][i-1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i][j-1], lps_table[j][i])\n\n    # return the length of the longest palindromic subsequence\n    return lps_table[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence ending at each index\n    # Initially all entries will be zero\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # Initialize the first row and column as 1\n    dp[0][0] = 1\n\n    # Fill the table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    # Create a table to store the length of the longest palindromic subsequence ending at each index\n    table = [0] * len(s)\n\n    # Iterate over the string\n    for i in range(1, len(s)):\n        # If the current character is the same as the previous character, we extend the palindromic subsequence\n        if s[i] == s[i-1]:\n            table[i] = table[i-1] + 2\n\n        # Otherwise, we need to check if the subsequence ending at the previous index is palindromic\n        else:\n            # If the subsequence ending at the previous index is longer than the current one, we extend it\n            if table[i-1] > 0:\n                table[i] = table[i-1] + 1\n            # Otherwise, we start from the previous character and extend it\n            else:\n                table[i] = 1\n\n    # Return the length of the longest palindromic subsequence\n    return table[-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1\n    harmonic_sum_n1 = (1 + 1/n) / 2\n    # Calculate the harmonic sum of n\n    harmonic_sum_n = 1/harmonic_sum_n1 * (1/n)\n    # Return the harmonic sum of n\n    return harmonic_sum_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 - (1/n) * harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1/n\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(1, n+1):\n        harmonic += 1/i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n) * (n-2) + (1/n) * (n-2) * (n-3) + (1/n) * (n-2) * (n-3) * (n-4) +... + (1/n) * (n-2) * (n-3) * (n-4) *... * (n-2) * (n-3) * (n-4) * (n-5) *..."
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + ((1/n)**2) + ((1/n)**3) +... + ((1/n)**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum using the formula (1/n) + (1/n-1) +... + (1/2)\n    harmonic_sum = (1/n) + (1/(n-1))\n    # Use a loop to add up the harmonic sum up to n\n    for i in range(2, n+1):\n        harmonic_sum += 1/(i-1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays using a hash table.\n    \"\"\"\n    # Create a hash table to store the values of the first array\n    hash_table = {}\n    for num in array_nums1:\n        hash_table[num] = True\n    \n    # Loop through the second array and check if each value exists in the hash table\n    for num in array_nums2:\n        if num in hash_table:\n            yield num\n        del hash_table[num]"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set of the elements in array_nums2\n    set_nums2 = set(array_nums2)\n    \n    # Iterate through the elements in array_nums1\n    for num in array_nums1:\n        # If the number is in the set of array_nums2, add it to the intersection array\n        if num in set_nums2:\n            intersection_array.append(num)\n    \n    # Return the intersection array\n    return intersection_array"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Creating a set of unique elements in array_nums1\n    unique_nums1 = set(array_nums1)\n    \n    # Creating a set of unique elements in array_nums2\n    unique_nums2 = set(array_nums2)\n    \n    # Finding the intersection of unique_nums1 and unique_nums2\n    intersection_set = unique_nums1.intersection(unique_nums2)\n    \n    # Converting the intersection set to a list\n    intersection_list = list(intersection_set)\n    \n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # converting lists to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # finding intersection of sets\n    common_nums = set_nums1.intersection(set_nums2)\n\n    # converting back to a list\n    common_nums_list = list(common_nums)\n\n    return common_nums_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays, `array_nums1` and `array_nums2`,\n    and returns the intersection of the two arrays.\n\n    Args:\n    - `array_nums1` (list): A list of integers.\n    - `array_nums2` (list): A list of integers.\n\n    Returns:\n    - A list of integers that is the intersection of `array_nums1` and `array_nums2`.\n    \"\"\"\n    # Create a set to store the unique values in `array_nums1`\n    set_nums1 = set(array_nums1)\n\n    # Create a set to store the unique values in `array_nums2`\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two sets to store the unique elements of the two arrays.\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Create an empty list to store the common elements.\n    common_elements = []\n\n    # Iterate through the elements in set_nums1 and set_nums2.\n    for num in set_nums1:\n        if num in set_nums2 and num not in common_elements:\n            common_elements.append(num)\n\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary to store the frequency of each element in array_nums1\n    freq = {}\n    for num in array_nums1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # create a set to store the elements that are present in both arrays\n    common = set()\n    for num in array_nums2:\n        if num in freq and freq[num] > 0:\n            common.add(num)\n            freq[num] -= 1\n\n    # convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for elem in tup: \n        if elem == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.extend(list[i:])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    # create a new list that will store the inserted elements\n    result = []\n    \n    # iterate over the original list and insert the element before each element\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    \n    # return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    for i in range(len(list)):\n        list.insert(i,element)\n\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(lst)):\n        lst.insert(i, element)\n    return lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        polar.append((real, imag))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        print('({:.2f}, {:.2f})'.format(magnitude, angle))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(*number.split()))\n    polar_coordinates = []\n    for complex_number in complex_numbers:\n        polar_coordinates.append(cmath.polar(complex_number))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        \n        # print polar coordinates\n        print(\"(\" + str(r) + \", \" + str(theta) + \")\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print(real, imag)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    complex_numbers = []\n    for num in numbers:\n        complex_numbers.append(complex(num[0], num[1]))\n    polar_numbers = []\n    for complex_number in complex_numbers:\n        r = cmath.sqrt(complex_number.real**2 + complex_number.imag**2)\n        theta = cmath.phase(complex_number)\n        polar_numbers.append((r, theta))\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.abs(num)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates in a human-readable format\n        print(f\"r = {r:.3f}, theta = {theta:.3f}rad\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        try:\n            z = complex(num)\n            r = abs(z)\n            theta = cmath.phase(z)\n            result.append((r, theta))\n        except ValueError:\n            print(\"Invalid input\")\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        # convert number to complex number\n        num = complex(num)\n        # calculate absolute value\n        abs_num = abs(num)\n        # calculate argument\n        arg_num = arg(num)\n        # append polar coordinates to list\n        polar.append((abs_num, arg_num))\n    return polar"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as an input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            comb.append((l[i], l[j]))\n    return comb[:n]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j-i == n:\n                result.append((l[i], l[j-1]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green', 'yellow']\n    # Generate all possible combinations of colors\n    comb_colors = combinations_with_replacement(colors, n)\n    # Create a list with a tuple for each combination\n    comb_list = [(list(c), count) for c, count in comb_colors]\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return [(tuple(c)) for c in comb]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Use itertools.combinations_with_replacement to generate all combinations (with repetition) of the elements of the list\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Check if n is greater than or equal to the length of the list\n    if n >= len(l):\n        return []\n    # Generate all combinations with repetition of n elements from the list l\n    combos = list(combinations_with_replacement(l, n))\n    # Convert each combination to a tuple\n    combos = [tuple(combo) for combo in combos]\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    num = 2\n    \n    while num < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # initialize a boolean list of size n+1 to store whether a number is prime or not\n    is_prime = [True] * (n+1)\n    \n    # loop through numbers 2 to n and mark their multiples as composite\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            for j in range(i**2, n+1, i):\n                is_prime[j] = False\n    \n    # count the number of prime numbers\n    count = 0\n    for i in range(2, n+1):\n        if is_prime[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count\n\nprint(count_Primes_nums(100))  # Output: 17 (49 + 53 + 59 + 71)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\n\nn = int(input(\"Enter a non-negative number: \"))\nprint(\"The number of prime numbers less than\", n, \"is:\", count_Primes_nums(n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        isPrime = True\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create a dictionary to store the counts of each element in each tuple\n    counts_dict = {}\n    for tup in [test_tup1, test_tup2]:\n        for element in tup:\n            counts_dict[element] = counts_dict.get(element, 0) + 1\n    \n    # Find the maximum count value\n    max_count = max(counts_dict.values())\n    \n    # Create a new list with the elements from the tuple with the maximum count\n    max_elements = [element for element, count in counts_dict.items() if count == max_count]\n    \n    # Return the maximum elements from the two tuples\n    return test_tup1, test_tup2, max_elements"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Initialize variables for max_tup1 and max_tup2\n    max_tup1 = None\n    max_tup2 = None\n\n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # If the current element in test_tup1 is greater than max_tup1, set max_tup1 to that element\n        if test_tup1[i] > max_tup1:\n            max_tup1 = test_tup1[i]\n\n        # If the current element in test_tup2 is greater than max_tup2, set max_tup2 to that element\n        if test_tup2[i] > max_tup2:\n            max_tup2 = test_tup2[i]\n\n    # Return the maximum of the two tuples as a new tuple\n    return (max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Define the max value for each tuple\n    max1 = max(test_tup1[0], test_tup1[1])\n    max2 = max(test_tup2[0], test_tup2[1])\n\n    # Define the min value for each tuple\n    min1 = min(test_tup1[0], test_tup1[1])\n    min2 = min(test_tup2[0], test_tup2[1])\n\n    # Define the new values for the first tuple\n    new1 = max(max1, min1)\n    new2 = min(max1, min1)\n\n    # Define the new values for the second tuple\n    new1 = max(new1, max2)\n    new2 = min(new2, max2)\n\n    # Return the new tuples\n    return (new1, new2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n    \n    # Compare the elements of the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            test_tup1 = test_tup1[:i] + test_tup2[i:]\n        elif test_tup2[i] > test_tup1[i]:\n            test_tup2 = test_tup2[:i] + test_tup1[i:]\n    return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same number of elements.\")\n        return\n    \n    # Initialize variables to store the maximum values\n    max_elem1, max_elem2 = 0, 0\n    \n    # Loop through the tuple elements and compare them\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_elem1:\n            max_elem2 = max_elem1\n            max_elem1 = test_tup1[i]\n        elif test_tup2[i] > max_elem2:\n            max_elem2 = test_tup2[i]\n    \n    # Return the maximum values as a tuple\n    return (max_elem1, max_elem2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    elif test_tup2 > test_tup1:\n        return test_tup2\n    else:\n        return 'The two tuples are equal.'"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize variables to store the maximum values\n    max1 = max2 = float('-inf')\n\n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Check if the current element of the first tuple is greater than the current maximum\n        if test_tup1[i] > max1:\n            # Update the maximum value in the first tuple\n            max1 = test_tup1[i]\n            # Update the maximum value in the second tuple\n            max2 = test_tup2[i]\n        # Check if the current element of the second tuple is greater than the current maximum\n        elif test_tup2[i] > max2:\n            # Update the maximum value in the second tuple\n            max2 = test_tup2[i]\n\n    # Return the maximum values as a tuple\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # unpack the tuples into individual variables\n    a1, b1 = test_tup1\n    a2, b2 = test_tup2\n\n    # calculate the maximum of the two tuples\n    max_ab = max(a1, a2)\n    max_ba = max(b1, b2)\n\n    # return the maximum tuple as the result\n    return (max_ab, max_ba)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the tuple which has the maximum value.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 0\n    while True:\n        i += 1\n        if is_prime(i):\n            if i**2 > n:\n                return i\n            elif i**2 == n:\n                return i\n            elif i**2 < n:\n                break\n\ndef is_prime(n): \n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    count = 0\n    prime = 2\n\n    # loop until n newman\u2013shanks\u2013williams primes have been found\n    while count < n:\n        # check if prime is newman\u2013shanks\u2013williams prime\n        if is_newman_prime(prime):\n            count += 1\n        # increment prime and reset count if not newman\u2013shanks\u2013williams prime\n        prime += 1\n        if count == n:\n            count = 0\n\n    return prime\n\ndef is_newman_prime(n):\n    '''\n    Check if a number is a newman\u2013shanks\u2013williams prime.\n    '''\n    # check if number is greater than or equal to 1\n    if n < 1:\n        return False\n\n    # check if number is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    # check if number is divisible by any prime factor greater than 5\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize count variable\n    count = 0\n\n    # Iterate until count reaches n\n    while count < n:\n        # Generate a new number\n        num = 2 + (10000 - 2) * (2 * count + 1)\n\n        # Check if the number is prime\n        if is_prime(num):\n            # Add the number to the count\n            count += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # start with the first Newman-Shanks-Williams prime\n    prime = 7\n    # loop through the numbers from 7 to n\n    for i in range(7, n+1):\n        # check if the number is a Newman-Shanks-Williams prime\n        if is_newman_shanks_williams_prime(i):\n            # if it is, return the number\n            return i\n        # if it isn't, increment the prime number\n        else:\n            prime += 1\n\ndef is_newman_shanks_williams_prime(num):\n    '''\n    Check if a number is a Newman-Shanks-Williams prime.\n    '''\n    # initialize some variables\n    prime = 0\n    # loop through the digits of the number\n    for digit in str(num):\n        # check if the digit is a power of 2\n        if int(digit) & (1 << prime):\n            # if it is, increment the prime number\n            prime += 1\n            # if the prime number exceeds the length of the number, it's not a prime\n            if prime > len(str(num)):\n                return False\n    # if the loop completes without finding a power of 2, it's a prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    prime = True\n    i = 2\n    while prime and i <= n:\n        if i == 2:\n            prime = True\n        elif i == 3 or i == 5:\n            prime = False\n        else:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    prime = False\n                    break\n            if prime:\n                break\n        i += 2\n    if prime:\n        return i-1\n    else:\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = 2\n    while len(str(prime)) < 100:\n        prime += 1\n\n    count = 0\n    while count < n:\n        if is_newman_prime(prime):\n            count += 1\n        prime += 1\n\n    return prime\n\ndef is_newman_prime(num):\n    '''\n    Check if a given number is a newman\u2013shanks\u2013williams prime number.\n    '''\n    if num < 10:\n        return False\n\n    d = 0\n    while num % 2 == 0:\n        d += 1\n        num //= 2\n\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a list to store the newman primes\n    newman_primes = [2]\n\n    # Initialize a variable to keep track of the current prime number\n    current_prime = 3\n\n    # Loop through all possible primes up to sqrt(n)\n    while current_prime ** 2 <= n:\n        # Check if the current prime is a newman prime\n        if is_newman_prime(current_prime):\n            # Add the current prime to the list of newman primes\n            newman_primes.append(current_prime)\n\n            # Check if the sum of the current prime and the next prime is greater than n\n            if current_prime + newman_primes[-1] > n:\n                # Exit the loop once the sum is greater than n\n                break\n\n        # Find the next prime number by incrementing the current prime\n        current_prime += 2\n\n    # Return the nth newman prime\n    return newman_primes[n-2]\n\ndef is_newman_prime(n):\n    \"\"\"\n    Check if a given number is a newman prime.\n    \"\"\"\n    # Check if the number is equal to 2 or 3\n    if n == 2 or n == 3:\n        return True\n\n    # Check if the number is divisible by any odd number less than or equal to the square root of n\n    for i in range(5, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    limit = 2*n + 1\n    for i in range(2, limit): \n        if i % 2 == 1: \n            prime_count = 0\n            j = 3\n            while j*j <= i: \n                if i % j == 0: \n                    prime_count += 1\n                    if prime_count == n: \n                        return i\n                j += 2\n        else: \n            continue\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            num += 1\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define the function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize the count and the current number\n    count = 0\n    current_num = 2\n\n    # Check if the current number is a newman-shanks-williams prime number\n    if is_prime(current_num) and is_prime(current_num + 1) and is_prime(current_num + 2):\n        count += 1\n        current_num += 2\n\n    # Continue checking until the nth newman-shanks-williams prime number is found\n    while count < n:\n        # Check if the current number is a newman-shanks-williams prime number\n        if is_prime(current_num) and is_prime(current_num + 1) and is_prime(current_num + 2):\n            count += 1\n            current_num += 2\n        else:\n            # If the current number is not a newman-shanks-williams prime number,\n            # check if the next number is a newman-shanks-williams prime number\n            if is_prime(current_num + 2):\n                current_num += 2\n            else:\n                # If the next number is not a newman-shanks-williams prime number,\n                # check if the previous number is a newman-shanks-williams prime number\n                if is_prime(current_num - 2):\n                    current_num -= 2\n                else:\n                    # If the previous number is not a newman-shanks-williams prime number,\n                    # check if the previous and next numbers are newman-shanks-williams prime numbers\n                    if is_prime(current_num - 2) and is_prime(current_num + 2):\n                        current_num += 2\n                    else:\n                        # If the previous and next numbers are not newman-shanks-williams prime numbers,\n                        # check if the previous and next numbers are both not prime numbers\n                        if current_num - 2 > 2:\n                            if is_prime(current_num - 2) and is_prime(current_num - 1) and is_prime(current_num) and is_prime(current_num + 1):\n                                current_num += 2\n                            elif is_prime(current_num - 1) and is_prime(current_num) and is_prime(current_num + 1):\n                                current_num += 1\n                            else:\n                                current_num += 1\n                        else:\n                            # If the previous number is not prime, check if the next number is a newman-shanks-williams prime number\n                            if is_prime(current_num + 2):\n                                current_num += 2\n                            else:\n                                # If the next number is not a newman-shanks-williams prime number,\n                                # check if the previous number is a newman-shanks-williams prime number\n                                if is_prime(current_num - 2):\n                                    current_num -= 2\n                                else:\n                                    # If the previous number is not a newman-shanks-williams prime number and the next number is not a newman-shanks-williams prime number,\n                                    # check if the previous and next numbers are both not prime numbers\n                                    if current_num - 2 > 2:\n                                        if is_prime(current_num - 2) and is_prime(current_num - 1) and is_prime(current_num) and is_prime(current_num + 1):\n                                            current_num += 1\n                                        elif is_prime(current_num - 1) and is_prime(current_num) and is_prime(current_num + 1):\n                                            current_num += 1\n                                        else:\n                                            current_num += 1\n                                    else:\n                                        # If the previous number is not prime, check if the next number is a newman-shanks-williams prime number\n                                        if is_prime(current_num + 2):\n                                            current_num += 1\n                                        else:\n                                            # If the next number is not a newman-shanks-williams prime number,\n                                            # check if the previous number is a newman"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        # check if the length of the two tuples are same\n        if len(test_tup1)!= len(test_tup2):\n            print(\"Both tuples should have same length.\")\n            return None\n        \n        # loop through the tuples and perform element-wise division\n        for i in range(len(test_tup1)):\n            # check if the element in the first tuple is divisible by the element in the second tuple\n            if test_tup1[i] % test_tup2[i]!= 0:\n                print(\"Elements in the first tuple should be divisible by elements in the second tuple.\")\n                return None\n            \n            # perform element-wise division of the element in the first tuple and the element in the second tuple\n            test_tup1[i] = test_tup1[i] // test_tup2[i]\n            \n        return test_tup1\n    \n    except Exception as e:\n        print(\"An error occurred:\", e)\n        return None"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the first tuple should be equal to the length of the second tuple.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Cannot perform division by zero.\")\n            return\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Using a list comprehension to perform element-wise division\n    return tuple([num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize an empty list to store the results\n    results = []\n\n    # iterate over each element in the first tuple and the second tuple\n    for i in range(len(test_tup1)):\n        # perform division element-wise\n        results.append(test_tup1[i] / test_tup2[i])\n\n    # return the results list as the output of the function\n    return results"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Both tuples must have the same number of elements.'\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples is not equal. Cannot perform element-wise division.\")\n        return None\n    \n    # create a new tuple with element-wise division\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two input tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    # Perform element-wise division of the two tuples\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    # Check if L is a positive integer\n    if L <= 0 or not isinstance(L, int):\n        raise ValueError(\"L should be a positive integer.\")\n\n    # Check if the input list is not empty\n    if len(lst) == 0:\n        raise ValueError(\"Input list should not be empty.\")\n\n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create a new list to store the first part of the list\n    first_part = []\n    # iterate through the list to find the first L elements of the list\n    for i in range(L):\n        # append the first L elements of the list to the first_part list\n        first_part.append(list1[i])\n    # create a new list to store the second part of the list\n    second_part = []\n    # iterate through the list from index L to the end of the list\n    for i in range(L, len(list1)):\n        # append the remaining elements of the list to the second_part list\n        second_part.append(list1[i])\n    # return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is less than 1\n    if L < 1:\n        raise ValueError(\"L must be a positive integer\")\n    \n    # Calculate the length of the second part of the list\n    second_part_length = len(list1) - L\n    \n    # Initialize the first part of the list with the first L elements of list1\n    first_part = list1[:L]\n    \n    # Initialize the second part of the list with the last L-1 elements of list1\n    second_part = list1[L-1:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if L <= 0:\n        raise ValueError(\"Length of the list must be greater than 0.\")\n    if L > length:\n        raise ValueError(\"Length of the list must be less than or equal to the length of the original list.\")\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if L is positive\n    if L <= 0:\n        raise ValueError(\"L should be a positive integer\")\n    \n    # Calculate the length of the second part of the list\n    L2 = len(list1) - L\n    \n    # Check if the length of the list is at least twice the length of L\n    if L2 < 0:\n        raise ValueError(\"The length of the list should be at least twice the length of L\")\n    \n    # Split the list into two parts\n    list1_part = list1[:L]\n    list2_part = list1[L:]\n    \n    # Return the two parts in a tuple\n    return (list1_part, list2_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts with length L and return the two parts as a tuple.\n    \"\"\"\n    # Check if the length of the list is greater than L\n    if len(lst) > L:\n        # Calculate the length of the first part\n        part1_len = L\n        # Calculate the length of the second part\n        part2_len = len(lst) - L\n        # Split the list into two parts\n        part1 = lst[:part1_len]\n        part2 = lst[part1_len:]\n        # Return the two parts as a tuple\n        return (part1, part2)\n    else:\n        # If the length of the list is not greater than L, return the list as a tuple\n        return (lst, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Split the list into two parts\n    part1 = lst[:L]\n    part2 = lst[L:]\n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than or equal to the length of L\n    if len(list1) < L:\n        raise ValueError(\"The length of the list should be greater than or equal to the length of L\")\n    # Split the list into two parts where the length of the first part of the list is L\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the resulting lists in a tuple\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts, where the first part has a length of L.\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"Length of L should be less than or equal to the length of the list.\")\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return first_part, second_part"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert hours to years\n    years = h_age / 730\n    # round off the value to 2 decimal places\n    return round(years, 2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # convert the human age to dog years\n    dog_years = h_age * 7\n    \n    # print the result\n    print(f\"The dog's age in dog's years is {dog_years} years.\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    age = h_age * 7\n    # Return the dog's age in dog's years\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"Enter the date of birth (MM/DD/YYYY): \")\n    year = int(dob.split('/')[2])\n    month = int(dob.split('/')[0])\n    day = int(dob.split('/')[1])\n    today = datetime.date.today()\n    birthdate = datetime.date(year, month, day)\n    age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert hours to days and calculate dog's age in dog's years\n    age_in_years = h_age / 7\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # calculate the dog's age in years\n    dog_age_in_years = h_age / 7\n    \n    # return the dog's age in years\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 + 2 * (h_age - 1)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate age in dog's years\n    dog_age_years = 7 * h_age\n\n    # Return the calculated age in dog's years\n    return dog_age_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    return [S[i:i+step] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        return []\n    else:\n        result = []\n        for i in range(0, len(S), step):\n            result.append(S[i:i+step])\n        return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Convert the list to a string and split it into individual characters\n    S = ''.join(map(str, S))\n    # Split the string into individual characters\n    S = list(S)\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through each character in the list\n    for i in range(0, len(S), step):\n        # Use the range function to create a new list with the nth character(s)\n        new_list = S[i:i+step]\n        # Add the new list to the result list\n        result.append(new_list)\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    S = list(S)\n    split_lists = []\n    for i in range(0, len(S), step):\n        split_lists.append(S[i:i+step])\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area\n    lateral_surface_area = 6 * l * l\n    # Return the result\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralSurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the lateral surface area using the formula (6 * l^2)\n    area = 6 * l**2\n    \n    # return the area of the cube\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l + 12 * l * l + 8 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i*i\n    return odd_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n % 2 == 0:\n        raise ValueError(\"Input must be an odd number\")\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum variable to 0\n    total = 0\n    # iterate through the first n odd numbers\n    for i in range(1, n+1, 2):\n        # add the square of the number to the total\n        total += i*i\n    # return the total\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(n):\n        sum_squares += (2 * (i+1))**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_squares = [i**2 for i in range(1,n+1,2)]\n    odd_sum = sum(odd_squares)\n    return odd_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(2, n+1, 2):  \n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd natural number to the sum of squares\n        sum_of_squares += i**2\n    \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_squares = sum([i**2 for i in range(1, n+1, 2)])\n    return odd_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the value of n and the list of stars\n    num = n\n    stars = []\n    # Iterate through each number from 1 to 5\n    for i in range(1, 6):\n        # Check if the current number is divisible by n\n        if i % num == 0:\n            # Append the current number to the list of stars\n            stars.append(i)\n    # Return the list of stars\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the sum of stars to 0\n    sum_of_stars = 0\n    # initialize the count of stars to 1\n    count_of_stars = 1\n    # loop from 1 to n\n    for i in range(1, n+1):\n        # check if the current count is a multiple of 2\n        if count_of_stars % 2 == 0:\n            # if it is, add the count to the sum of stars\n            sum_of_stars += count_of_stars\n        else:\n            # if not, subtract the count from the sum of stars\n            sum_of_stars -= count_of_stars\n        # update the count of stars\n        count_of_stars += 1\n    # return the sum of stars\n    return sum_of_stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    stars = '*' * n\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 5 * n + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the star number\n    star_num = 1\n    \n    # loop through each row and add the current row number to the star number\n    for i in range(1, n+1):\n        star_num += i\n    \n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the result variable\n    result = \"\"\n    \n    # loop n times\n    for i in range(1, n+1):\n        # add a star to the result string\n        result += \"*\"\n    \n    # return the result string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the count variable\n    count = 1\n    # loop n times\n    for i in range(1, n+1):\n        # print the star number\n        print(\"*\" * count)\n        # increment the count variable\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n - 1) + \"*\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_pos_count = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n                even_pos_count += 1\n    \n    if even_pos_count == 0:\n        return 0\n    else:\n        return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(0, len(arr), 2):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            return sum_even\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if i % 2 == 0:\n                print(\"Sum of even numbers at even positions:\", sum)\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(n):\n        sum_of_powers += i*i*i*i*i\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_powers = 0\n    count = 0\n    i = 2\n    while count < n:\n        if i**5 % 2 == 0:\n            sum_even_powers += i**5\n            count += 1\n        i += 1\n    return sum_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n\n    for i in range(1, n+1): \n        if i % 2 == 0: # checking if i is even\n            sum += i**5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n    count = 0\n\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n        count += 1\n    \n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[1] for tuple in test_list if len(tuple) > 1]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    \n    # Initialize the result tuple\n    result_tup = []\n    \n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Subtract the elements of the tuples and append the result to the result tuple\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup += (test_tup1[i] - test_tup2[i],)\n    return sub_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of the even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        for j in range(n+1):\n            if i%2==0 and j%2==0:\n                sum += math.comb(n, i) * math.comb(n, j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return math.factorial(2*n-1) // math.factorial(2)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize variables to keep track of running sum and number of even coefficients\n    even_sum = 0\n    even_count = 0\n    \n    # Loop through the range from 0 to n\n    for i in range(n+1):\n        # Calculate the binomial coefficient for each i\n        coeff = math.comb(n, i)\n        \n        # If the coefficient is even, add it to the running sum and increment the count\n        if coeff % 2 == 0:\n            even_sum += coeff\n            even_count += 1\n    \n    # Calculate the average even coefficient and return it\n    return even_sum / even_count"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize the sum of even binomial coefficients to zero\n    sum_even = 0\n\n    # Loop through the first n terms of the binomial series\n    for i in range(n):\n        # Calculate the i-th term of the binomial series\n        term = math.comb(n, i)\n\n        # If the index is even, add the term to the sum\n        if i % 2 == 0:\n            sum_even += term\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum variable to 0\n    coeff_sum = 0\n    \n    # Iterate from 0 to n\n    for i in range(n):\n        # Check if i is even\n        if i % 2 == 0:\n            # If i is even, add its binomial coefficient to the sum\n            coeff_sum += math.comb(n, i)\n    \n    # Return the sum of even index binomial coefficients\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of the even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial_coeff = 0\n    for i in range(n+1):\n        term = math.factorial(n) / (math.factorial(i) * math.factorial(n-i))\n        if i % 2 == 0:\n            sum_even_binomial_coeff += term\n    return sum_even_binomial_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(2, n+1, 2):\n        sum_even_coeffs += math.comb(n, i)\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of the even-indexed binomial coefficients.\n    \"\"\"\n    sum_even_binomial_coeffs = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            sum_even_binomial_coeffs += math.comb(n, i)\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math  \n\n\ndef even_binomial_Coeff_Sum(n): \n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Find the number of even numbers less than or equal to n\n    even_nums = [x for x in range(1, n+1) if math.gcd(x, 2) == 1]\n    # Initialize a list to store the sum of even index binomial coefficients\n    sum_even = []\n    # Iterate through each pair of even numbers and calculate the sum of their binomial coefficients\n    for i in range(len(even_nums)-1):\n        for j in range(i+1, len(even_nums)):\n            # Calculate the even index binomial coefficient of i and j\n            bin_coeff = math.comb(even_nums[i], j)\n            # Check if the binomial coefficient is even and add it to the sum list if so\n            if bin_coeff % 2 == 0:\n                sum_even.append(bin_coeff)\n    # Return the sum of the even index binomial coefficients\n    return sum(sum_even)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and calculates the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum to 0\n    sum_even_binomial_coeffs = 0\n\n    # Loop through the range of n\n    for i in range(2, n+1):\n        # Calculate the binomial coefficient\n        coeff = math.comb(i, 2)\n\n        # If the coefficient is even, add it to the sum\n        if coeff % 2 == 0:\n            sum_even_binomial_coeffs += coeff\n\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume using the formula V = (1/3) * \u03c0 * r^2 * h\n    V = (1/3) * 3.141592653589793 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume using the formula V = (1/3) * \u03c0 * r^2 * h\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 1/3 * 3.14159 * r * r * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = (1/3) * (3.14159 * r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * (r**2) * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14 * r**2 * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * r**2 * h\n    return V"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    # Filter the dictionary to include only entries with values greater than or equal to n\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n            continue\n        break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0:\n            count += 1\n        if test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    b = 1\n    while n > 0:\n        if n % 2 == 0:\n            a *= 2\n        else:\n            b *= 2\n        n = n // 2\n    return a // b"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = [1]\n    for i in range(2, n + 1):\n        decagonal_numbers.append(sum(decagonal_numbers[-2:]))\n    return decagonal_numbers[n]\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # First row of decagonal numbers is 1\n    first_row = [1]\n    # Second row of decagonal numbers is 5\n    second_row = [5]\n    # Initialize the list of rows with the first two rows\n    rows = [first_row, second_row]\n    # Iterate through the remaining rows until we have the nth row\n    for i in range(2, n):\n        # Create a new list for the current row\n        row = []\n        # Iterate through each number in the previous row\n        for j in range(len(rows[i-1])):\n            # Calculate the sum of the number and the previous number in the previous row\n            row.append(rows[i-1][j] + rows[i-2][j])\n        # Append the current row to the list of rows\n        rows.append(row)\n    # Return the nth row of decagonal numbers\n    return rows[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 1\n    for i in range(1, n + 1):\n        decagonal += (i * (i + 1)) / 2\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_count = 0\n    for i in range(1, n+1):\n        dec_count += i\n    return dec_count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Helper function to calculate the nth decagonal number\n    def nth_decagonal(n):\n        return n * (2 * n - 1) / 2\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Call the helper function to get the nth decagonal number\n    result = nth_decagonal(n)\n\n    # Check if the result is equal to the input\n    return result == n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(n):\n        num = (i**2) + (2*i - 1)**2\n        print(num)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the first three decagonal numbers\n    decagonal = [1, 14, 462]\n    # Check if the input number is less than 3\n    if n < 3:\n        return False\n    # Check if the input number is greater than the length of the decagonal list\n    elif n > len(decagonal):\n        return False\n    # Find the nth decagonal number\n    else:\n        for i in range(1, n+1):\n            decagonal.append(decagonal[i-1] + decagonal[i-2])\n        return decagonal[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = n * (3 * n - 1) // 2\n    return dec_num\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    def decagonal(n):\n        \"\"\"\n        Calculate the nth decagonal number using matrix multiplication.\n        \"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 5\n        else:\n            return decagonal(n-1) + decagonal(n-2)\n\n    # Calculate the nth decagonal number\n    return decagonal(n)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # Initialize variables\n    found = False\n    index = -1\n\n    # Iterate through the list and compare each element with the target item\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            found = True\n            index = i\n            break\n\n    # Return the result as a tuple\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    # Initialize a variable to store the index position of the element\n    index = -1\n    \n    # Loop through the array until the index position is found or the end of the array is reached\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # Set the index position and return the tuple\n            index = i\n            return (True, index)\n        elif i == len(dlist) - 1:\n            # If the element is not found and the end of the array has been reached, return the tuple of False and -1\n            return (False, -1)\n            \n    # If the element is not found, return the tuple of False and -1\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # initialize a counter and a flag variable\n    counter = 0\n    found = False\n\n    # loop through the array until we find the item or the end of the array is reached\n    while counter < len(dlist) and not found:\n        if dlist[counter] == item:\n            found = True\n        else:\n            counter += 1\n\n    # if the item was found, return the index position\n    if found:\n        return (True, counter)\n    else:\n        return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Checks if all elements in a given list are unique or not.\n    \"\"\"\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_flag = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique_flag = False\n            break\n    return unique_flag"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if the elements of a given list are unique or not.\n\n    :param test_list: A list of elements to be checked for uniqueness.\n    :return: True if all elements in the list are unique, False otherwise.\n    \"\"\"\n    # convert the list to set to remove duplicates\n    unique_set = set(test_list)\n\n    # check if the set is empty or not\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        print(\"The list is unique.\")\n    else:\n        print(\"The list is not unique.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    # Create a set to store unique elements of the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # Create an empty dictionary to store the frequency of each digit\n    freq = {}\n\n    # Loop through each digit in the integer and update the frequency in the dictionary\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # Loop through each digit in the integer and check if the frequency is greater than the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n\n    # If all digits have a frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # Calculate the frequency of each digit in the integer\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Iterate through the frequency dictionary and check if the frequency is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as input and determines whether the frequency of each digit in the integer\n    is less than or equal to the digit itself. If the condition is true, the function returns True, otherwise False.\n    \"\"\"\n    digits = list(str(n))\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Helper function to check if frequency of digit in n is less than or equal to digit itself\n    def check_frequency(digit):\n        count = 0\n        while n:\n            if n % 10 == digit:\n                count += 1\n            n //= 10\n        return count <= digit\n\n    # Check if frequency of each digit is less than or equal to itself\n    for digit in range(1, 10):\n        if not check_frequency(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of digits\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in freq.items():\n        if freq > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0,0,0,0,0,0,0,0,0,0] # initialising a list of 10 elements to store frequency of each digit\n    \n    for i in str(n):\n        freq[int(i)] += 1 # incrementing the frequency of current digit\n    \n    for i in range(10):\n        if freq[i] > 0 and freq[i] <= i:\n            return False # if frequency of i is greater than 0 and less than or equal to itself, return False\n    \n    return True # if the function executes till the end, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    # initialize the frequency dictionary\n    freq = {}\n\n    # loop through each digit in the integer\n    for digit in str(n):\n        # update the frequency count for that digit\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # check if the frequency count for each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    # if all digits have valid frequency, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    digit_count = {}\n    for digit in digits:\n        if digit not in digit_count:\n            digit_count[digit] = 0\n        digit_count[digit] += 1\n\n    for digit in digits:\n        if digit_count[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(f'All items in the list {list} are equal to {element}.')\n    else:\n        print(f'Not all items in the list {list} are equal to {element}.')"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 0:\n        if all(x == element for x in list):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check if the list is empty\n    if len(list) == 0:\n        return True\n    # check if the first element is equal to the given element\n    elif list[0] == element:\n        # recursively call the function on the remaining list\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    else:\n        for item in list:\n            if item!= element:\n                return False\n        return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[bB]{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?i)\\ba{2,3}\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba{1}b(?:\\{2,3\\}){0,1}\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    # Define a regular expression pattern to match the given pattern\n    pattern = re.compile(r'a.*[b]{2,3}')\n\n    # Use the pattern to search for the pattern in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?=b{2,3})')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\w*[b]{2,3}\\w*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes an array a, its size n, and the number of repetitions k, and returns the maximum sum of a contiguous array formed by repeating the array k times.\n\n    The function uses the sliding window technique to solve this problem. We maintain a window of size k and calculate the sum of elements in the window. We then move the window to the right by removing the leftmost element and adding the new element. We repeat this process until we have k elements in the window.\n\n    The maximum sum of a contiguous array formed by repeating the array k times is the maximum sum of any window of size k.\n\n    Example:\n    a = [1, -2, 3, 10, -4, 7, 2, -5]\n    n = 7\n    k = 3\n\n    Output: 29\n    '''\n\n    max_sum = float('-inf')\n    window_sum = 0\n    left = 0\n\n    for right in range(n):\n        # Move the window to the right\n        if right - left + 1 == k:\n            window_sum -= a[left]\n            left += 1\n        \n        # Add the new element to the window\n        window_sum += a[right]\n\n        # Update the maximum sum if necessary\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    arr = [0] * (n*k)\n    for i in range(n):\n        for j in range(k):\n            arr[i*k+j] = a[i]\n    max_sum = max(max_sum, sum(arr))\n    for i in range(n-k+1):\n        sub_arr = arr[i:i+k]\n        temp_sum = sum(sub_arr)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the maximum subarray sum without repeating the array\n    max_sum = max(sum(a[:i]) for i in range(n))\n\n    # Repeat the array k times and find the maximum subarray sum\n    max_sum_repeated = max(sum(a[:i+1]) for i in range(n))\n\n    return max(max_sum, max_sum_repeated)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create the modified array by repeating the given array k times\n    modified_array = []\n    for i in range(k):\n        modified_array.extend(a)\n\n    # Calculate the sum of the modified array\n    modified_array_sum = sum(modified_array)\n\n    # Initialize the largest sum and its starting index\n    max_sum = float('-inf')\n    starting_index = -1\n\n    # Loop through the modified array and find the subarrays of maximum sum\n    for i in range(n):\n        subarray_sum = 0\n        for j in range(i, i + k):\n            subarray_sum += modified_array[j]\n\n        # Update the largest sum and starting index if a new maximum is found\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            starting_index = i\n\n    # Return the starting index of the maximum subarray\n    return starting_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # If k is 0, then the maximum sum is just the sum of the original array\n    if k == 0:\n        return sum(a)\n\n    # Initialize a list to store the modified array\n    modified_array = [0] * n\n\n    # Calculate the sum of the original array and repeat it k times\n    modified_array[0] = a[0]\n    for i in range(1, k):\n        modified_array[i] = a[0] * i\n\n    # Initialize a variable to store the current maximum sum\n    current_max = modified_array[0]\n\n    # Iterate through the rest of the array and update the maximum sum\n    for i in range(1, n):\n        current_max = max(current_max + a[i], a[i])\n        modified_array[i] = current_max\n\n    return current_max"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_of_a = 0\n    max_sum = float('-inf')\n    for i in range(n):\n        sum_of_a += a[i]\n        if sum_of_a > max_sum:\n            max_sum = sum_of_a\n    max_sum -= n * a[0]\n    for j in range(k - 1):\n        sum_of_a = 0\n        for i in range(n):\n            sum_of_a += a[i]\n        if sum_of_a > max_sum:\n            max_sum = sum_of_a\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a new array with k repetitions of the original array\n    repeated_array = a * k\n    # calculate the sum of the repeated array\n    repeated_sum = sum(repeated_array)\n    # initialize variables for the largest sum and its index\n    max_sum = repeated_sum\n    max_index = 0\n    # iterate through the array and find the largest sum of a contiguous subarray\n    for i in range(n):\n        current_sum = repeated_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n    return max_sum, max_index\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Compute the sum of the first k elements of the array\n    sum_first_k = sum(a[:k])\n\n    # Initialize the maximum sum and its index\n    max_sum = sum_first_k\n    max_index = 0\n\n    # Compute the sum of the modified array by repeating the first k elements\n    for i in range(k, n):\n        sum_modified = sum_first_k + a[i]\n        if sum_modified > max_sum:\n            max_sum = sum_modified\n            max_index = i\n\n    return max_sum, max_index\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize a variable to store the maximum sum found so far\n    max_sum = float('-inf')\n    \n    # Initialize a variable to store the current sum\n    current_sum = 0\n    \n    # Initialize a variable to store the sum of the repeating elements\n    repeating_sum = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        \n        # Add the current element to the current sum\n        current_sum += a[i]\n        \n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            \n            # Update the maximum sum\n            max_sum = current_sum\n            \n            # Check if the current sum is greater than the sum of the repeating elements\n            if current_sum > repeating_sum:\n                \n                # Update the sum of the repeating elements\n                repeating_sum = current_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Find the maximum sum of a contiguous array in the original array\n    max_sum = max(sum(a[:i+1]) for i in range(n))\n\n    # Repeat the original array k times to get the modified array\n    modified_array = [a[0]] * k\n    for i in range(1, n):\n        modified_array[i % k] = a[i]\n\n    # Find the maximum sum of a contiguous array in the modified array\n    return max(sum(modified_array[:i+1]) for i in range(k))"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # iterate through the even natural numbers from 2 to n\n    for i in range(2, n+1, 2):\n        # add the square of the current even number to the sum of squares\n        sum_of_squares += i*i\n        \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    while count < n:\n        num = count * 2\n        total += num ** 2\n        count += 1\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):  \n        sum += i**2  \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    i = 0  \n    while i < n:  \n        if i % 2 == 0:  \n            sum_of_squares += i ** 2  \n            i += 1  \n    return sum_of_squares  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0  \n    for i in range(2, n+1, 2):  \n        sum += i**2  \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # Initialize a list to store the maximum length of each sublist in list1\n    max_sublist_lengths = []\n\n    # Loop through each sublist in list1\n    for sublist in list1:\n        # Initialize a variable to store the length of the current sublist\n        sublist_length = len(sublist)\n\n        # If the current sublist is longer than any sublist in the max_sublist_lengths list,\n        # add the current sublist to the list\n        if sublist_length > max(max_sublist_lengths):\n            max_sublist_lengths.append(sublist_length)\n\n    # Return the list of maximum length sublists\n    return max_sublist_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    for sublist in list1:\n        if len(sublist) > maxLength:\n            maxLength = len(sublist)\n    return maxLength"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length = len(max(sublist, key=len))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length_in_sublist = max([len(sublist) for sublist in list1])\n        max_lengths.append(max_length_in_sublist)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum length\n    max_lengths = []\n\n    # loop through each sublist in the list of lists\n    for sublist in list1:\n        # if the length of the sublist is greater than the current maximum, update the maximum\n        if len(sublist) > max(max_lengths) or not max_lengths:\n            max_lengths = [len(sublist)]\n        # if the length of the sublist is equal to the current maximum, add it to the list\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Function to check if two colors are same or not\n    def same_color(c1, c2): \n        return c1 == c2\n    \n    # Function to count number of ways to paint fence with n posts and k colors\n    def count_ways(n, k): \n        # Base case: If n is 0 or k is 0 or k is greater than n then there is only one way to paint the fence.\n        if n == 0 or k == 0 or k > n: \n            return 1\n        # Recursive case: Count number of ways to paint fence with n-1 posts and k colors and adding number of ways to paint fence with n-1 posts and k-1 colors, where colors are different.\n        elif n > 0 and k > 0: \n            return count_ways(n-1, k-1) + count_ways(n-1, k)\n    \n    # Call the function to count number of ways to paint the fence\n    return count_ways(n, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways_helper(n, k, num_ways):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        if k == 0:\n            return 0\n        if n == 1:\n            return num_ways + 1\n        if n == 2:\n            return num_ways + 2\n        if n == 3:\n            return num_ways + 4\n        if k == 1:\n            return count_ways_helper(n - 1, k, num_ways)\n        if k == 2:\n            return count_ways_helper(n - 2, k, num_ways) + count_ways_helper(n - 1, k - 1, num_ways)\n        if k == 3:\n            return count_ways_helper(n - 3, k, num_ways) + count_ways_helper(n - 2, k - 1, num_ways) + count_ways_helper(n - 1, k - 2, num_ways)\n    \n    return count_ways_helper(n, k, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Base case: If n is 1, then there is only 1 way to paint the fence with one post and k colors.\n    if n == 1:\n        return k\n\n    # Base case: If n is 2, then there are 2 ways to paint the fence with two posts and k colors.\n    if n == 2:\n        return 2\n\n    # Initialize a 2D array to store the number of ways of painting the fence.\n    ways = [[0] * (k+1) for _ in range(n+1)]\n\n    # Initialize the first row and column of the 2D array with the values 1 and 1.\n    ways[0][0] = 1\n    ways[0][1] = 1\n\n    # Fill the rest of the 2D array using recurrence relation.\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1 or j == 1:\n                ways[i][j] = ways[i-1][j]\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n\n    # Return the number of ways of painting the fence.\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    Args:\n        n (int): The number of posts on the fence.\n        k (int): The number of colors in the palette.\n\n    Returns:\n        int: The number of ways of painting the fence.\n    \"\"\"\n    # Initialize the count to 1\n    count = 1\n\n    # Iterate over the colors\n    for color in range(1, k+1):\n        # Find the count of ways to paint the fence with 2 adjacent posts having the same color\n        count_adjacent_2_same_color = count_no_of_ways(n-2, k-color)\n\n        # Update the count by multiplying it by the count of ways to paint the fence with 2 adjacent posts having the current color\n        count *= count_adjacent_2_same_color\n\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "Here's the Python code for the above approach:"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a list of lists to store the count of ways for each color combination\n    count_color = [[0] * k for i in range(n)]\n\n    # Initialize the count of ways for a single color\n    count_color[0][0] = 1\n\n    # Loop through all possible pairs of colors\n    for i in range(1, n):\n        for j in range(k):\n            # Check if the colors at positions i and j are the same\n            if j > 0:\n                if count_color[i - 1][j] + count_color[i - 1][j - 1] <= k:\n                    count_color[i][j] = count_color[i - 1][j] + count_color[i - 1][j - 1]\n            # Check if the colors at positions i and j are not the same\n            else:\n                count_color[i][j] = 1\n\n    # Return the count of ways for the given fence\n    return count_color[-1][-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a 2D array to store the number of ways of painting the fence\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    # base cases\n    for i in range(1, n+1):\n        dp[i][1] = 1\n    \n    for j in range(2, k+1):\n        dp[1][j] = j\n    \n    # fill the dp array using dynamic programming\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n    \n    # return the final value of the dp array\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    def backtrack(start, current_color):\n        if current_color == 0 or current_color >= k:\n            return 1\n\n        count = 0\n        for i in range(start, n):\n            if i > start and i < n - 1 and fence[i] == fence[i - 1]:\n                continue\n            count += backtrack(i + 1, current_color + 1)\n        return count\n\n    fence = [0] * n\n    fence[0] = 1\n    for i in range(1, n):\n        fence[i] = 1 - fence[i - 1]\n\n    return backtrack(1, 0)\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def paint_helper(left, right, colors, count, ways):\n        if left > right:\n            return\n        if left == right:\n            if colors[left] == colors[right]:\n                count += 1\n            ways[colors[left]] += 1\n            return\n        color = colors[left]\n        paint_helper(left+1, right, colors, count, ways)\n        paint_helper(left, right-1, colors, count, ways)\n        paint_helper(left+1, right-1, colors, count, ways)\n        ways[color] -= 1\n\n    colors = [1]*n\n    ways = [0]*k\n    ways[0] = 1\n    ways[1] = 1\n    paint_helper(0, n-1, colors, 0, ways)\n    return ways[1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways(n, k):\n        if n == 0:\n            return 1\n        if k == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        ways = [0] * (k + 1)\n        ways[0] = 1\n        ways[1] = 1\n        for i in range(2, k + 1):\n            ways[i] = ways[i - 1] + ways[i - 2]\n        return ways[n]\n\n    ways = count_ways(n, k)\n    return ways"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers n and m as input and returns the quotient of n/m rounded down to the nearest integer.\n    '''\n    quotient = int(n/m)\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: Division by zero not allowed.\"\n    else:\n        return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # integer division (floor division)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ValueError(\"Cannot divide by zero!\")\n    elif m > 0:\n        return n // m\n    else:\n        return -((-n) // -m)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt(w**2 - h**2)\n    c = math.sqrt(h**2 - w**2)\n    return a + b + c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt(w**2 + (h/2)**2)\n    c = math.sqrt(h**2 + (w/2)**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = w * h\n    perimeter = math.sqrt(area)\n    third_side = perimeter * math.sin(math.pi/3)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using Heron's formula to find the length of the third side\n    s = (w**2 + h**2)**0.5\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    a = w\n    b = h\n    c = math.sqrt(a**2 + b**2)\n    print(\"The third side of the right angled triangle is:\", c)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_length = math.sqrt(w**2 + h**2)\n    return side_length"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the maximum value to the first element of the list\n    max_val = listval[0]\n\n    # Loop over the remaining elements of the list\n    for val in listval[1:]:\n        # If the current element is greater than the maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise ValueError(\"Input must be a list.\")\n    max_val = None\n    for value in listval:\n        if max_val is None or value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize a variable to store the maximum value\n    max_val = None\n\n    # Iterate through the list to find the maximum value\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval: # if the list is empty\n        return None\n    max_val = listval[0] # initialize max_val to the first element of the list\n    for val in listval[1:]: # iterate over the remaining elements of the list\n        if val > max_val: # if the current element is greater than the current max_val\n            max_val = val # update max_val to be the current element\n    return max_val # return the max_val after iterating over all the elements in the list"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the maximum value to the smallest possible value\n    max_val = float('-inf')\n    # Loop through the list of values\n    for val in listval:\n        # Update max_val if the current value is greater than it\n        if val > max_val:\n            max_val = val\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to the first element of the list\n    max_val = listval[0]\n    \n    # Loop through the remaining elements of the list\n    for i in range(1, len(listval)):\n        # Check if the current element is greater than the current maximum value\n        if listval[i] > max_val:\n            # Update the maximum value to the current element\n            max_val = listval[i]\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    max_val = listval[0]\n    for item in listval[1:]:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for item in listval:\n        if max_num is None or item > max_num:\n            max_num = item\n    return max_num"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n    \n    # Sort the array in ascending order\n    arr = sorted(arr)\n    \n    # Traverse the array twice to count inversions\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            if arr[left] > arr[i] and arr[right] > arr[i]:\n                inv_count += right - left\n                left += 1\n                right -= 1\n            elif arr[left] > arr[i]:\n                left += 1\n            else:\n                right -= 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Helper function to swap two elements\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Helper function to partition the array around a pivot element\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                swap(arr, i, j)\n\n        swap(arr, i+1, high)\n        return i+1\n\n    # Helper function to count inversions using quick sort\n    def count_inversions(arr, low, high):\n        if low < high:\n            pi = partition(arr, low, high)\n            count_inversions(arr, low, pi-1)\n            count_inversions(arr, pi+1, high)\n\n    # Count inversions using quick sort\n    count_inversions(arr, 0, len(arr)-1)\n\n    # Return the count of inversions\n    return arr[0]"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Calculate the length of the array\n    n = len(arr)\n\n    # Initialize variables to keep track of inversions\n    inv_count = 0\n    inv_pairs = 0\n\n    # Sort the array\n    arr.sort()\n\n    # Iterate through the array from the beginning\n    for i in range(n):\n        # Initialize variables to keep track of the current and next elements\n        prev_elem = arr[i]\n        next_elem = i + 1\n\n        # Iterate through the array from the next index\n        while next_elem < n:\n            # Check if the next element is smaller than the current element\n            if arr[next_elem] < prev_elem:\n                # Increment the inversion count\n                inv_count += next_elem - i\n                # Increment the number of inversion pairs found so far\n                inv_pairs += 1\n                # Move the next element to the end of the array\n                arr[i], arr[next_elem] = arr[next_elem], arr[i]\n            # If the next element is not smaller, move to the next one\n            else:\n                next_elem += 1\n\n    # Return the final count of inversions\n    return inv_count, inv_pairs"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n\n    # Create a copy of the array to avoid modifying the original array\n    arr_copy = arr.copy()\n\n    # Use the QuickSort algorithm to sort the array\n    quicksort(arr_copy, 0, len(arr_copy) - 1)\n\n    # Count the number of inversions in the sorted array\n    inv_count = 0\n    for i in range(1, len(arr_copy)):\n        j = i - 1\n        while j >= 0 and arr_copy[j] > arr_copy[i]:\n            j -= 1\n            inv_count += j - i + 1\n\n    return inv_count\n\ndef quicksort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quicksort(arr, low, pi - 1)\n        quicksort(arr, pi + 1, high)\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Find the largest element \n    largest = arr[0] \n    # Initialize count of inversions \n    count = 0 \n    # Iterate over all elements from 1 to n-1 \n    for i in range(1, n): \n        if arr[i] > largest: \n            # Count the inversion and update the largest element \n            count += n - i \n            largest = arr[i] \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)  # Find the length of the array\n    \n    # Implementing the merge sort algorithm for counting inversions\n    def merge_sort(arr, low, high):\n        if low < high:\n            mid = (low + high) // 2\n            merge_sort(arr, low, mid)  # Sort the first half\n            merge_sort(arr, mid + 1, high)  # Sort the second half\n            count = 0  # Initialize the count variable\n            i = low  # Initialize the first pointer\n            j = mid + 1  # Initialize the second pointer\n            \n            # Compare the elements from both halves and count the inversions\n            while i <= mid and j <= high:\n                if arr[i] <= arr[j]:\n                    i += 1\n                else:\n                    j += 1\n                    count += mid - i + 1  # Count the inversions from the second half\n            while i <= mid:\n                count += mid - i + 1\n                i += 1\n            \n            # Copy the sorted elements from the first half into the array\n            while i <= mid:\n                arr[low] = arr[i]\n                i += 1\n                low += 1\n            \n            # Copy the sorted elements from the second half into the array\n            while j <= high:\n                arr[low] = arr[j]\n                j += 1\n                low += 1\n                \n            # Count the inversions in the merged array\n            count += j - mid - 1\n            print(f\"Count of inversions for the array {arr} is {count}\")\n    \n    # Calling the merge sort function\n    merge_sort(arr, 0, n-1)\n    \n    return arr\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the inversion count and the first and last indices of the sub-array\n    inv_count = 0\n    first = 0\n    last = len(arr) - 1\n\n    # Iterate through the sorted array and count the inversions\n    while first < last:\n        if arr[first] > arr[last]:\n            inv_count += last - first\n            first += 1\n        else:\n            last -= 1\n\n    # Return the inversion count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n-1):\n        left = i+1\n        right = n-1\n        \n        while left < right:\n            # find the largest element in the left subarray\n            max_left = arr[left]\n            for j in range(left+1, right+1):\n                if arr[j] > max_left:\n                    max_left = arr[j]\n            \n            # find the largest element in the right subarray\n            max_right = arr[right]\n            for j in range(right-1, left-1, -1):\n                if arr[j] > max_right:\n                    max_right = arr[j]\n            \n            # if the largest element from the left subarray is greater than the largest element from the right subarray,\n            # then we have found an inversion and increment the count\n            if max_left > max_right:\n                inv_count += (right-left)\n                # swap the two elements to break the inversion\n                arr[left], arr[right] = arr[right], arr[left]\n                # continue searching the left subarray\n                left += 1\n            else:\n                # continue searching the right subarray\n                right -= 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as an argument and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    count = 0\n    # Traverse the array two times and keep track of the number of inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n-j\n            # If inversions are counted, we subtract the inversion count from n to account for duplicates\n            if count > 0:\n                n -= count\n                break\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Initialize an empty list to store the flattened list\n    flat_list = []\n\n    # Loop through each element of the given list\n    for element in list1:\n        # If the element is a list, recursively call the function on that list\n        if type(element) == list:\n            flat_list.extend(flatten_list(element))\n        # If the element is not a list, append it to the flat list\n        else:\n            flat_list.append(element)\n\n    # Return the flattened list\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        return [list1]\n    else:\n        result = []\n        for item in list1:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n    # Loop through each element in the given nested list\n    for item in list1:\n        # If the element is a list, recursively flatten it and append to the flattened list\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        # If the element is not a list, append it to the flattened list\n        else:\n            flattened_list.append(item)\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes a nested list structure as input and returns a flattened list.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict object to store the count of each item in the list\n    item_count = defaultdict(int)\n\n    # Iterate through the list of tuples and increment the count of each item in the list\n    for item, price in stdata:\n        item_count[item] += 1\n\n    # Calculate the maximum aggregate by iterating through the item_count dictionary and finding the maximum value\n    max_aggregate = max(item_count.values())\n\n    # Return the maximum aggregate value\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    aggregate = defaultdict(int)\n    max_sum = 0\n\n    for transaction in stdata:\n        for item, quantity in transaction:\n            aggregate[item] += quantity\n\n    for item, quantity in aggregate.items():\n        max_sum = max(max_sum, quantity)\n\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the minimum value of each product\n    min_dict = defaultdict(int)\n    \n    # loop through the list of tuples\n    for i,j in stdata:\n        # calculate the maximum of the current tuple and the min value of the same product\n        max_value = max(j, min_dict[i])\n        # update the min value of the same product\n        min_dict[i] = j\n        \n        # if the max value is greater than the max aggregate so far, update the max aggregate\n        if max_value > max_agg:\n            max_agg = max_value\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from a list of tuples.\n    '''\n    max_aggr = defaultdict(int)  # initialize defaultdict to store max aggregate per stock\n    for stock, price in stdata:\n        max_aggr[stock] = max(max_aggr[stock], price)  # update max aggregate per stock\n    return max(max_aggr.values())  # return the maximum aggregate across all stocks"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for item in stdata:\n        freq[item] += 1\n    \n    # calculate the maximum aggregate\n    max_agg = 0\n    for i in range(1, 4):\n        max_agg += i * freq[i]\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the count of each item in the list\n    counts = defaultdict(int)\n\n    # Iterate through each tuple in the list and update the count of each item\n    for item, quantity in stdata:\n        counts[item] += quantity\n\n    # Initialize a variable to store the maximum aggregate\n    max_agg = 0\n\n    # Iterate through the dictionary to find the maximum aggregate\n    for quantity, count in counts.items():\n        max_agg = max(max_agg, count * quantity)\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n\n    Args:\n        stdata (list): A list of tuples representing stock prices with the format (date, price)\n\n    Returns:\n        (float): The maximum aggregate value\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each day\n    max_agg = defaultdict(float)\n\n    # Loop through the stock data\n    for date, price in stdata:\n        # Calculate the maximum aggregate for the current day\n        agg = price * 1000000\n        max_agg[date] = max(agg, max_agg[date])\n\n    # Find the maximum aggregate for the entire list\n    max_agg_overall = max(max_agg.values())\n\n    return max_agg_overall"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n\n    The input is a list of tuples in the form (name, price).\n    The output is a tuple with the maximum aggregate.\n    '''\n    max_price = defaultdict(int) # initialize the defaultdict with initial values\n\n    for name, price in stdata:\n        max_price[name] = max(max_price[name], price)\n\n    max_agg = max(max_price.values()) # calculate the maximum aggregate\n\n    return (max_agg, max_price)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    This function calculates the maximum aggregate from the list of tuples.\n    \"\"\"\n\n    # Initialize a dictionary to store the max aggregate for each transaction\n    max_agg_dict = defaultdict(lambda: 0)\n\n    # Iterate through the list of tuples\n    for st_tuple in stdata:\n\n        # Calculate the maximum aggregate for the transaction\n        max_agg = max(st_tuple[0], st_tuple[1])\n\n        # Update the max aggregate for the transaction in the dictionary\n        max_agg_dict[st_tuple] = max_agg\n\n    # Return the max aggregate for the entire list of transactions\n    return max(max_agg_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the number of items in each transaction\n    num_items = defaultdict(int)\n\n    # Iterate over the list of transactions\n    for transaction in stdata:\n        # Calculate the total number of items in the transaction\n        total_items = sum(item[1] for item in transaction)\n        # Update the number of items in the transaction in the defaultdict\n        for item in transaction:\n            num_items[item[0]] += item[1]\n\n    # Calculate the maximum aggregate from the defaultdict\n    max_agg = max(num_items.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 1 << n):\n        if i == 1:\n            count += 1\n            continue\n        left = sum(int(bit) for bit in bin(i)[2:])\n        right = sum(int(bit) for bit in bin(i >> n)[2:])\n        if left == right:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0 \n    for i in range(2**n): \n        first_bit = i & 1 \n        last_bit = i >> n & 1 \n        if first_bit == last_bit: \n            count += 1 \n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in binary_seq[:n]) == sum(int(bit) for bit in binary_seq[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if sum(bin(i)[2:].zfill(n)) == sum(bin(j)[2:].zfill(n)):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if int(binary[:n]) == int(binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = [[1]*(2*n+1) for _ in range(2*n+1)]\n    for i in range(2*n+1):\n        count[i][0] = 0\n    for j in range(2*n+1):\n        count[0][j] = 0\n    for i in range(1, 2*n+1):\n        for j in range(1, 2*n+1):\n            count[i][j] = count[i-1][j] + count[i][j-1] - count[i-1][j-1] + (n-i+1)*(n-j+1)\n    return count[2*n][2*n]"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total_bits = 2*n\n    max_sum = 2**total_bits - 1\n\n    count = 0\n    for i in range(max_sum):\n        if sum(i%2**n for n in range(n)) == sum(i%2**n for n in range(total_bits-n)):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize count and bit counts\n    count = 0\n    bit_count = {0: 0, 1: 0}\n\n    # Loop through all possible binary numbers of length 2n\n    for i in range(2**n):\n        # Calculate sum of first n bits and sum of last n bits\n        sum_first = sum([int(digit) for digit in bin(i)[2:2+n]])\n        sum_last = sum([int(digit) for digit in bin(i)[-n+1:]])\n\n        # If sums are same, increment count\n        if sum_first == sum_last:\n            count += 1\n\n        # Update bit counts\n        bit_count[sum_first] += 1\n        bit_count[sum_last] -= 1\n\n        # Check for overflow and update count if necessary\n        if sum(bit_count.values()) < 0:\n            count = 0\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i-2**n+1)[2:].zfill(n)\n        if int(first_n) == int(last_n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    def sum_bits(bits):\n        return int(''.join(sorted(bits)), 2)\n\n    def count_bits(start, end, bits):\n        count = 0\n        for i in range(start, end + 1):\n            if bits[i] == bits[i - 1]:\n                count += 1\n        return count\n\n    def is_valid_binary_seq(seq):\n        sum1 = sum_bits(seq[:n])\n        sum2 = sum_bits(seq[n:])\n        if sum1!= sum2:\n            return False\n        return all(seq[i] == '0' or seq[i] == '1' for i in range(n))\n\n    count = 0\n    for start in range(2 ** n - 1, -1, -1):\n        end = start + 2 * n - 1\n        if is_valid_binary_seq(bin(start)[2:]):\n            bits = bin(start)[2:]\n            count += count_bits(start, end, bits)\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a depth variable to keep track of the depth of the dictionary\n    depth = 0\n    # Loop through each key in the dictionary\n    for key in d.keys():\n        # If the key is a dictionary, recursively call the function to find its depth\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        # If the key is a list, recursively call the function to find its depth\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # initialize the depth variable to 0\n    depth = 0\n    \n    # loop through the keys of the dictionary\n    for key in d:\n        # if the value is a dictionary, recursively call the function\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n        # if the value is a list, recursively call the function for each item in the list\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item))\n    # return the maximum depth of the dictionary\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    count = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            count += 1 + dict_depth(d[key])\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 1\n        for key, value in d.items():\n            depth = max(depth, dict_depth(value) + 1)\n        return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [(d, 0)]\n    while stack:\n        current_dict, current_depth = stack.pop()\n        if not current_dict:\n            return current_depth\n        for key, value in current_dict.items():\n            if isinstance(value, dict):\n                stack.append((value, current_depth + 1))\n    return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    stack = [(d, 1)]\n    while stack:\n        curr, level = stack.pop()\n        depth = max(depth, level)\n        for key, value in curr.items():\n            if isinstance(value, dict):\n                stack.append((value, level+1))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # Initialize a counter variable to keep track of the depth\n    depth = 0\n    # Loop through each key in the dictionary\n    for key in d:\n        # Increment the depth counter by 1 for each key-value pair\n        depth += 1\n        # If the value in the key-value pair is another dictionary,\n        # recursively call the function to find the depth of that dictionary\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n        elif isinstance(value, list):\n            depth = 1 + max([dict_depth(x) for x in value])\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a number of rotations, and returns the element at the given index after rotations.\n    \"\"\"\n\n    # Check if the index is in the range of the array\n    if index < 0 or index >= len(arr):\n        return \"Index out of range\"\n\n    # Calculate the position of the element after rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Find the element at the new index\n    element = arr[new_index]\n\n    # Check if the element is in the range of the ranges\n    if element < ranges[0] or element > ranges[1]:\n        return \"Element out of range\"\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    def find_element_after_rotations(arr, ranges, rotations, index):\n        if rotations == 0:\n            return arr[index]\n\n        if index + rotations >= len(arr):\n            return arr[index - rotations]\n\n        return arr[index + rotations - 1]\n\n    if rotations == 0:\n        return arr[index]\n\n    if index + rotations >= len(arr):\n        return find_element_after_rotations(arr, ranges, rotations - 1, index)\n\n    return arr[index + rotations - 1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    if rotations == 0:\n        return arr[index]\n    \n    # Find the element after rotations\n    element_after_rotations = arr[(index + rotations) % len(arr)]\n    \n    # Find the element at the given index after rotations\n    element_at_index = arr[(index + ranges) % len(arr)]\n    \n    # Compare the two elements and return the smaller one\n    return min(element_after_rotations, element_at_index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Initialize result variable\n    result = None\n\n    # Check if the array is empty\n    if len(arr) == 0:\n        return result\n\n    # Initialize the index of the range and rotation\n    current_range = 0\n    current_rotation = 0\n\n    # Iterate through the rotations\n    for rotation in rotations:\n\n        # Calculate the next rotation index\n        next_rotation = (current_rotation + rotation) % len(arr)\n\n        # Check if the current range is completed\n        if current_range >= len(ranges):\n            current_range = 0\n\n        # Check if the next range is completed\n        if current_range + ranges[current_range] >= len(arr):\n            current_range = 0\n\n        # Check if the element is found in the current range\n        if index >= current_range and index < current_range + ranges[current_range]:\n            result = arr[index]\n\n        # Move to the next range\n        current_range += ranges[current_range]\n\n        # Move to the next rotation\n        current_rotation = next_rotation\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the following arguments:\n    arr: List of integers\n    ranges: List of tuples of (start, end) pairs, where each pair represents a contiguous range of integers\n    rotations: Integer representing the number of rotations required\n    index: Integer representing the index at which the element to be found should be present\n\n    Returns:\n    The element at the given index after the specified number of rotations\n\n    \"\"\"\n    # Initialize the rotation variable to keep track of the rotation count\n    rotation_count = 0\n    # Initialize the result variable to keep track of the element\n    result = None\n\n    # Loop through the rotations\n    while rotation_count < rotations:\n        # Loop through the ranges\n        for start, end in ranges:\n            # If the rotation index falls within the range, update the result and break the loop\n            if index >= start and index <= end:\n                result = arr[index]\n                break\n            # If the rotation index exceeds the end of the range, rotate the range by one index and continue the loop\n            elif index > end:\n                start, end = end, start + 1\n        # Increment the rotation count and set the index to the first index in the range\n        rotation_count += 1\n        index = start\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # calculate the rotation index based on the index provided\n    rotation_index = index % rotations\n\n    # calculate the rotation distance based on the rotation index and the number of elements in the range\n    rotation_distance = (index // rotations) * (ranges[0] - ranges[1])\n\n    # calculate the start and end indices of the range after the rotation\n    start_index = (rotation_index * (ranges[0] - ranges[1])) + ranges[1]\n    end_index = start_index + (ranges[0] - ranges[1])\n\n    # return the element at the given index after the rotation\n    return arr[start_index:end_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Initializing the result variable\n    result = arr[0]\n\n    # Checking if the element at the index is in the range\n    if ranges[index] == 1 :\n        result = arr[0]\n\n    # Checking if the element at the index is in the range and rotations are required\n    if ranges[index] == 1 and rotations > 0 :\n        result = arr[index]\n        for i in range(1,rotations) :\n            result = arr[(index-1+i)%len(arr)]\n            if ranges[index-1+i] == 1 :\n                result = arr[0]\n                break\n\n    # Returning the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Function to rotate an array\n    def rotate(arr, d):\n        n = len(arr)\n        temp = arr[0]\n        for i in range(d):\n            j = i % n\n            arr[i] = arr[j]\n        arr[d] = temp\n        return arr\n\n    # Helper function to find element after rotation\n    def find_after_rot(arr, index, rotation, r_index):\n        if rotation == 0:\n            return arr[r_index]\n        elif rotation > 0:\n            for i in range(rotation):\n                arr = rotate(arr, r_index)\n            return arr[r_index]\n        elif rotation < 0:\n            for i in range(abs(rotation)):\n                arr = rotate(arr, n - r_index)\n            return arr[r_index]\n\n    # Check if the index is valid\n    if index < 0 or index >= len(arr):\n        return \"Index out of range\"\n\n    # Find the rotation and rotation index\n    rotation = 0\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            rotation = i\n            break\n    if rotation == len(ranges):\n        return \"Element not found\"\n\n    r_index = index - ranges[rotation][0]\n\n    # Find the element after rotation\n    return find_after_rot(arr, index, rotation, r_index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the following parameters:\n    arr: the array to search\n    ranges: the ranges of the array, which are the possible values of the element\n    rotations: the number of rotations required to find the element\n    index: the index of the element to find\n    \n    This function returns the element at the given index after rotations.\n    \"\"\"\n    # Check if the index is valid\n    if index < 0 or index >= len(arr):\n        raise ValueError(\"Invalid index\")\n\n    # Initialize the current element and the result\n    current_element = arr[index]\n    result = current_element\n\n    # Perform the rotations\n    for _ in range(rotations):\n        # Find the next element in the range\n        if current_element in ranges:\n            next_index = ranges.index(current_element)\n            next_element = arr[(index + next_index) % len(arr)]\n        else:\n            next_element = max(ranges)\n            next_index = ranges.index(next_element)\n\n        # Update the result and the current element\n        result = next_element\n        current_element = next_element\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the position of the element after rotation\n    position = (index + rotations) % len(arr)\n\n    # Loop through the range of rotations and find the element at the given position\n    for i in range(len(ranges)):\n        if position >= ranges[i][0] and position < ranges[i][1]:\n            return arr[position]\n\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = r'\\b[Pp]\\w+\\b'\n\n    # Use the pattern to find all words in the list that start with 'p'\n    matches = re.findall(pattern,''.join(words))\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # If there is exactly one match, return the two words as a tuple\n    elif len(matches) == 1:\n        return (matches[0].split(' ')[0], matches[0].split(' ')[1])\n\n    # If there are two matches, return them as a tuple\n    else:\n        return (matches[0].split(' ')[0], matches[1].split(' ')[0])"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(r'^p', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return \"No two words starting with 'p' found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'^p[a-zA-Z]*')\n\n    # Filter the list of words using the pattern and return the result\n    result = list(filter(pattern.match, words))\n\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^\\w*p\\w*$')\n    result = [word for word in words if pattern.match(word)]\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    pattern = re.compile(\"^p\")\n    for word in words:\n        if pattern.match(word):\n            return word, word[1:]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    regex = re.compile(pattern)\n    matches = regex.findall(words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word, word[2:]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define a regular expression pattern to match the starting letter of words starting with 'p'\n    pattern = r'^p\\w+'\n\n    # use the re.findall() function to find all the words that match the pattern in the list of words\n    matches = re.findall(pattern, words)\n\n    # check if there are exactly two matches\n    if len(matches) == 2:\n        # return the two matches as a tuple\n        return matches\n    else:\n        # if there are not exactly two matches, return an error message\n        return \"Error: no two words starting with letter 'p' found\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-z]*'\n    for word in words:\n        match = re.match(pattern, word)\n        if match:\n            return match.group(), word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_pattern = re.compile(r'^p\\w+')\n    matches = re.findall(p_pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None, None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    \n    # Initialize variables\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n    max_ending_here = float('-inf')\n    \n    # Iterate through the array and fill in the dp array\n    for i in range(n):\n        if i < k:\n            dp[i + 1] = a[i]\n        else:\n            dp[i + 1] = max(a[i] + dp[i - k], a[i])\n        max_ending_here = max(max_ending_here, dp[i + 1])\n        max_sum = max(max_sum, max_ending_here)\n    \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    for i in range(index, n):\n        if i!= k:\n            sub_sum = 0\n            for j in range(k, i):\n                sub_sum += a[j]\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a list to store the maximum sum of increasing subsequence till ith index\n    max_sum = [0] * (n + 1)\n\n    # Initialize the maximum sum of increasing subsequence till ith index and kth element\n    max_sum[index] = max(a[index], a[k])\n\n    # Iterate through all the indices from 1 to i\n    for i in range(1, index):\n        # If the current element is greater than or equal to kth element, then update the maximum sum of increasing subsequence till ith index\n        if a[i] >= a[k]:\n            # Add the sum of current element and maximum sum of increasing subsequence till i-1 to maximum sum of increasing subsequence till ith index\n            max_sum[index] = max(max_sum[index], max_sum[i] + a[index])\n\n    # Return the maximum sum of increasing subsequence till ith index\n    return max_sum[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # initialize variables\n    prev = [0] * (n + 1)\n    curr = [0] * (n + 1)\n\n    # base case: if index is equal to k, return the sum of the k-th element\n    if index == k:\n        return a[index]\n\n    # initialize the first element of prev as zero\n    prev[0] = 0\n\n    # iterate from 1 to n-1\n    for i in range(1, n + 1):\n        # if the k-th element is greater than the i-th element,\n        # then include the i-th element in the increasing subsequence\n        if a[i] > a[k]:\n            # add the maximum of the current sum and the sum of the current element to prev\n            prev[i] = max(prev[i - 1] + a[i], curr[i - 1])\n        else:\n            # if the k-th element is less than or equal to the i-th element,\n            # then don't include the i-th element in the increasing subsequence\n            prev[i] = curr[i - 1]\n\n        # update the current sum\n        curr[i] = prev[i]\n\n    # return the maximum sum of increasing subsequence\n    return max(curr[i] for i in range(k, n + 1))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # initialize variables\n    dp = [0] * n\n    dp[0] = a[0]\n\n    # calculate the maximum sum of increasing subsequence ending at each index\n    for i in range(1, n):\n        if a[i] > dp[i - 1] + a[i]:\n            dp[i] = dp[i - 1] + a[i]\n        elif a[i] > dp[i - 1]:\n            dp[i] = a[i]\n        else:\n            dp[i] = dp[i - 1] + a[i]\n\n    # find the maximum sum of increasing subsequence ending at kth index\n    max_sum = float('-inf')\n    for i in range(k, n):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n - 1:\n        return a[index]\n\n    if k > index:\n        # The kth element is after i, so we don't include it in the sum.\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # Include the current element in the sum.\n    sum_from_prefix = a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # Exclude the current element and try all elements before it.\n    sum_excluding_current = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    return max(sum_from_prefix, sum_excluding_current)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Args:\n    a: list or array of integers\n    n: integer, the length of the list or array\n    index: integer, the current index of the prefix sum calculation\n    k: integer, the given kth element after index\n\n    Returns:\n    integer, the maximum sum of increasing subsequence including the given kth element\n    \"\"\"\n\n    if index >= n:\n        return 0\n\n    if index == 0:\n        prefix_sum = a[index]\n    else:\n        prefix_sum = max(a[index], prefix_sum + a[index])\n\n    if index > 0:\n        if a[index] > a[index - 1] or k > 0 and a[index] > a[k - 1]:\n            subseq_sum = max_sum_increasing_subseq(a, n, index - 1, k)\n        else:\n            subseq_sum = max(max_sum_increasing_subseq(a, n, index - 1, k), prefix_sum)\n\n    else:\n        if a[index] > a[0]:\n            subseq_sum = max_sum_increasing_subseq(a, n, index - 1, k)\n        else:\n            subseq_sum = prefix_sum\n\n    return subseq_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and length of increasing subsequence\n    max_sum = float('-inf')\n    current_sum = 0\n    current_length = 0\n    \n    # Traverse through the array from start to i\n    for i in range(n):\n        # If the current element is greater than or equal to k, include it in the current increasing subsequence\n        if a[i] >= k:\n            # Update the current sum and length\n            current_sum = a[i]\n            current_length += 1\n            \n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # Update the maximum sum and length\n                max_sum = current_sum\n                length = current_length\n                \n            # Check if the current sum is equal to the maximum sum and the current element is greater than the element at the beginning of the subsequence\n            elif current_sum == max_sum and a[i] > a[index]:\n                # Update the maximum sum and length\n                max_sum = current_sum\n                length = current_length\n    \n    # If the length of the current increasing subsequence is greater than the length of the maximum increasing subsequence, update the maximum sum and length\n    if length > current_length:\n        max_sum = current_sum\n        length = current_length\n    \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # initialize variables\n    dp = [0] * n\n    max_sum = float('-inf')\n    \n    # loop through array and calculate maximum sum of increasing subsequence from prefix until i-th index\n    for i in range(index, n):\n        # check if current element is greater than or equal to kth element\n        if a[i] >= a[k]:\n            # calculate the maximum sum of increasing subsequence from prefix until i-th index and including kth element\n            dp[i] = max(dp[i], dp[k-1] + a[i])\n        else:\n            # if current element is less than kth element, update maximum sum to include the current element\n            dp[i] = a[i]\n        # update maximum sum if current maximum sum is greater than current maximum sum\n        max_sum = max(max_sum, dp[i])\n    \n    # return maximum sum of increasing subsequence from prefix until kth index\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize maximum sum and current sum as negative infinity\n    max_sum = float('-inf')\n    curr_sum = float('-inf')\n\n    # Initialize current index and its value\n    curr_index = index\n\n    # Iterate over remaining elements from i+1 to n-1\n    for i in range(index+1, n):\n\n        # If current element is greater than k, update current index\n        if a[i] > k:\n            curr_index = i\n\n        # Add current element to current sum\n        curr_sum += a[i]\n\n        # Update maximum sum if current sum is greater than maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    # Return maximum sum\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(tuplex_copy)\n    # Check if the index of the colon is valid\n    if m < 0 or n < 0:\n        raise ValueError(\"Indices must be non-negative.\")\n    elif m >= length:\n        raise ValueError(\"Index m must be less than the length of the tuple.\")\n    elif n >= length:\n        raise ValueError(\"Index n must be less than the length of the tuple.\")\n    else:\n        # Get the sublist from index m to index n\n        sublist = tuplex_copy[m:n+1]\n        # Return the sublist\n        return sublist"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = deepcopy(tuplex)\n    for i in range(m):\n        if i == m-1:\n            row.append(n)\n        else:\n            row.append(row[i][n-1])\n    return tuple(row)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[:m] + (new_tuplex[m],) + new_tuplex[m+1:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Transpose the copy\n    tuplex_copy = tuple(zip(*tuplex_copy))\n    # Extract the mth tuple from the copy\n    colon = tuplex_copy[m-1]\n    # Transpose the colon\n    colon = tuple(zip(*colon))\n    # Slice the colon to get the desired sub-tuple\n    colon = colon[n-1]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m):\n        tuplex = deepcopy(tuplex)\n        for j in range(n):\n            tuplex = tuplex[1:]\n        print(tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new tuple with m items\n    new_tuplex = deepcopy(tuplex)\n    # add m items to the end of the tuple\n    new_tuplex += (m,) * m\n    # slice the tuple to get a colon\n    colon = new_tuplex[::n]\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex[i][j] = None\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a copy of the input tuple\n    t = deepcopy(tuplex)\n    # get the length of the tuple\n    length = len(t)\n    # calculate the number of elements in the colon\n    colon_length = m * n\n    # check if the number of elements in the colon is greater than the length of the tuple\n    if colon_length > length:\n        # if it is, raise an error message\n        raise ValueError(\"The number of elements in the colon is greater than the length of the tuple.\")\n    # generate the colon of the tuple\n    colon = tuple(t[i:i+m] for i in range(0, length, n))\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    tuplex (tuple): Tuple to get a colon of.\n    m (int): Number of rows in the colon.\n    n (int): Number of columns in the colon.\n\n    Returns:\n    A tuple of the colon of the input tuple.\n    '''\n\n    # Get a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the length of the original tuple\n    length = len(tuplex_copy)\n\n    # Check if the length is greater than m*n\n    if length > m * n:\n        raise ValueError(\"Tuple has more elements than the colon size.\")\n\n    # Get the indices of the first element in the colon\n    first_indices = list(range(length - (m - 1) * n, length))\n\n    # Get the indices of the remaining elements in the colon\n    remaining_indices = list(range(length - n, length - (m - 1) * n))\n\n    # Create a list of the indices for the colon\n    colon_indices = first_indices + remaining_indices\n\n    # Create a colon of the input tuple using the indices\n    colon = tuple(tuplex_copy[index] for index in colon_indices)\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Create a new tuple with the m-th colon of the input tuple x.\n    The new tuple has n elements, where n is equal to the number of elements in x.\n    The new tuple has the same elements as x, but with the m-th colon replaced by a colon.\n    The order of the elements in the new tuple is the same as in x.\n    \"\"\"\n    colon = tuple(x[i] if i!= m else \":\" for i in range(n))\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            product1 = max(nums1[i], nums1[j]) * min(nums1[i], nums1[j])\n            product2 = max(nums2[i], nums2[j]) * min(nums2[i], nums2[j])\n            if product1 > max_product:\n                max_product = product1\n            if product2 > max_product:\n                max_product = product2\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum product array\n    max_products = [0] * N\n\n    # Initialize the current position\n    pos = 0\n\n    # Iterate over the given lists\n    for num1 in nums1:\n        for num2 in nums2:\n            # Calculate the product of the current numbers\n            product = num1 * num2\n\n            # Update the maximum product array\n            if product > max_products[pos]:\n                max_products[pos] = product\n\n            # Move the current position\n            pos = (pos + 1) % N\n\n    # Return the maximum product array\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum number of products to find\n    max_products = 2 * N\n    \n    # Initialize two lists to store the largest products found so far\n    max_products_found = [0] * max_products\n    max_products_indices = [0] * max_products\n    \n    # Initialize two variables to keep track of the current index and product found\n    current_index = 0\n    current_product = 1\n    \n    # Iterate through the lists and find the largest products\n    for num1 in nums1:\n        for num2 in nums2:\n            # Update the current product\n            current_product *= max(num1, num2)\n            \n            # Check if the current product is larger than the largest product found so far\n            if current_product > max_products_found[current_index]:\n                # Update the largest product found\n                max_products_found[current_index] = current_product\n                # Update the index of the largest product found\n                max_products_indices[current_index] = current_index\n                # Update the current index and product\n                current_index += 1\n                current_product = 1\n    \n    # Return the indices of the largest products found\n    return max_products_indices[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in nums1 and nums2\n    max1, max2 = max(nums1), max(nums2)\n    # Find the minimum value in nums1 and nums2\n    min1, min2 = min(nums1), min(nums2)\n    # Calculate the range of values for which we can multiply the two lists\n    range_mult = max1 * max2\n    # Initialize variables for the largest products\n    largest_product1, largest_product2 = 0, 0\n    # Loop through each element in nums1 and nums2 and find the largest product\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate the product of the two lists and multiply it by the current range\n            current_product = nums1[i] * nums2[j] * range_mult\n            # Update the largest product variables if necessary\n            if current_product > largest_product1:\n                largest_product2 = largest_product1\n                largest_product1 = current_product\n            elif current_product > largest_product2:\n                largest_product2 = current_product\n    # Return the largest products and their multipliers\n    return largest_product1, largest_product2, range_mult"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n\n    for i in range(N):\n        factor1 = max(nums1[i], nums2[i])\n        factor2 = min(nums1[i], nums2[i])\n        product = factor1 * factor2\n\n        if product > max_product:\n            max_product = product\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    result = []\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        result.append(product1)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    if N > len(nums1):\n        raise ValueError(\"The number of products to be found must be less than or equal to the length of the shorter list.\")\n    \n    # Find the maximum product of any pair of factors\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            product = max(nums1[i]*nums2[j], nums2[i]*nums1[j])\n            max_product = max(max_product, product)\n            \n    # Find the N largest products\n    products = []\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            product = max(nums1[i]*nums2[j], nums2[i]*nums1[j])\n            if len(products) < N:\n                products.append(product)\n            else:\n                if product > max(products):\n                    products.pop(0)\n                    products.append(product)\n    \n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Find the largest N products\n    largest_products = []\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[N-i-1]\n        product3 = nums2[i] * nums1[N-i-1]\n        product4 = nums2[N-i-1] * nums1[i]\n        largest_products.append(max(product1, product2, product3, product4))\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the maximum and minimum values from each list\n    max1, min1, max2, min2 = float('-inf'), float('inf'), float('-inf'), float('inf')\n\n    # Iterate over the first N elements of each list\n    for num1 in nums1[:N]:\n        for num2 in nums2[:N]:\n            # Update the maximum and minimum values for each list\n            if num1 > max1:\n                max1 = num1\n            if num1 < min1:\n                min1 = num1\n            if num2 > max2:\n                max2 = num2\n            if num2 < min2:\n                min2 = num2\n\n    # Calculate the largest product of any two factors from each list\n    largest_product = max(max1 * min2, max2 * min1)\n\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize a list to store the largest products\n    largest_products = []\n    \n    # Iterate over the range of N products to find\n    for i in range(N):\n        # Find the maximum value in the first list and the maximum value in the second list\n        factor1 = max(nums1)\n        factor2 = max(nums2)\n        \n        # Find the minimum value in the first list and the minimum value in the second list\n        # Subtract the maximum value from the second list to find the minimum value in the second list\n        factor2 = min(factor2 - max(nums1), factor2)\n        \n        # Find the product of the two factors\n        product = factor1 * factor2\n        \n        # Add the product to the list of largest products\n        largest_products.append(product)\n        \n        # Remove the maximum value from the first list to create a new list with one fewer element\n        nums1 = nums1[1:]\n        \n        # Remove the minimum value from the second list to create a new list with one fewer element\n        nums2 = nums2[1:]\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a Python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:   \n        return a   \n    else:   \n        return b   "
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Split the string into a list of characters\n    char_list = list(str1)\n    # Convert the list to a tuple\n    char_tuple = tuple(char_list)\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n    str1 (str): A string to be converted to a tuple of characters.\n\n    Returns:\n    tuple: A tuple of characters corresponding to the input string.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert string to list of characters\n    char_list = list(str1)\n    # convert list to tuple\n    char_tuple = tuple(char_list)\n    # return tuple\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n    str1 (str): the string to be converted.\n\n    Returns:\n    tuple: the tuple of characters of the input string.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # check if n is even\n        n >>= 1 # move right by 1 bit\n    return n | 1 # set leftmost bit to 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (1 << 31):  # loop until leftmost unset bit is found\n        n = n & ~(1 << 31)  # unset the leftmost unset bit\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    n |= (n ^ (n-1)) & -(n & -n) # set leftmost unset bit\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit of a number n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the number with its leftmost unset bit set to 1.\n    \"\"\"\n    # Initialize the leftmost unset bit to 1\n    unset_bit = 1\n    \n    # Loop through all bits in the number until a bit is found that is set to 0\n    while n & unset_bit == 0:\n        unset_bit <<= 1\n    \n    # Set the leftmost unset bit to 1 and return the updated number\n    return n | unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit of a given integer n.\n    The function returns the modified integer.\n    '''\n    # initialize leftmost unset bit to -1\n    leftmost_unset_bit = -1\n    \n    # loop through each bit in the integer\n    for i in range(31, -1, -1):\n        # if the current bit is set to 1\n        if n & (1 << i):\n            # check if the current bit is the left most unset bit\n            if i == leftmost_unset_bit:\n                # if it is, then set the leftmost_unset_bit to -1\n                leftmost_unset_bit = -1\n            else:\n                # if it is not, then set the leftmost_unset_bit to the current bit\n                leftmost_unset_bit = i\n    \n    # if there are no unset bits, set the leftmost_unset_bit to 31\n    if leftmost_unset_bit == -1:\n        leftmost_unset_bit = 31\n    \n    # set the left most unset bit of the integer to 1\n    n |= (1 << leftmost_unset_bit)\n    \n    # return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while i < 32 and (n & (1 << i)):\n        i += 1\n    return n | (1 << i)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n\n    The function takes an integer n as input and returns the integer n with its leftmost unset bit set to 1.\n\n    The algorithm to set the leftmost unset bit is as follows:\n        1. If n is 0, return 1\n        2. If n is odd, set the leftmost bit to 1 and return n+1\n        3. If n is even, set the leftmost bit to 0 and return n-1\n\n    Example:\n    set_left_most_unset_bit(5) -> 10\n    \"\"\"\n    if n == 0:\n        return 1\n    if n & 1 == 1:\n        return n + 1\n    else:\n        return n - 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    # Convert the integer to a binary string\n    binary_str = bin(n)[2:]\n    # Find the index of the leftmost unset bit\n    leftmost_unset_bit = len(binary_str) - binary_str.index('1')\n    # Set the leftmost unset bit to 1\n    binary_str = binary_str[:leftmost_unset_bit] + '1' + binary_str[leftmost_unset_bit+1:]\n    # Convert the binary string back to an integer\n    return int(binary_str, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    bit_set = 1\n    while bit_set == 1:\n        bit_set = n & bit_set\n        n = n ^ bit_set\n        bit_set = 1 << bit_set.bit_length()\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume using the formula V = 1/3 * pi * r^2 * h\n    V = 1/3 * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r ** 2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * (r**2) * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula: V = \u03c0r\u00b2h.\n\n    Parameters:\n        r: float\n            The radius of the base of the cone.\n        h: float\n            The height of the cone.\n\n    Returns:\n        float\n            The volume of the cone.\n    '''\n    return math.pi * (r**2) * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r ** 2\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula for volume of cone = 1/3 * pi * r^2 * h\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # loop from 0 to n\n    for i in range(0, n+1):\n        # check if i is a power of 2\n        if i & (i-1) == 0:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # loop through all powers of 2 from 1 to n\n    for i in range(1, n+1):\n        # if the power of 2 is less than or equal to n, return it\n        if i <= n:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 to 1\n    highest = 1\n    \n    # loop through each power of 2 until we reach n\n    while highest <= n:\n        # if the current power of 2 is less than or equal to n, update the highest power of 2\n        if highest * highest <= n:\n            highest *= 2\n            \n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize the highest power of 2 to 0\n    highest = 0\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Check if the current number is a power of 2\n        if i == 1:\n            # If it is, set it as the highest power of 2\n            highest = 1\n        else:\n            # If not, check if the current number is a power of 2\n            while i > 1:\n                if i % 2 == 0:\n                    i = i // 2\n                else:\n                    i = 3*i + 1\n\n            # Update the highest power of 2 if the current number is a power of 2\n            if i == 1:\n                highest = i\n\n    # Return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n // 2\n    return 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # check if n is zero or a positive integer\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer greater than zero.\")\n        return None\n\n    # initialize highest power of 2\n    highest = 1\n\n    # loop through the values of 2 up to n\n    for i in range(2, n + 1):\n        # if the value is a power of 2, update highest\n        if i == 2**highest:\n            highest += 1\n\n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1: \n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize power variable to 1\n    power = 1\n    \n    # loop until power is less than or equal to n\n    while power <= n: \n        # if power is less than or equal to n, set it as the power variable\n        if power <= n:\n            power = power << 1\n            \n        # decrement power by 1\n        power = power - 1\n    \n    # return the power variable\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2**(highest_Power_of_2(n-1))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_lucas = 2\n        current_lucas = 1\n        for i in range(2, n+1):\n            next_lucas = prev_lucas + current_lucas\n            prev_lucas = current_lucas\n            current_lucas = next_lucas\n        return current_lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function calculates the nth Lucas number.\n\n    Parameters:\n    n (int): The nth Lucas number to find.\n\n    Returns:\n    int: The nth Lucas number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        lucas = 2\n        for i in range(2, n+1):\n            lucas = lucas * (4*i - 1) // (2*i + 1)\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = 2\n        for i in range(2, n+1):\n            lucas = (lucas**2 + 1) % 1000000007\n            # The above formula calculates the nth lucas number using the formula: \n            # lucas(n) = (lucas(n-1)^2 + 1) % 1000000007\n            # The above formula calculates the nth lucas number using the formula: \n            # lucas(n) = (lucas(n-1)^2 + 1) % 1000000007\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Apply the format string to the element and store the result\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # iterate over the list and apply the format string to each element\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): list of items\n    l2 (list): list of items\n    l3 (list): list of items\n\n    Returns:\n    dictionary: nested dictionary with items from all lists\n    \"\"\"\n    # create an empty dictionary to store the data\n    data = {}\n    # loop through all the lists\n    for i in range(len(l1)):\n        # add the i-th item of list 1 to the data dictionary\n        data[l1[i]] = l2[i]\n    # loop through all the lists\n    for i in range(len(l3)):\n        # add the i-th item of list 3 to the data dictionary\n        data[l3[i]] = l3[i]\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert first list to dictionary\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    \n    # Convert second list to dictionary\n    d2 = {}\n    for i in range(len(l1)):\n        d2[l1[i]] = l3[i]\n    \n    # Convert dictionaries to nested dictionary\n    result = {}\n    result['d1'] = d1\n    result['d2'] = d2\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n\n    # Convert the first list to a dictionary\n    d1 = {k: v for k, v in zip(l1[0], l1[1:])}\n\n    # Convert the second list to a dictionary\n    d2 = {k: v for k, v in zip(l2[0], l2[1:])}\n\n    # Convert the third list to a dictionary\n    d3 = {k: v for k, v in zip(l3[0], l3[1:])}\n\n    # Combine the dictionaries\n    d = {**d1, **d2, **d3}\n\n    # Return the combined dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for item in l1:\n        result[item] = {}\n        for subitem in l2:\n            result[item][subitem] = {}\n            for thirditem in l3:\n                result[item][subitem][thirditem] = \"Data\"\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # creating a dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # loop through each list and create a nested dictionary for each item in the list\n    for i in range(len(l1)):\n        item1 = l1[i]\n        item2 = l2[i]\n        item3 = l3[i]\n        \n        # creating a new dictionary to store the current item's data\n        curr_item_dict = {}\n        \n        # adding the first item to the current dictionary\n        curr_item_dict[item1] = item2\n        \n        # adding the second item to the current dictionary\n        curr_item_dict[item3] = item4\n        \n        # adding the third item to the current dictionary\n        curr_item_dict[item5] = item6\n        \n        # adding the current item's dictionary to the nested dictionary\n        nested_dict[i] = curr_item_dict\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result = {}\n    \n    # Loop through each list and add the items to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n        \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    - l1: a list of dictionaries.\n    - l2: a list of lists.\n    - l3: a list of strings.\n\n    Returns:\n    - A nested dictionary of lists.\n    \"\"\"\n    # Create an empty dictionary to store the nested lists.\n    nested_dict = {}\n    # Loop over the lists and convert each one to a nested dictionary.\n    for i, list_of_dicts in enumerate([l1, l2, l3]):\n        for j, inner_list in enumerate(list_of_dicts):\n            # Check if the inner list is already a dictionary.\n            if isinstance(inner_list, dict):\n                # If it is, copy its keys to the outer dictionary.\n                for key in inner_list:\n                    nested_dict.setdefault(key, []).append(list_of_dicts[i][j])\n            else:\n                # If it's not, create a new dictionary with the inner list as the value.\n                nested_dict[list_of_dicts[i][j]] = [inner_list]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {l2[i]: l3[i]}\n    return dictionary"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(args)):\n        for j in range(len(args[i])):\n            nested_dict[args[i][j]] = args[i+1][j]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create an empty dictionary to store the final result\n    result = {}\n\n    # Loop through each list\n    for i in range(len(l1)):\n        # Create a new dictionary to store the values from the current list\n        sub_dict = {}\n\n        # Loop through each element in the current list\n        for j in range(len(l1[i])):\n            # Add the element to the sub_dict dictionary\n            sub_dict[l2[i][j]] = l3[i][j]\n\n        # Add the sub_dict dictionary to the result dictionary with the key of the current list\n        result[l1[i]] = sub_dict\n\n    # Return the final result\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 5\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        if n % 2 == 0:\n            max1 = get_max_sum(n//2) + n + get_max_sum(n//3)\n            max2 = get_max_sum(n//2) + get_max_sum(n//3)\n            return max(max1, max2)\n        else:\n            max1 = get_max_sum(n//2) + n\n            max2 = get_max_sum(n//2)\n            return max(max1, max2)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 7\n        elif n == 5:\n            return 11\n\n    def recursive_max_sum(n, f_n):\n        if n == 1:\n            return n\n        elif n == 2:\n            return f_n\n        elif n == 3:\n            return f_n + f(n-1)\n        elif n == 4:\n            return f_n + f(n-1) + f(n-2)\n        elif n == 5:\n            return f_n + f(n-1) + f(n-2) + f(n-3)\n\n    max_sum = 0\n    for i in range(1, n+1):\n        current_sum = recursive_max_sum(i, f(i))\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Initialize the sum of the first 5 terms\n    s = 0\n    s += n\n    s += n*2\n    s += n*3\n    s += n*4\n    s += n*5\n    # Return the maximum sum\n    return s"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n <= 1:\n            return n\n        else:\n            return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    \n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n-1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # Base case\n    if n == 1:\n        return n\n    \n    # Recursive case\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # Base case\n        if n % 2 == 0:\n            return get_max_sum(n//2) + get_max_sum(n//3)\n        else:\n            return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return n\n        elif n % 2 == 0:\n            return f(n//2) + f(n//3) + f(n//4) + f(n//5)\n        else:\n            return f(n//2) + f(n//3) + f(n//4) + f(n//5) + n\n        \n    return max(f(n), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    \n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = len(input_list[0])\n    max_index = 0\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_index = i\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = len(input_list[0])\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to set to check for duplicates\n    set_tup = set(test_tup)\n    # Check if set is empty (meaning there are no duplicates)\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the set has length of 1\n    if len(test_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Create a set to store unique elements of the given tuple\n    unique_elems = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_elems) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function takes a tuple as input and returns True if the tuple contains no duplicates, else False.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function takes a tuple as input and checks if it contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    # Use a set to remove duplicates and check if the length of the set is equal to the length of the original tuple\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the string and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character\n    freq_dict = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n            \n    # Iterate through the dictionary and find the first non-repeated character\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n            \n    # If all characters have a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # Create an empty dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character in the dictionary that has a count of 1 (i.e., the first non-repeating character)\n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    for char in str1:\n        if count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    char_freq = {} # dictionary to store the frequency of each character in the string\n    \n    # iterate through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_freq:\n            # if it is, increment its frequency by 1\n            char_freq[char] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            char_freq[char] = 1\n            \n    # find the first non-repeated character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char # return the first character that has a frequency of 1\n    \n    # if all characters have a frequency of 1, return None as there is no non-repeated character\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create an empty dictionary to store the character frequency\n    freq = {}\n    # iterate over the string and count the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # iterate over the string again and find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(string):\n    char_count = {}\n    first_non_repeating = ''\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n            if char_count[char] == 1:\n                first_non_repeating = char\n        else:\n            char_count[char] = 1\n    return first_non_repeating"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    regex = re.compile(pattern)\n    if regex.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # check if the string starts and ends with the same character\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        print(\"The string starts and ends with the same character.\")\n    else:\n        print(\"The string does not start and ends with the same character.\")"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_b_c_tuple = (a,b,c)\n    a_b_c_sorted = sorted(a_b_c_tuple)\n    if len(a_b_c_sorted) % 2 == 0:\n        median = (a_b_c_sorted[len(a_b_c_sorted)//2 - 1] + a_b_c_sorted[len(a_b_c_sorted)//2]) / 2\n    else:\n        median = a_b_c_sorted[len(a_b_c_sorted)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle number\n    middle_number = sorted_numbers[1]\n\n    # Calculate the median based on the middle number\n    if sorted_numbers[0] > middle_number:\n        median = (sorted_numbers[1] + sorted_numbers[2])/2\n    else:\n        median = (sorted_numbers[0] + sorted_numbers[2])/2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import random\n\ndef median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    # Generate a list of all three numbers\n    nums = [a, b, c]\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Determine the median based on the length of the list\n    if len(nums) % 2 == 0:\n        # If the list has an even number of elements, return the average of the middle two elements\n        return (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        # If the list has an odd number of elements, return the middle element\n        return nums[len(nums)//2]\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        return (numbers[length//2 - 1] + numbers[length//2]) / 2\n    else:\n        return numbers[length//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # check if the length of the list is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # if the length is even, return the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # if the length is odd, return the middle number\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Create a list of numbers\n    numbers = [a, b, c]\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Calculate the length of the list\n    length = len(numbers)\n\n    # Calculate the middle number\n    middle = length // 2\n\n    # Check if the length of the list is odd\n    if length % 2 == 1:\n        # Return the middle number\n        return numbers[middle]\n\n    # If the length of the list is even\n    else:\n        # Return the average of the two middle numbers\n        return (numbers[middle - 1] + numbers[middle]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Find the midpoint of the sorted list\n    midpoint = len(sorted_nums) // 2\n\n    # If the length of the list is odd, the median is the middle number\n    if len(sorted_nums) % 2!= 0:\n        return sorted_nums[midpoint]\n\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_nums[midpoint - 1] + sorted_nums[midpoint]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Find the sum of the three numbers\n    total = a + b + c\n\n    # Find the number of elements in the array\n    n = len(a)\n\n    # Find the median of the array\n    median = total/2\n\n    # Check if the median is less than the first number\n    if median < a:\n        return b\n    # Check if the median is greater than the second number\n    elif median > b:\n        return a\n    # If the median is between the two numbers, return the median\n    else:\n        return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers using the quickselect algorithm.\n    \"\"\"\n\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the index of the median\n    n = len(nums)\n    median_index = n // 2\n\n    # If the median is the first or second number, return it\n    if median_index == 0 or median_index == n - 1:\n        return nums[median_index]\n\n    # Otherwise, return the median using the quickselect algorithm\n    return quickselect(nums, median_index, len(nums))\n\n\ndef quickselect(nums, k, n):\n    \"\"\"\n    Implementation of the quickselect algorithm to find the k-th smallest element of a list.\n    \"\"\"\n\n    if n == 1:\n        return nums[0]\n\n    pivot_index = random.randint(0, n - 1)\n    pivot = nums[pivot_index]\n\n    left = [x for x in nums if x <= pivot]\n    equal = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n\n    if k < len(left):\n        return quickselect(left, k, len(left))\n    elif k < len(left) + len(equal):\n        return pivot\n    else:\n        return quickselect(right, k - len(left) - len(equal), len(right))\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # calculate the length of the sorted list\n    length = len(sorted_numbers)\n    # calculate the middle index\n    middle_index = length // 2\n    # if the length is odd, the median is the middle number\n    if length % 2 == 1:\n        median = sorted_numbers[middle_index]\n    # if the length is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for digit in str(nums))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        # Extract the digits from the number and add them up\n        digit_sum = sum(int(digit) for digit in str(num))\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        result.append(sum(digits))\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(d) for d in str(n)) for n in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = 0\n    for num in nums:\n        digits = 0\n        while num > 0:\n            digits += num % 10\n            num //= 10\n        digits_sum += digits\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A list of integers representing the sum of digits of each number in `nums`.\n    \"\"\"\n    digits_sum = []\n\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        digits_sum.append(digit_sum)\n\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of the digits and add it to the total sum\n        total_sum += sum(digits)\n    \n    # Return the total sum of digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            sum += digit\n            temp //= 10\n    return sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Iterate through each element in both tuples\n    for i in range(len(test_tup1)):\n        # Perform bitwise xor operation on current elements and store result in new tuple\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    # Return new tuple\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Combine the tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    \n    # Loop through the list and perform the bitwise xor operation\n    for i in range(len(combined_list)):\n        combined_list[i] = combined_list[i] ^ combined_list[i+1]\n    \n    # Remove the extra element added by the loop\n    combined_list = combined_list[:-1]\n    \n    # Return the resulting tuple\n    return tuple(combined_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # check if the tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must be of the same length.')\n\n    # loop through the tuples and perform the bitwise xor operation\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # unpack the tuples and get their lengths\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n\n    # create a new tuple to store the result\n    result_tup = []\n\n    # loop through each index and perform the bitwise xor operation\n    for i in range(tup1_len):\n        result_tup.append(test_tup1[i] ^ test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result += (1,)\n        else:\n            result += (0,)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if (item[0], item[1]) not in freq_dict:\n            freq_dict[(item[0], item[1])] = 1\n        else:\n            freq_dict[(item[0], item[1])] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    freq = len(unique_tuples)\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if tuple(item) not in freq:\n            freq[tuple(item)] = 1\n        else:\n            freq[tuple(item)] += 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        for tuple in item:\n            unique_tuples.add(tuple)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # initializing the result tuple with zeros\n    result_tup = (0, 0, 0)\n\n    # checking the length of both the tuples\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both input tuples must have same length\")\n        return None\n\n    # iterating through both tuples and adding elements in indexwise manner\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp_sum = 0\n        for j in range(len(test_tup1[i])):\n            temp_sum += test_tup1[i][j] + test_tup2[i][j]\n        result.append(temp_sum)\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] + test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Get the maximum length of the two tuples\n    max_len = max(len(test_tup1), len(test_tup2))\n\n    # Create an empty list to store the sum of each pair of elements\n    result = []\n\n    # Iterate over the indices of the two tuples\n    for i in range(max_len):\n        # Add the i-th element of the first tuple to the i-th element of the second tuple\n        result.append(test_tup1[i] + test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize the output tuple\n    output_tup = ()\n\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the two elements and append to the output tuple\n            output_tup += (test_tup1[i][j] + test_tup2[i][j],)\n\n    # Return the output tuple\n    return output_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # First, check if the lengths of the input tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Input tuples must have equal lengths\")\n\n    # Then, initialize a new tuple to store the result\n    result_tup = tuple()\n\n    # Loop through both tuples simultaneously\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of each tuple and append the result to the result tuple\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # initialize an empty result tuple\n    result = ()\n    # loop through the first tuple and add each element to the result tuple\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            if isinstance(test_tup2[i], tuple):\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            else:\n                result.append(add_tuples(test_tup1[i], test_tup2))\n        else:\n            if isinstance(test_tup2[i], tuple):\n                result.append(add_tuples(test_tup1, test_tup2[i]))\n            else:\n                result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a <= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of those two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1: \n        if i in tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two tuples as input and checks whether a specific element exists within the second tuple.\n    \n    Args:\n    tuplex (tuple): A tuple that contains the element we want to check.\n    tuple1 (tuple): A tuple that may or may not contain the element we want to check.\n    \n    Returns:\n    bool: True if the element exists within the second tuple, False otherwise.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(tuplex, \"is present in the tuple\")\n    else:\n        print(tuplex, \"is not present in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} is present in the tuple.\")\n    else:\n        print(f\"{tuplex} is not present in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns whether the parity of the number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(\"Even parity\")\n    else:\n        print(\"Odd parity\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = x % 2\n    if parity == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    \n    while x > 0:\n        parity += (x % 2)\n        x //= 2\n    \n    return parity % 2"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x%2!=0)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The parity of {} is even\".format(x)\n    else:\n        return \"The parity of {} is odd\".format(x)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    def get_digits(num):\n        \"\"\"\n        Helper function to extract digits from a given number.\n        \"\"\"\n        return [int(digit) for digit in str(num)]\n\n    def create_next_bigger(digits):\n        \"\"\"\n        Helper function to create the next bigger number by rearranging the digits.\n        \"\"\"\n        max_digit = max(digits)\n        min_digit = min(digits)\n        diff = max_digit - min_digit\n        next_bigger = max_digit + diff + 1\n        return next_bigger\n\n    def rearrange(num):\n        \"\"\"\n        Main function to rearrange the digits of a given number.\n        \"\"\"\n        digits = get_digits(num)\n        next_bigger = create_next_bigger(digits)\n        return next_bigger\n\n    return rearrange"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Check if the number is already the next biggest number\n    if str(n) == str(int(str(n)[::-1]) + 1):\n        return \"The number is already the next biggest number.\"\n    \n    # Create a list of the digits of the number\n    digits = list(str(n))\n    \n    # Find the index of the last digit\n    last_digit_index = digits.index(max(digits))\n    \n    # Rearrange the digits starting from the last digit\n    for i in range(last_digit_index, -1, -1):\n        if i == last_digit_index:\n            digits.pop(i)\n        else:\n            digits.insert(i+1, digits.pop(i))\n    \n    # Join the digits into a new number\n    new_number = int(''.join(digits))\n    \n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # get the digits of the given number\n    digits = [int(d) for d in str(n)]\n\n    # sort the digits in reverse order\n    digits.sort(reverse=True)\n\n    # convert the sorted digits back to a string and add a leading zero if necessary\n    result = str(digits[0]) + ''.join([str(d) for d in digits[1:]])\n\n    # convert the string to an integer and return the result\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # convert the given number to a string\n    num_str = str(n)\n\n    # loop through each digit of the number\n    for i in range(len(num_str)):\n        # if the current digit is smaller than the next digit, swap them\n        if int(num_str[i]) < int(num_str[i+1]):\n            num_str = num_str[:i] + num_str[i+1] + num_str[i] + num_str[i+1] + num_str[:i]\n            break\n\n    # convert the resulting string to an integer\n    new_num = int(num_str)\n\n    # return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Reverse the digits of the number\n    n = int(str(n)[::-1])\n\n    # Check if the reversed number is less than 10\n    if n < 10:\n        return n + 1\n\n    # Initialize variables for the digits of the reversed number\n    digits = list(str(n))\n\n    # Find the position of the largest digit\n    max_pos = digits.index(max(digits))\n\n    # Reverse the digits of the number\n    digits = digits[::-1]\n\n    # Reverse the digits of the number after the position of the largest digit\n    digits[:max_pos] = digits[:max_pos][::-1]\n\n    # Convert the digits of the number back to an integer\n    n = int(''.join(digits))\n\n    # Check if the reversed number is less than 10\n    if n < 10:\n        return n + 1\n\n    # If the reversed number is greater than 10, return the next bigger number by rearranging the digits\n    return rearrange_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string and split it into its digits\n    digits = list(str(n))\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Join the sorted digits back into a string\n    next_bigger = ''.join(digits)\n    # Convert the string to an integer and return it\n    return int(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    next_bigger = 0\n    for digit in digits:\n        next_bigger = next_bigger * 10 + (digit + 1)\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if int(digits[i]) + int(digits[j]) > int(digits[j]) + int(digits[i]):\n                digits[i], digits[j] = digits[j], digits[i]\n                break\n    result = int(''.join(str(x) for x in digits))\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    result = 0\n    for d in digits:\n        result = (result * 10) + d\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # sort the string in descending order\n    sorted_str = ''.join(sorted(num_str, reverse=True))\n    # convert the sorted string back to an integer\n    next_bigger = int(sorted_str)\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Create a heap of size k and fill it with smallest elements from nums1 and nums2\n    heap = [(-nums1[0], 0)] * k\n    heapq.heapify(heap)\n\n    # Initialize variables for storing pairs and their indices\n    pairs = []\n    for i in range(1, len(nums1)):\n        for j in range(len(nums2)):\n            # Add a pair to the heap if the sum of its elements is greater than or equal to the smallest element in the heap\n            if -nums1[i] + nums2[j] >= -heap[0][0]:\n                heapq.heappush(heap, (-nums1[i] + nums2[j], j))\n                if len(pairs) < k:\n                    pairs.append((nums1[0], nums2[j]))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort the first array\n    nums1.sort()\n    # initialize the minimum heap\n    min_heap = []\n    # initialize the result list\n    result = []\n    # initialize the counter for the number of pairs found\n    count = 0\n    # loop through the second array\n    for num in nums2:\n        # if the heap is not empty and the current element is greater than the minimum element in the heap, pop the heap and add the current element to the result list\n        while len(min_heap) > 0 and min_heap[0] > num:\n            heapq.heappop(min_heap)\n        # if the heap is not empty and the length of the result list is less than k, add the current element to the heap\n        if len(result) < k and len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        # if the length of the result list is equal to k and the length of the heap is equal to k, add the current element to the result list and increment the counter\n        elif len(result) == k and len(min_heap) == k:\n            result.append((min_heap[0], num))\n            count += 1\n    # return the result list and the count of pairs found\n    return result, count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the indices of the smallest elements\n    min_heap = []\n\n    # Create a dictionary to store the indices of the elements in the first array\n    index_dict = {}\n\n    # Iterate through the elements of the first array\n    for i in range(len(nums1)):\n        # Check if the current element is already in the dictionary\n        if nums1[i] not in index_dict:\n            # Add the current index to the dictionary and update the min heap\n            index_dict[nums1[i]] = i\n            heapq.heappush(min_heap, i)\n            # If the length of the min heap is greater than k, remove the element at the end of the min heap and update the dictionary\n            while len(min_heap) > k:\n                index_dict.pop(nums1[heapq.heappop(min_heap)])\n\n    # Create an empty list to store the pairs of smallest elements\n    result = []\n\n    # Iterate through the elements of the second array\n    for j in range(len(nums2)):\n        # Check if there are at least k elements in the min heap\n        if len(min_heap) >= k:\n            # Check if the elements from the second array and the min heap elements are present in the dictionary\n            if nums2[j] in index_dict and nums2[j] < min_heap[0]:\n                # Calculate the index of the current smallest pair and add it to the result list\n                pair_index = index_dict[nums2[j]] + j + 1\n                heapq.heappush(result, pair_index)\n                # Remove the elements from the dictionary and update the min heap\n                index_dict.pop(nums2[j])\n                heapq.heappop(min_heap)\n        else:\n            # Check if the elements from the second array are present in the dictionary\n            if nums2[j] in index_dict:\n                # Calculate the index of the current smallest pair and add it to the result list\n                pair_index = index_dict[nums2[j]] + j + 1\n                heapq.heappush(result, pair_index)\n                # Remove the element from the dictionary and update the min heap\n                index_dict.pop(nums2[j])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap to store the pairs\n    min_heap = []\n    \n    # Loop through the first array\n    for num1 in nums1:\n        # Loop through the second array\n        for num2 in nums2:\n            # Create a new pair with the current element from the first array and the current element from the second array\n            pair = (num1, num2)\n            # Add the pair to the heap if its length is less than k or if the heap is empty or if the current pair is smaller than the smallest element in the heap\n            if len(min_heap) < k or (len(min_heap) == k and pair < min_heap[0]) or (len(min_heap) > k and pair[0] < min_heap[0][0]):\n                heapq.heappush(min_heap, pair)\n    \n    # Return the k smallest elements from the heap\n    return [pair[0] for pair in heapq.nsmallest(k, min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a list of pairs\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            # append the pair to the list\n            pairs.append((num1, num2))\n    \n    # sort the list of pairs in ascending order\n    pairs.sort()\n    \n    # return the first k pairs\n    return pairs[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # initialize heaps for first and second arrays\n    heap1 = []\n    heap2 = []\n    \n    # initialize output list\n    output = []\n    \n    # push elements into heaps\n    for num in nums1:\n        heapq.heappush(heap1, -num)\n        \n    for num in nums2:\n        heapq.heappush(heap2, -num)\n    \n    # iterate through second array and add smallest k pairs\n    while len(output) < k and heap2:\n        # pop smallest element from first heap\n        num1 = -heapq.heappop(heap1)\n        \n        # add to output list\n        output.append((num1, -heap2[0]))\n        \n        # push remaining elements from second array onto first heap\n        for i in range(len(heap2)):\n            heapq.heappush(heap1, -heap2[i])\n            \n    return output"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1, heap2 = [], []\n\n    for num in nums1 + nums2:\n        if len(heap1) < k:\n            heapq.heappush(heap1, -num)\n        elif len(heap1) == k:\n            if num > -heapq.heappop(heap1):\n                heapq.heappush(heap1, -num)\n\n        if len(heap2) < k:\n            heapq.heappush(heap2, -heapq.heappop(heap1) + num)\n        elif len(heap2) == k:\n            if num + -heapq.heappop(heap2) < -heapq.heappop(heap1):\n                heapq.heappush(heap2, -heapq.heappop(heap1) + num)\n\n    return [-heapq.heappop(heap1) for _ in range(k)] + [-heapq.heappop(heap2) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap of size k\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i] + nums2[j], (i, j))\n            heapq.heappush(heap, pair)\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    # Extract the smallest k pairs from the heap and return them\n    result = []\n    while heap:\n        pair = heapq.heappop(heap)\n        result.append(pair[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1+num2, (num1, num2)))\n            elif num1+num2 < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (num1+num2, (num1, num2)))\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # First, create a dictionary to store the index of the smallest element in each list\n    dict1 = {num: i for i, num in enumerate(nums1)}\n    dict2 = {num: i for i, num in enumerate(nums2)}\n\n    # Next, create a list of tuples (diff, index1, index2), where diff is the difference between the smallest element in each list\n    pairs = []\n    for num1, index1 in dict1.items():\n        for num2, index2 in dict2.items():\n            diff = abs(num1 - num2)\n            pairs.append((diff, index1, index2))\n\n    # Finally, sort the list of tuples by the difference in ascending order and return the k smallest pairs\n    pairs.sort()\n    return pairs[:k]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort() # Sort the list of tuples\n    min_product = list1[0][0] * list1[0][1] # Find the minimum product of the first pair of tuples\n    for i in range(1, len(list1)): # Iterate through the rest of the list of tuples\n        product = list1[i][0] * list1[i][1] # Calculate the product of the current pair of tuples\n        if product < min_product: # If the product is less than the minimum product, update the minimum product\n            min_product = product\n    return min_product # Return the minimum product of the entire list of tuples"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_value = float('inf')\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                product = list1[i][0] * list1[j][1]\n                if product < min_product:\n                    min_product = product\n                    min_value = list1[i][0] * list1[j][1]\n    return min_product, min_value"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Define a function to multiply two numbers\n    def multiply(num1, num2):\n        return num1 * num2\n    \n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    \n    # Iterate through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = multiply(list1[i][0], list1[j][1])\n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n    \n    product = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        for j in range(i+1, len(list1[0])):\n            product = min(product, list1[i][j] * list1[i][j-1])\n    \n    return product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize a dictionary to store the products of tuples\n    products = {}\n    \n    # Loop over all tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and add it to the dictionary\n            products[(i, j)] = list1[i][0] * list1[j][1]\n    \n    # Initialize the minimum product variable\n    min_product = float('inf')\n    \n    # Loop over all pairs of tuples in the dictionary and update the minimum product if necessary\n    for pair in products:\n        if products[pair] < min_product:\n            min_product = products[pair]\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize a variable to keep track of the minimum product\n    min_product = float('inf')\n    # Iterate through the list of tuples\n    for tup1 in list1:\n        # Iterate through the list of tuples\n        for tup2 in list1:\n            # Check if the current tuple is not equal to the previous tuple\n            if tup1!= tup2:\n                # Calculate the product of the two tuples and check if it is less than the minimum product\n                product = tup1[0] * tup2[1]\n                if product < min_product:\n                    # Update the minimum product if the current product is less than the previous minimum product\n                    min_product = product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    minimum_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < minimum_product:\n                minimum_product = product\n\n    return minimum_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    This function finds the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # loop through the rest of the list and compare each value to the minimum value\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a heterogeneous list of values and returns the minimum value in the list.\n    \"\"\"\n    min_val = listval[0] # initialize minimum value to the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] < min_val: # if current element is smaller than minimum value, update the minimum value\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize min value as first element of list\n    min_val = listval[0]\n    # Loop through the list and compare each element with min value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return \"The list is empty.\"\n    else:\n        minval = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < minval:\n                minval = listval[i]\n        return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], str):\n        return min(listval, key=len)\n    elif isinstance(listval[0], int):\n        return min(listval)\n    elif isinstance(listval[0], float):\n        return min(listval)\n    else:\n        print(\"The list contains an object of an unrecognised type\")\n        return None"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first value in the list\n    min_val = listval[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # Check if the current value is smaller than the current minimum value\n        if listval[i] < min_val:\n            # If so, update the minimum value to be the current value\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # check if the input is a list\n    if not isinstance(listval, list):\n        raise TypeError(\"Input should be a list\")\n    \n    # check if the list is empty\n    if len(listval) == 0:\n        raise ValueError(\"List should not be empty\")\n    \n    # initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # loop through the rest of the list and find the minimum value\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n            \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n\n    # Loop through the rest of the elements in the list\n    for i in range(1, len(listval)):\n        # Check if the current element is smaller than the current minimum value\n        if listval[i] < min_val:\n            # If it is, update the minimum value to be the current element\n            min_val = listval[i]\n\n    # Return the minimum value found in the list\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # remove any leading or trailing underscores or dashes\n    word = re.sub('^_|_$|^-|-$', '', word)\n    # split the word into parts using underscores or dashes\n    parts = word.split('_')\n    # capitalize the first letter of each part\n    parts = [part.capitalize() for part in parts]\n    # join the parts using camel case\n    result = ''.join(parts)\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into words based on underscores\n    words = word.split('_')\n    # capitalize the first letter of each word\n    words[0] = words[0].capitalize()\n    # join the words back into a string with a capitalized first letter\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back together with underscores\n    camel_case = '_'.join(words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # replace snake case with camel case\n    camel_case_word = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    # convert to camel case\n    camel_case_word = re.sub(r'(_([a-z0-9]))', lambda m: m.group(1).upper(), camel_case_word)\n    return camel_case_word.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    word_list = re.findall(r'(\\w+)', word)\n    # Convert the first word to lowercase and append to the list of words\n    word_list[0] = word_list[0].lower()\n    # Join the list of words into a camel case string\n    camel_case_word = ''.join(word_list)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return word[:1].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = \"\"\n    for char in word:\n        if char.isupper():\n            if len(result) > 0:\n                result += \"_\"\n            result += char.lower()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    return ''.join(map(str.capitalize, re.findall(r'_(.?=[A-Z])', word)))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Split the string into words using the snake case pattern\n    words = re.findall(r'_(.?)(?=[A-Z])', word)\n\n    # Convert the first character of each word to upper case\n    for i in range(len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n\n    # Combine the words using camel case pattern\n    camel_case_word = ''.join(words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(?<!^)(?=[A-Z])'\n    return ''.join(part.capitalize() for part in re.findall(pattern, word))"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # Remove odd numbers from the list\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.pop(i)\n    return l"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    elif n <= 0:\n        return None\n    else:\n        for i in range(len(list1)):\n            if i == n-1:\n                return list1[i]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty or has only one element\n    if len(list1) < 2:\n        return None\n    \n    # If the n is greater than the length of the list, return None\n    if n > len(list1):\n        return None\n    \n    # Use a loop to extract the nth element from the list\n    for i in range(len(list1)):\n        if i == n - 1:\n            return list1[i]\n    \n    # If the loop completes without finding the nth element, return None\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input, and returns the nth element from the list.\n    '''\n    # Convert the list to a list of lists, where each sublist contains one tuple from the original list\n    list2 = [[tuple(x) for x in i] for i in list1]\n    # Extract the nth element from each sublist, and concatenate the results into a single list\n    result = [i[n-1] for i in list2]\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n as inputs, and returns the nth element of the list.\n\n    Args:\n    list1 (list): list of tuples\n    n (int): the nth element to be extracted from the list\n\n    Returns:\n    The nth element of the list as a tuple.\n    \"\"\"\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input is a list of tuples\n    if not all(isinstance(item, tuple) for item in list1):\n        raise TypeError('Input is not a list of tuples')\n    # Check if the input list is empty\n    if not list1:\n        raise ValueError('Input list is empty')\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('n should be a positive integer')\n    # Extract the nth element from the list\n    try:\n        return list1[n-1][0]\n    except IndexError:\n        raise IndexError('Index out of range')"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function extracts the nth element from a list of tuples.\n\n    Parameters:\n        lst (list of tuples): The list of tuples from which we want to extract the nth element.\n        n (int): The index of the element we want to extract.\n\n    Returns:\n        The nth element from the list of tuples.\n    \"\"\"\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list) and isinstance(n, int):\n        try:\n            return list1[n-1]\n        except IndexError:\n            print(\"Index out of range\")\n    else:\n        print(\"Invalid input parameters\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if n < 1 or n > len(list1):\n            raise ValueError('Index out of range.')\n        else:\n            return list1[n-1]\n    except IndexError:\n        print(\"Index out of range.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Check if any value in list1 exists in list2\n    for item in list1:\n        if item in list2:\n            return True\n    # If no value in list1 exists in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a set of values in list2 to check against in list1\n    set2 = set(list2)\n    # Loop through the values in list1 and check if any of them are present in set2\n    for item in list1:\n        if item in set2:\n            return True\n    # If no values in list1 match any values in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two list as input and returns True if there is any overlapping values in both the lists or False otherwise.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input, list1 and list2. It returns True if any value in list1 is present in list2, False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns a boolean value indicating whether any value in \n    the first sequence exists in the second sequence or not.\n\n    Args:\n    - list1 (list): A sequence of values.\n    - list2 (list): A sequence of values.\n\n    Returns:\n    - bool: True if there is at least one value in list1 that exists in list2, else False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max_pair = (float('-inf'), float('-inf'))\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_pair[0]:\n                max_pair = (arr[i] * arr[j], arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize variables for the maximum product and its indices\n    max_product = arr[0] * arr[1]\n    max_index = 0\n\n    # Loop through the array and check for the maximum product\n    for i in range(2, len(arr)):\n        if arr[i] * arr[i-1] > max_product:\n            max_product = arr[i] * arr[i-1]\n            max_index = i\n\n    # Return the indices of the maximum product pair\n    return max_index, max_index-1"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    # Initialize max product and minimum product to first two elements in array\n    max_product = max(arr[0], arr[1])\n    min_product = min(arr[0], arr[1])\n    \n    # Loop through remaining elements of array\n    for i in range(2, len(arr)):\n        # Update max_product and min_product if current element is greater than current max_product\n        if arr[i] > max_product:\n            max_product = arr[i]\n        # Update max_product and min_product if current element is less than current min_product\n        elif arr[i] < min_product:\n            min_product = arr[i]\n    \n    # Return pair with highest product\n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    # initialize two pointers, one for start and one for end of the array\n    start = 0\n    end = len(arr) - 1\n    # initialize the maximum product pair\n    max_product = sorted_arr[0] * sorted_arr[1]\n    # iterate over the array and find the maximum product pair\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # check if the current product pair is greater than the current maximum product\n            if sorted_arr[i] * sorted_arr[j] > max_product:\n                max_product = sorted_arr[i] * sorted_arr[j]\n                # swap the two elements if necessary\n                if sorted_arr[i] * sorted_arr[j] < max_product:\n                    temp = sorted_arr[i]\n                    sorted_arr[i] = sorted_arr[j]\n                    sorted_arr[j] = temp\n    return sorted_arr[0], sorted_arr[1]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1:\n            max2 = num\n    return max(max1 * max2, max2 * max1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    max_product_pair = (0, 0)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i], arr[j])\n    \n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find a pair with the highest product from a given array of integers.\n    \"\"\"\n    max1 = float('-inf')  # initialize max1 to negative infinity\n    max2 = float('-inf')  # initialize max2 to negative infinity\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1  # update max2 with current max1\n            max1 = num  # update max1 with current num\n        elif num > max2:\n            max2 = num  # update max2 with current num\n            \n    return max(max1, max2) * -1  # return the negative product of max1 and max2"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples where each tuple contains the first common element of the tuples in the input list.\n    \"\"\"\n    # create an empty dictionary to store the common elements\n    common_dict = {}\n    \n    # loop through the input list of tuples\n    for item in Input:\n        # get the first element of the tuple\n        first_element = item[0]\n        # check if the first element is already in the common_dict\n        if first_element in common_dict:\n            # if it is, update the count of the first element in the dictionary\n            common_dict[first_element] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            common_dict[first_element] = 1\n    \n    # create an empty list to store the output\n    output = []\n    \n    # loop through the common_dict and append tuples where the count is 1\n    for key, value in common_dict.items():\n        if value == 1:\n            output.append(key)\n    \n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_list = []\n    for i in Input:\n        if len(common_list) == 0:\n            common_list.append(i[0])\n        elif i[0] == common_list[-1]:\n            common_list.append(i[0])\n        elif i[0]!= common_list[-1]:\n            common_list = []\n            common_list.append(i[0])\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples and returns a list of tuples where each tuple contains the common first element of the input tuple.\n    \"\"\"\n    common_elements = []\n    for tup in Input:\n        if tup[0] in common_elements:\n            continue\n        else:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n                break\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_tuple = None\n\n    for tuple in Input: \n        if common_tuple is None: \n            common_tuple = tuple\n        elif common_tuple[0] == tuple[0]: \n            common_tuple = tuple\n\n    return common_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    \n    for i in range(len(Input)):\n        if i == 0:\n            common_elements.add(Input[i][0])\n        elif Input[i][0] == common_elements.pop():\n            common_elements.add(Input[i][0])\n        elif Input[i][0]!= common_elements.pop():\n            common_elements.add(Input[i][0])\n    \n    return list(common_elements)\n\n\nInput = [(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10)]\nprint(group_tuples(Input))"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        first_element = Input[i][0]\n        for j in range(len(Input)):\n            if i!= j and Input[j][0] == first_element:\n                common_elements.append(Input[i])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    \n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            pass\n        else:\n            return common_element\n    \n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for tup in Input:\n        common_elements.add(tup[0])\n    return sorted(list(common_elements))"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    \n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif common_element!= tup[0]:\n            return \"No common elements found in the list\"\n    \n    return common_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list \n    having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n\n    for i in lst:\n        length = len(str(i))\n        if length > max_length:\n            max_length = length\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_elem = i \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    \n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    \n    for ele in lst:\n        if len(str(ele)) > max_len:\n            max_len = len(str(ele))\n            max_ele = ele\n    \n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list with maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_elem = lst[i]\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(x) for x in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        rounded = round(num)\n        total += rounded\n    total *= len(lst)\n    return total"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # iterate through each number in the list\n    total_sum = 0\n    for num in list1:\n        # round the number to two decimal places\n        rounded_num = round(num, 2)\n        # add the rounded number to the total sum\n        total_sum += rounded_num\n        # print the rounded and summed number\n        print(rounded_num, end=' ')\n\n    # print the total sum multiplied by the length of the list\n    print('\\nTotal sum:', total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        rounded_num = round(list1[i])\n        total_sum += rounded_num\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_numbers = 0\n    for num in list1:\n        sum_of_numbers += round(num)\n    total_sum = sum_of_numbers * len(list1)\n    print(total_sum)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of cubes\n    sum_cubes = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(n):\n        # Check if the number is even\n        if i % 2 == 0:\n            # Calculate the cube of the even number and add it to the sum of cubes\n            sum_cubes += i ** 3\n            \n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initializing the sum to 0\n    cube_sum = 0\n    \n    # Iterating through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Adding the cube of each even natural number to the sum\n        cube_sum += i**3\n        \n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initialize a variable to store the cube sum\n    cube_sum = 0\n    \n    # iterate n times\n    for i in range(n):\n        # add the cube of the i-th even natural number to the cube_sum\n        cube_sum += i**3\n    \n    # return the cube_sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i*i*i\n    \n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    Concatenate each element of a tuple by the given delimiter.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_string = delimiter.join(str(i) for i in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(i) + test_tup[0] for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" - \"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple and a delimiter as inputs,\n    and returns a concatenated string of the elements of the tuple.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initializing variables\n    sum = 0\n    count = 0\n\n    # Calculating the sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n\n    # Finding the average of cubes\n    average = sum / count\n\n    # Returning the result\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(n):\n        sum += i**3\n        count += 1\n    average = sum / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n\n    average = sum_of_cubes / count\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize variables\n    sum_of_cubes = 0\n    count = 0\n\n    # iterate through the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    # calculate the average of cubes and return it\n    return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i**3  \n    average_of_cubes = sum_of_cubes / n  \n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # loop for n natural numbers\n    for i in range(1, n+1):\n        \n        # calculate cube of i\n        cube = i ** 3\n        \n        # add the cube to the sum\n        sum += cube\n        \n        # increment the count\n        count += 1\n    \n    # calculate the average\n    average = sum / count\n    \n    # print the average\n    print(\"The average of cubes of first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    return sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    average_of_cubes = sum_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [s[-1] for s in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = [len(x) - 1 for x in test_tuple]\n    return [test_tuple[i][rear_indices[i]] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == str:\n            rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for element in test_tuple:\n        rear_list.append(element[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # initializing an empty list to store the rear elements\n    rear_elements = []\n    # iterating over each element of the tuple\n    for element in test_tuple:\n        # extracting only the rear index element of the string\n        rear_element = element[-1]\n        # appending the rear element to the list of rear elements\n        rear_elements.append(rear_element)\n    # returning the list of rear elements\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        if len(string) > 1:\n            rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [string[-1] for string in test_tuple]"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in list1:\n        if type(i) == list:\n            count += count_element_in_list(i, x)\n        elif i == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    \n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    \n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    # create an empty list to store the odd numbers\n    odd_nums = []\n\n    # loop through each number in the input list\n    for num in nums:\n        # check if the number is odd by using the modulus operator\n        if num % 2!= 0:\n            # if the number is odd, add it to the odd_nums list\n            odd_nums.append(num)\n\n    # return the list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})'\n    match = re.match(regex, dt)\n    if match:\n        year = int(match.group('year'))\n        month = int(match.group('month'))\n        day = int(match.group('day'))\n        return f\"{day:02d}-{month:02d}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # check if the input date matches the pattern\n    if re.match(pattern, dt):\n        # extract the year, month, and day from the input date\n        year, month, day = map(int, dt.split('-'))\n\n        # convert the day, month, and year to yyyy-mm-dd format\n        new_date = f'{year:04d}-{month:02d}-{day:02d}'\n\n        # return the new date in the yyyy-mm-dd format\n        return new_date\n    else:\n        # raise an exception if the input date does not match the pattern\n        raise ValueError('Invalid date format. Please use yyyy-mm-dd format.')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define regular expression pattern to match date in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Search for pattern in the date string\n    match = re.search(pattern, dt)\n    # If match is found, split the date string into date and year parts\n    if match:\n        date_part = match.group()\n        year_part = date_part[:4]\n        month_part = date_part[5:7]\n        day_part = date_part[8:]\n        # Convert year to 4-digit format and format the final date string\n        final_date = f'{day_part}-{month_part}-{year_part}'\n        return final_date\n    # If match is not found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace the year with a digit so that it can be matched by the regular expression\n    dt = re.sub(r'\\d{4}', r'\\d', dt)\n    # Replace the hyphen with a space to separate the month and day\n    dt = re.sub(r'[-]', r' ', dt)\n    # Reorder the month and day to match the desired format\n    dt = re.sub(r'\\s(\\w{3})\\s', r'\\1 ', dt)\n    # Remove any extra whitespace at the beginning or end of the string\n    dt = re.sub(r'\\s+', r' ', dt).strip()\n    # Return the formatted date in dd-mm-yyyy format\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace the '-' with '/' in the date string\n    dt = dt.replace('-', '/')\n    \n    # Split the date string into month, day, and year components\n    m, d, y = map(int, dt.split('/'))\n    \n    # Reformat the date string as dd-mm-yyyy\n    new_dt = '{:02d}-{:02d}-{}'.format(d, m, y)\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Remove any non-digit characters from the date string\n    dt = re.sub(r'\\D', '', dt)\n    # Split the date string into year, month, and day components\n    date_components = dt.split('-')\n    # Convert the year component to a string and convert to int\n    year = str(int(date_components[0]))\n    # Convert the month and day components to strings and concatenate them\n    new_date_format = date_components[2] + '-' + date_components[1] + '-' + year\n    # Return the new date string in dd-mm-yyyy format\n    return new_date_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the input date\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.match() method to match the pattern with the input string\n    match = re.match(pattern, dt)\n\n    # If the match is not None, then extract the groups\n    if match:\n        year, month, day = match.groups()\n        # Use string formatting to convert the groups to dd-mm-yyyy format\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        # If no match is found, return the input date\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use the re.search() function to search for a match in the input string\n    match = re.search(pattern, dt)\n    # if a match is found, convert the date to the new format and return it\n    if match:\n        year, month, day = int(match.group(1)), int(match.group(2)), int(match.group(3))\n        new_format = '{:02d}-{:02d}-{:04d}'.format(day, month, year)\n        return new_format\n    # otherwise, return an error message\n    else:\n        return 'Error: Invalid date format.'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    mm_dd_yyyy_regex = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    \n    yyyy_mm_dd_match = re.match(yyyy_mm_dd_regex, dt)\n    mm_dd_yyyy_match = re.match(mm_dd_yyyy_regex, dt)\n    \n    if yyyy_mm_dd_match:\n        return f'{yyyy_mm_dd_match.group(3)}-{yyyy_mm_dd_match.group(2)}-{yyyy_mm_dd_match.group(1)}'\n    elif mm_dd_yyyy_match:\n        return f'{mm_dd_yyyy_match.group(3)}-{mm_dd_yyyy_match.group(2)}-{mm_dd_yyyy_match.group(1)}'\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Divide the list into n sub-lists, each containing 1 element\n    for gap in range(n//2):\n        # Sort sub-list by applying the same gap size to all elements\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step length\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    \n    while h >= 1:\n        # Insertion sort for h-digit numbers\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > key:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    \n    # Set the gap for the shell sort\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        # Iterate over the array and sort it by using the gap size\n        for i in range(gap, len(my_list)):\n            # Initialize variables to keep track of the elements being compared\n            temp = my_list[i]\n            j = i\n            \n            # Iterate over the previous elements in the array\n            while j >= gap and my_list[j-gap] > temp:\n                # Shift the elements to the right\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            # Finally, insert the temp element into its correct position\n            my_list[j] = temp\n        \n        # Reduce the gap by half\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given list using the Shell Sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        # Shift all elements of the array, gap elements at a time\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Move elements of the array that are more than gap positions apart,\n            # to one position ahead of their current position\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            # Move the gap-sorted element to its correct position\n            my_list[j] = temp\n        # Decrease the gap size\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap\n    n = len(my_list)\n    largest_gap = n // 2\n\n    while largest_gap >= 1:\n        # Insertion sort for this gap size\n        for i in range(largest_gap, n):\n            key = my_list[i]\n            j = i\n            while j >= largest_gap and my_list[j - largest_gap] > key:\n                my_list[j] = my_list[j - largest_gap]\n                j -= largest_gap\n            my_list[j] = key\n\n        # Decrease the gap size\n        largest_gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    \n    # Perform n-1 insertion sort iterations\n    for gap in range(n//2):\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tups = []\n    for i in range(len(test_tup1)):\n        and_tups.append((test_tup1[i] & test_tup2[i], test_tup1[i], test_tup2[i]))\n    return and_tups"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Initialize the new tuple to store the elementwise and tuples\n    new_tup = ()\n\n    # Loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the element from both tuples and perform elementwise and\n        and_element = test_tup1[i] & test_tup2[i]\n        # Append the elementwise and tuple to the new tuple\n        new_tup += (and_element,)\n\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # extract the elementwise and tuples from the given two tuples\n    and_tup = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Extract the elements from the two tuples\n    tup1_elements = test_tup1[0]\n    tup2_elements = test_tup2[0]\n\n    # Check if the two tuples have equal number of elements\n    if len(tup1_elements)!= len(tup2_elements):\n        return False\n\n    # Extract the and tuples\n    and_tup1 = []\n    and_tup2 = []\n    for i in range(len(tup1_elements)):\n        and_tup1.append(tup1_elements[i] & tup2_elements[i])\n        and_tup2.append(tup1_elements[i] & tup2_elements[i])\n\n    return (and_tup1, and_tup2)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_list = []\n    for i in range(len(test_tup1)):\n        and_list.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns their elementwise and tuple.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the coefficients of the quadratic equation\n    quadratic_coefficients = [b**2 - 4*a*c, 2*b - 4*a]\n\n    # Check if the quadratic equation has a real root\n    if quadratic_coefficients[0]**2 - 4*quadratic_coefficients[1] < 0:\n        print(\"The quadratic equation has no real roots.\")\n        return\n    \n    # Find the two real roots of the quadratic equation\n    real_roots = [(-quadratic_coefficients[0] + math.sqrt(quadratic_coefficients[0]**2 - 4*quadratic_coefficients[1]))/(2*a),\n                  (-quadratic_coefficients[0] - math.sqrt(quadratic_coefficients[0]**2 - 4*quadratic_coefficients[1]))/(2*a)]\n\n    # Sort the real roots in ascending order\n    real_roots.sort()\n\n    # Calculate the directrix\n    directrix = (real_roots[1] + real_roots[0]) / 2\n\n    print(\"The directrix of the parabola is:\", directrix)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n\n    if delta >= 0:\n        x0 = (-b + delta**0.5)/(2*a)\n        x1 = (-b - delta**0.5)/(2*a)\n        print(\"The directrix is:\", x0)\n        print(\"The directrix is:\", x1)\n    else:\n        print(\"There is no real root.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = -b/(2*a)\n    x2 = -c/(2*a)\n    return (x1+x2)/(x1-x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"The directrix does not exist.\")\n    elif delta == 0:\n        x = -b/(2*a)\n        print(\"The directrix is\", x)\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        print(\"The directrix is\", x1, \"or\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b**2 - 4*a*c\n    if D > 0:\n        return (-b + sqrt(D)) / (2*a)\n    elif D < 0:\n        return (-b - sqrt(D)) / (2*a)\n    else:\n        return \"The equation of the parabola has no real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is\", x1)\n        print(\"The directrix of the parabola is\", x2)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"The directrix of the parabola is\", x)\n    else:\n        print(\"The parabola does not have a unique directrix.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n    \n    if delta > 0:\n        directrix = (-b + delta**(1/2))/(2*a)\n    elif delta == 0:\n        directrix = -b/(2*a)\n    else:\n        print(\"No real root exists\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return \"The quadratic equation has no real roots.\"\n    \n    elif discriminant == 0:\n        x = -b/2/a\n        return f\"The directrix is {x}.\"\n    \n    else:\n        x1 = (-b - discriminant**0.5)/(2*a)\n        x2 = (-b + discriminant**0.5)/(2*a)\n        return f\"The directrix is between {x1} and {x2}.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is between\", root1, \"and\", root2)\n    else:\n        print(\"The directrix of the parabola is not real\")"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Using a set to remove duplicate values from list1 and list2\n    set1 = set(list1)\n    set2 = set(list2)\n    # Finding the intersection of the sets\n    common = set1.intersection(set2)\n    # Returning true if common is not an empty set\n    return bool(common)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n\n    for element in list2:\n        if element in list1:\n            return True\n\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s = (base1 + base2) / 2\n    area = height * (base1 + base2)\n    median = 0.5 * s\n\n    if area < median**2:\n        return s\n    else:\n        return base1"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the lengths of each half of the trapezium\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n    half_height = height / 2\n\n    # Calculate the areas of each half of the trapezium\n    area_half1 = half_base1 * half_height\n    area_half2 = half_base2 * half_height\n\n    # Calculate the areas of the trapezium\n    area_total = area_half1 + area_half2\n\n    # Calculate the length of the base of the trapezium\n    base_total = base1 + base2\n\n    # Calculate the length of the base of the trapezium\n    height_total = height\n\n    # Calculate the median length of the trapezium\n    median_length = (area_total + base_total + height_total) / 3\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the base of the trapezium\n    base = (base1 + base2) / 2\n\n    # Calculate the length of the half of the trapezium\n    half_height = height / 2\n\n    # Calculate the length of the shorter side of the trapezium\n    shorter_side = base * half_height\n\n    # Calculate the length of the longer side of the trapezium\n    longer_side = base * (1 - half_height)\n\n    # Determine which side of the trapezium is longer\n    if shorter_side > longer_side:\n        # Calculate the median length of the shorter side\n        median = shorter_side\n\n    else:\n        # Calculate the median length of the longer side\n        median = longer_side\n\n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    \n    Args:\n    base1 (float): The length of the base of the first trapezium.\n    base2 (float): The length of the base of the second trapezium.\n    height (float): The height of the trapezium.\n    \n    Returns:\n    float: The median length of the trapezium.\n    '''\n    \n    # calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # calculate the length of the longer side of the trapezium\n    longer_side = area ** 0.5\n    \n    # calculate the length of the shorter side of the trapezium\n    shorter_side = (base1 + base2 + longer_side) / 2\n    \n    # check which side is longer and return the median length\n    if longer_side > shorter_side:\n        return longer_side\n    else:\n        return shorter_side"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    area1 = base1 * height\n    area2 = base2 * height\n    area_sum = area1 + area2\n    area_difference = (area1 - area2) ** 2\n    total_area = area1 + area2\n    median_length = 0\n    if total_area == 0:\n        return median_length\n    if total_area == area_sum:\n        median_length = (area1 + area2) / 2\n    else:\n        left_sum = 0\n        right_sum = 0\n        for i in range(half_height):\n            left_sum += i * area1\n            right_sum += (total_area - i * area1)\n        if total_area % 2 == 0:\n            median_length = (left_sum + right_sum) / 2\n        else:\n            median_length = (left_sum + right_sum) / 2 + (area_difference / total_area)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2)\n    \n    # Calculate the length of the shorter base\n    short_base = min(base1, base2)\n    \n    # Calculate the length of the longer base\n    long_base = max(base1, base2)\n    \n    # Calculate the number of trapezoids that can fit in the area\n    trapezoids = area / short_base\n    \n    # Calculate the width of the trapezoids\n    width = (long_base + short_base) / 2 / trapezoids\n    \n    # Calculate the length of the shorter trapezoid\n    short_length = short_base * height\n    \n    # Calculate the length of the longer trapezoid\n    long_length = (long_base + width) * height\n    \n    # Calculate the number of smaller trapezoids in each trapezoid\n    smaller = int(trapezoids)\n    \n    # Calculate the number of larger trapezoids in each trapezoid\n    larger = int(trapezoids) - smaller\n    \n    # Calculate the median length of the trapezium\n    median = 0.5 * (short_length + larger * width)\n    \n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the first half of the trapezium\n    half_length1 = (base1 + base2) / 2\n\n    # Calculate the length of the second half of the trapezium\n    half_length2 = (2 * base1 + base2) / 2\n\n    # Calculate the total length of the trapezium\n    total_length = half_length1 + height + half_length2\n\n    # Calculate the length of the third half of the trapezium\n    third_length = (height / 2) + ((total_length - (2 * height)) / 2)\n\n    # Find the median length of the trapezium\n    median_length = third_length\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the width of the trapezium\n    width = math.sqrt(area - base1 * base2)\n    # Calculate the length of the trapezium using the trapezoidal rule\n    length = 0.5 * width * (1 + math.sqrt(1 + 4 * base1 / width))\n    # Find the median length of the trapezium\n    median = 0.5 * (length + height)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    area_trapezium = 0.5 * base1 * height + 0.5 * base2 * height\n    area_half_trapezium = 0.5 * area_trapezium\n    median_length = 0.5 * (area_half_trapezium / area_trapezium)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the length of the trapezium by adding the bases and dividing by 2\n    length = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium using Heron's formula\n    area = (base1 * height) + (base2 * height)\n    \n    # Calculate the perimeter of the trapezium using Heron's formula\n    perimeter = 2 * (base1 + base2)\n    \n    # Calculate the area of the parallelogram formed by the base1 and base2\n    base1_area = base1 * height\n    \n    # Calculate the area of the parallelogram formed by the base2 and base1\n    base2_area = base2 * height\n    \n    # Calculate the ratio of the areas of the parallelograms\n    ratio = (base1_area + base2_area) / area\n    \n    # Calculate the semi-perimeter of the trapezium using Heron's formula\n    semi_perimeter = (length * (1 + ratio)) / 2\n    \n    # Calculate the area of the trapezium using Heron's formula\n    area_trapezium = ((perimeter + semi_perimeter) / 2) ** 2\n    \n    # Calculate the area of the parallelogram formed by the semi-perimeter and length\n    semi_perimeter_area = semi_perimeter * length\n    \n    # Calculate the ratio of the areas of the parallelograms\n    ratio_area = semi_perimeter_area / area\n    \n    # Calculate the area of the second parallelogram formed by the semi-perimeter and length\n    second_area = area_trapezium - ((semi_perimeter_area + (area - semi_perimeter_area) * ratio_area) / 2) ** 2\n    \n    # Calculate the area of the first parallelogram formed by the base1 and base2\n    first_area = base1_area + base2_area - second_area\n    \n    # Calculate the length of the first base\n    first_base = first_area / height\n    \n    # Calculate the length of the second base\n    second_base = second_area / height\n    \n    # Calculate the length of the third base\n    third_base = area_trapezium / height\n    \n    # Calculate the length of the trapezium using the formula for the area of a trapezium\n    trapezium_length = (first_area + second_area + third_area) / 2\n    \n    # Calculate the area of the trapezium using the formula for the area of a trapezium\n    trapezium_area = trapezium_length ** 2\n    \n    # Calculate the semi-perimeter of the trapezium using the formula for the area of a trapezium\n    trapezium_semi_perimeter = ((trapezium_length ** 2) + (semi_perimeter ** 2)) / 2\n    \n    # Calculate the ratio of the areas of the parallelograms\n    ratio_trapezium = (trapezium_area + (first_area + second_area) / 2) / area\n    \n    # Calculate the area of the second parallelogram formed by the semi-perimeter and length\n    second_trapezium_area = trapezium_area - (trapezium_semi_perimeter + ((area - trapezium_semi_perimeter) * ratio_trapezium) / 2) ** 2\n    \n    # Calculate the area of the first parallelogram formed by the base1 and base2\n    first_trapezium_area = first_area + second_trapezium_area\n    \n    # Calculate the length of the first base\n    first_trapezium_base = first_trapezium_area / height\n    \n    # Calculate the length of the second base\n    second_trapezium_base = second_trapezium_area / height\n    \n    # Calculate the length of the third base\n    third_trapezium_base = trapezium_area / height\n    \n    # Calculate the length of the trapezium using the formula for the area of a trapezium\n    trapezium_trapezium_length = ((first_trapezium_area + second_trapezium_area + third_trapezium_area) / 2) ** 0.5\n    \n    # Calculate the area of the trapezium using the formula for the area of a"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a+b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?:b|\\d)*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'[ab]+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\w*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?:b)*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return last_Digit(n // 10) + n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    # using the modulo operator to find the last digit\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns the negative numbers in a list.\n    \"\"\"\n    neg_lst = []\n    for i in lst:\n        if i < 0:\n            neg_lst.append(i)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # create an empty list to store negative numbers\n    neg_list = []\n    # loop through the list\n    for num in list1:\n        # check if the number is negative\n        if num < 0:\n            # if it is, append it to the negative list\n            neg_list.append(num)\n    # return the negative list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_list.append(list1[i])\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_num = []\n    for num in lst:\n        if num < 0:\n            neg_num.append(num)\n    return neg_num\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # convert the string to a list of characters\n    char_list = list(str1)\n\n    # initialize a variable to store the index of the next odd character\n    next_odd_index = 0\n\n    # loop through the list of characters\n    for i in range(len(char_list)):\n        # if the character is odd, move the index to the next index\n        if char_list[i] % 2 == 1:\n            char_list[next_odd_index] = char_list[i]\n            next_odd_index += 1\n\n    # remove any extra characters from the list\n    char_list = char_list[:next_odd_index]\n\n    # convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # create a new string to store the result\n    result = \"\"\n    # iterate over each character in the input string\n    for char in str1:\n        # if the character is odd, add it to the result\n        if int(char) % 2 == 1:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = \"\"\n    # iterate over each character in the input string\n    for char in str1:\n        # if the character is odd, add it to the result\n        if char % 2!= 0:\n            result += char\n    # return the result\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            if char.isalpha():\n                new_str += char\n            elif char.isdigit():\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # create a new string to store the even characters\n    new_str = \"\"\n    \n    # loop through each character in the original string\n    for char in str1:\n        # if the character is even, add it to the new string\n        if char % 2 == 0:\n            new_str += char\n    \n    # return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_list = []\n    for char in str1:\n        if char.isdigit():\n            odd_list.append(char)\n    return ''.join(odd_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('odd', '').replace('even', '')"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n        elif char.isalpha():\n            result += char.upper()\n        else:\n            continue\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i][0] == test_list[j][1]:\n                    if test_list[j][0] == test_list[i][1]:\n                        count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list or (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] < test_list[i] and test_list[j] < test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    Args:\n        test_list (list): List of tuples or lists of tuples\n\n    Returns:\n        int: The number of bidirectional tuple pairs in the list\n    \"\"\"\n    # Initialize counter for bidirectional tuple pairs\n    count = 0\n\n    # Iterate through each element in the list\n    for elem in test_list:\n        # Check if the element is a tuple\n        if isinstance(elem, tuple):\n            # If it is a tuple, iterate through its elements in reverse order\n            for i in range(len(elem)-1, -1, -1):\n                # Check if the next element in the tuple is equal to the current element\n                if elem[i] == elem[i+1]:\n                    # If it is, increment the counter\n                    count += 1\n        # If the element is a list of tuples, check each tuple in turn\n        elif isinstance(elem, list):\n            for sub_elem in elem:\n                # Check if the sub-element is a tuple\n                if isinstance(sub_elem, tuple):\n                    # If it is, iterate through its elements in reverse order\n                    for i in range(len(sub_elem)-1, -1, -1):\n                        # Check if the next element in the tuple is equal to the current element\n                        if sub_elem[i] == sub_elem[i+1]:\n                            # If it is, increment the counter\n                            count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        if num % 2 == 0:\n            result += num // 2\n        else:\n            result += (num - 1) // 2\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for num in L:\n        single_integer += num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        if i < 0:\n            result -= i\n        else:\n            result += i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # convert list to string\n    s = ''.join(map(str, L))\n    # convert string to integer\n    x = int(s)\n    # multiply each digit by its position in the original list\n    for i, c in enumerate(s):\n        x = x * (i+1)\n    return x"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the sum variable\n    sum = 0\n    # iterate over each integer in the list\n    for num in L:\n        # add the integer to the sum variable\n        sum += num\n    # return the sum\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the variable to store the result\n    result = 0\n    \n    # iterate over the list of integers\n    for num in L:\n        # add the current integer to the result\n        result += num\n    \n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function will find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(?:(?:a|an|the|any)\\s*adv|adv|very|really|well|enough|entirely|absolutely|quite|definitely|much|just|barely|rather|well|most|perhaps|probably|probably)\\b'\n\n    # Find all matches of the regular expression pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Initialize a list to store the positions of the adverbs\n    positions = []\n\n    # Iterate over the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(match.start())\n\n    # Sort the positions list in ascending order\n    positions.sort()\n\n    # Return the sorted positions list\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expression to find all adverbs\n    adverbs = re.findall(r'\\b(also|only|really|totally|so|very|just)\\b', text.lower())\n    # Check if there are any adverbs\n    if adverbs:\n        # Print the adverbs and their positions in the sentence\n        print('Adverbs:', adverbs)\n        print('Positions:', [(m.start(), m.end()) for m in re.finditer(r'\\b(also|only|really|totally|so|very|just)\\b', text.lower())])\n    else:\n        # Print a message if there are no adverbs\n        print('There are no adverbs in the sentence.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern to match adverbs\n    pattern = re.compile(r'\\b(?:adverb|adv|adv\\w*)\\b')\n    \n    # Find all the matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize a list to store the adverbs and their positions\n    adverbs = []\n    \n    # Loop through the matches and append the adverb and its position to the list\n    for match in matches:\n        index = text.index(match)\n        adverbs.append((match, index))\n    \n    # Sort the list based on the positions of the adverbs\n    adverbs.sort(key=lambda x: x[1])\n    \n    # Return the adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    This function takes a sentence as input and returns a list of tuples containing the first adverb and its position in the sentence.\n    \"\"\"\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(?:[a-z]+\\s)*[a-z]+\\b'\n\n    # Use the re.findall() method to find all the matches in the sentence\n    matches = re.findall(pattern, text.lower())\n\n    # If no adverbs are found, return an empty list\n    if not matches:\n        return []\n\n    # Create an empty list to store the tuples of adverbs and their positions\n    adverbs = []\n\n    # Iterate through the list of matches\n    for i, match in enumerate(matches):\n        # Split the match into a list of words\n        words = match.split()\n\n        # Iterate through the list of words to find the first adverb\n        for word in words:\n            if word in ['the', 'a', 'an']:\n                adverbs.append((word, i))\n                break\n\n    # Return the list of tuples of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Find the adverb\n    adverb_pattern = r'\\b(?:negation|adv|advmod|advcl|advx|advclneg|advmodneg|advneg)\\b'\n    match = re.search(adverb_pattern, text, re.IGNORECASE)\n    \n    # If there is no adverb, return an empty list\n    if not match:\n        return []\n    \n    # Find the positions of the adverb in the sentence\n    positions = []\n    prev_word_end = match.start()\n    for i, word in enumerate(text.split()):\n        if word.lower() in ['be', 'being', 'being']:\n            positions.append(prev_word_end)\n        prev_word_end = text.find(word, prev_word_end) + len(word)\n    \n    # Add the last position of the sentence\n    positions.append(prev_word_end)\n    \n    # Return the list of positions and the adverb itself\n    return positions, match.group()"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b[A-Z][a-z]*\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        adverb = match.group()\n        pos = text.find(adverb)\n        return adverb, pos\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regular expressions for finding the adverb and its position\n    adverb_pattern = r'\\b(a|an|the)\\b'\n    position_pattern = r'\\b\\d+\\b'\n    \n    # Find all matches of the adverb pattern in the text\n    matches = re.findall(adverb_pattern, text)\n    \n    # Iterate through the matches and find their positions in the text\n    for i, match in enumerate(matches):\n        # Find all matches of the position pattern in the text after the adverb\n        position_matches = re.findall(position_pattern, text[text.index(match)+len(match):])\n        \n        # Find the first position that matches and return it along with the adverb\n        if position_matches:\n            return (match, position_matches[0])\n    \n    # If no adverbs are found, return None\n    return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define regex pattern for adverbs\n    pattern = r'\\b(?:adv|adv\\w*)\\b'\n    \n    # find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n    \n    # initialize position and result dictionary\n    position = {}\n    result = []\n    \n    # loop through each adverb and its position\n    for i, adv in enumerate(adverbs):\n        position[adv] = i + 1\n        result.append(position[adv])\n    \n    # return result dictionary\n    return position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(?:adv|adv\\.\\w+|adv\\.|adv)\\b')\n    # Use the finditer() method to find all the matches in the sentence\n    matches = pattern.finditer(text)\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n    # Loop through all the matches and add their positions to the list\n    for match in matches:\n        # Extract the position of the adverb in the sentence\n        position = text.index(match.group())\n        # Add the position to the list\n        adverb_positions.append(position)\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    adverb_pattern = r'\\b(very|often|little|sometimes|rarely|frequently|hardly|usually|quite|often|frequently|rarely|rarely|quite|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rare"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2 # surface area of cube = 6 * length^2\n    print(\"The surface area of a cube of length\", l, \"is:\", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*l*l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_arr = array('i')\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n    pos_count = len(pos_arr)\n    neg_count = len(nums) - pos_count\n    return pos_count/neg_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # convert the array to a list\n    nums = list(nums)\n    \n    # initialize the count and sum variables\n    count = 0\n    sum_of_numbers = 0\n    \n    # loop through the list and count the positive numbers\n    for num in nums:\n        if num > 0:\n            count += 1\n            sum_of_numbers += num\n    \n    # calculate the ration of positive numbers\n    ration = count / len(nums)\n    \n    # return the ration\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    # Iterate through the array and count the positive, negative and zero numbers\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    \n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    \n    # Return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array to store the count of positive numbers\n    positive_counts = array('i', [0] * len(nums))\n    # loop through the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            positive_counts[nums.index(num)] += 1\n    # calculate the ration of positive numbers\n    total_count = sum(positive_counts)\n    if total_count == 0:\n        return 0\n    return sum(positive_counts) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i')\n    negative = array('i')\n    \n    for num in nums:\n        if num > 0:\n            positive.append(num)\n        elif num < 0:\n            negative.append(abs(num))\n    \n    if len(positive) == 0:\n        return 0\n    else:\n        return len(positive) / (len(positive) + len(negative))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return round(count/len(nums), 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize counters for positive and negative numbers\n    positive_count = 0\n    negative_count = 0\n    # iterate through the array and count positive and negative numbers\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    # calculate the ration of positive numbers\n    if positive_count == 0:\n        return 0\n    else:\n        return (positive_count / len(nums))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    if pos_count == 0:\n        return 0\n    return round(pos_count/len(nums), 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list to be able to use the built-in sum() function\n    nums = list(nums)\n\n    # Find the sum of the positive numbers in the list\n    positive_sum = sum([num for num in nums if num > 0])\n\n    # Find the total number of numbers in the list\n    total_sum = sum(nums)\n\n    # Calculate the ration of positive numbers in the list\n    positive_ratio = positive_sum / total_sum\n\n    # Return the ration of positive numbers\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to a list\n    num_list = list(nums)\n    # initialize variables for count and positive count\n    count = 0\n    positive_count = 0\n    # iterate through the list and count the number of positive numbers\n    for num in num_list:\n        if num > 0:\n            positive_count += 1\n        count += 1\n    # calculate the ration of positive numbers and return it as a float\n    return positive_count / count"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0] \n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num \n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num \n    return max_neg "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = float('-inf') # initialize largest negative number to negative infinity\n    for num in list1: \n        if num < 0: # check if the number is negative\n            if num > largest_neg_num: # check if the number is larger than the current largest negative number\n                largest_neg_num = num # update largest negative number if necessary\n    return largest_neg_num # return the largest negative number found"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -1 # initialize the largest variable to -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num # if the current number is negative and larger than the largest, update the largest variable\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    return [tuple(i[:k] if len(i) > k else i) for i in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[:-K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                del test_list[i][j]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(tuple(item[:K]))\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K] + test_list[i][-K:], test_list[i]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1) == len(test_tup2):\n        result = tuple(tup1[i] * tup2[i] for i in range(len(tup1)))\n        return result\n    else:\n        return \"Both tuples should have the same length to perform index multiplication.\""
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and performs index wise multiplication of their elements.\n    \"\"\"\n\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The input tuples are not of equal length.\"\n\n    # initialize a new tuple to store the result\n    result_tup = ()\n\n    # iterate over the tuples and perform the multiplication\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths must be same.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Create an empty tuple to store the result\n    result_tup = ()\n\n    # Loop through the two input tuples\n    for i in range(len(test_tup1)):\n        # Perform multiplication of the corresponding elements\n        element = test_tup1[i] * test_tup2[i]\n        # Append the multiplication result to the result tuple\n        result_tup += (element,)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count = {}\n    for item in lst:\n        count[item] = count_dict.get(item, 0) + 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the list to a set to remove duplicates and count the occurrence of each element\n    count_dict = Counter(lst)\n    # Convert the count_dict back to a list of tuples with the element and its count\n    count_list = list(count_dict.items())\n    # Iterate through the tuple and count the occurrence of each element in the list\n    for elem in tup:\n        count = 0\n        for i in range(len(count_list)):\n            if elem == count_list[i][0]:\n                count += count_list[i][1]\n        tup_count = (elem, count)\n        tup_count_lst.append(tup_count)\n    return tup_count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) # Count the occurrence of all elements in the tuple\n    for i in lst:\n        count[i] += 1 # Add 1 to the count of each element in lst\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = {}\n    for i in tup:\n        count_dict[i] = 0\n    for i in lst:\n        count_dict[i] += 1\n    return Counter(count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary \n    containing the count of each element in the list in the tuple.\n    '''\n    count_dict = Counter(tup)\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return count_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count = Counter(tup)\n\n    for elem in lst:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_tup = Counter(tup)\n    for elem in lst:\n        if elem in count_tup:\n            count_tup[elem] += 1\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    \n    for i in count:\n        result[i] = tup.count(i)\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst: \n        count[item] += 1 \n    return count.most_common()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function counts the occurrence of all elements of list in a tuple.\n    '''\n    \n    # Convert the list to a set to remove duplicates\n    lst_set = set(lst)\n    \n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # Iterate through the list of tuples and for each tuple, check if all elements are in the set of elements in the list\n    for tup_elem in tup:\n        if all(x in lst_set for x in tup_elem):\n            # If all elements are in the set, add it to the count dictionary\n            for elem in tup_elem:\n                if elem in count_dict:\n                    count_dict[elem] += 1\n                else:\n                    count_dict[elem] = 1\n    \n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Loop through the list and calculate the cube of each element\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_nums = [1, 4, 16, 64, 256, 1024, 4096, 16384, 65536]\n    return sum(perrin_nums[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += 1/i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a perrin number\n        if is_perrin(i):\n            # Add the number to the sum\n            sum += i\n\n    # Return the sum of all perrin numbers\n    return sum\n\n\ndef is_perrin(num):\n    \"\"\"\n    Check if a number is a perrin number.\n    \"\"\"\n    # Check if the number is divisible by 3\n    if num % 3 == 0:\n        # Check if the number is divisible by 5\n        if num % 5 == 0:\n            # If both conditions are true, then the number is a perrin number\n            return True\n    # If the conditions are not true, then the number is not a perrin number\n    return False"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, 16777216, 67108864, 268435456, 1073741824, 4294967296, 17179869184, 68719476736, 274877906944, 1099511627776, 4398046511104, 17592186044416, 70368744177664, 281474976710656, 1125899906842624, 4503599627370496, 18014398509481984, 72057594037927936, 288230376151711744, 1152921504606846976, 4611686018427387904, 18446744073709551616, 7407582065528293888, 2951479051793528256, 11805916207174113034112, 4722366482869645213696, 18889465931478580864, 762949953421312, 3022314549036572672, 1208925819614629174706176, 4835703278458516733440, 1934281311383406677312, 787401732688128, 3094850098213450688, 123794003928538027430637056, 4951306439675175809792, 1980903220516066304, 81484107587286336, 3169861469123651712, 12686331690738352128, 507022993180228480, 202999573459604288, 8446744073709551616, 3247588600000000000, 1292092895517241984, 5192375982355392, 2082190814511627776, 8768348618656257536, 3328035675"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(n+1):\n        perrin_numbers.append(i*i*i)\n    sum_perrin = sum(perrin_numbers)\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_num = 1\n    sum_of_perrin_numbers = 0\n    \n    while perrin_num <= n:\n        sum_of_perrin_numbers += perrin_num\n        perrin_num += 1\n    \n    return sum_of_perrin_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # initialize the sum variable\n    sum_perrin = 0\n    # loop through the first n perrin numbers\n    for i in range(1, n+1):\n        # calculate the sum of the perrin numbers\n        sum_perrin += i**2 + 1\n    # return the sum of the perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            extracted_list.append(l[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specific size as input, and returns a new list containing only the strings that are of the specified size.\n    '''\n    return [s for s in str_list if len(s) == size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), len(str)):\n        result.append(l[i:i+len(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size as input and returns a list of the specified size of strings from the list.\n    \"\"\"\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(\"\".join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n\n    Args:\n    str_list (list): A list of string values.\n    l (int): The size of the strings to extract.\n\n    Returns:\n    list: A list of strings of size l extracted from the input list.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in l:\n        extracted_strings.append(i[:l[i]])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): List of string values.\n        size (int): Size of the extracted strings.\n\n    Returns:\n        list: List of extracted string values.\n    \"\"\"\n    extracted_strings = []\n    for i in range(0, len(str_list), size):\n        extracted_strings.append(' '.join(str_list[i:i+size]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified size of strings from a list of string values.\n\n    Parameters:\n    str_list (list): A list of strings.\n    size (int): The desired size of the extracted strings.\n\n    Returns:\n    list: A list of extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for s in str_list:\n        if len(s) == size:\n            extracted_strings.append(s)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(0, len(str_list), size):\n        extracted_strings.append(\" \".join(str_list[i:i+size]))\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Removing all whitespaces from the string\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    # Define a regular expression pattern to match all whitespace characters\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to find all non-whitespace characters in the string\n    text2 = re.sub(pattern, '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    text1 = re.sub(pattern,'', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string using the `re` module.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    # Return the cleaned string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove any remaining white spaces at the beginning of the string\n    text1 = re.sub(r'^[\\s]+', '', text1)\n    # Remove any remaining white spaces at the end of the string\n    text1 = re.sub(r'[\\s]+$', '', text1)\n    # Return the modified string\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        loss_amount = 0\n    else:\n        loss_amount = actual_cost - sale_amount\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return 0\n    else: \n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss < 0:\n        return 0\n    else:\n        return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return sale_amount - actual_cost\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost - sale_amount < 0:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_factor = 1.5 # assume a 15% loss rate\n    if sale_amount >= actual_cost:\n        loss_amount = (actual_cost * loss_factor) - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0: \n        return actual_cost - sale_amount \n    else: \n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of the even factors of n.\n    '''\n    sum_of_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_even_factors += i\n    if n % 2 == 0 and int(math.sqrt(n)) ** 2!= n:\n        sum_of_even_factors += n\n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenFactors = [factor for factor in range(2, int(math.sqrt(n)) + 1) if n % factor == 0 and factor % 2 == 0]\n    sumOfEvenFactors = sum(evenFactors)\n    return sumOfEvenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sum_of_even_factors(n):\n    '''\n    Write a Python function to find the sum of even factors of a number.\n    '''\n    sum_even = 0\n    num = n\n    while num > 1:\n        if num % 2 == 0:\n            sum_even += num\n        num -= 1\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n\n    # loop through each odd factor of n and add to sum if it's even\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n\n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i % 2 == 0:\n                evenSum += n//i\n            else:\n                evenSum += (n//i) + 1\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum of factors to 0\n    sum = 0\n    \n    # loop through all numbers from 2 to n \n    for i in range(2, n+1): \n        # if the number is even, add it to the sum of factors \n        if i % 2 == 0: \n            sum += i\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number n as input and finds the sum of the even factors of n.\n    '''\n    count = 0\n    sum = 0\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                count += 1\n                sum += i\n    \n    if n > 1:\n        if n % 2 == 0:\n            count += 1\n            sum += n\n    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_factors += i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n\n    return sum(even_factors)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    pattern = r'\\b[a-z]+z\\b'\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Define regular expression pattern\n    pattern = r'\\b\\w*z\\w*\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Print the matches\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define the regular expression pattern to match a word containing 'z'\n    pattern = r'\\b\\w+z\\b'\n    # use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    # if a match is found, return the match object\n    if match:\n        return match\n    # otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b' # matches words containing 'z'\n    return re.findall(pattern, text) # returns a list of matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w+z\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern to match 'z' in a word\n    pattern = r'\\b\\w+z\\b'\n    # Use the re.search() function to search for a match in the text\n    result = re.search(pattern, text)\n    # If a match is found, return the matched text, otherwise return None\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes in a month number as input and returns True if the month number contains 31 days and False otherwise.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    elif monthnum in range(1, 13):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(monthnum2, \"has 31 days\")\n    else:\n        print(monthnum2, \"does not have 31 days\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Convert month number to integer and check if it contains 31 days\n    if monthnum2 % 2 == 0:\n        if monthnum2 == 2:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(str(monthnum2)) == 2:\n        monthnum2 = '0' + str(monthnum2)\n    if int(monthnum2) < 1 or int(monthnum2) > 12:\n        return False\n    if int(monthnum2) in [4, 6, 9, 11]:\n        if int(monthnum2) in [4, 6, 9]:\n            if int(monthnum2) % 2 == 0:\n                if int(monthnum2) == 4 or int(monthnum2) == 6 or int(monthnum2) == 9:\n                    return True\n                else:\n                    return False\n            else:\n                if int(monthnum2) == 4 or int(monthnum2) == 6 or int(monthnum2) == 9:\n                    return False\n                else:\n                    return True\n        elif int(monthnum2) == 11:\n            return True\n    elif int(monthnum2) in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"31 days\")\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"30 days\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = int(monthnum2)\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13):\n        return days[monthnum2 - 1]\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n                return True\n            else:\n                return False\n        elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number. Please enter a number between 1 and 12.\"\n\n    month_dict = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum2 in month_dict:\n        return \"The month number {} contains 31 days.\".format(monthnum2)\n    else:\n        return \"The month number {} does not contain 31 days.\".format(monthnum2)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (datetime.datetime.now().year % 4 == 0 and datetime.datetime.now().year % 100!= 0) or (datetime.datetime.now().year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 100 == 0 and monthnum2 % 400 == 0:\n        return True\n    elif monthnum2 % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_stringlist.append(reversed_string)\n    return reversed_stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    # Return the reversed list of strings\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # Find the length of all sublists in the list\n    sub_len = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_len.append(len(lst[i:j]))\n    \n    # Find the minimum length of sublists\n    min_len = min(sub_len)\n    \n    # Find the sublist having minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) == min_len:\n                min_sublist = lst[i:j]\n                break\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # Initialize the minimum length to the length of the list\n    min_length = len(lst)\n    \n    # Initialize the minimum sublist to the whole list\n    min_sublist = lst\n    \n    # Iterate over the sublists in the list\n    for i in range(1, len(lst)):\n        \n        # Check if the length of the sublist at index i is smaller than the current minimum length\n        if len(lst[i]) < min_length:\n            \n            # Update the minimum length and the minimum sublist\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n            \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    # creating an empty list to store the sublists with minimum length \n    sublists = [] \n    # iterating over the list \n    for i in range(len(lst)): \n        # creating an empty list to store the characters of current sublist \n        sublist = [] \n        # iterating over the remaining elements of the list from current index \n        for j in range(i+1,len(lst)): \n            # adding characters of current sublist to sublist \n            sublist.append(lst[j]) \n            # checking if the length of sublist is less than or equal to minimum length \n            if len(sublist) <= len(sublists) or (len(sublist) == len(sublists) and sublist < sublists[0]): \n                # updating the minimum length sublist \n                sublists = [sublist] \n            # checking if the length of sublist is equal to minimum length and smaller than the previous sublist \n            elif len(sublist) == len(sublists) and sublist > sublists[0]: \n                # updating the minimum length sublist \n                sublists = [sublist] \n    # returning the minimum length sublist \n    return min(sublists, key=len)"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # Initialize the minimum length and the index of the minimum length sublist \n    min_length = float('inf')\n    min_index = None\n    \n    # Iterate over all the sublists of the given list \n    for i in range(len(lst)): \n        sublist = lst[i]\n        \n        # Check if the length of the sublist is less than the current minimum length \n        if len(sublist) < min_length: \n            min_length = len(sublist) \n            min_index = i\n    \n    # Return the sublist with minimum length \n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    min_length = float('inf') # initialize minimum length to infinity\n    min_sublist = None # initialize minimum sublist to None\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Find the length of the longest sublist \n    max_length = 0 \n    for sublist in lst: \n        if len(sublist) > max_length: \n            max_length = len(sublist) \n    # Initialize the minimum sublist to be the longest sublist \n    min_sublist = lst[lst.index(max(lst, key=len))] \n    # Find the length of the shortest sublist \n    min_length = max_length \n    for sublist in lst: \n        if len(sublist) < min_length and len(sublist)!= len(min_sublist): \n            min_length = len(sublist) \n    # Initialize the minimum sublist to be the shortest sublist \n    min_sublist = lst[lst.index(min(lst, key=len))] \n    # Return the minimum sublist \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    min_sublist = lst\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    for i in range(len(lst)):\n        if not min_sublist or len(min_sublist) > len(lst[i]):\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase letters\n    pattern = re.compile('[A-Z]+')\n\n    # split the input string into words and loop over each word\n    words = str1.split()\n    for i in range(len(words)):\n        # if the word contains only uppercase letters, remove it\n        if pattern.search(words[i]):\n            words[i] = ''\n\n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # Define a regular expression pattern for uppercase letters\n    pattern = re.compile('[A-Z]+')\n    # Replace all uppercase letters with an empty string\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    uppercase_pattern = re.compile('[A-Z]')\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character matches the uppercase pattern, replace it with an empty string\n        if uppercase_pattern.match(char):\n            str1 = str1.replace(char, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to find all uppercase substrings and replace them with spaces\n    regex = re.compile('[A-Z]+')\n    return regex.sub(' ', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    uppercase_pattern = re.compile(r'\\b[A-Z]\\w*\\b', re.IGNORECASE)\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'(?i)[A-Z]'\n    # Use the re.findall() method to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(pattern, str1)\n    # Iterate over each uppercase substring and replace it with an empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'([a-z])([A-Z][a-z]+)')\n    return pattern.sub(r'\\1\\2', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    str1 = re.sub(r'(?i)\\b[A-Z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Define a regular expression pattern that matches uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Find all uppercase substrings in the input string\n    matches = pattern.findall(str1)\n    # Remove all uppercase substrings from the input string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist: # check if the sublist is not empty\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        if type(sublist) == list:\n            return [sublist[0]]\n        elif type(sublist) == tuple:\n            return tuple(sublist[0])\n        else:\n            return sublist"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize the result list\n    result = []\n    \n    # Iterate through each element in the input list\n    for i in range(len(list1)):\n        # Initialize a list to store the remaining elements\n        remaining = list1[:i] + list1[i+1:]\n        \n        # Iterate through each element in the remaining list\n        for j in range(len(remaining)):\n            # Create a tuple of the current combination\n            current = (list1[i], remaining[j])\n            \n            # Add the tuple to the result list if it's not already there\n            if current not in result:\n                result.append(current)\n    \n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort() # sort the list in ascending order\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j]) # slice the list and add it to the result list\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Get the length of the input list\n    n = len(list1)\n\n    # Create a list to store the combinations\n    comb_list = []\n\n    # Loop over all possible subsets of length k\n    for k in range(1, n+1):\n\n        # Generate all possible subsets using itertools.combinations\n        for subset in itertools.combinations(list1, k):\n\n            # Append the subset to the comb_list\n            comb_list.append(list(subset))\n\n    # Return the list of all combinations\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # function to get all possible combinations of a list\n    def get_combinations(lst, n):\n        if n == 1:\n            return [lst]\n        else:\n            result = []\n            for i in range(len(lst)):\n                rest = lst[:i] + lst[i+1:]\n                for comb in get_combinations(rest, n-1):\n                    result.append([lst[i]] + comb)\n            return result\n\n    return get_combinations(list1, len(list1))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            print(' '.join(map(str, list1[j:j+i])))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            current_product = 1\n        else:\n            current_product *= arr[i]\n        \n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        max1 = max_subarray_product(arr[1:])\n        max2 = max(arr[0], arr[1])\n        return max(max1, max2)"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if len(arr) == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here_neg = arr[0]\n    max_ending_here_pos = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_ending_here_neg = max(arr[i], max_ending_here_neg * arr[i])\n        max_ending_here_pos = max(arr[i], max_ending_here_pos * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n\n    :param arr: an array of integers\n    :return: the maximum product subarray of the input array\n    \"\"\"\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n    \"\"\"\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0], 1\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product, max_ending_here\n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the number of values in the dictionary is equal to n\n    if len(dict.values())!= n:\n        return False\n    \n    # Check if all values in the dictionary are same\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n\n    # Initialize the first value to check\n    value = next(iter(dict.values()))\n\n    # Check if all values are the same\n    for v in dict.values():\n        if v!= value:\n            return False\n\n    # All values are the same\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n-1):\n        if dict[i]!= dict[i+1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    elif len(dict) == 1:\n        return dict.values()[0] == n\n    elif len(dict) == 2:\n        return dict.values()[0] == n and dict.values()[1] == n\n    else:\n        for value in dict.values():\n            if value!= n:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if the length of the dictionary is equal to n\n    if len(dict) == n:\n        # Initialize a variable to store the first value of the dictionary\n        first_value = next(iter(dict.values()))\n        # Iterate over the values of the dictionary\n        for value in dict.values():\n            # Check if the current value is same as the first value\n            if value!= first_value:\n                # Return False if any value is not same as the first value\n                return False\n        # Return True if all values are same as the first value\n        return True\n    # If the length of the dictionary is not equal to n, return False\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    return len(values) == 1 and values.pop() == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Define a set to store the values of the dictionary\n    value_set = set()\n\n    # Iterate through the dictionary and add the values to the set\n    for i in dict.values():\n        value_set.add(i)\n\n    # If the length of the set is equal to n, all values are same in the dictionary\n    if len(value_set) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for key, value in dict.items():\n            if dict[key]!= value:\n                return False\n        return check_value(dict[1:], n)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the dictionary is empty\n    if not dict:\n        return True\n    # Get the first key and value from the dictionary\n    key = next(iter(dict))\n    value = dict[key]\n    # Check if all the values in the dictionary are same as the first value\n    for key, val in dict.items():\n        if val!= value:\n            return False\n    # If all the values are same, return True\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Create an auxiliary array to store the maximum product found so far\n    max_so_far = [1] * n\n    # Initialize the maximum product found so far\n    max_ending_here = arr[0]\n    # Loop through all subarrays of length 2 to n\n    for i in range(2, n):\n        # Calculate the maximum product ending at index i\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        # Update the maximum product found so far\n        max_so_far[i] = max(max_so_far[i-1], max_ending_here)\n    # Return the maximum product found so far\n    return max(max_so_far)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    max_product = float('-inf')\n    current_product = 1\n    prev_min = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < prev_min:\n            current_product = prev_min * arr[i]\n        else:\n            current_product = arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n        \n        prev_min = min(prev_min, arr[i])\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 3:\n        return 0\n    \n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    if len(arr) <= 1:\n        return 0\n\n    max_product_so_far = float('-inf')\n    max_product_ending_here = float('-inf')\n\n    for num in arr:\n        max_product_ending_here = max(num, num * max_product_ending_here, num * max_product_so_far)\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize the maximum product and the current subsequence product\n    max_product = float('-inf')\n    curr_product = 1\n    # Iterate through the array\n    for i in range(n):\n        # Calculate the product of the current subsequence and the next number in the array\n        temp_product = curr_product * arr[i]\n        # Update the maximum product if necessary\n        if temp_product > max_product:\n            max_product = temp_product\n        # Update the current subsequence product\n        curr_product = temp_product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Step 1: Initialize two pointers i and j at the beginning of the array\n    i = 0\n    j = 0\n    \n    # Step 2: Initialize two variables max_left and max_right to the first element of the array\n    max_left = arr[0]\n    max_right = arr[0]\n    \n    # Step 3: Iterate through the array starting from the second element\n    for num in arr[1:]:\n        # Step 4: If the number is greater than max_right, update max_right and max_left accordingly\n        if num > max_right:\n            max_right = num\n            max_left = max(max_left * max_right, num)\n        # Step 5: If the number is less than max_right, update max_left accordingly\n        elif num < max_right:\n            max_left = max(max_left * num, num)\n    \n    return max_left * max_right"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    curr_product = 1\n\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i - 1]:\n            curr_product *= arr[i]\n        else:\n            curr_product = 1\n\n        max_product = max(max_product, curr_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Initialize a variable for the maximum product\n    max_product = float('-inf')\n    # Initialize a variable for the current product\n    curr_product = 1\n    # Iterate through the array\n    for i in range(n):\n        # Check if the current element is greater than the previous element\n        if arr[i] > arr[i-1]:\n            # If it is, update the current product\n            curr_product *= arr[i]\n        else:\n            # If not, update the maximum product and reset the current product\n            max_product = max(max_product, curr_product)\n            curr_product = 1\n    # Update the maximum product with the final current product\n    max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = min(min_ending_here, arr[i])\n        else:\n            min_ending_here = min(min_ending_here, arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Calculate the next product\n        next_product = max(arr[i], current_product)\n        # Update the maximum product\n        max_product = max(max_product, next_product)\n        # Update the current product\n        current_product = next_product\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    length = len(test_tup)\n    # Initialize the sum to 0\n    sum_pairwise = 0\n    \n    # Loop through the tuple and add the sum of the adjacent elements\n    for i in range(length - 1):\n        sum_pairwise += test_tup[i] + test_tup[i + 1]\n        \n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum of the first two elements\n    sum_pair = test_tup[0] + test_tup[1]\n    \n    # Loop through the rest of the tuple\n    for i in range(2, len(test_tup)-1):\n        # Add the current element and the next element to the sum of the previous pair\n        sum_pair += test_tup[i+1]\n        # Replace the last pair with the sum of the current pair\n        test_tup[i] = sum_pair\n        \n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Convert the tuple to a list and slice it to get the adjacent elements\n    adjacent_elements = [test_tup[i+1] for i in range(len(test_tup)-1)]\n    # Use the built-in sum() function to add the adjacent elements\n    return sum(adjacent_elements)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    num_elements = len(test_tup)\n    if num_elements == 1:\n        return 0\n    \n    pairwise_sum = 0\n    for i in range(1, num_elements):\n        pairwise_sum += test_tup[i] + test_tup[i-1]\n    \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through the tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element and the next element to get the pairwise sum\n        sum += test_tup[i] + test_tup[i+1]\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize an empty list to store the pairwise sums\n    pairwise_sum = []\n    # Loop through the tuple and add the neighboring elements as the pairwise sums\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    # Return the final list of pairwise sums\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Invalid input tuple\"\n\n    # initialize variables for storing the sum of neighboring elements\n    prev_sum = 0\n    total_sum = 0\n\n    # iterate through the tuple and compute the sum of neighboring elements\n    for i in range(len(test_tup) - 1):\n        total_sum += test_tup[i] + test_tup[i+1]\n\n    # return the total sum of neighboring elements\n    return total_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the result to 1\n    result = 1\n\n    # Iterate through the array\n    for i in arr:\n\n        # Compute the product of the current element and the result modulo n\n        product = i * result % n\n\n        # Update the result to the new product\n        result = product\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result to 1\n    result = 1\n\n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Multiply the current element with the result\n        result = (result * arr[i]) % n\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result variable with the first element of the array\n    result = arr[0]\n    \n    # Iterate over the array starting from the second element\n    for i in range(1, len(arr)):\n        # Multiply the result with the current element of the array and modulo n\n        result = (result * arr[i]) % n\n    \n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array `arr` and an integer `n` as input and returns the product of the array multiplication modulo n.\n\n    Args:\n        arr: An array of integers.\n        n: An integer representing the modulo.\n\n    Returns:\n        An integer representing the product of the array multiplication modulo n.\n    \"\"\"\n\n    # Initialize the result to 1\n    result = 1\n\n    # Loop through the array and multiply each element by the result\n    for num in arr:\n        result = (result * num) % n\n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result *= num\n        result %= n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!=1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n\n    # check if list is empty\n    if len(l) == 0:\n        return \"List is empty\"\n\n    # iterate through the list\n    for i in range(len(l)):\n        # check if the current number is equal to the next number in the list\n        if l[i] == l[i+1]:\n            # if it is, return True\n            return True\n    \n    # if no consecutive numbers are found, return False\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n\n    # Initialize the first element of the list to a variable\n    first_element = l[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(l)):\n\n        # If the current element is equal to the previous element + 1, then return True\n        if l[i] == first_element + 1:\n            return True\n\n        # Otherwise, update the first element to the current element\n        first_element = l[i]\n\n    # If no consecutive numbers are found, return False\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1: \n        return True \n    if l[0] == l[1]: \n        return False \n    for i in range(len(l)-1): \n        if l[i+1] == l[i] + 1: \n            return True \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    n = len(l)\n    for i in range(n-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else returns False.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are consecutive and False otherwise.\n\n    Parameters:\n        l (list): A list of integers.\n\n    Returns:\n        bool: True if all the elements in the list are consecutive and False otherwise.\n    \"\"\"\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n    \n    # Iterate through the list and check if each element is consecutive\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    # If the loop completes without returning False, all elements are consecutive\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort the input lists based on the first element of each tuple\n    test_list1.sort(key=lambda x: x[0])\n    test_list2.sort(key=lambda x: x[0])\n\n    # Initialize an empty list to store the common elements\n    result = []\n\n    # Loop through both lists and add common elements to the result list\n    i, j = 0, 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i][0] == test_list2[j][0]:\n            result.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i][0] < test_list2[j][0]:\n            i += 1\n        else:\n            j += 1\n\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of all the elements from both lists\n    all_elements = set(test_list1 + test_list2)\n    \n    # Create a set of the elements that are common to both lists\n    common_elements = set(test_list1) & set(test_list2)\n    \n    # Return the common elements as a tuple\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of tuples to hold the elements of the first list\n    set1 = set(test_list1)\n\n    # Create an empty set to hold the elements of the intersection of the first and second lists\n    intersection = set()\n\n    # Iterate through the second list and add the elements to the intersection set that also exist in the first set\n    for element in test_list2:\n        if element in set1:\n            intersection.add(element)\n\n    # Convert the set of elements to a tuple and return it\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert both lists to sets to remove duplicates and store them in set1 and set2 respectively\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the two sets and convert it back to a list\n    intersection = list(set1.intersection(set2))\n    \n    # sort the intersection list in ascending order and return it\n    intersection.sort()\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty list to store the unique tuples in the intersection\n    intersection_list = []\n\n    # Create a set of the unique elements in the first list\n    unique_list1 = set(test_list1)\n\n    # Iterate through the second list and check if each element is in the set of unique elements in the first list\n    for element in test_list2:\n        if element in unique_list1:\n            # If the element is in the set, check if it already exists in the intersection list\n            if element not in intersection_list:\n                intersection_list.append(element)\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2 and i not in intersection:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from the first list\n    set1 = set(test_list1)\n\n    # Create a set from the second list\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item1 in test_list1:\n        for item2 in test_list2:\n            if item1 == item2:\n                intersection.append(item1)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # create a set from the first list\n    set1 = set(test_list1)\n\n    # create a set from the second list\n    set2 = set(test_list2)\n\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n    test_list1 (list of tuples): list of tuples to find the intersection with.\n    test_list2 (list of tuples): list of tuples to find the intersection with.\n\n    Returns:\n    list of tuples: the tuple intersection of elements in the two input lists, irrespective of their order.\n    \"\"\"\n\n    # create a set of the first list's elements to make set-based intersection easier\n    set_1 = set(test_list1)\n\n    # iterate over the second list and intersect with the first set\n    result = []\n    for elem in test_list2:\n        if elem in set_1:\n            result.append(elem)\n\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for char in str1:\n        if char == ch:\n            newstr += newch\n        else:\n            newstr += char\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in two string arguments, str1 and ch, and a new character, newch, and returns a new string with all occurrences of ch replaced with newch.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to replace.\n    newch (str): The new character to replace with.\n\n    Returns:\n    str: The modified string.\n    '''\n\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the character matches the specified character to be replaced, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char == ch:\n            str2 += newch\n        else:\n            str2 += char\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the current character is the specified character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character with a new character in a given string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a sorted dictionary based on its values.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_count)\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by values in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Convert the dictionary into a Counter object to sort it by value\n    counter = Counter(dict1)\n    # Sort the Counter object in descending order of values\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Extract the sorted dictionary from the sorted Counter object\n    sorted_dict = {key: value for key, value in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a list of tuples\n    lst = dict1.items()\n    \n    # sort the list by value in descending order\n    lst.sort(key=lambda x: x[1], reverse=True)\n    \n    # create a new dictionary with the sorted list\n    sorted_dict = dict(lst)\n    \n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the maximum and minimum values in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"Array should have at least two elements.\")\n\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    # Find the sum of the largest and smallest values\n    result = nums[-1] + nums[0]\n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the maximum and minimum values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    # add the maximum and minimum values to get the total sum\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of the largest and smallest value in the array.\n\n    :param nums: array of numbers\n    :return: sum of largest and smallest value in the array\n    \"\"\"\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Calculate the sum of the largest and smallest values\n    total = largest + smallest\n\n    return total"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        largest = big_sum(nums[1:])\n        smallest = min(nums[0], nums[1:])\n        return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile('[a-z]+')\n    return lowercase_pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+') # compile pattern for lowercase substrings\n    words = str1.split() # split the string into words\n    \n    filtered_words = [word for word in words if lowercase_pattern.search(word) is None] # filter out words with lowercase substrings\n    \n    return''.join(filtered_words) # join the filtered words back into a string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase and split it into words\n    str1 = str1.lower()\n    words = str1.split()\n    # Loop through each word and remove any substring that is all lowercase\n    for i in range(len(words)):\n        if re.match(r'^[a-z]+$', words[i]):\n            words[i] = ''\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # Create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b\\w+\\b', re.IGNORECASE)\n    \n    # Find all matches of the pattern in the input string\n    matches = pattern.findall(str1)\n    \n    # Remove all matches from the input string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    \n    # Iterate through each word\n    for i, word in enumerate(words):\n        # Check if the word contains only lowercase characters\n        if re.match(\"^[a-z]+$\", word):\n            # If the word contains only lowercase characters, remove it from the list of words\n            del words[i]\n    \n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n\n    # Split the input string into a list of substrings\n    substrings = re.findall(pattern, str1)\n\n    # Join the list of substrings back into a single string\n    result = ''.join(substrings)\n\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Use regular expressions to find all lowercase substrings\n    pattern = re.compile(r'([a-z]+)')\n    # Find all matches in the string\n    matches = pattern.findall(str1)\n    # Iterate over the matches and replace them with an empty string\n    for match in matches:\n        str1 = re.sub(f'({match})', '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n\n    # Find all lowercase substrings in the given string\n    matches = pattern.findall(string)\n\n    # Loop through each match and remove it from the string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10  # use the modulo operator to get the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input should be an integer\")\n    # check if n is positive\n    if n < 0:\n        raise ValueError(\"Input should be a positive integer\")\n    # convert n to a string and get the first digit\n    first_digit = str(n)[0]\n    # return the first digit as an integer\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    # initialize the first digit to None\n    first_digit = None\n    \n    # loop through each digit of the number\n    for digit in str(n):\n        # if the current digit is the first digit, set the first digit to the current digit\n        if first_digit is None:\n            first_digit = digit\n            \n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 ** len(str(n))"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its first digit.\n    \"\"\"\n    # Convert the input number into a string\n    num_str = str(n)\n    # Return the first digit of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Check if the input is a number\n    try:\n        num = int(n)\n    except ValueError:\n        return \"Error: Invalid input. Please enter a number.\"\n\n    # Extract the first digit\n    first = str(num)[0]\n\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a Python function to find the first digit of a given number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list: \n        if num % 2!= 0: \n            odd_numbers.append(num) \n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and returns a list containing only the odd numbers in the original list.\n    \"\"\"\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for number in list:\n        if number % 2 == 1:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0] "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_natural = sum(range(1, n+1))\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum(x**3 for x in range(n+1))\n    natural_sum = sum(range(1, n+1))\n    return cubes_sum - natural_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(num ** 3 for num in range(1, n + 1))\n\n    # Find sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n + 1))\n\n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Calculate sum of cubes of first n natural numbers\n    cube_sum = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate sum of first n natural numbers\n    sum_n = sum(range(1, n+1))\n\n    # Calculate difference between sum of cubes and sum of first n natural numbers\n    diff = cube_sum - sum_n\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Sum of cubes of first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n\n    # Sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = abs(sum_cubes - sum_natural)\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_cubes(n):\n    '''\n    This function calculates the sum of cubes of the first n natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) // 6\n\ndef sum_of_natural_numbers(n):\n    '''\n    This function calculates the sum of the first n natural numbers.\n    '''\n    return n * (n + 1) // 2\n\ndef difference(n):\n    '''\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum_of_cubes(n) - sum_of_natural_numbers(n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is:\", difference(n))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([num**3 for num in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    # calculate sum of first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    # calculate difference between sum of cubes and sum of first n natural numbers\n    diff = sum_numbers - sum_cubes\n    # return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = 0\n    natural_sum = 0\n    for i in range(1, n+1):\n        cubes_sum += i**3\n        natural_sum += i\n    return cubes_sum - natural_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize variables to count pairs and sum\n    count = 0\n    sum_A = sum(A)\n\n    # Loop through all pairs of indices\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate the XOR of the two elements\n            xor_ij = A[i] ^ A[j]\n\n            # Check if XOR is odd\n            if xor_ij % 2 == 1:\n                # Increment the count and add the sum of the two elements\n                count += 1\n                sum_A += A[i] + A[j]\n\n    # Return the count and the sum\n    return count, sum_A"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # initialize count to zero\n    count = 0\n    \n    # loop through all pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1,N):\n            # calculate the xor value of the pair\n            xor = A[i] ^ A[j]\n            \n            # if the xor value is odd, increment the count\n            if xor % 2!= 0:\n                count += 1\n                \n    # return the final count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) :\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i]^A[j]%2!= 0 :\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = 0\n    count = 0\n\n    for i in range(N):\n        xor_sum += A[i]\n\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_sum -= A[i] + A[j]\n            if xor_sum % 2 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n            if count == N:\n                return count\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_char = char.lower()\n        elif char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_string += char.swapcase()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    difference = 0\n    while n1 > 0 or n2 > 0:\n        digit_sum = n1 % 10 + n2 % 10\n        if digit_sum > 9:\n            difference += digit_sum - 10\n            n1 //= 10\n            n2 //= 10\n        else:\n            difference += digit_sum\n            n1 //= 10\n            n2 //= 10\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        d1 = int(str(n1)[i]) if i < len(str(n1)) else 0\n        d2 = int(str(n2)[i]) if i < len(str(n2)) else 0\n        diff = abs(d1 - d2)\n        sum += diff * (i + 1)\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # calculate the difference between the two numbers\n    diff = n1 - n2\n\n    # convert the difference to a string and split into a list of digits\n    digits_diff = list(str(diff))\n\n    # initialize the sum of per-digit difference to 0\n    sum_diff = 0\n\n    # iterate over the digits of the difference string and add them to the sum\n    for digit in digits_diff:\n        sum_diff += int(digit)\n\n    # return the sum of per-digit difference\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # Get the lengths of the numbers\n    num1_len = len(num1_str)\n    num2_len = len(num2_str)\n\n    # Create an empty list to store the differences\n    differences = []\n\n    # Loop through the digits of the two numbers\n    for i in range(max(num1_len, num2_len)):\n        # If one of the digits is not a digit, skip it\n        if num1_str[i].isdigit() and num2_str[i].isdigit():\n            # Get the digits as integers\n            digit1 = int(num1_str[i])\n            digit2 = int(num2_str[i])\n\n            # Calculate the absolute difference between the digits\n            diff = abs(digit1 - digit2)\n\n            # Add the difference to the list of differences\n            differences.append(diff)\n\n    # Calculate the sum of the differences\n    sum_of_differences = sum(differences)\n\n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function calculates the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the two numbers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # Calculate the length of the smaller number\n    min_len = min(len(str1), len(str2))\n    \n    # Calculate the sum of the per-digit difference between the two numbers\n    diff = 0\n    for i in range(min_len):\n        diff += abs(ord(str1[i]) - ord(str2[i]))\n    \n    # Add up any remaining differences (if any)\n    for i in range(min_len, len(str1)):\n        diff += abs(ord(str1[i]) - ord(str2[i]))\n    \n    for i in range(min_len, len(str2)):\n        diff += abs(ord(str1[i]) - ord(str2[i]))\n        \n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # Calculate the sum of per-digit differences\n    distance = 0\n    for i in range(len(s1)):\n        distance += abs(int(s1[i]) - int(s2[i]))\n    \n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert the integers to strings and remove any leading zeros\n    n1_str = str(n1).lstrip('0')\n    n2_str = str(n2).lstrip('0')\n\n    # initialize the sum to 0\n    sum_diff = 0\n\n    # iterate over the digits of the two numbers and calculate the difference\n    for i in range(max(len(n1_str), len(n2_str))):\n        # convert the i-th digit of both strings to integers\n        digit_n1 = int(n1_str[i]) if i < len(n1_str) else 0\n        digit_n2 = int(n2_str[i]) if i < len(n2_str) else 0\n\n        # calculate the per-digit difference\n        diff = abs(digit_n1 - digit_n2)\n\n        # add the difference to the sum\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # initialize sum to 0\n    total_sum = 0\n    \n    # loop over digits in s1 and s2\n    for i in range(len(s1)):\n        # calculate difference between digits\n        diff = abs(int(s1[i]) - int(s2[i]))\n        \n        # add to total sum\n        total_sum += diff\n    \n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # convert the two integers to lists of digits\n    digit_list1 = [int(digit) for digit in str(n1)]\n    digit_list2 = [int(digit) for digit in str(n2)]\n    # loop through the lists of digits and calculate the per-digit difference\n    for i in range(len(digit_list1)):\n        diff = digit_list1[i] - digit_list2[i]\n        sum += abs(diff)\n    # return the sum of all the differences\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # check if input is valid\n    if not isinstance(n1, int) or not isinstance(n2, int):\n        return \"Invalid input\"\n\n    # convert numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # initialize variables\n    distance = 0\n\n    # iterate over the digits of the numbers and calculate the difference\n    for i in range(len(n1_str)):\n        digit_diff = abs(ord(n1_str[i]) - ord(n2_str[i]))\n        distance += digit_diff\n\n    return distance"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start_index\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables to store the maximum sum and the current sublist sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Traverse through the list\n    for i in range(size):\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    elif size == 1:\n        return a[0]\n    else:\n        max_sum = a[0]\n        temp_sum = max_sum\n        for i in range(1, size):\n            temp_sum = max(temp_sum + a[i], a[i])\n            max_sum = max(max_sum, temp_sum)\n        return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes a list a and a size parameter.\n    It finds the sum of the largest contiguous sublist in the list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(len(a)):\n        if i < size:\n            curr_sum += a[i]\n        else:\n            curr_sum -= a[i-size]\n\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        \n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i < size-1:\n            current_sum -= a[i+1]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1 + test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert the tuples to lists and sort them\n    list_tup1 = sorted(list(test_tup1))\n    list_tup2 = sorted(list(test_tup2))\n\n    # find the union of the lists\n    union_list = list_tup1 + list_tup2\n\n    # convert the union list back to a tuple and output it\n    union_tup = tuple(union_list)\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Convert the tuples into sets to remove duplicates\n    tup1_set = set(test_tup1)\n    tup2_set = set(test_tup2)\n\n    # Combine the sets to get the union of the elements\n    union_set = tup1_set.union(tup2_set)\n\n    # Convert the set back into a tuple and sort it\n    union_tup = tuple(sorted(union_set))\n\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = sorted(set(test_tup1) | set(test_tup2))\n    print(union)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert tuples to sets to remove duplicates and sort them\n    set1 = sorted(set(test_tup1))\n    set2 = sorted(set(test_tup2))\n\n    # Union the sets and convert back to a list\n    union = sorted(list(set1 | set2))\n\n    # Print the union\n    print(\"Union of elements:\", union)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    union_list = sorted(union_set)\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # Convert the list to a set to remove duplicates\n    unique_set = set(combined_list)\n    # Convert the set back to a list\n    sorted_list = sorted(list(unique_set))\n    # Print the sorted list\n    print(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = test_tup1 | test_tup2\n    union_list = sorted(union_set)\n    return union_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    temp_len = 0\n    for i in range(len(lst)):\n        if i == len(lst)-1:\n            max_len = max(max_len, temp_len)\n            temp_len = 0\n        else:\n            temp_len += 1\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n        elif current_length < max_length:\n            current_length = 0\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_list = lst[i:j]\n            if len(sub_list) > max_length:\n                max_length = len(sub_list)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            maxLength = max(maxLength, len(lst[j]))  \n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    start = 0\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n            start = i\n\n    if current_length > max_length:\n        max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    This function takes a list of strings as input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            max_length = max(max_length, len(lst[i:j+1]))  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    sublist = []\n    for i in lst:\n        if i not in sublist:\n            sublist.append(i)\n            current_length += 1\n        else:\n            sublist = []\n            current_length = 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    temp_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > temp_length:\n            max_length = temp_length\n            temp_length = len(lst[i])\n        elif len(lst[i]) == temp_length:\n            temp_length += 1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        subList = lst[i]\n        for j in range(i+1, len(lst)):\n            subList.extend(lst[j])\n            maxLength = max(maxLength, len(subList))\n            subList = subList[:len(lst[i])]\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize the maximum length to be 0\n    max_len = 0\n\n    # loop through each sublist in the list\n    for i in range(len(lst)):\n        # initialize the length of the current sublist to be 0\n        current_len = 0\n        # loop through each element in the current sublist\n        for j in range(i, len(lst)):\n            # add the length of the element to the current length\n            current_len += 1\n            # if the current length is greater than the maximum length, update the maximum length\n            if current_len > max_len:\n                max_len = current_len\n\n    # return the maximum length\n    return max_len\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'(?<=\\D)\"(?:\\w+|\"\")*(?=\\D)'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'(?<!\\\\)\"(.*?)\"')\n    match = pattern.search(text)\n    values = []\n    if match:\n        value = match.group(1)\n        values.append(value)\n        while True:\n            match = pattern.search(text, match.end())\n            if not match:\n                break\n            value = match.group(1)\n            values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:\\\\.|[^\"])*\"'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define the regular expression pattern to match quotation marks\n    pattern = r'\"(\\w+)\"'\n    # Use the re.findall() method to find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Iterate through the matches and extract the values between quotation marks\n    values = [match[1] for match in matches]\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]+)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    This function extracts values between quotation marks from a string.\n    \"\"\"\n\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the regular expression pattern to find all occurrences of quotation marks in the text\n    matches = re.findall(pattern, text)\n\n    # Extract the values between the quotation marks using a list comprehension\n    values = [match.strip('\"') for match in matches]\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    # define the regular expression pattern to match values between quotation marks\n    pattern = r'\"([^\"]+)\"'\n    # use the re.findall() function to extract all matches in the text\n    matches = re.findall(pattern, text)\n    # return a list of all extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks.\n    '''\n    pattern = re.compile(r'(\".*?\")')\n    matches = pattern.findall(text)\n    values = []\n    for match in matches:\n        values.append(match[1:-1])\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=\\\")[\\w\\s]+?(?=\\\")\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n): \n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    # Initialize a counter to keep track of the count of pairs\n    count = 0\n    # Loop through the array and update the frequency of each element in the dictionary\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    # Loop through the dictionary and for each element, loop through the rest of the dictionary to count the number of pairs\n    for i in freq:\n        for j in freq:\n            # If the frequency of i is less than the frequency of j, and both elements are unequal, increment the counter\n            if i < j and freq[i] < freq[j] and i!= j:\n                count += 1\n    # Return the count of pairs found\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs\n    where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) "
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum variable to 0\n    total = 0\n    # Loop through the digits list and add each digit to the total\n    for digit in digits:\n        total += digit\n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum\n    sum = 0\n    # While the number is greater than zero\n    while n > 0:\n        # Add the last digit of the number to the sum\n        sum += n % 10\n        # Remove the last digit of the number\n        n //= 10\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Get the digits of the input number\n    digits = [int(d) for d in str(n)]\n    # Initialize the sum variable\n    sum = 0\n    # Loop through the digits and add them to the sum\n    for digit in digits:\n        sum += digit\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input to a string and remove any leading zeros\n    s = str(n)\n    s = s.lstrip('0')\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop over the digits in the string and add each to the sum\n    for digit in s:\n        sum += int(digit)\n\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Get the digits of the number\n    digits = list(str(n))\n\n    # Initialize a running sum variable\n    sum_ = 0\n\n    # Iterate over the digits and add them to the running sum\n    for digit in digits:\n        sum_ += int(digit)\n\n    # Return the final sum\n    return sum_"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through each digit in the number\n    while n > 0:\n        # Get the rightmost digit and add it to the sum\n        sum += n % 10\n        \n        # Remove the rightmost digit from the number\n        n = n // 10\n        \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Convert the integer to a string\n    num_str = str(n)\n    # Loop through each character in the string and add its value to the sum\n    for digit in num_str:\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    else:\n        # check if the first element is smaller than the second element\n        if list1[0] < list1[1]:\n            return False\n        else:\n            # call the function recursively on the rest of the list\n            return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted, otherwise False.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    return issort_list(list1[1:])"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    # Remove duplicates from the list\n    unique_nums = list(set(nums))\n    # Return a new list with only the unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for sublist in nums:\n        for num in sublist:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove duplicates from the first list\n    nums[0] = list(set(nums[0]))\n    \n    # Remove duplicates from the second list\n    nums[1] = list(set(nums[1]))\n    \n    # Remove duplicates from the third list\n    nums[2] = list(set(nums[2]))\n    \n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty dictionary to store the count of each number in the list\n    count_dict = {}\n\n    # loop through each list in the input list\n    for num in nums:\n        # check if the number is already in the dictionary\n        if num in count_dict:\n            # if it is, increment its count by 1\n            count_dict[num] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            count_dict[num] = 1\n\n    # create a new list to store the unique numbers\n    unique_nums = []\n\n    # loop through the dictionary to add unique numbers to the new list\n    for num, count in count_dict.items():\n        # if the count is 1, add the number to the new list\n        if count == 1:\n            unique_nums.append(num)\n\n    # return the new list of unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n\n    Parameters:\n    nums: A list of lists containing integers.\n\n    Returns:\n    A list containing unique integers from the input lists.\n    \"\"\"\n\n    # create an empty set to store unique integers\n    unique_set = set()\n\n    # iterate over each sublist in the input list\n    for sublist in nums:\n        # iterate over each integer in the sublist\n        for num in sublist:\n            # add the integer to the set if it's not already in it\n            if num not in unique_set:\n                unique_set.add(num)\n\n    # convert the set to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a dictionary to store the unique numbers and their indices\n    unique_dict = {}\n    \n    # loop through each list in the nums list\n    for i, num_list in enumerate(nums):\n        # loop through each number in the list and check if it already exists in the dictionary\n        for j, num in enumerate(num_list):\n            if num in unique_dict:\n                # if the number already exists, remove it from the list\n                num_list.pop(j)\n                # increment the index of the number to be removed by 1\n                j -= 1\n            else:\n                # if the number doesn't exist in the dictionary, add it to the dictionary with its index\n                unique_dict[num] = i\n                \n    # loop through each number in the dictionary and append its corresponding list index to the final list\n    final_list = []\n    for num in unique_dict:\n        final_list.append(unique_dict[num])\n        \n    return final_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_set = set()\n    # Iterate through each list in the given number of lists\n    for num_list in nums:\n        # Iterate through each number in the current list\n        for num in num_list:\n            # Check if the number is already in the set\n            if num not in unique_set:\n                # If not, add it to the set\n                unique_set.add(num)\n    # Convert the set to a list and return it\n    return list(unique_set)\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    \n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = list(set(list_data))\n    product = 1\n    \n    for num in unique_nums:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    # create a set of unique numbers in the list\n    unique_set = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a new list to store unique numbers\n    unique_nums = []\n    \n    # Loop through the original list\n    for num in list_data:\n        # Check if the number is already in the unique list\n        if num not in unique_nums:\n            # If it's not, add it to the list\n            unique_nums.append(num)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)  # create a set of unique numbers from the input list\n    product = 1  # initialize the product variable to 1\n    \n    for num in unique_numbers:\n        product *= num  # multiply the product by each unique number\n    \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * 3.14159 * r**2 + 2 * 3.14159 * r * h + 3.14159 * r**2 + 3.14159 * r * h\n    # Return the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r**2 + 2 * 3.14 * r * h + 2 * 3.14 * h**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Compute the surface area of the cylinder using the formula\n    # A = pi*r**2 + 2*pi*h*r\n    A = math.pi * r**2 + 2 * math.pi * h * r\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*(r**2)+2*3.14*(r**2)*h\n    print(\"The surface area of the cylinder is\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * (3.14 * r**2) + 2 * (3.14 * r * h) + 2 * (3.14 * h**2)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function calculates the surface area of a cylinder using the formula:\n    A = \u03c0r\u00b2h\n    where A is the surface area of the cylinder, r is the radius of the cylinder, and h is its height.\n    '''\n    import math\n    return math.pi * r**2 * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) >= len(B):\n        if A in B:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not B: # B is empty\n        return True\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = j\n            j = 0\n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # check whether the length of list A is greater than or equal to B's length\n    if len(A) < len(B):\n        return False\n\n    # check if all elements in B are present in A\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function checks whether the first list is a sublist of the second list or not.\n    \"\"\"\n\n    # Check if the second list is a sublist of the first list\n    if len(B) > len(A):\n        return False\n    elif len(B) == len(A):\n        if B == A:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(A) - len(B) + 1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if B is a sublist of A\n    for i in A:\n        if i in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list is a sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A):\n        if A[i] == B[j]:\n            j += 1\n            i += 1\n        elif j > 0:\n            j = i + 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B and checks whether the second list is a sublist of the first list or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n            \n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input number into a list of digits\n    num_list = [int(d) for d in str(n)]\n\n    # Find the last digit of the factorial of the number by multiplying all the digits together and taking the last digit\n    factorial_last_digit = num_list[-1] * num_list[-2] * num_list[-3] * num_list[-4] * num_list[-5]\n    \n    # Convert the last digit of the factorial back into a string\n    factorial_last_digit_str = str(factorial_last_digit)\n    \n    # Find the last digit of the factorial and return it as the output\n    return factorial_last_digit_str[-1]"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes an integer input n and returns the last digit in factorial of n.\n    '''\n    # Initialize the last digit of the factorial to 0\n    last_digit = 0\n    \n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize variable to store last digit of factorial\n    last_digit = 0\n    # Loop through each digit of the factorial\n    while n > 0:\n        # Get the last digit of the current number\n        last_digit = n % 10\n        # Divide the number by 10 to remove the last digit\n        n = n // 10\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the last digit in the factorial\n    last_digit = 0\n\n    # Initialize a variable to store the factorial of n\n    factorial = 1\n\n    # Loop through the digits in n\n    for i in range(1, n+1):\n        # Calculate the factorial of each digit and add it to the running total\n        factorial *= i\n\n    # Calculate the last digit in the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit in the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Calculate the last digit of factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit of factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(n, 0, -1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    # Convert the given number to string\n    num_str = str(n)\n\n    # Convert the string to integer\n    num_int = int(num_str)\n\n    # Find the last digit of the integer factorial\n    factorial = 1\n    for i in range(num_int):\n        factorial *= i + 1\n\n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Using integer division to find the last digit in the factorial\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n\n    # Extracting the last digit from the factorial\n    last_digit = int(str(factorial)[-1])\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Concatenate the three lists into a single list\n    interleaved_list = list1 + list2 + list3\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Ensure that all input lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All input lists must have the same length.\")\n\n    # Initialize an empty list to hold the interleaved list\n    interleaved = []\n\n    # Loop through each element in the input lists\n    for i in range(len(list1)):\n        # Append the i-th element from each list to the interleaved list\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"All lists must have the same length.\")\n        return\n    \n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Iterate through each element in the list1\n    for i in range(len(list1)):\n        # Append the i-th element from each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    # Loop through the lists and add the elements one by one\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in 3 lists of the same length and returns a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1) + len(list2) + len(list3):\n        if i < len(list1):\n            result.append(list1[i])\n            i += 1\n        elif i < len(list1) + len(list2):\n            result.append(list2[i - len(list1)])\n            i += 1\n        else:\n            result.append(list3[i - len(list1) - len(list2)])\n            i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            flat_list.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            flat_list.append(list2[j])\n            j += 1\n        else:\n            flat_list.append(list3[k])\n            k += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    \n    # loop through each element in each list\n    for i in range(len(list1)):\n        # add the i-th element from list1 to the result\n        result.append(list1[i])\n        \n        # add the i-th element from list2 to the result\n        result.append(list2[i])\n        \n        # add the i-th element from list3 to the result\n        result.append(list3[i])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): A list of integers.\n        list2 (list): A list of integers.\n        list3 (list): A list of integers.\n\n    Returns:\n        list: A single flat list containing all the integers from the three input lists interleaved.\n    \"\"\"\n    # Find the maximum length of the input lists\n    max_length = max(max(len(list1), len(list2)), len(list3))\n\n    # Create an empty list to hold the interleaved integers\n    interleaved_list = []\n\n    # Loop through each index of the input lists\n    for i in range(max_length):\n        # Add the element at index i from list1 to the interleaved list\n        if i < len(list1):\n            interleaved_list.append(list1[i])\n\n        # Add the element at index i from list2 to the interleaved list\n        if i < len(list2):\n            interleaved_list.append(list2[i])\n\n        # Add the element at index i from list3 to the interleaved list\n        if i < len(list3):\n            interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    i = 0\n    j = 0\n    k = 0\n    result = []\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through each element in the first tuple\n    for element1 in test_tup1:\n        # Check if the element exists in the second tuple\n        if element1 not in test_tup2:\n            # If it doesn't, add it to the dissimilar list\n            dissimilar_list.append(element1)\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Use set() to remove duplicates and convert the tuples to lists\n    list1 = list(set(test_tup1))\n    list2 = list(set(test_tup2))\n    \n    # Find the common elements in the two lists\n    common = list(set(list1) & set(list2))\n    \n    # Find the unique elements in list1 that are not in list2\n    dissimilar1 = list(set(list1) - set(list2))\n    \n    # Find the unique elements in list2 that are not in list1\n    dissimilar2 = list(set(list2) - set(list1))\n    \n    # Print the dissimilar elements\n    print(\"Dissimilar elements in the first tuple:\")\n    for element in dissimilar1:\n        print(element)\n    print(\"\\n\")\n    print(\"Dissimilar elements in the second tuple:\")\n    for element in dissimilar2:\n        print(element)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = set(test_tup1) ^ set(test_tup2)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # get the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # iterate through the tuples\n    for i in range(len1):\n        # if the element at the current index is not equal, append it to the list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    # iterate through the second tuple\n    for j in range(len2):\n        # if the element at the current index is not equal, append it to the list\n        if test_tup2[j] not in dissimilar_list:\n            dissimilar_list.append(test_tup2[j])\n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # Add the dissimilar element to the list\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a dictionary to store the frequency of each element in the two tuples\n    freq_dict = {}\n    for element in test_tup1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    # iterate through the second tuple and subtract the frequency of each element from the first tuple's frequency dictionary\n    for element in test_tup2:\n        if element in freq_dict:\n            freq_dict[element] -= 1\n    \n    # create a list to store the dissimilar elements\n    dissimilar_list = []\n    # iterate through the frequency dictionary and add elements with a frequency greater than 0 to the dissimilar_list\n    for element in freq_dict:\n        if freq_dict[element] > 0:\n            dissimilar_list.append(element)\n    \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through each element in the first tuple\n    for elem1 in test_tup1:\n        # Check if the element exists in the second tuple\n        if elem1 not in test_tup2:\n            # If it doesn't, add it to the dissimilar set\n            dissimilar_set.add(elem1)\n\n    # Loop through each element in the second tuple\n    for elem2 in test_tup2:\n        # Check if the element exists in the first tuple\n        if elem2 not in test_tup1:\n            # If it doesn't, add it to the dissimilar set\n            dissimilar_set.add(elem2)\n\n    # Return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for item in test_tuple:\n        if isinstance(item, (tuple, list)):\n            even_ele(item, even_fnc)\n        else:\n            if even_fnc(item):\n                test_tuple.remove(item)\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Loop through each element in the tuple\n    for elem in test_tuple: \n        # If the element is a tuple, call the even_fnc function recursively\n        if isinstance(elem, tuple): \n            even_ele(elem, even_fnc) \n        # If the element is a list, call the even_fnc function recursively\n        elif isinstance(elem, list): \n            even_ele(elem, even_fnc) \n        # If the element is an integer, apply the even_fnc function to it and add it to the result\n        elif isinstance(elem, int): \n            even_fnc(elem)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            even_elements.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_elements.append(item)\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(x):\n        return x % 2 == 0\n\n    # Check if the input is a tuple\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    # Check if the input contains only tuples\n    if not all(isinstance(x, tuple) for x in test_tuple):\n        raise TypeError(\"All elements in the input must be tuples\")\n\n    # Recursively apply the even_fnc to each element in the tuple\n    new_tuple = tuple(even_fnc(x) for x in test_tuple)\n\n    # Remove uneven elements\n    new_tuple = tuple(x for x in new_tuple if is_even(x))\n\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.extend(even_ele(i, even_fnc))\n        else:\n            new_tuple.append(even_fnc(i))\n    return new_tuple\n\ndef is_odd(x):\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x): \n        return even_fnc(x)\n    return list(filter(lambda x: isinstance(x, tuple) and all(map(lambda y: is_even(y), x)), test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_list.append(even_fnc(item))\n        else:\n            new_list.append(item)\n    return new_list\n\ndef remove_unequal(item):\n    \"\"\"\n    Remove elements with unequal values.\n    \"\"\"\n    if len(item) == len(set(item)):\n        return item\n    else:\n        return None\n\nmy_tuple = ((1, 2, 3), (2, 3, 4), (1, 2, 3, 4))\nprint(even_ele(my_tuple, remove_unequal))\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(x):\n        return x % 2 == 0\n\n    filtered_tuple = tuple(x for x in test_tuple if is_even(even_fnc(x)))\n\n    return filtered_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes two arguments: the base edge of the square pyramid and its height.\n    It then calculates and returns the surface area of the pyramid.\n    '''\n\n    # Calculate the area of each side of the pyramid\n    side_area = 0.5 * base * height\n    top_area = 0.5 * base * height\n    \n    # Calculate the surface area of the pyramid by adding up the areas of the sides and the top\n    surface_area = side_area + top_area\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s + 2 * b * s ** 2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * b * s + 2 * b * b + 2 * s * s \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * b * s + 2 * (b + s) * (s - b) + 2 * b * (b + s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the total area of the pyramid\n    total_area = (b*s)**2\n    # Calculate the surface area of each square\n    side_area = b**2\n    # Calculate the surface area of the pyramid\n    pyramid_area = 2 * side_area + total_area\n    # Return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of a square pyramid using Heron's formula\n    area = (b * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s): \n    '''\n    This function calculates the surface area of a square pyramid.\n    '''\n    return 2 * (b + s) * s + 6 * b * s + (s * s) * (2 * b + s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula to find the surface area of a square pyramid\n    area = (b * s) / 2\n    # Return the surface area\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * b\n    print(\"The surface area of the square pyramid is:\",area)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Calculate the height of the pyramid\n    h = s/2\n    \n    # Calculate the area of each face of the pyramid\n    a1 = b * s\n    a2 = b * h\n    a3 = b * h\n    \n    # Calculate the surface area of the pyramid\n    surface_area = 2*(a1 + a2 + a3)\n    \n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty.\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    catalan = 0\n    for i in range(1, n+1):\n        catalan += binomial(2*n, i)/(factorial(2*n)*factorial(i))\n    return catalan\n\ndef binomial(n, k):\n    \"\"\"\n    Returns the binomial coefficient C(n, k).\n    \"\"\"\n    if k > n-k:\n        k = n-k\n    if k < 0 or k > n:\n        return 0\n    else:\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "0, 1, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 219720, 797162, 2985987, 11219280, 45304947, 176330660, 670587752, 2591752048, 9739355240, 38065537920, 146666476800, 590493473920, 2316717106304, 8469638235404, 31344343084160, 118444685665840, 484242061670400, 1988355921084160, 7603186464220416, 29258663801953632, 108293488973465088, 427488328401024000, 1524006117752883200, 6041526368997881600, 23740063687323089920, 86206896551770800640, 328297501103367111680, 1231797677275456000000, 5012585720884773324800, 19073045405918087690240, 70141183500681190650880, 277603314065276281807872, 1034006064358967844280320, 4025370085279942846617600, 13736007929468120193710592, 55290290791763402958368768, 216439840737095516172323072, 805411372157300305641662464, 3005361739669924239300410112, 11524174029196165470440866304, 45912286473916876459416612096, 179998394158163627809603919360, 660413361865860050954257387520, 2553324625526396449979488972800, 9553483792769021489791336463360, 3737"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number.\n\n    Parameters:\n    n (int): the nth catalan number to be computed.\n\n    Returns:\n    int: the nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) / n\n\nn = int(input(\"Enter a number for the nth catalan number: \"))\nprint(\"The\", n, \"th catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number using the formula given by\n    https://en.wikipedia.org/wiki/Catalan_number#Mathematical_formula\n    \"\"\"\n    catalan = 1\n    for i in range(1, n+1):\n        catalan = (2*i-1) * catalan / (i+1)\n    return catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*catalan_number(n-1) // (n+1)\n\nprint(catalan_number(0))  # 1\nprint(catalan_number(1))  # 1\nprint(catalan_number(2))  # 2\nprint(catalan_number(3))  # 5\nprint(catalan_number(4))  # 14\nprint(catalan_number(5))  # 42"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns nth catalan number.\n\n    Args:\n        num (int): The value of n.\n\n    Returns:\n        int: The nth catalan number.\n    \"\"\"\n    # Initialize the Catalan number list\n    catalan_list = [1]\n    # Calculate the first two Catalan numbers\n    catalan_list.append(1)\n    catalan_list.append(1)\n    # Loop through the remaining numbers of the sequence\n    for i in range(2, num+1):\n        # Calculate the Catalan number for i\n        catalan_num = 0\n        for j in range(i):\n            catalan_num += catalan_list[j] * catalan_list[i-j-1]\n        # Add the Catalan number to the list\n        catalan_list.append(catalan_num)\n    # Return the nth Catalan number\n    return catalan_list[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num > 1:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number using the formula:\n    C(n) = (2n+1)!/(n+1)!\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\n\nprint(\"The value of C({}) is {}\".format(n, catalan_number(n)))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula:\n\n    C(n) = (2n)! / (n! * (n-1)!), where n is an integer.\n\n    \"\"\"\n    catalan_numbers = [0] * (n+1)\n    catalan_numbers[0] = 1\n    catalan_numbers[1] = 1\n\n    for i in range(2, n+1):\n        catalan_numbers[i] = (2*i) * catalan_numbers[i-1]\n        for j in range(i):\n            catalan_numbers[i] -= catalan_numbers[j] * catalan_numbers[i-j-1]\n\n    return catalan_numbers[-1]\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        adverb_text = text[match.start():match.end()]\n        print(f'Adverb: {adverb_text}, Position: {match.start()}')\n        break\n    else:\n        print('No adverbs found.')\n\ntext = 'The quick brown fox jumped over the lazy dog. The lazy dog is a good dog.'\nfind_adverbs(text)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the pattern for finding adverbs ending with ly\n    pattern = r'\\b(er|est|ed|ing|s)$'\n\n    # Search for all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Print the adverbs and their positions\n    for i, match in enumerate(matches):\n        print(f'{match} at position {i+1}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\bly\\b', text)]\n    return adverbs, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        adverb = matches[0]\n        positions = [m.start() for m in re.finditer(pattern, text)]\n        return adverb, positions\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(s[uue]+ly)\\b'\n    adverbs = re.findall(pattern, text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(\\w*)ly\\b'\n    matches = re.finditer(pattern, text)\n    for i, match in enumerate(matches):\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end]\n        print(f'Adverb found at position {start}: \"{adverb}\"')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with 'ly'\n    pattern = re.compile(r'\\bly\\b')\n    # Search for all occurrences of the pattern in the text\n    matches = pattern.findall(text)\n    # Initialize an empty list to store the adverb positions\n    positions = []\n    # Iterate through the matches and append their positions to the list\n    for match in matches:\n        positions.append(text.index(match))\n    # Return the list of positions of adverbs ending with 'ly'\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b[A-Z]\\w+ly\\b'\n    \n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n    \n    # Iterate through all the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n        \n    # Return a dictionary with the adverb and its positions\n    return {'adverb': matches[0], 'positions': positions}"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    adverbs = []\n    pattern = r'\\bly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end].lower()\n        adverbs.append((adverb, start, end))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b\\w*ly\\b'\n    \n    # use the re.findall() function to find all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    # iterate over the matches and store the positions of the adverbs in a list\n    adverbs_positions = []\n    for match in matches:\n        # split the match into words and convert them to integers\n        words = [int(word) for word in match.split()]\n        # find the maximum position in the words list\n        max_position = max(words)\n        # add the maximum position to the adverbs_positions list\n        adverbs_positions.append(max_position)\n    \n    # return the list of adverbs positions\n    return adverbs_positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    min_heap = []\n\n    # Loop through the items and add them to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the heap size exceeds n, remove the minimum item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items from the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n\n    # Iterate through the items and add them to the heap if their price is lower than the price of the current minimum\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        elif item[1] < min_heap[0][1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items in the heap\n    return heapq.nlargest(n, min_heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # Return the n most expensive items in the dataset\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Heapify the given dataset\n    heap = [(-price, item) for item, price in items]\n    heapq.heapify(heap)\n    \n    # Find the n most expensive items\n    result = []\n    while len(result) < n:\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -items[i])\n\n    # Update the min-heap with the remaining items\n    for i in range(n, len(items)):\n        if items[i] < -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -items[i])\n\n    # Extract the n most expensive items from the min-heap\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items in the given list.\n    The list is assumed to be sorted in descending order based on their value.\n    '''\n    # Initialize a min-heap of size n to store the n most expensive items\n    heap = []\n    # Loop through the items in the list\n    for item in items:\n        # If the size of the heap is less than n, insert the item into the heap\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        # If the size of the heap is equal to n, check if the item is less than the smallest item in the heap\n        elif item < heap[0]:\n            # If yes, replace the smallest item in the heap with the new item\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # Return the n most expensive items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    max_heap = []\n    min_heap = []\n    total_price = 0\n\n    # Iterate through the items and add them to the max and min heaps\n    for item in items:\n        heapq.heappush(max_heap, -item[1])\n        heapq.heappush(min_heap, item[1])\n\n    # Iterate through the max heaps to find the n most expensive items\n    while len(heap) < n:\n        if len(max_heap) > 0:\n            item = heapq.heappop(max_heap)\n            heapq.heappush(heap, -item)\n        else:\n            break\n\n    # Calculate the total price of the n most expensive items\n    for i in range(n):\n        total_price += -heap[i]\n\n    # Return the total price and the n most expensive items\n    return total_price, [items[i][0] for i in range(n)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Divide the list in two parts at the given index\n    first_half = l[:n]\n    second_half = l[n:]\n    # Concatenate the two parts\n    new_list = first_half + second_half\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"Error: List length should be greater than or equal to the specified index.\"\n    else:\n        # splitting the list at the nth element\n        first_part = l[:n]\n        second_part = l[n:]\n        # adding the first part to the end of the second part\n        result = second_part + first_part\n        return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    left_part = l[:n]\n    right_part = l[n:]\n    \n    # Add the left part to the end of the right part\n    new_list = left_part + right_part\n    \n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        raise ValueError(\"The value of n must be greater than 0\")\n    elif n >= len(l):\n        raise ValueError(\"The value of n must be less than the length of the list\")\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return [l[0], *l[1:]]\n    else:\n        return split_Arr(l[1:], n-1) + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [l[0]]\n    else:\n        mid = n // 2\n        return split_Arr(l[:mid] + [l[n-1]], n-mid)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid index.\"\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is greater than the nth element\n    if len(l) > n:\n        # split the list at the nth element\n        mid = len(l)//2\n        first_part = l[:mid]\n        second_part = l[mid:]\n        \n        # add the first part to the end of the second part\n        l = second_part + first_part\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Calculate the index of the first element after the nth element\n    i = n - 1\n    # Create a new list to hold the result\n    result = []\n    # Loop over the original list\n    while i < len(l):\n        # Append the current element to the result list\n        result.append(l[i])\n        # Move to the next element in the original list\n        i += 1\n    # Add the first n elements from the original list to the result list\n    result.extend(l[:n])\n    # Return the result list\n    return result"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n\n    :param lst: list to be converted to tuple\n    :return: tuple of list elements\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Convert list to tuple\n    lst_tup = tuple(listx)\n    # Return the tuple\n    return lst_tup"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    # Convert list to tuple\n    tup = tuple(listx)\n    return tup"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    min_num = nums[0]\n    max_num = nums[0]\n    \n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    elif len(nums) == 2:\n        return max(nums[0], nums[1]) - min(nums[0], nums[1])\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        return None\n    \n    min_num = min(nums)\n    max_num = max(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables to store the smallest and largest values\n    smallest = nums[0]\n    largest = nums[0]\n    \n    # Loop through the list and update the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    # Return the difference between the smallest and largest values\n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == a**2 + i**2:\n            squares.append(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    squares = []\n\n    for num in range(a, b+1):\n        square = int(num ** 0.5)\n        if num == square ** 2:\n            squares.append(square)\n\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a**0.5)+1, b+1):\n        if i*i == a or i*i == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if not (isinstance(a, int) and isinstance(b, int) and a > 0 and b >= 0):\n        return \"Both arguments must be positive integers.\"\n    \n    squares = []\n    for i in range(a, b+1):\n        if math.isqrt(i) ** 2 == i:\n            squares.append(i)\n    \n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of all the perfect squares between them.\n    '''\n    # Create an empty list to store the perfect squares\n    perfect_squares_list = []\n    # Loop through each integer between a and b\n    for num in range(a, b+1):\n        # Check if the square root of the current number is an integer\n        if int(num**0.5) ** 2 == num:\n            # If it is, add it to the list of perfect squares\n            perfect_squares_list.append(num)\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    perfect_square_list = []\n    for i in range(a, b+1):\n        if i**2 == a:\n            perfect_square_list.append(i)\n        elif i**2 == b:\n            perfect_square_list.append(i)\n        else:\n            pass\n    return perfect_square_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize empty list to store perfect squares\n    perfect_squares = []\n    \n    # loop through all numbers between a and b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        square = num ** 0.5\n        if int(square) ** 2 == num:\n            # add perfect square to list\n            perfect_squares.append(square)\n    \n    # return list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    result = []\n    for i in range(a, b+1):\n        square = i * i\n        if square == i**2 and square.is_integer():\n            result.append(square)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if num ** 0.5 == int(num ** 0.5):\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Check if a is less than b\n    if a < b:\n        a, b = b, a\n\n    # Find the perfect square of a\n    perfect_square_a = a * a\n\n    # Iterate from a+1 to b\n    for i in range(a+1, b):\n        # Check if i is a perfect square\n        square = i * i\n        if square == perfect_square_a:\n            return i\n\n    # If no perfect square is found, return None\n    return None"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates (r, theta) to rectangular coordinates.\n\n    Parameters:\n    r (float): the radius\n    theta (float): the angle in radians\n\n    Returns:\n    (float, float): the rectangular coordinates (x, y)\n\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x ** 2 + y ** 2)\n    theta = cmath.phase(x + y * 1j)\n    return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radial component of the vector.\n    theta (float): The angle (in radians) of the vector.\n\n    Returns:\n    x (float): The horizontal component of the vector.\n    y (float): The vertical component of the vector.\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    # calculate the rectangular coordinates\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list is empty\n    if len(newList) == 0:\n        return newList\n\n    # Get the first and last elements of the list\n    firstElement = newList[0]\n    lastElement = newList[-1]\n\n    # Interchange the first and last elements\n    newList[0] = lastElement\n    newList[-1] = firstElement\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has at least 2 elements\n    if length >= 2:\n        # Interchange the first and last elements\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements to swap them.\")\n    else:\n        # swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n        # print the new list\n        print(\"The new list is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        return \"Error: List must have at least 2 elements\"\n    # Get the index of the last element\n    lastIndex = len(newList) - 1\n    # Swap the first and last elements\n    newList[0], newList[lastIndex] = newList[lastIndex], newList[0]\n    # Print the modified list\n    print(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n:\n        return 0\n    elif k==0 or k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    sum = 0\n\n    for i in range(1,n+1):\n        sum += i*binomial_Coeff(n-i,k-1)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two arguments, n and k, which represent the number of terms in the binomial series and the number of terms to be included in the series respectively.\n    It returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize variables to store the sum and product of consecutive binomial co-efficients\n    sum_binomial_coeff = 0\n    product_binomial_coeff = 1\n\n    # Calculate the sum of the first n terms of the binomial series\n    for i in range(n):\n        sum_binomial_coeff += binomial_coefficient(n, i)\n\n    # Calculate the product of the first k terms of the binomial series\n    for j in range(k):\n        product_binomial_coeff *= binomial_coefficient(n, j)\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum_binomial_coeff + product_binomial_coeff\n\n\ndef binomial_coefficient(n, k):\n    '''\n    This function takes two arguments, n and k, which represent the number of terms in the binomial series and the number of terms to be included in the series respectively.\n    It returns the binomial coefficient of n choose k.\n    '''\n    # Check if n is less than k, or if k is greater than n // 2\n    if n < k or k > n // 2:\n        return 0\n\n    # Initialize variables to store the binomial coefficient and the product of binomial coefficients\n    binomial_coeff = 1\n    product_binomial_coeff = 1\n\n    # Calculate the binomial coefficient by multiplying the product of the first k terms of the binomial series and the product of the last n-k terms of the binomial series\n    for i in range(k):\n        binomial_coeff *= (n - i)\n        product_binomial_coeff *= i\n\n    for j in range(1, n - k + 1):\n        binomial_coeff *= j\n        product_binomial_coeff *= (n - j)\n\n    # Return the binomial coefficient\n    return binomial_coeff * product_binomial_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    num = 1\n    for i in range(k):\n        num = num * (n-i) / (i+1)\n    return num"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k or k < 0 or k > n:\n        return \"Invalid input.\"\n\n    if n == k or k == 0:\n        return 1\n\n    if k > n-k:\n        k = n-k\n\n    if k == 1:\n        return n\n\n    fact_n = 1\n    fact_k = 1\n    fact_n_k = 1\n\n    for i in range(1, n+1):\n        fact_n *= i\n\n    for i in range(1, k+1):\n        fact_k *= i\n\n    for i in range(1, n-k+1):\n        fact_n_k *= i\n\n    return fact_n // (fact_k * fact_n_k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_prod = 0\n    for i in range(1,n+1):\n        sum_prod += i*(n-i+1)/k\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n // 2:\n        k = n - k\n    if k < 0:\n        k = 0\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n - 1, k - 1) * (n - k + 1) // k"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    \n    # check if k is greater than n\n    if k > n:\n        return 0\n    \n    # initialize sum to 0\n    sum = 0\n    \n    # calculate product of binomial co-efficients\n    for i in range(1, k+1):\n        binomial = (n+1)/(k+i-1) * (k-i+1)/i\n        sum += binomial\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k, n+1):\n        sum += i * binomial_Coeff(n-1, k-1)\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # use regular expression to match leading zeroes\n    pattern = r'^0+'\n    # replace leading zeroes with empty string\n    ip = re.sub(pattern, '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', r'\\1.\\2.\\3.\\4', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # use regex to remove leading zeroes\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    match = re.match(pattern, ip)\n    if match:\n        return match.group(1)\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n\n    # Regular expression to match any leading zeroes in the ip address\n    leading_zero = re.compile(r'^0+')\n\n    # Remove leading zeroes from the ip address\n    ip = leading_zero.sub('', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each part of the IP address\n    ip_parts = ip.split('.')\n    ip_parts = [re.sub(r'^(0+)', '', part) for part in ip_parts]\n    # Join the parts of the IP address with periods\n    return '.'.join(ip_parts)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})(\\.0+)?$', r'\\1.\\2.\\3.\\4', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match leading zeroes\n    pattern = r'^(?:\\d{1,3}\\.){3}\\d{1,3}$'\n    # Match the ip address with the pattern and remove the leading zeroes\n    result = re.sub(pattern, lambda m: m.group(0).lstrip('0'), ip)\n    return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Remove leading zeroes from the IP address using regular expressions\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.0', '', ip)\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0:\n        diff = even - odd\n    else:\n        diff = odd - even\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 == 1 and odd_num is None:\n            odd_num = num\n    \n    if even_num is None or odd_num is None:\n        return \"No even or odd numbers found in the list.\"\n    \n    return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd numbers of the list.\n    '''\n    even = lst[0]\n    odd = lst[1]\n    \n    if even % 2 == 0 and odd % 2 == 1:\n        return even - odd\n    else:\n        return \"List does not contain even and odd numbers\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even and first odd numbers in the list\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and (even_num is None or num < even_num):\n            even_num = num\n        elif num % 2!= 0 and (odd_num is None or num < odd_num):\n            odd_num = num\n    \n    # Calculate the difference of even and odd numbers\n    diff = None\n    if even_num is not None and odd_num is not None:\n        diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = [num for num in list1 if num % 2 == 0][0]\n    odd_num = [num for num in list1 if num % 2!= 0][0]\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_num += list1[i]\n        else:\n            odd_num += list1[i]\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize two variables to store the first even and first odd numbers\n    first_even = None\n    first_odd = None\n\n    # Loop through the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            elif first_even!= num:\n                break\n        else:\n            if first_odd is None:\n                first_odd = num\n            elif first_odd!= num:\n                break\n\n    # Calculate the difference of the first even and first odd numbers\n    diff = None\n    if first_even is not None and first_odd is not None:\n        diff = first_even - first_odd\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = [x for x in list1 if x % 2 == 0][0]\n    odd_num = [x for x in list1 if x % 2!= 0][0]\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Finding the first even and first odd numbers in the list\n    even = [num for num in list1 if num % 2 == 0][0]\n    odd = [num for num in list1 if num % 2 == 1][0]\n\n    # Finding the difference of even and odd numbers\n    diff = even - odd\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Loop through the list\n    for i in range(len(list1)):\n        # If the number is even\n        if list1[i] % 2 == 0:\n            # Find the first odd number in the list and return the difference\n            first_odd = next(num for num in list1[i+1:] if num % 2!= 0)\n            return list1[i] - first_odd"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert input strings to binary\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n\n    # Initialize variables\n    count = 0\n    i = 0\n    j = len(bin2) - 1\n\n    # Compare binary strings\n    while i < len(bin1) and j >= 0:\n        if bin1[i]!= bin2[j]:\n            count += 1\n            # Swap characters\n            bin1[i], bin1[j] = bin1[j], bin1[i]\n            bin2[i], bin2[j] = bin2[j], bin2[i]\n            i += 1\n            j -= 1\n\n    # Return count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert\n    one binary number to another.\n    \"\"\"\n    if len(str1)!= len(str2):\n        return -1\n    swap_count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            swap_count += 1\n            if swap_count % 2 == 0:\n                str1[i], str2[i] = str2[i], str1[i]\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for counting swaps\n    count_swap = 0\n    count_ones = 0\n\n    # Initialize a boolean array to keep track of visited numbers\n    visited = [False] * (num1+1)\n\n    # Iterate through binary numbers\n    for i in range(1, num1+1):\n        # Check if number has been visited\n        if visited[i]:\n            continue\n\n        # Mark number as visited\n        visited[i] = True\n\n        # Count number of ones in the number\n        count_ones = 0\n        while i > 0:\n            count_ones += (i % 2)\n            i //= 2\n\n        # Check if the number can be converted to the other binary number\n        if count_ones == count_ones2:\n            # Update count_swap if required\n            if count_ones == num1:\n                count_swap = min(count_swap, i - 1)\n            elif count_ones == num2:\n                count_swap = min(count_swap, num1 - i)\n            else:\n                count_swap = min(count_swap, num1 - num2 + (i - num2 - 1))\n\n    return count_swap"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0]*n for i in range(n+1)]\n    min_swaps = n\n    \n    for i in range(n):\n        for j in range(n):\n            if str1[j] == str2[i]:\n                dp[i+1][j+1] = dp[i][j]\n            else:\n                dp[i+1][j+1] = 1 + min(dp[i+1][j], dp[i][j+1])\n                \n        if dp[n][i] == 1 + min(dp[n-1][i], dp[n][i-1]):\n            min_swaps = min(min_swaps, n-i)\n            \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n\n    # Initialize an array of zeros\n    arr = [0] * n\n\n    # Initialize an array of zeros\n    dp = [0] * (n + 1)\n\n    # Fill the array of zeros\n    for i in range(n):\n        arr[i] = int(str1[i])\n\n    # Fill the dp array\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + arr[i - 1]\n\n    # Initialize variables\n    swap_needed = 0\n    index1 = 0\n    index2 = n - 1\n\n    # Iterate through the dp array and swap elements if necessary\n    while index1 >= 0 and index2 < n:\n        if arr[index1] > arr[index2]:\n            swap_needed += 1\n            arr[index1], arr[index2] = arr[index2], arr[index1]\n            index1 -= 1\n            index2 += 1\n        else:\n            index1 -= 1\n\n    return swap_needed"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    if len(str1)!= len(str2):\n        return \"Invalid input strings\"\n    # Initialize a dictionary to store the frequency of each character in str1\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Initialize a dictionary to store the frequency of each character in str2\n    temp_freq = {}\n    for char in str2:\n        if char in temp_freq:\n            temp_freq[char] += 1\n        else:\n            temp_freq[char] = 1\n    \n    # Find the minimum number of swaps required to convert str1 to str2\n    min_swaps = 0\n    for key, value in freq.items():\n        if value > temp_freq[key]:\n            min_swaps += value - temp_freq[key]\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary strings into lists of bits\n    bits1 = [int(bit) for bit in str1]\n    bits2 = [int(bit) for bit in str2]\n    \n    # compare the two lists and count the number of swaps required to convert bits1 to bits2\n    swaps = 0\n    for i in range(len(bits1)):\n        if bits1[i]!= bits2[i]:\n            swaps += 1\n            bits2[i], bits1[i] = bits1[i], bits2[i]\n    \n    # return the number of swaps required to convert bits1 to bits2\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    swaps = 0\n    \n    # find the length of the shorter string\n    if n1 < n2:\n        n1, n2 = n2, n1\n        str1, str2 = str2, str1\n    \n    # find the length of the strings that will be swapped\n    max_length = n1 - n2\n    \n    # iterate through all possible swaps\n    for i in range(max_length):\n        # check if the swapped bits are different\n        if str1[i]!= str2[i]:\n            # swap the bits and update the swap count\n            str1 = str1[:i] + '0' + str1[i+1:]\n            str2 = str2[:i] + '1' + str2[i+1:]\n            swaps += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Get the lengths of the two binary strings\n    n1, n2 = len(str1), len(str2)\n\n    # Initialize the swap count to zero\n    swap_count = 0\n\n    # Initialize the swap matrix\n    swap_matrix = [[0]*(n2+1) for i in range(n1+1)]\n\n    # Fill the swap matrix\n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if str1[i-1] == str2[j-1]:\n                swap_matrix[i][j] = swap_matrix[i-1][j-1]\n            else:\n                swap_matrix[i][j] = min(swap_matrix[i-1][j], swap_matrix[i][j-1], swap_matrix[i-1][j-1]) + 1\n\n    # Find the minimum number of swaps required\n    min_swaps = swap_matrix[n1][n2]\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum number of swaps\n    min_swaps = float('inf')\n\n    # Loop through the bits of each number\n    for i in range(32):\n        # Check if both bits are 1 or 0\n        if (num1 & 1)!= (num2 & 1):\n            # If not, swap the corresponding bits and increment the number of swaps\n            if num1 & 1 == 1:\n                num1 ^= (1 << i)\n            else:\n                num2 ^= (1 << i)\n            min_swaps = min(min_swaps, i)\n        # Shift the numbers one bit to the right\n        num1 >>= 1\n        num2 >>= 1\n\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Initialize the size variable to 0\n    size = 0\n\n    # Iterate through the tuple elements and add their size to the size variable\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n\n    # Return the size variable\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        total_size += sys.getsizeof(tuple)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size of the total tuple in bytes.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        total_size += sys.getsizeof(tuple)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_size = 0\n    for i in range(len(tuple_list)):\n        byte_size += sys.getsizeof(tuple_list[i])\n    return byte_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for i in tuple_list:\n        tuple_size += sys.getsizeof(i)\n    return tuple_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            elif k < 0:\n                i += 1\n            else:\n                j += 1\n\n    # If one of the arrays is fully traversed, return the remaining elements\n    if i == n1:\n        return arr2[j:]\n    else:\n        return arr1[i:]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    while i < len(arr1):\n        if k == 1:\n            return arr1[i]\n        else:\n            k -= 1\n            i += 1\n\n    while j < len(arr2):\n        if k == 1:\n            return arr2[j]\n        else:\n            k -= 1\n            j += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # check if k is valid\n    if k > len(arr1) + len(arr2):\n        return None\n    # find the middle of the first array\n    mid1 = len(arr1) // 2\n    # find the middle of the second array\n    mid2 = len(arr2) // 2\n    # find the kth element in the first half of the first array\n    if k <= mid1 + 1:\n        return find_kth(arr1[:mid1+1], arr2, k)\n    # find the kth element in the second half of the first array\n    elif k <= mid1 + mid2 + 1:\n        return arr1[mid1]\n    # find the kth element in the first half of the second array\n    else:\n        return find_kth(arr1, arr2[:mid2+1], k-mid1-mid2)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    # Traverse both arrays to find kth element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the current elements are equal, increment i and decrement j\n            i += 1\n            j -= 1\n            \n    # Return the kth element from the first array\n    return arr1[i] if i == k else arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n = len(arr1)\n    m = len(arr2)\n\n    while i < n and j < m:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n\n    if i == n:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == len(arr1):\n                return arr2[j]\n            else:\n                return arr1[i]\n            i += 1\n            j += 1\n            k -= 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong_number(n):\n    '''\n    This function checks if the given number is Armstrong or not.\n    '''\n    num = n\n    temp = n\n    sum_of_squares = 0\n    \n    while temp > 0:\n        digit = temp % 10\n        sum_of_squares += digit ** 3\n        temp //= 10\n        \n    return sum_of_squares == num\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        num_digits = len(str(number))\n        sum_of_squares = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum_of_squares += digit ** num_digits\n            temp //= 10\n        if sum_of_squares == number:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num_str = str(number)\n    num_length = len(num_str)\n    sum_of_cubes = 0\n    \n    for i in range(num_length):\n        digit = int(num_str[i])\n        cube = digit ** 3\n        sum_of_cubes += cube\n    \n    if number == sum_of_cubes:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(n)\n    sum_sq = 0\n    power = len(num_str)\n\n    for i in num_str:\n        sum_sq += int(i)**power\n\n    if n == sum_sq:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    # Initialize the sum of the digits of the number\n    sum = 0\n\n    # Iterate through the digits of the number\n    while number > 0:\n        # Get the rightmost digit\n        digit = number % 10\n        # Add the rightmost digit to the sum\n        sum += digit ** 3\n        # Remove the rightmost digit from the number\n        number //= 10\n\n    # Check if the sum of the digits is equal to the original number\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_length = len(num_str)\n    \n    total = 0\n    for digit in num_str:\n        total += int(digit) ** num_length\n    \n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Get the length of the number\n    length = len(str(number))\n\n    # Compute the sum of the cubes of each digit\n    sum_of_cubes = sum(int(digit)**length for digit in str(number))\n\n    # Compare the result with the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function takes an integer and returns True if it is an Armstrong number,\n    False otherwise.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # convert the number to a string\n    num_str = str(n)\n    # get the length of the string\n    length = len(num_str)\n    # loop through each digit in the number and add its cube to the sum\n    for digit in num_str:\n        sum += int(digit) ** length\n    # return True if the sum is equal to the original number, False otherwise\n    return sum == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if n is an Armstrong number, False otherwise\n    \"\"\"\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum\n\ndef armstrong_number(n):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not\n    \"\"\"\n    if is_armstrong(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # calculate the sum of the cube of each digit in the number\n    digit_sum = 0\n    while number > 0:\n        digit = number % 10\n        digit_sum += digit ** 3\n        number //= 10\n\n    # check if the sum of the cube of each digit is equal to the original number\n    if digit_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum/number\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of first\", number, \"natural numbers is:\", sum)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # add i to sum and increment count\n        sum += i\n        count += 1\n\n    # calculate the average\n    average = sum / count\n\n    # return the sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Find the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): the number of natural numbers to sum and average.\n\n    Returns:\n    tuple: a tuple containing the sum and average.\n\n    Examples:\n    >>> sum_average(5)\n    (15, 3.0)\n    >>> sum_average(10)\n    (55, 3.3)\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(f\"Sum of first {number} natural numbers is: {sum}\")\n    print(f\"Average of first {number} natural numbers is: {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total/count\n    print(\"Sum of first\", n, \"natural numbers:\", total)\n    print(\"Average of first\", n, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_num += i\n        count += 1\n    average = sum_num / count\n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = 0\n    for i in range(number):\n        sum_num += i+1\n    average = sum_num/number\n    print(\"Sum of first\", number, \"natural numbers is:\", sum_num)\n    print(\"Average of first\", number, \"natural numbers is:\", average)\n\nsum_average(5)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n natural numbers and the average of the first n natural numbers.\n    \"\"\"\n    # Initialize the sum and count variables\n    sum = 0\n    count = 0\n    \n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n        \n    # Calculate the average of the first n natural numbers\n    avg = sum / count\n    \n    # Return the sum and average as a tuple\n    return (sum, avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_n = 0\n    count = 0\n    for i in range(n+1):\n        sum_n += i\n        count += 1\n    average = sum_n/count\n    return sum_n, average\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer n as input and returns True if the number is even, else False.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes in a string and returns the first character that appears more than once in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment the count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through each character in the dictionary\n    for char in char_count:\n        # If the count is greater than 1, return the character as the first repeated character\n        if char_count[char] > 1:\n            return char\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize the variables to store the first and last occurrence of a repeated character\n    first_occurrence = -1\n    last_occurrence = -1\n\n    # Loop through the string and check if the current character has already been encountered\n    for i, char in enumerate(str1):\n        if str1.count(char) > 1:\n            if first_occurrence == -1:\n                first_occurrence = i\n            last_occurrence = i\n\n    # If the loop completes and no character has been found to be repeated, return None\n    if first_occurrence == -1:\n        return None\n\n    # Return the first character that has been repeated\n    return str1[first_occurrence]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If there is no repeated character in the string, then it returns None.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            return char\n        else:\n            char_freq[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # initialize an empty dictionary to store character frequencies\n    freq = {}\n\n    # iterate over the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # initialize a variable to store the first repeated character\n    first_repeat = ''\n\n    # iterate over the frequency dictionary and find the first repeated character\n    for char in freq:\n        if freq[char] == 1:\n            first_repeat = char\n            break\n\n    # return the first repeated character\n    return first_repeat"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set() # initialize an empty set to store the unique characters in the string\n    for char in str1:\n        if char in char_set: # check if the character is already in the set\n            return char # return the character if it is\n        char_set.add(char) # add the character to the set if it is not already in the set\n    return None # if no character is repeated, return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes in a string as input and returns the first repeated character in the string.\n    If there are no repeated characters, it returns None.\n    \"\"\"\n    # Convert the string to a set to remove duplicates\n    str1_set = set(str1)\n    # If the length of the set is equal to the length of the string, then there are no repeated characters\n    if len(str1_set) == len(str1):\n        return None\n    # Otherwise, iterate through the set and find the first character that appears more than once\n    for char in str1_set:\n        if str1.count(char) > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the count of each character\n    char_count = {}\n    # Iterate over each character in the string\n    for char in str1:\n        # Check if the character is already in the dictionary\n        if char in char_count:\n            # If it is, increment its count\n            char_count[char] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            char_count[char] = 1\n    # Initialize a variable to store the first repeated character\n    first_repeated = None\n    # Iterate over each character in the string again\n    for char in str1:\n        # Check if the character is already in the dictionary\n        if char in char_count and char_count[char] > 1:\n            # If it is, and it has a count of 1 or more, update the first_repeated variable\n            if first_repeated is None or char < first_repeated:\n                first_repeated = char\n    # Return the first repeated character\n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        lucid_number = 0\n        for j in range(2, i):\n            if i%j == 0:\n                break\n            lucid_number += j\n        if lucid_number == i:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n\n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Check if i is a lucid number\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        # If i is a lucid number, add it to the list\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucids = []\n    for i in range(n+1):\n        if all(int(digit) >= 4 for digit in str(i)):\n            lucids.append(i)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Loop through all integers up to the given integer n\n    for i in range(1, n+1):\n        # Check if i is a lucid number\n        if sum(int(digit)**3 for digit in str(i)) == i:\n            # If it is, add it to the list of lucid numbers\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if all(int(digit) > int(digit) for digit in str(i)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = 0\n    while lucid <= n:\n        yield lucid\n        lucid += 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(2, n):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\n\ndef is_lucid(n):\n    '''\n    Check if a given integer is a lucid number or not.\n    '''\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucids = []\n\n    # iterate from 1 to n-1\n    for i in range(1, n):\n        # check if i is a lucid number\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucids.append(i)\n\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(n+1):\n        if i == 1 or i == 4 or i == 7 or i == 10 or i == 13 or i == 16 or i == 19 or i == 22 or i == 25 or i == 28 or i == 31 or i == 34 or i == 37 or i == 40 or i == 43 or i == 46 or i == 49 or i == 52 or i == 55 or i == 58 or i == 61 or i == 64 or i == 67 or i == 70 or i == 73 or i == 76 or i == 79 or i == 82 or i == 85 or i == 88 or i == 91 or i == 94 or i == 97 or i == 100:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_words.append(word[::-1])\n    \n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)):\n        reversed_words.append(words[len(words)-1-i])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    \n    # reverse each word and join it back into a string\n    reversed_words =''.join(words[::-1])\n    \n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Initialize an empty list to store the reversed words\n    reversed_words = []\n    # Iterate over the list of words in reverse order\n    for i in range(len(words)-1, -1, -1):\n        # Append the reversed word to the list\n        reversed_words.append(words[i])\n    # Join the reversed words into a string and return it\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    reversed_words = [] # create an empty list to store reversed words\n    for word in words:\n        reversed_words.append(word[::-1]) # reverse the order of characters in each word\n    reversed_s =''.join(reversed_words) # join the reversed words back into a string\n    return reversed_s # return the reversed string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is equal to 2 or 3\n    elif num == 2 or num == 3:\n        return True\n    # check if the number is divisible by any number less than or equal to the square root of the number\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        # check if the number is divisible by any number between 4 and the square root of the number\n        for i in range(4, int(num ** 0.5) + 1, 2):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return round(radian, 2)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = text.index(matches[0])\n        end_index = start_index + len(matches[0])\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for matchNum, match in enumerate(matches, start=1):\n        literal = match.group()\n        start = match.start()\n        end = match.end()\n        print(f\"Match {matchNum}: '{literal}' starts at index {start}, ends at index {end}\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][2]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        print(match, start, end)\n        return match, start, end\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literals = re.findall(pattern, text)\n    result = []\n    for literal in literals:\n        start_index = text.find(literal)\n        end_index = start_index + len(literal)\n        result.append([literal, start_index, end_index])\n    return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates the nth Bell number using the formula:\n    B(n) = 1/n * (sin(1/n) + cos(1/n))\n    \n    Parameters:\n    n (int): the nth Bell number to find\n    \n    Returns:\n    bell_num (int): the nth Bell number\n    '''\n    import math\n    bell_num = int((1/n) * (math.sin(1/n) + math.cos(1/n)))\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the first two bell numbers\n    b0, b1 = 1, 1\n    # Loop through the remaining n-2 bell numbers\n    for i in range(2, n):\n        # Calculate the next bell number by summing the previous two\n        b = b0 + b1\n        # Update the values of b0 and b1 for the next iteration\n        b0 = b1\n        b1 = b\n    # Return the final bell number\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nWe can test this function using some sample inputs:\n\nprint(bell_Number(0)) # 0\nprint(bell_Number(1)) # 1\nprint(bell_Number(5)) # 5\nprint(bell_Number(10)) # 126\n\nThis function correctly calculates the nth bell number."
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0: \n        return \"Please enter a non-negative integer.\"\n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else: \n        bell_num = 0\n        for i in range(1, n+1): \n            bell_num += (4*i**2 - 3*i) / i\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # To calculate the bell number recursively, we need to first calculate the nth bell number \n    # of the previous bell number. To calculate the nth bell number of the previous bell number, \n    # we need to calculate the nth bell number of the previous previous bell number. \n\n    # Therefore, we can use the following recurrence relation: \n    # B(n) = B(n-1) + B(n-2) \n\n    # We can calculate the bell number for a given value of n using the above recurrence relation. \n\n    # If n is 0, then the bell number is 1. \n    if n == 0: \n        return 1\n\n    # If n is 1, then the bell number is 2. \n    elif n == 1: \n        return 2\n\n    # If n is greater than 1, then the bell number is equal to the sum of the bell number of n-1 and n-2. \n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in range(n):\n        bell = 2*bell + 1\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * bell_Number(n-1)) % (10**9 + 7)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(lst, k):\n    '''\n    This function removes the kth element of a list and returns the updated list.\n    '''\n    return lst[:k] + lst[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    if k >= len(list1):\n        return list1\n    else:\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # create a copy of the list to modify it\n    list_copy = list1.copy()\n    # remove the kth element from the copy of the list\n    list_copy.pop(L-1)\n    # return the modified copy of the list\n    return list_copy"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements but the k'th element removed.\n    '''\n    # Create an empty list to store the elements of the list except the k'th element\n    new_list = []\n    for i in range(0, L):\n        if i!= L-1: # Only add the elements of the list except the k'th element\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Removes the kth element from the list and returns the modified list.\n\n    Args:\n        list1: A list of elements.\n        k: The index of the element to be removed.\n\n    Returns:\n        A new list with the same elements as list1, except for the kth element.\n    \"\"\"\n    new_list = list1[:k-1] + list1[k:]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and the value of k and returns a list with the same elements\n    but the k'th element removed.\n\n    Args:\n    - list1: The input list.\n    - L: The value of k.\n\n    Returns:\n    - The list with the k'th element removed.\n\n    \"\"\"\n    if L > len(list1):\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1) - L\n    if L == 0:\n        return list1\n    else:\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Check if the length of the list is less than or equal to L\n    if len(list1) <= L:\n        return \"List length should be greater than or equal to L\"\n    \n    # Check if L is a positive integer\n    if not L.isnumeric() or int(L) <= 0:\n        return \"L should be a positive integer greater than 0\"\n    \n    # Create an empty list to store the elements after k'th element\n    list2 = []\n    \n    # Iterate through the list from index 0 to len(list1)-1\n    for i in range(len(list1)):\n        # If the index is less than L, append the current element to list2\n        if i < int(L):\n            list2.append(list1[i])\n        # If the index is greater than or equal to L, append the element after the k'th element to list2\n        elif i >= int(L):\n            list2.append(list1[i-1])\n    \n    # Return the list2\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # if L is odd, remove the middle element\n    if L % 2 == 1:\n        return list1[:L-1] + list1[L:]\n    \n    # if L is even, remove the middle two elements\n    else:\n        return list1[:L//2] + list1[L//2+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max value to zero\n    max_val = 0\n\n    # loop through each row in the matrix\n    for row in test_list:\n        # find then'th column of the row and compare it with the max value found so far\n        col = row[N-1]\n        if col > max_val:\n            max_val = col\n\n    # return the max value found so far\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_list = []\n    for row in test_list:\n        max_list.append(row[N-1])\n    return max(max_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the maximum value of the N'th column.\n    \"\"\"\n    max_value = float('-inf')\n    for row in matrix:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the matrix\n    rows = len(test_list)\n    cols = len(test_list[0])\n    # Check if the value of N is within the range of columns\n    if N > cols or N < 1:\n        return \"Invalid value of N. N should be a positive integer and not greater than the number of columns in the matrix.\"\n    # Iterate through the rows of the matrix and find the max of then'th column\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the input is valid\n    if not isinstance(test_list, list) or not all(isinstance(sublist, list) for sublist in test_list):\n        raise TypeError(\"Input must be a matrix represented as a list of lists\")\n\n    # Get the number of columns in the matrix\n    num_cols = len(test_list[0])\n\n    # Check if the column index is valid\n    if N < 1 or N > num_cols:\n        raise ValueError(\"Invalid column index\")\n\n    # Initialize the maximum value to the first element in the column\n    max_val = test_list[0][N-1]\n\n    # Loop through the rest of the matrix and update the maximum value if a larger value is found\n    for row in test_list[1:]:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize the max value as negative infinity\n    max_val = float('-inf')\n\n    # Loop through each row of the matrix\n    for row in test_list:\n        # Get the value of then'th column\n        nth_col = row[N-1]\n\n        # If the nth column is greater than the current max value, update the max value\n        if nth_col > max_val:\n            max_val = nth_col\n\n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for row in test_list:\n        if N > len(row):\n            return None\n        else:\n            print(row[N-1])"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Get the length of the first list in the test_list\n    m = len(test_list[0])\n\n    # Initialize the max value with the minimum possible integer value\n    max_value = float('-inf')\n\n    # Loop through the columns of the matrix\n    for i in range(m):\n\n        # Find then'th column\n        col = [row[i] for row in test_list]\n\n        # Find the maximum value in the column\n        max_val = max(col)\n\n        # Update the max value if the current max value is greater\n        if max_val > max_value:\n            max_value = max_val\n\n    # Return the max value\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        first_elem = sublist[0]\n        second_elem = sublist[1]\n        merged.append((first_elem, second_elem))\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    merged_lst = []  \n    for sublist in lst:  \n        merged_lst.append([sublist[0], sublist[1]])  \n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    result = []\n    for sublist in lst:\n        first = sublist[0]\n        second = sublist[1]\n        result.append([first, second])\n\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n\n    # Iterate through the tuple list\n    for tup in test_list:\n        # Iterate through the tuple elements\n        for elem in tup:\n            # Append the current element to the cum_sum list\n            cum_sum.append(elem)\n\n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        cumulative_sum += tup[1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            for j in range(len(test_list[i])):\n                cum_sum += test_list[i][j]\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cum_sum = 0\n    \n    # Loop through each tuple in the list\n    for item in test_list:\n        # If the tuple contains a number, add it to the cumulative sum variable\n        if isinstance(item, int):\n            cum_sum += item\n        # If the tuple contains a tuple, recursively call the function and add the result to the cumulative sum variable\n        elif isinstance(item, tuple):\n            cum_sum += cummulative_sum(item)\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for tup in test_list:\n        for val in tup:\n            total_sum += val\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a list to store the cumulative sum\n    cumulative_sum = []\n    \n    # Iterate through the tuple list\n    for item in test_list:\n        # Check if the item is not None\n        if item is not None:\n            # If it is, add the current value to the cumulative sum\n            cumulative_sum.append(item)\n        # If the item is None, add 0 to the cumulative sum\n        else:\n            cumulative_sum.append(0)\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the averages\n    averages = []\n    # loop through each tuple in the input tuple\n    for tup in nums:\n        # calculate the sum of all elements in the tuple\n        total = sum(tup)\n        # calculate the average of the tuple\n        avg = total / len(tup)\n        # append the average to the averages list\n        averages.append(avg)\n    # return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = 0\n        for value in num:\n            total += value\n        average = total / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        total = sum(i)\n        count = len(i)\n        averages.append(total/count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        avg = total / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # Initialize an empty list to store the average values for each tuple\n    averages = []\n\n    # Loop through each tuple in the input tuple of tuples\n    for t in nums:\n        # Calculate the sum of all values in the tuple\n        total = sum(t)\n        # Divide the sum by the length of the tuple to get the average value\n        average = total / len(t)\n        # Append the average value to the list of average values for each tuple\n        averages.append(average)\n\n    # Return the list of average values for each tuple\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        averages.append(sum(num)/len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # iterate over each tuple in the input tuple of tuples\n    avg_list = []\n    for tup in nums:\n        # calculate the average value for the current tuple\n        avg = sum(tup) / len(tup)\n        # append the average value to the average list\n        avg_list.append(avg)\n    # return the average list\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length')\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo.\n\n    Args:\n    test_tup1 (tuple): The first tuple to perform element-wise modulo on.\n    test_tup2 (tuple): The second tuple to perform element-wise modulo on.\n\n    Returns:\n    A new tuple with the element-wise modulo of the two input tuples.\n\n    Example:\n    test_tup1 = (3, 6, 9)\n    test_tup2 = (2, 5, 8)\n    result = tuple_modulo(test_tup1, test_tup2)\n    print(result) # Output: (1, 0, 0)\n    '''\n\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result_list)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo operation on them.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Checking if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length\")\n        return\n    \n    # Performing element wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Define the starting point (0, 0)\n    point = (0, 0)\n    # Initialize the number of jumps\n    jumps = 0\n    # Define a queue to store the points that need to be visited\n    queue = [(0, 0)]\n    # Loop through the queue\n    while queue:\n        # Pop the current point from the queue\n        x, y = queue.pop(0)\n        # Check if the current point is at the destination point\n        if x == d and y == 0:\n            # If yes, return the number of jumps\n            return jumps\n        # If the current point is within the range of the points to be visited\n        if 0 <= x < steps and 0 <= y < steps:\n            # Add the current point to the queue\n            queue.append((x, y + 1))  # Move up\n            queue.append((x + 1, y))  # Move right\n            # Increment the number of jumps\n            jumps += 1\n    # If the destination point is not found, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    steps = abs(steps)  # convert steps to positive value if negative\n    count = 0\n    i = 0\n    \n    # Check for the number of jumps required\n    while i < steps and d!= 0:\n        if d > 0:\n            d -= 1\n            i += 1\n        else:\n            d += 1\n            i -= 1\n        count += 1\n    \n    # Return the number of jumps required\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Create a 2D array dp with dimensions (steps+1) x (d+1)\n    dp = [[0 for _ in range(d+1)] for _ in range(steps+1)]\n\n    # Initialize values of dp[0][j] and dp[i][0]\n    for j in range(d+1):\n        dp[0][j] = j\n\n    # Fill the values of dp using the recurrence relation\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            dp[i][j] = min(dp[i][j], dp[i-1][j]) + 1  # If the current position is (i-1, j)\n            dp[i][j] = min(dp[i][j], dp[i][j-1]) + 1  # If the current position is (i, j-1)\n            dp[i][j] = min(dp[i][j], dp[i-1][j-1]) + 1  # If the current position is (i-1, j-1) and the target position is (d, 0)\n\n    # Return the minimum value in the dp array\n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes in the number of steps required to reach a point of form (d, 0) from origin and returns the minimum number of jumps required to reach the point.\n    '''\n    # Check if the given number of steps is greater than or equal to the distance\n    if steps >= d:\n        return steps\n\n    # Initialize the count of jumps and the remaining distance\n    count = 0\n    remaining_distance = d\n\n    # Calculate the number of jumps required until the remaining distance becomes zero\n    while remaining_distance > 0:\n        # Check if the remaining distance can be reached by a single jump\n        if remaining_distance <= steps:\n            count += 1\n            remaining_distance = 0\n        # Check if the remaining distance can be reached by a double jump\n        elif remaining_distance - steps >= 0:\n            count += 2\n            remaining_distance -= steps\n        # Check if the remaining distance can be reached by a triple jump\n        elif remaining_distance - steps * 2 >= 0:\n            count += 3\n            remaining_distance -= steps * 2\n        else:\n            # If none of the above conditions are met, return -1 to indicate that the input is invalid\n            return -1\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    current_position = (0, 0)\n    jumps = 0\n    steps_left = steps\n\n    # Loop until steps_left is zero or the current position is (d, 0)\n    while steps_left > 0 and current_position!= (d, 0):\n        # Calculate the next position after jumping\n        next_position = (current_position[0] + 1, current_position[1] - 1)\n\n        # Check if the next position is within bounds and has not been visited yet\n        if 0 <= next_position[0] < d and 0 <= next_position[1] < d and (next_position[0], next_position[1]) not in visited:\n            # Add a jump to the count\n            jumps += 1\n\n            # Mark the next position as visited\n            visited.add((next_position[0], next_position[1]))\n\n        # Move one step to the right\n        current_position = (current_position[0], current_position[1] + 1)\n        steps_left -= 1\n\n    # Return the number of jumps required to reach (d, 0)\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    steps = abs(steps) # Convert steps to absolute value to handle negative numbers\n    visited = [0] * (steps+1) # Create list of visited nodes\n    visited[0] = 1 # Mark the starting node as visited\n\n    # Perform breadth-first search to find the shortest path\n    queue = [0] # Initialize the queue with the starting node\n    while queue:\n        node = queue.pop(0)\n        for i in range(1, min(steps, node)+1):\n            if node+i == d: # If we reach the destination node, return the number of jumps\n                return i\n            if visited[node+i] == 0: # If the node hasn't been visited yet, mark it as visited and add it to the queue\n                visited[node+i] = 1\n                queue.append(node+i)\n\n    # If we reach the end of the function without finding the destination node, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    def binary_search(lower, upper):\n        while lower <= upper:\n            mid = (lower + upper) // 2\n            if mid * d + steps <= 0:\n                upper = mid - 1\n            else:\n                lower = mid + 1\n        return upper\n\n    jumps = binary_search(0, steps)\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d:\n        return 0\n    elif steps == d:\n        return 1\n    else:\n        # initialize variables\n        i = 1\n        jumps = 0\n        curr_level = 0\n        \n        # check for consecutive steps to reach (d, 0)\n        while curr_level < d:\n            if steps-curr_level >= d:\n                curr_level += d\n                jumps += 1\n            else:\n                curr_level += steps-curr_level\n                jumps += 1\n            \n            if curr_level >= steps:\n                return jumps\n        \n        # check for jumps to reach (d, 0)\n        if d >= curr_level:\n            jumps += 1\n        \n        return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    start = (0, 0)\n    end = (0, d)\n    jumps = 0\n    steps_taken = 0\n    visited = set()\n\n    # Keep track of visited points\n    visited.add(start)\n\n    # Loop until we reach the end point\n    while end not in visited:\n        # Check if we can reach the end point in the remaining steps\n        if steps_taken == steps:\n            return jumps + 1\n        \n        # Update the visited points and steps taken\n        visited.add(end)\n        steps_taken += 1\n\n        # Calculate the new positions for the jumps\n        new_x = end[0]\n        new_y = end[1]\n        if new_x == 0:\n            new_x = 1\n        elif new_x == 1:\n            new_x = 0\n        new_end = (new_x, new_y)\n\n        # Update the end position and jumps count\n        end = new_end\n        jumps += 1\n\n    # Return the final jumps count\n    return jumps + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize the result and the last index\n    result = float('inf')\n    last_index = -1\n\n    # Loop through all possible indices\n    for i in range(1, steps):\n        # Calculate the next index\n        next_index = min(steps, i + d)\n\n        # Calculate the minimum number of jumps needed to reach the next index\n        min_jumps = next_index - i\n\n        # Update the result if the minimum jumps is less than the current minimum\n        if min_jumps < result:\n            result = min_jumps\n            last_index = i\n\n    # Return the result and the last index\n    return result, last_index"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ZeroDivisionError('Division by zero')\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            print(\"Error: division by zero\")\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element in the original list is divided by the corresponding element in the second list.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists must have the same length.\"\n    \n    # Divide the elements of the lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n    else:\n        raise ValueError(\"Lists must have equal length\")\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        return 'Error: Lists have different lengths.'\n\n    # Divide each element of the lists\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            return 'Error: Division by zero.'\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_found = False\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_found = True\n        elif num_found:\n            result += char\n            num_found = False\n        else:\n            result += char\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    char_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            char_list.append(i)\n    return ''.join(num_list + char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize variables to keep track of the numbers and letters in the string\n    numbers = ''\n    letters = ''\n\n    # Loop through each character in the string\n    for char in test_str:\n\n        # If the character is a number, append it to the numbers variable\n        if char.isdigit():\n            numbers += char\n\n        # Otherwise, append it to the letters variable\n        else:\n            letters += char\n\n    # Return the concatenated string with all the numbers at the end\n    return numbers + letters"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    # initialize a variable to store the non-number characters\n    non_num_chars = ''\n    \n    # iterate over each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number character to the end of the string\n            non_num_chars += char\n    \n    # concatenate the non-number characters with the numbers\n    return non_num_chars + ''.join(char for char in test_str if char.isdigit())"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    for num in num_list:\n        test_str = test_str.replace(num, '')\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = []\n    words = test_str.split()\n    for word in words:\n        if word.isdigit():\n            numbers.append(word)\n    return \" \".join(numbers + words)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize two pointers to the start and end of the string\n    start = 0\n    end = len(test_str) - 1\n\n    # While the start pointer is less than the end pointer\n    while start < end:\n        # If the characters at the start and end pointers are digits, swap them\n        if test_str[start].isdigit() and test_str[end].isdigit():\n            test_str[start], test_str[end] = test_str[end], test_str[start]\n            # Increment the start pointer and decrement the end pointer\n            start += 1\n            end -= 1\n        # If the characters at the start and end pointers are not digits, increment both pointers\n        else:\n            start += 1\n            end -= 1\n\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Check if the input string is empty\n    if not test_str:\n        return \"Error: Input string is empty.\"\n    \n    # Check if the input string contains any non-numeric characters\n    for char in test_str:\n        if not char.isdigit():\n            return \"Error: Input string contains non-numeric characters.\"\n    \n    # Initialize an empty string to store the numbers\n    numbers = \"\"\n    \n    # Iterate through each character in the input string\n    for char in test_str:\n        # If the character is a number, add it to the numbers string\n        if char.isdigit():\n            numbers += char\n    \n    # If there are no numbers in the input string, return the input string\n    if not numbers:\n        return test_str\n    \n    # Initialize an empty string to store the non-numeric characters\n    non_numbers = \"\"\n    \n    # Iterate through each character in the input string\n    for char in test_str:\n        # If the character is a non-numeric character, add it to the non_numbers string\n        if not char.isdigit():\n            non_numbers += char\n    \n    # Combine the numbers and non-numeric characters into a new string\n    combined_string = numbers + non_numbers\n    \n    # Return the new string with all the numbers moved to the end\n    return combined_string"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a) # sort the list in ascending order\n    count = 0 # initialize the count\n    start = 0 # initialize the start index\n    end = 0 # initialize the end index\n    \n    while end < len(a):\n        # check if the difference between end and start is divisible by 2\n        if a[end] - a[start] % 2 == 0:\n            count += 1\n        else:\n            start += 1 # move the start index to the next number that is divisible by 2\n        \n        end += 1 # move the end index to the next number\n    \n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    # Create a dictionary to store the frequency of each number in the list\n    freq = {}\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Sort the dictionary by values in decreasing order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Initialize variables for the largest subset size and the largest number in the subset\n    largest_size = 0\n    largest_number = -1\n\n    # Iterate through the sorted dictionary and add the number and its frequency to the largest subset if it is divisible by 2\n    for num, freq in sorted_freq:\n        if num % 2 == 0 and freq > 0 and freq % 2 == 0:\n            if freq > largest_size:\n                largest_size = freq\n                largest_number = num\n\n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the input list in ascending order\n    a.sort()\n    \n    # Initialize variables for the largest subset and the current subset\n    largest_subset_size = 0\n    current_subset_size = 0\n    \n    # Loop through the input list\n    for i in range(len(a)):\n        # Check if the current number is divisible by the current subset size\n        if a[i] % current_subset_size == 0:\n            # If yes, add the current number to the current subset size and update the largest subset size if needed\n            current_subset_size += 1\n            largest_subset_size = max(largest_subset_size, current_subset_size)\n        else:\n            # If no, reset the current subset size\n            current_subset_size = 1\n            \n    # Return the largest subset size\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Returns:\n    - int: The size of the largest subset.\n\n    Example:\n    >>> largest_subset([1, 2, 3, 4, 5])\n    3\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables for the largest subset size and the current subset size\n    size = 1\n    current_size = 1\n\n    # Loop through the list\n    for i in range(1, len(a)):\n        # If the difference between the current number and the next number is not divisible by 2,\n        # we can't include this number in the current subset, so we can move on to the next number\n        if a[i] % 2!= a[i - 1] % 2:\n            # If we have a larger subset size, update it\n            if current_size > size:\n                size = current_size\n            # Reset the current subset size\n            current_size = 1\n        else:\n            # Otherwise, increment the current subset size\n            current_size += 1\n\n    # If the last number is not divisible by 2, add 1 to the current subset size\n    if a[-1] % 2!= a[-2] % 2:\n        current_size += 1\n\n    # If we have a larger subset size, update it\n    if current_size > size:\n        size = current_size\n\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 0\n    max_subset = []\n\n    for i in range(n):\n        if a[i] % 2 == 0:\n            max_size = max(max_size, i+1)\n        else:\n            max_size = 0\n\n        max_subset = [a[i]] + max_subset\n\n        if max_size > len(max_subset):\n            max_subset = max_subset[:max_size]\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    count = 0\n    for i in range(n-1):\n        if a[i+1] % a[i] == 0:\n            count += 1\n        else:\n            count = 0\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                dp[j] = max(dp[j], dp[i]+1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # initialize a dictionary to store the count of the number\n    count = {}\n    # initialize the largest subset size\n    max_size = 0\n    # loop through the list of numbers\n    for num in a:\n        # if the number is already in the dictionary, increment its count\n        if num in count:\n            count[num] += 1\n        # if the number is not in the dictionary, add it with a count of 1\n        else:\n            count[num] = 1\n        # calculate the current subset size\n        current_size = sum(count.values())\n        # update the largest subset size if the current subset is larger\n        if current_size > max_size:\n            max_size = current_size\n    # return the largest subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_size = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                max_size = max(max_size, j-i+1)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize variables for max size and current size\n    max_size = 0\n    curr_size = 1\n    # Loop through the list\n    for i in range(1, len(a)):\n        # If the current element is divisible by the next element, increase current size\n        if a[i] % a[i-1] == 0:\n            curr_size += 1\n            # Update max size if the current size is larger\n            if curr_size > max_size:\n                max_size = curr_size\n        # If the current element is not divisible by the next element, reset current size\n        else:\n            curr_size = 1\n    # Return max size\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge both arrays\n    merged = arr1 + arr2\n\n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        # Even length list\n        median = (merged[mid-1] + merged[mid]) / 2\n    else:\n        # Odd length list\n        median = merged[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists must have the same size.\")\n\n    if n > len(arr1) + len(arr2):\n        raise ValueError(\"The sum of the lengths of the two lists cannot be greater than n.\")\n\n    # Merging the two lists\n    merged_list = arr1 + arr2\n\n    # Sorting the merged list\n    merged_list.sort()\n\n    # Finding the median\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged = arr1 + arr2\n    \n    # Find the median by dividing the length of the merged list by 2\n    # and rounding down to the nearest integer\n    median = (len(merged) // 2)\n    \n    # Sort the merged list in ascending order\n    merged.sort()\n    \n    # Return the median\n    return merged[median]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists and their size n, and returns the median of the combined list.\n    '''\n    # Sort the two input arrays\n    arr1.sort()\n    arr2.sort()\n\n    # Find the median of the two sorted arrays\n    if n % 2 == 0:\n        median = (arr1[n//2-1] + arr1[n//2] + arr2[n//2-1] + arr2[n//2]) / 4.0\n    else:\n        median = arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays into one\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n    \n    # Find the median\n    if n % 2 == 0:\n        # If the number of elements is even, return the average of the two middle elements\n        mid1 = n//2 - 1\n        mid2 = n//2\n        return (sorted_arr[mid1] + sorted_arr[mid2]) / 2\n    else:\n        # If the number of elements is odd, return the middle element\n        mid = n//2\n        return sorted_arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two lists into a single list\n    combined_list = arr1 + arr2\n    # Sort the combined list\n    combined_list.sort()\n    # Find the length of the combined list\n    combined_len = len(combined_list)\n\n    # Calculate the index of the median\n    if combined_len % 2 == 0:\n        median_index = combined_len // 2\n        median1 = combined_list[median_index - 1]\n        median2 = combined_list[median_index]\n        median = (median1 + median2) / 2\n    else:\n        median_index = (combined_len + 1) // 2\n        median = combined_list[median_index - 1]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # if n is even, find the average of two middle elements\n        mid1 = n // 2\n        mid2 = n // 2\n        median = (arr1[mid1 - 1] + arr1[mid1] + arr2[mid2 - 1] + arr2[mid2]) / 4\n    else:\n        # if n is odd, find the middle element\n        mid1 = n // 2\n        mid2 = mid1\n        median = arr1[mid1]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    \n    # calculate the length of the combined array\n    combined_length = len(arr1) + len(arr2)\n    \n    # calculate the middle index of the combined array\n    middle_index = combined_length // 2\n    \n    # if the middle index is odd, the median is the middle element\n    if combined_length % 2 == 1:\n        return arr1[middle_index]\n    \n    # if the middle index is even, the median is the average of the two middle elements\n    else:\n        return (arr1[middle_index - 1] + arr1[middle_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two lists in ascending order\n    merged = sorted(arr1 + arr2)\n\n    # Find the median\n    median_index = n // 2\n    if n % 2 == 0:\n        median = (merged[median_index - 1] + merged[median_index]) / 2.0\n    else:\n        median = merged[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two lists and then find the median\n    merged_list = sorted(arr1 + arr2)\n    mid = n // 2\n    if n % 2 == 0:\n        return (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        return merged_list[mid]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n\n    :param nums: A list of numbers.\n    :param n: An integer, the power to which each number in the list should be raised.\n    :return: A list of the n-th powers of each number in the list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and an integer n as input.\n    It returns a list of n-th powers of the numbers in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n\n    result = []\n\n    for num in nums:\n        result.append(num ** n)\n\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n\n    Args:\n        nums: list\n            The list of numbers to compute the nth power of.\n        n: int\n            The power to compute the numbers to.\n\n    Returns:\n        list: A list of the n-th power of each number in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the given string to uppercase\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert the string to uppercase using list comprehension\n    uppercase_string = [char.upper() for char in string]\n    return uppercase_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #swapping the first and last element\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # finding the length of the list\n    length = len(newList)\n    \n    # checking if the length of the list is greater than 1\n    if length > 1:\n        # interchanging the first and last element in the list\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    # returning the updated list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Initialize variables\n    first = newList[0]\n    last = newList[-1]\n\n    # Interchange first and last elements\n    newList[0] = last\n    newList[-1] = first\n\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is greater than or equal to 2\n    if len(newList) >= 2:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # return the modified list\n        return newList\n    else:\n        # print an error message if the length of the list is less than 2\n        print(\"Error: The length of the list must be greater than or equal to 2.\")\n        # return the original list unchanged\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # First, we calculate the area of the circle.\n    area_of_circle = 2 * 3.14159 * r ** 2\n    \n    # Then, we calculate the perimeter of the largest triangle that can be inscribed in the semicircle.\n    perimeter_of_largest_triangle = 2 * r\n    \n    # Finally, we calculate the area of the largest triangle that can be inscribed in the semicircle.\n    area_of_largest_triangle = area_of_circle / perimeter_of_largest_triangle\n    \n    return area_of_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Args:\n        r (float): the radius of the semicircle.\n\n    Returns:\n        float: the area of the largest triangle inscribed in the semicircle.\n    \"\"\"\n    import math\n\n    # compute the semi-perimeter and the area of the largest triangle inscribed in the semicircle\n    a = 2 * r * math.sin(math.pi/3)\n    b = 2 * r * math.sin(2 * math.pi/3)\n    area = max(a, b)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 0\n    b = 0\n    c = r\n    area_max = 0\n    \n    while (a <= b) and (b <= c) and (c <= a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        \n        if area > area_max:\n            area_max = area\n            a_max = a\n            b_max = b\n            c_max = c\n        \n        a += 0.01\n        b += 0.01\n        c += 0.01\n    \n    return area_max, a_max, b_max, c_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = (3*r**2)/(4*math.tan(math.pi/3))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to find area of triangle\n    # A = (1/2) * b * h\n    # b = 2 * r * h\n    # h = sqrt(r^2 - (a/2)^2)\n    # a = 2 * r\n    # \n    # where h is the height of the triangle and a is the length of the semi-perimeter\n\n    # calculate semi-perimeter and height\n    s = 2 * r\n    h = math.sqrt(r**2 - (s/2)**2)\n\n    # calculate area of triangle\n    area = 0.5 * s * h\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area_of_triangle(a, b, c):\n        '''\n        Write a python function to find the area of a triangle with sides a, b, and c.\n        '''\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return area\n    \n    # Find the area of the largest triangle that can be inscribed in a semicircle of radius r\n    a, b = (0, 0)\n    for i in range(1, 360):\n        # Calculate the x-coordinate of the center of the semicircle\n        x = r * (1 - (i/360))\n        # Calculate the coordinates of the triangle's vertices\n        y = r * np.sqrt(1 - (x**2)/(r**2))\n        # Calculate the area of the triangle\n        area = area_of_triangle(a, b, np.sqrt(x**2 + y**2))\n        # Update the sides of the largest triangle if necessary\n        if area > max_area:\n            max_area = area\n            max_a = a\n            max_b = b\n        a = b\n        b = np.sqrt(x**2 + y**2)\n    \n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # area of a triangle with base b and height h\n    def triangle_area_helper(b, h):\n        return 0.5 * b * h\n\n    # area of a semicircle with radius r\n    def semicircle_area_helper(r):\n        return math.pi * r ** 2\n\n    # area of the largest triangle that can be inscribed in a semicircle with radius r\n    def largest_triangle_area_helper(r):\n        # find the area of the largest triangle that can be inscribed in a semicircle of radius r\n        largest_triangle_area = 0\n        b = 0\n        while semicircle_area_helper(r) > largest_triangle_area:\n            h = r - b\n            area = triangle_area_helper(b, h)\n            if area > largest_triangle_area:\n                largest_triangle_area = area\n            b += 1\n        return largest_triangle_area\n\n    # call the helper function to find the area of the largest triangle inscribed in a semicircle with radius r\n    return largest_triangle_area_helper(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the semi-perimeter of the circle\n    s = 2 * math.pi * r\n    \n    # Calculate the area of each triangle\n    a = math.sqrt(s) / 3\n    b = math.sqrt(s) / 3\n    c = math.sqrt(3 * s) / 4\n    \n    # Calculate the maximum area of any triangle\n    max_area = max(a, b, c)\n    \n    # Return the maximum area\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define the radius of the semicircle\n    semicircle_radius = r\n    # Define the angle of the triangle that can be inscribed in the semicircle\n    angle = math.acos(1 - (1/3)**2)\n    # Use Heron's formula to calculate the area of the triangle\n    area = 2 * semicircle_radius * math.sin(angle / 2)\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 2\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Check if the first element is missing\n    if array[start]!= start:\n        return start + 1\n\n    # Check for missing numbers between the first and last elements\n    for i in range(start + 1, end):\n        if array[i]!= i:\n            return i + 1\n\n    # If no missing number is found, return the number of elements in the array\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end):\n        if array[i] == array[i + 1]:\n            return i + 1\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number in the list.\n    The function can handle both ascending and descending order of the numbers.\n    The function takes two optional parameters: start and end.\n    If start is not specified, it is assumed to be 0.\n    If end is not specified, it is assumed to be the largest number in the list.\n    \"\"\"\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers, sorts it, and then finds the first missing number in the sorted array.\n    \"\"\"\n    # Sort the array\n    sorted_array = sorted(array)\n\n    # Find the first missing number\n    for i in range(start, len(sorted_array) + start):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): The starting index of the sublist. Default is 0.\n        end (int): The ending index of the sublist. If None, the entire array is used. Default is None.\n\n    Returns:\n        int: The smallest missing number.\n\n    Examples:\n        find_First_Missing([1, 3, 4, 6, 7, 9]) # returns 2\n        find_First_Missing([1, 3, 4, 6, 7, 8, 9], start=1, end=5) # returns 2\n        find_First_Missing([1, 3, 4, 6, 7, 8, 9], start=3) # returns 1\n        find_First_Missing([1, 3, 4, 6, 7, 8, 9], start=0, end=6) # returns 0\n        find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9]) # returns 1\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    even_numbers = [] \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only even numbers.\n    \"\"\"\n    # initialize an empty list to store even numbers\n    even_lst = []\n    # loop through each element in the input list\n    for num in lst:\n        # check if the number is even\n        if num % 2 == 0:\n            # if it is, append it to the even_lst list\n            even_lst.append(num)\n    # return the even_lst list containing only even numbers\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with only even numbers.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)] + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x-1,y))\n    if x < 10:\n        sub.append((x+1,y))\n    if y > 0:\n        sub.append((x,y-1))\n    if y < 10:\n        sub.append((x,y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    for i in range(len(adj_coords)):\n        if (adj_coords[i][0], adj_coords[i][1]) not in sub:\n            sub.append((adj_coords[i][0], adj_coords[i][1]))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    if row > 0 and col > 0:\n        sub.append((row-1, col-1))\n    if row > 0:\n        sub.append((row-1, col))\n    if row > 0 and col < 9:\n        sub.append((row-1, col+1))\n    if row < 9:\n        sub.append((row, col+1))\n    if row < 9 and col < 9:\n        sub.append((row+1, col+1))\n    if row < 9:\n        sub.append((row+1, col))\n    if row < 9 and col > 0:\n        sub.append((row+1, col-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0: \n        sub.append(ele)\n    else: \n        sub.append(tuple(ele))\n    for i in range(len(sub)): \n        x, y = sub[i] \n        for j in range(i+1, len(sub)): \n            x1, y1 = sub[j] \n            if abs(x-x1) == 1 and abs(y-y1) == 1: \n                sub.append(tuple((x, y)))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i,j)!= ele and (i,j) not in sub:\n                sub.append((i,j))\n                adj.append((i,j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Get the coordinates of the given element\n    x, y = ele\n\n    # List of adjacent coordinates\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n\n    # Add the sublist to the result list\n    sub.append(adj)\n\n    # Recursively call the function for all adjacent coordinates\n    for x, y in adj:\n        adjac((x, y), sub)\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j)!= (0, 0):\n                new_x = x + i\n                new_y = y + j\n                if (new_x, new_y) not in sub:\n                    result.append((new_x, new_y))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x+1 not in sub:\n        sub.append((x+1, y))\n    if x-1 not in sub:\n        sub.append((x-1, y))\n    if y+1 not in sub:\n        sub.append((x, y+1))\n    if y-1 not in sub:\n        sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert all spaces to underscores\n    result = text.replace(\" \", \"_\")\n    # Convert all underscores to spaces\n    result = result.replace(\"_\", \" \")\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in text:\n        if i == \" \":\n            new_text += \"_\"\n        else:\n            new_text += i\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace all underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # split the string into words\n    words = text.split()\n    # replace spaces with underscores\n    words = [word.replace(' ', '_') for word in words]\n    # join the words back together with underscores\n    replaced_text =''.join(words)\n    # return the replaced string\n    return replaced_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"The input must be a string\")\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    # Return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Remove whitespaces from the string\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Use two pointers to traverse the list: one for the current position and\n    # one for the previous position.\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            # Move the zero to the end of the list.\n            # We need to move all subsequent non-zero elements to the right.\n            while i < len(num_list) - 1:\n                num_list[i] = num_list[i+1]\n                i += 1\n            num_list[i] = 0\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list) - 1, -1, -1):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Loop through the list and check if each element is zero\n    for i in range(len(num_list)):\n        # If the current element is zero, swap it with the last element in the list\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    # iterate over the list\n    for i in range(len(num_list)):\n        # if the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            temp = num_list[i]\n            for j in range(i, len(num_list) - 1):\n                num_list[j] = num_list[j + 1]\n            num_list[len(num_list) - 1] = temp\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n    if zero_count > 0:\n        for i in range(len(num_list)-1, -1, -1):\n            if i < len(num_list)-zero_count:\n                num_list.insert(i+1, 0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Traverse through the list\n    for i in range(len(num_list)):\n        # If the current element is zero, swap it with the last non-zero element in the list\n        if num_list[i] == 0:\n            if i < len(num_list) - 1:\n                num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # Initialize two pointers for two pointers approach\n    i = 0\n    j = 0\n\n    # Traverse through the list and move all zeroes to the end of the list\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return arr[0] ^ arr[1]\n    if n % 2 == 0:\n        sum1 = pair_xor_Sum(arr, n//2)\n        sum2 = pair_xor_Sum(arr[n//2:], n//2)\n        return sum1 + sum2\n    else:\n        sum1 = pair_xor_Sum(arr, (n-1)//2)\n        sum2 = pair_xor_Sum(arr[(n-1)//2+1:], (n-1)//2)\n        return sum1 + sum2"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_num = arr[i] ^ arr[j]\n            sum_xor += xor_num\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return sum(arr)\n    elif n % 2 == 0:\n        return pair_xor_Sum(arr, n//2) + pair_xor_Sum(arr, n//2) + arr[n//2]\n    else:\n        return pair_xor_Sum(arr, (n-1)//2) + arr[n//2] + pair_xor_Sum(arr, (n-1)//2)"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a Python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_pair = arr[i] ^ arr[j]\n            sum += xor_pair\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers and an integer n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        xor_sum ^= arr[i] ^ arr[i+1] ^ arr[i+2] ^... ^ arr[i+(n-1)]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as inputs and\n    returns the sum of the XOR of all pairs of numbers in the list.\n\n    Args:\n        arr: a list of integers\n        n: an integer\n\n    Returns:\n        int: the sum of the XOR of all pairs of numbers in the list.\n    \"\"\"\n\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Calculate the xor of first and last element of the list\n    xor_sum = arr[0] ^ arr[n-1]\n    # Calculate the sum of xor of all pairs of elements except the first and last elements\n    for i in range(1, n-1):\n        xor_sum ^= arr[i] ^ arr[n-i-1]\n    # Return the sum of xor of all pairs of elements\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and the length of the list as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the input list to a heap\n    heap = hq.heapify(iterable)\n    \n    # Pop elements from the heap and append to the output list\n    while heap:\n        yield heapq.heappop(heap)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the given list to a heap\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n\n    # Sort the heap in ascending order\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort.\n    '''\n    # Use the heapify function from heapq module to convert the list into a heap\n    hq.heapify(iterable)\n    \n    # Extract elements from the heap and append to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and sorts it using the heap sort algorithm.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n\n    # Convert the list to a max-heap\n    heap = hq.nlargest(len(iterable), iterable, key=lambda x: x)\n\n    # Remove the max-heap element and append it to a new list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    arr = list(iterable)\n    # Create a min heap from the list\n    hq.heapify(arr)\n    # Build the sorted list\n    sorted_list = []\n    while len(arr) > 0:\n        # Add the smallest element from the heap to the sorted list\n        sorted_list.append(arr[0])\n        # Remove the smallest element from the heap\n        hq.heappop(arr)\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    This function sorts the given list using the heapsort algorithm.\n    \"\"\"\n    # Create a min heap from the given list\n    min_heap = hq.nsmallest(len(iterable), iterable)\n\n    # Create an empty list to store the sorted elements\n    sorted_list = []\n\n    # Iterate through the min heap and add the elements to the sorted list\n    while min_heap:\n        sorted_list.append(min_heap[0])\n        min_heap = min_heap[1:]\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort.\n    \"\"\"\n    # Convert the given list into a min heap\n    heap = [float('-inf')] * len(iterable)\n    hq.heapify(heap)\n    for num in iterable:\n        # Add the current number to the min heap\n        hq.heappush(heap, num)\n        # Pop the smallest number from the min heap and add it to the end of the result list\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and returns a new sorted list using the heap sort algorithm.\n    '''\n    # Convert the input iterable to a list\n    arr = list(iterable)\n    # Build the heap\n    hq.heapify(arr)\n    # Extract the maximum element from the heap and insert it at the end of the sorted list\n    sorted_list = [arr.pop()]\n    # Build the heap again to maintain the heap property\n    hq.heapify(arr)\n    # Extract the maximum element from the heap and insert it at the end of the sorted list\n    sorted_list.append(arr.pop())\n    # Build the heap again to maintain the heap property\n    hq.heapify(arr)\n    # Extract the maximum element from the heap and insert it at the end of the sorted list\n    sorted_list.append(arr.pop())\n    # Continue extracting and inserting elements until the heap becomes empty\n    while arr:\n        # Extract the maximum element from the heap and insert it at the end of the sorted list\n        sorted_list.append(arr.pop())\n        # Build the heap again to maintain the heap property\n        hq.heapify(arr)\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    return [hq.heappop(heap) for i in range(len(iterable))]"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount: \n        return True\n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two parameters, actual_cost and sale_amount.\n    It returns True if the given amount has no profit and no loss and False otherwise.\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in two arguments: the actual cost and the sale amount.\n    It returns True if the sale amount has no profit and no loss, and False otherwise.\n    A sale amount is said to have no profit and no loss if the difference between\n    actual cost and sale amount is greater than or equal to zero.\n    \"\"\"\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # check if the actual cost is greater than or equal to the sale amount\n    if actual_cost >= sale_amount:\n        return False\n    else:\n        # check if the sale amount is greater than the actual cost divided by 2\n        if sale_amount >= actual_cost / 2:\n            return True\n        else:\n            return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check for profit\n    if actual_cost > sale_amount:\n        print('No profit and no loss')\n    else:\n        # Check for loss\n        if sale_amount > actual_cost:\n            print('No profit and no loss')\n        else:\n            # Check for no profit or loss\n            if sale_amount == actual_cost:\n                print('No profit and no loss')\n            else:\n                # Check for no profit\n                if sale_amount < actual_cost:\n                    print('No profit')\n                else:\n                    # Check for no loss\n                    if sale_amount > actual_cost:\n                        print('No loss')"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return False\n    elif sale_amount >= (actual_cost + 1):\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount > actual_cost:\n        return False\n    \n    if sale_amount < actual_cost:\n        return True\n    \n    if sale_amount == actual_cost:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost + sale_amount == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount == 0: # If actual cost is equal to sale amount, no profit and no loss\n        return True\n    elif actual_cost - sale_amount > 0: # If actual cost is greater than sale amount, no profit\n        return False\n    else: # If actual cost is less than sale amount, no loss\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check whether actual cost is less than or equal to sale amount\n    if actual_cost <= sale_amount: \n        return True\n    else: \n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    celsius_to_fahrenheit = 1.8\n    v = v * 1.60934  # convert km/h to m/s\n    t = t + 273.15  # convert celsius to fahrenheit\n    tc = (t * 9/5) + 32  # convert fahrenheit to celsius\n    wind_speed_f = v * (9/5) + 32  # convert wind speed from km/h to m/s and to fahrenheit\n    wci = math.floor((13.12 + (0.6215 * (wind_speed_f - 32)) + ((0.4275 * tc) / (tc + 273.15))) * 2)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temperature = t\n    wind_chill_index = math.ceil(13.12 + (0.6215 * temperature) - (11.37 * math.pow(wind_speed,0.16)) + (0.3965 * temperature * math.pow(wind_speed,0.16)))\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # formula for wind chill\n    wind_chill_index = (237.3 + 0.6215*t - 11.37*math.log(v) + 0.3965*t*math.log(v))\n    wind_chill_index = round(wind_chill_index)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature from celsius to fahrenheit\n    temp_f = (t * 9/5) + 32\n\n    # Calculate the wind chill index using the formulae\n    wind_chill_index = (13.12 + (0.6215 * v) + (11.37 * math.log(v)) - (0.3965 * temp_f)) * (t * 1.8 - 459.67)\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate the dew point temperature\n    d_p = 243.04 * math.exp((17.625 * (t_f - 32)) / (t_f - 24.67))\n\n    # Calculate the wind chill index\n    w_c = (13.12 + (0.6215 * v) + (11.37 * (t_f - 23)) - (0.3965 * d_p))\n\n    # Round to the nearest integer\n    w_c = round(w_c)\n\n    # Return the wind chill index\n    return w_c"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to fahrenheit\n    t = t * 9/5 + 32\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * math.exp((17.625 * t) / (t + 243.5))\n\n    # Round wind chill index to the nearest integer\n    wc = math.ceil(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 # temperature coefficient of performance\n    f = math.floor(c*(t-273.15)) # formula to calculate wind chill index\n\n    if f < 13:\n        return round(f)\n    elif f < 36:\n        return round(f)\n    else:\n        return round(f)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert wind speed and temperature to degrees Celsius\n    celsius = (t - 32) * 5/9\n    \n    # Calculate the wind chill index\n    wind_chill_index = 35.74 + 0.6215 * v + 35.75 * celsius - 0.4275 * v * celsius\n    \n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill_factor = math.exp((17.625 * (t - 23.125))/(t + 24.75))\n    wind_speed_factor = (1 + (0.0065 * v))**(-0.16)\n    wind_speed_index = math.sqrt(wind_speed_factor)\n    wind_chill_index = (wind_speed_index * chill_factor)\n    wind_chill_rounded = round(wind_chill_index)\n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n    v (float): Wind velocity in km/h\n    t (float): Temperature in celsius\n\n    Returns:\n    int: Wind chill index rounded to the next integer\n\n    \"\"\"\n    # Calculate the wind chill\n    wc = -459.67 * math.log(v/10) + 35.75 * math.log(t/10) - 0.6215 * t\n\n    # Round the wind chill to the nearest integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that are not starting with lowercase letters\n    not_lowercase = []\n    # iterate through the list of names\n    for name in sample_names:\n        # if the name starts with a lowercase letter, add it to the not_lowercase list\n        if name[0].islower():\n            not_lowercase.append(name)\n    # sum the length of the names in the not_lowercase list\n    length = sum(len(name) for name in not_lowercase)\n    return length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Loop through each name in the list\n    for name in sample_names:\n        # Remove the first letter of the name (if it's a lowercase letter)\n        if name[0].islower():\n            name = name[1:]\n        # Add the length of the modified name to the total length\n        total_length += len(name)\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum of length of names to 0\n    total_length = 0\n    \n    # loop through the list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # skip the name if it does\n            continue\n        # add the length of the name to the total length\n        total_length += len(name)\n        \n    # return the total length of names after removing lowercase ones\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Iterate through the list of names\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip to the next name\n            continue\n        # If the name doesn't start with a lowercase letter, add its length to the sum\n        else:\n            sum += len(name)\n    \n    # Return the sum of the lengths of the names after removing the lowercase ones\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_without_lowercase = []\n    for name in sample_names:\n        if name[0].isupper():\n            names_without_lowercase.append(name)\n    sum_length = 0\n    for name in names_without_lowercase:\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Create a list to store the non-lowercase names\n    non_lower_names = []\n\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # If the name starts with a lowercase letter, add it to the non_lower_names list\n        if name[0].islower():\n            non_lower_names.append(name)\n\n    # Calculate the sum of the lengths of the names in the non_lower_names list\n    total_length = sum([len(name) for name in non_lower_names])\n\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as an input and returns the string with the parenthesis removed.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis and what is inbetween them from the string\n    items = re.sub(r'\\([^()]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'(\\([^()]*?\\))')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'(\\(.*?\\))'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as an input, removes the parenthesis and what is inbetween them, and returns the cleaned string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    cleaned_items = pattern.sub('', items)\n    return cleaned_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(', '').replace(')', '')\n    items = re.sub('\\s+','', items)\n    return items.strip()"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    '''\n    # Find all the parenthesis in the string\n    parentheses = re.findall(r'\\((.*?)\\)', items)\n    # Iterate over the parenthesis and remove them\n    for parenthesis in parentheses:\n        items = re.sub(r'\\(' + parenthesis + r'\\)', '', items)\n    # Return the modified string without the parenthesis\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\((.*?)\\)'\n    matches = re.findall(pattern, items)\n    result = []\n    for item in matches:\n        result.extend(item.split())\n    return \" \".join(result)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Find the sum of the first n terms of the Fibonacci sequence.\n    a, b = 1, 1\n    fib_sequence = []\n    while len(fib_sequence) < n:\n        fib_sequence.append(a)\n        a, b = b, a + b\n\n    # Find the sum of the first n terms of the nonagonal sequence.\n    nonagonal_sequence = []\n    for i in range(n):\n        nonagonal_sequence.append(fib_sequence[i] + fib_sequence[i+1])\n\n    # Return the sum of the nonagonal sequence.\n    return sum(nonagonal_sequence)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # base case\n    if n <= 0:\n        return None\n    \n    # first term of the series\n    a = 1\n    \n    # second term of the series\n    b = 2\n    \n    # loop until the nth nonagonal number is found\n    for i in range(2, n+1):\n        # calculate the nth nonagonal number\n        c = 2*a + b\n        \n        # check if the nth nonagonal number is equal to n\n        if c == n:\n            return c\n        \n        # update a, b\n        a = b\n        b = c"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 100\n    if n == 11:\n        return 121\n    if n == 12:\n        return 144\n    if n == 13:\n        return 169\n    if n == 14:\n        return 196\n    if n == 15:\n        return 225\n    if n == 16:\n        return 256\n    if n == 17:\n        return 289\n    if n == 18:\n        return 324\n    if n == 19:\n        return 361\n    if n == 20:\n        return 400\n    if n == 21:\n        return 441\n    if n == 22:\n        return 484\n    if n == 23:\n        return 529\n    if n == 24:\n        return 576\n    if n == 25:\n        return 625\n    if n == 26:\n        return 676\n    if n == 27:\n        return 729\n    if n == 28:\n        return 784\n    if n == 29:\n        return 841\n    if n == 30:\n        return 900\n    if n == 31:\n        return 961\n    if n == 32:\n        return 1024\n    if n == 33:\n        return 1089\n    if n == 34:\n        return 1156\n    if n == 35:\n        return 1225\n    if n == 36:\n        return 1296\n    if n == 37:\n        return 1369\n    if n == 38:\n        return 1444\n    if n == 39:\n        return 1521\n    if n == 40:\n        return 1600\n    if n == 41:\n        return 1681\n    if n == 42:\n        return 1764\n    if n == 43:\n        return 1849\n    if n == 44:\n        return 1936\n    if n == 45:\n        return 2025\n    if n == 46:\n        return 2116\n    if n == 47:\n        return 2209\n    if n == 48:\n        return 2304\n    if n == 49:\n        return 2401\n    if n == 50:\n        return 2500"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0: \n        return \"Invalid input. Please enter a non-negative integer.\"\n    \n    if n == 0: \n        return 0\n    \n    if n == 1: \n        return 1\n    \n    prev_num = 0\n    current_num = 1\n    \n    for i in range(2, n+1):\n        prev_num = current_num\n        current_num += prev_num\n        \n    return current_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    nonagonal_count = 1\n    while i <= n:\n        nonagonal_count *= i\n        i += 1\n    return nonagonal_count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Calculate the sum of all nonagonal numbers\n    sum_nonagonal = 0\n    for i in range(1, n+1):\n        sum_nonagonal += (i * (n-i)) / 2\n    \n    # Return the sum of all nonagonal numbers\n    return sum_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0: \n        return 0\n\n    # Initialize variables\n    total_nonagonal = 0\n    current_number = 1\n\n    # Loop to calculate the sum of nonagonal numbers\n    for i in range(1, n+1): \n        total_nonagonal += current_number\n        current_number += 2\n\n    return total_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the number of squares in the triangle\n    num_squares = n * (n - 1) // 2\n\n    # Calculate the sum of the squares\n    sum_squares = (n * (n + 1)) ** 2 / 2\n\n    return num_squares == sum_squares"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    else:\n        return 4 * (2 * n - 1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into a list of words\n    words = text.split()\n\n    # Iterate over the words and check if the middle word contains 'z'\n    for i in range(len(words)):\n        if i == len(words) // 2:\n            # If the middle word contains 'z', return True\n            if 'z' in words[i]:\n                return True\n        else:\n            # If the middle word doesn't contain 'z', check the next words for 'z'\n            if 'z' in words[i]:\n                return True\n\n    # If we reach this point, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Define a regular expression pattern for matching 'z' at the middle of a word\n    pattern = re.compile(r'(?<=\\w)(z)(?=\\w)')\n    # Find all non-overlapping occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # Check if there is at least one match and return True if there is, False otherwise\n    return bool(matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # split the text into words\n    words = text.split()\n\n    # iterate over each word in the list\n    for word in words:\n        # check if the word starts with 'z'\n        if word.startswith('z'):\n            # check if the word ends with 'z'\n            if word.endswith('z'):\n                # check if the word is in the middle of the word\n                if len(word) > 1:\n                    # check if there is at least one character after the 'z'\n                    if word[1:].find('z')!= -1:\n                        return True\n\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(z)\\w+\\b')\n    match = pattern.search(text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'(?<!\\w)(z)(?!\\w)'\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?<!\\w)(z)(?!\\w)\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(?<![a-zA-Z])z(?![a-zA-Z])\"\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Loop through each word\n    for word in words:\n        # Check if the word starts or ends with 'z'\n        if word.startswith('z') or word.endswith('z'):\n            # If it does, return True\n            return True\n\n    # If no words start or end with 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b[a-zA-Z]+z[a-zA-Z]*\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = text.split()\n    \n    # Loop through each word\n    for word in words:\n        # Check if the first and last characters of the word are not 'z'\n        if word[0]!= 'z' and word[-1]!= 'z':\n            # If the word contains 'z', replace it with the correct character\n            word = word.replace('z', 'Z')\n        # Check if the word contains 'z' at the start or end\n        if 'z' in word[:2] or 'z' in word[-2:]:\n            # If it does, replace it with the correct character\n            word = word.replace('z', 'Z')\n        # Check if the word contains 'z' in the middle\n        if 'z' in word[1:-1]:\n            # If it does, replace it with the correct character\n            word = word.replace('z', 'Z')\n    \n    # Join the words back into a string\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes in an array and a position k and reverses the array up to the position k.\n    '''\n    # check if the array is empty\n    if len(input) == 0:\n        return []\n    \n    # check if k is greater than or equal to the length of the array\n    if k >= len(input):\n        return input\n    \n    # create a list to store the reversed array\n    reversed_array = []\n    \n    # iterate over the array from k to the end\n    for i in range(k, len(input)):\n        # append each element of the array to the reversed array in reverse order\n        reversed_array.append(input[i])\n    \n    # reverse the entire reversed array\n    reversed_array = reversed_array[::-1]\n    \n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    n = len(input)\n\n    # reverse array from 0 to k-1\n    for i in range(k): \n        input[0], input[i] = input[i], input[0] \n\n    # reverse array from k to n-1\n    for i in range(k, n): \n        input[i], input[n-i-1] = input[n-i-1], input[i] \n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes in an array and a position k. It reverses the array upto position k.\n    '''\n    n = len(input)\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    # Reverse the array from k to n-1\n    for i in range(k, n):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    left = 0\n    right = k-1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) <= k:\n        return input\n    \n    start = 0\n    end = k - 1\n    \n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    \n    return input[:k] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes two arguments: input (an array) and k (a position).\n    The function should reverse the elements of the array upto position k.\n    The function should return the reversed array.\n    '''\n\n    # Check if the input is a list\n    if not isinstance(input, list):\n        raise TypeError('Input is not a list')\n\n    # Check if k is a valid index in the array\n    if k < 0 or k >= len(input):\n        raise IndexError('Invalid index for k')\n\n    # Reverse the array from the index 0 to k-1\n    input = input[:k] + input[k:][::-1] + input[:k]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if k is less than or equal to the length of the input array\n    if k > len(input):\n        print(\"Error: k is greater than the length of the input array\")\n        return\n    \n    # Create a new array to store the reversed elements\n    reversed_array = []\n    \n    # Iterate through the input array from the beginning till k-1\n    for i in range(k-1, -1, -1):\n        # Append the i-th element of the input array to the new array\n        reversed_array.append(input[i])\n    \n    # Return the new array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto position k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k>n or k<1:\n        return \"Invalid Input\"\n    else:\n        output = input[0:k-1]\n        for i in range(k-1,0,-1):\n            output.append(input[i])\n        for i in range(k-1,n-1):\n            input[i] = input[i+1]\n        input[n-1] = output\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a new list to store the reversed part of the input list\n    reversed_list = []\n    # Iterate through the input list starting from the first element\n    for i in range(k):\n        # Add the current element to the reversed list\n        reversed_list.append(input[i])\n    # Iterate through the input list starting from the next element and adding them to the reversed list\n    for i in range(k, len(input)):\n        reversed_list.append(input[i])\n    # Reverse the reversed list\n    reversed_list.reverse()\n    # Return the reversed list\n    return reversed_list"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Check if the input is a tuple and a dictionary\n    if isinstance(test_tup, tuple) and isinstance(test_dict, dict):\n        # Convert the dictionary to a list\n        test_dict_list = list(test_dict.items())\n        # Add the dictionary to the tuple\n        new_tup = tuple(test_tup + test_dict_list)\n        # Return the new tuple\n        return new_tup\n    else:\n        raise ValueError(\"Both inputs should be tuples and dictionaries.\")"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    new_tuple = new_tuple + (test_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Using the update() method to add the dictionary to the tuple\n    return tuple(test_tup.keys() | test_dict.keys())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    dict_list = list(test_dict.items())\n    # Append the list of tuples to the tuple\n    result_tup = tuple(test_tup + dict_list)\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the tuple to a dictionary\n    test_dict = dict(test_dict)\n    # Combine the two dictionaries into a new dictionary\n    combined_dict = {**test_tup, **test_dict}\n    # Convert the new dictionary back to a tuple\n    new_tup = tuple(combined_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = (test_tup, test_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup.append(test_dict)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n    \n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        max_avg = max(max_avg, cost[i][0])\n    \n    for i in range(N-1, -1, -1):\n        dp[i][N-1] = cost[i][N-1]\n        max_avg = max(max_avg, cost[i][N-1])\n    \n    for i in range(N-1):\n        for j in range(N-1):\n            dp[i][j] = max(dp[i][j], dp[i+1][j]+dp[i][j+1])\n            max_avg = max(max_avg, dp[i][j])\n            \n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def isSafe(i, j, matrix):\n        return 0 <= i < len(matrix) and 0 <= j < len(matrix[0]) and matrix[i][j] == 0\n\n    def dfs(i, j, currentPath, cost, visited, maxPath, maxCost, matrix):\n        # Base case: if we have reached the bottom-right cell, check if the current path is a valid path\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            totalCost = 0\n            for cell in currentPath:\n                totalCost += cost[cell[0]][cell[1]]\n            if totalCost > maxCost:\n                maxCost = totalCost\n                maxPath = currentPath\n            return\n\n        # Recursive case: move to the next cell in the current path\n        nextCell = (i, j)\n        if isSafe(i + 1, j, matrix):\n            currentPath.append(nextCell)\n            dfs(i + 1, j, currentPath, cost, visited, maxPath, maxCost, matrix)\n            currentPath.pop()\n        if isSafe(i, j + 1, matrix):\n            currentPath.append(nextCell)\n            dfs(i, j + 1, currentPath, cost, visited, maxPath, maxCost, matrix)\n            currentPath.pop()\n\n    # Initialize variables\n    matrix = [[0 for j in range(len(cost))] for i in range(len(cost))]\n    visited = set()\n    maxCost = 0\n    maxPath = []\n\n    # Convert cost matrix to a single list of tuples\n    cost = [(i, j) for row in cost for j, cell in enumerate(row)]\n\n    # Start with the top-left cell\n    currentPath = [(0, 0)]\n    dfs(0, 0, currentPath, cost, visited, maxPath, maxCost, matrix)\n\n    # Compute the maximum average and return it\n    return maxCost / len(maxPath)\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(i, j, path_sum, path_count, max_avg):\n        nonlocal max_avg\n        if i == N - 1 and j == N - 1:\n            if path_sum == 0:\n                return 0, 0, 0\n            total_cost = path_sum * path_count\n            avg_cost = total_cost / (path_count + 1)\n            max_avg = max(max_avg, avg_cost)\n            return total_cost, path_count, avg_cost\n        if i < N and j < N:\n            if cost[i][j]!= 0:\n                if j > 0 and cost[i][j] > cost[i][j - 1]:\n                    left_total_cost, left_path_count, left_avg_cost = dfs(i, j - 1, path_sum + cost[i][j], path_count + 1, max_avg)\n                else:\n                    left_total_cost, left_path_count, left_avg_cost = dfs(i, j, path_sum, path_count, max_avg)\n                if i > 0 and cost[i][j] > cost[i - 1][j]:\n                    up_total_cost, up_path_count, up_avg_cost = dfs(i - 1, j, path_sum + cost[i][j], path_count + 1, max_avg)\n                else:\n                    up_total_cost, up_path_count, up_avg_cost = dfs(i, j, path_sum, path_count, max_avg)\n                return max(left_total_cost, up_total_cost), max(left_path_count, up_path_count), (left_avg_cost + up_avg_cost) / 2\n            else:\n                return 0, 0, 0\n    \n    N = len(cost)\n    max_avg = 0\n    dfs(0, 0, 0, 1, max_avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    for i in range(N):\n        for j in range(N):\n            avg = (dp[i][j] + dp[i][j-1] + dp[i-1][j] + dp[i-1][j-1] - dp[i-2][j-2] - dp[i-1][j-2] - dp[i][j-2] - dp[i-2][j]) / 4\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n\n    # initialize top and bottom rows\n    for i in range(N):\n        dp[i][0] = dp[i][-1] = cost[i][0]\n\n    # initialize left and right columns\n    for j in range(N):\n        dp[0][j] = dp[-1][j] = cost[0][j]\n\n    # fill the rest of the matrix using dynamic programming\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # find the maximum average over all paths\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n\n    # divide total cost by number of cells visited\n    return max_avg / (N * N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    max_path_avg = 0\n    \n    for i in range(N):\n        # traverse downward\n        path_sum = sum(cost[i][j] for j in range(i+1, N))\n        path_avg = path_sum / (i+1)\n        max_path_avg = max(max_path_avg, path_avg)\n        \n        # traverse rightward\n        path_sum = sum(cost[j][i] for j in range(i+1, N))\n        path_avg = path_sum / (i+1)\n        max_path_avg = max(max_path_avg, path_avg)\n    \n    # traverse upward\n    path_sum = sum(cost[i][N-1] for i in range(N-2, -1, -1))\n    path_avg = path_sum / (N-1)\n    max_path_avg = max(max_path_avg, path_avg)\n    \n    # traverse leftward\n    path_sum = sum(cost[N-1][i] for i in range(N-2, -1, -1))\n    path_avg = path_sum / (N-1)\n    max_path_avg = max(max_path_avg, path_avg)\n    \n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n\n    # Initialize the first row and column\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n\n    # Compute the rest of the matrix using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average\n    max_avg = float('-inf')\n    for i in range(1, n):\n        for j in range(1, n):\n            max_avg = max(max_avg, dp[i][j]/(i+j))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables\n    total_cost = 0\n    total_cells = 0\n    # Initialize the first cell\n    i, j = 0, 0\n    # Initialize the maximum average\n    max_avg = 0\n    # Initialize the path with maximum average\n    max_path = []\n    # Iterate over the matrix\n    for k in range(N):\n        # Check the cost at the next cell\n        next_i, next_j = i + 1 if i + 1 < N else 0, j + 1 if j + 1 < N else 0\n        next_cost = cost[next_i][next_j]\n        # Check if the current cell is part of the path\n        if (i, j) not in max_path:\n            # If not, update the total cost and number of cells visited\n            total_cost += cost[i][j]\n            total_cells += 1\n            # Check if the current path has a higher average\n            avg = total_cost / total_cells\n            if avg > max_avg:\n                # If it does, update the maximum average and path\n                max_avg = avg\n                max_path = [(i, j)]\n            elif avg == max_avg:\n                # If it does, add the current cell to the path\n                max_path.append((i, j))\n            # Move to the next cell\n            i, j = next_i, next_j\n    # Return the maximum average and path\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the maximum sum of any path\n    max_sum = float('-inf')\n    # Initialize a dictionary to store the path with the maximum sum\n    max_path = None\n    \n    # Traverse all possible paths and find the maximum sum\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # If the current cell is already part of a path, skip it\n            if cost[i][j]!= float('inf'):\n                continue\n            \n            # Compute the sum of the path up to this point\n            curr_sum = cost[i][j]\n            \n            # Check if this path is the maximum so far\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                max_path = [(i, j)]\n            else:\n                # If not, traverse this path and update the maximum sum and path if necessary\n                for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    # If the next cell is within the bounds of the matrix and not already part of a path\n                    if 0 <= i+di < len(cost) and 0 <= j+dj < len(cost[i]) and cost[i+di][j+dj]!= float('inf'):\n                        # Compute the new sum of the path starting at this cell\n                        new_sum = curr_sum + cost[i+di][j+dj]\n                        # Check if this new path is the maximum so far\n                        if new_sum > max_sum:\n                            max_sum = new_sum\n                            max_path = [(i, j)] + [(i+di, j+dj)]\n    \n    # Compute the average of the maximum sum path\n    return max_sum / len(max_path) if max_path is not None else 0"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Initialize an empty list to store the filtered students\n    filtered_students = []\n\n    # Loop through the students dictionary\n    for name, student_info in students.items():\n        # Extract the height and weight of the current student\n        height, weight = student_info\n\n        # Check if the current student's height is above the minimum\n        if height > h:\n            # Check if the current student's weight is above the minimum\n            if weight > w:\n                # Add the current student to the filtered students list\n                filtered_students.append(name)\n\n    # Return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Initialize an empty list to store the filtered students\n    filtered_students = []\n    # Loop through each student in the dictionary\n    for name, (height, weight) in students.items():\n        # Check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # Add the student to the list of filtered students\n            filtered_students.append(name)\n    # Return the list of filtered students\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # initialize an empty list to store the filtered students\n    filtered_students = []\n    # loop through each student and check if their height and weight are above the minimum\n    for name, data in students.items():\n        height, weight = data\n        # check if the student's height and weight are above the minimum\n        if height > h and weight > w:\n            filtered_students.append(name)\n    # return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Using the eq operator for comparing elements in lists\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    for i in range(power):\n        result += sum(int(digit) for digit in str(base))\n        base *= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and split it into a list of digits\n    digits = list(str(base))\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each digit in the list and calculate its value to the power of the power variable\n    for digit in digits:\n        value = int(digit) ** power\n        sum += value\n    \n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base and power to integers\n    base = int(base)\n    power = int(power)\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through each digit in the base and calculate the sum\n    while base > 0:\n        # Calculate the last digit of the base\n        digit = base % 10\n\n        # Add the digit to the sum\n        sum += digit\n\n        # Calculate the new base without the last digit\n        base //= 10\n\n    # Calculate the sum to the power\n    return sum ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through each digit of the base\n    for digit in str(base):\n        # calculate the power of the digit and add it to the sum\n        power_of_digit = int(digit) ** power\n        sum += power_of_digit\n        \n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    sum_of_digits = 0\n    for digit in str(base):\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and convert each character to an integer\n    base_digits = [int(digit) for digit in str(base)]\n    # initialize the sum to 0\n    result = 0\n    # iterate over the digits of the base and calculate the sum to the specified power\n    for digit in base_digits:\n        result += digit ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string to ensure it can be converted to an integer\n    base = str(base)\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through each digit of the base and add the value to the sum\n    for digit in base:\n        sum += int(digit) ** power\n\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    sum_of_digits = 0\n    for digit in base_str:\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    base_sum = 0\n    power_sum = 0\n    while power > 0:\n        if power % 10 == 0:\n            power_sum += 1\n        base_sum += base % 10\n        power //= 10\n        base //= 10\n    return base_sum + power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    sum_digits = 0\n    for digit in base_str:\n        sum_digits += int(digit) ** power\n    return sum_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.finditer(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.group())\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the pattern to match the quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    # Find all matches of the pattern in the given string\n    matches = pattern.findall(text1)\n    # Join all the matches of the pattern into a single string\n    result =''.join(matches)\n    # Return the result\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of values between quotation marks \" \".\n    '''\n    pattern = r'\"([^\"]*)\"'  # regex pattern to match quotations\n    matches = re.findall(pattern, text1)  # find all the matches in the string using the regex pattern\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"[^\"]*\"'  # Find all instances of quotes enclosed in double quotes\n    result = re.findall(pattern, text1)  # Find all matches in the text using the pattern\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n\n    # Find all occurrences of the pattern in the string\n    matches = pattern.findall(text)\n\n    # Return a list of all matched quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Use regular expression to match quotation marks\n    pattern = r'\"[^\"]*\"'\n    # Use findall() method to extract all matches\n    matches = re.findall(pattern, text1)\n    # Loop through matches and extract values between quotation marks\n    for match in matches:\n        # Remove quotation marks from the match\n        match = match[1:-1]\n        # Add the match to a list\n        result.append(match)\n    # Return the list of extracted values\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    return match\n\ntext = 'He said, \"I am a man.\"'\nresult = extract_quotation(text)\nprint(result) # Output: ['I am a man.']"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = ()\n    for i in range(N):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(a * b for a, b in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the result tuple with the first element of the test_tup\n    result_tup = (test_tup[0],)\n    # loop through the remaining elements of the test_tup\n    for i in range(1, len(test_tup)):\n        # add the current element to the result_tup\n        result_tup = result_tup + (test_tup[i] * result_tup[-1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(N))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    result += (test_tup[-1] * test_tup[0],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0],)\n    for i in range(1, N-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1],)\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup + (test_tup[-1] * test_tup[0],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Input tuple must have at least two elements\")\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Concatenate the two lists\n    lst3 = lst1 + lst2\n    # Add the elements of the concatenated list\n    return [sum(lst3)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A list of integers without consecutive duplicates.\n    \"\"\"\n    return [next(grp) for _, grp in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for _, group in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates from a list.\n\n    Args:\n        nums (list): A list of integers\n\n    Returns:\n        list: A list of integers with consecutive duplicates removed.\n    \"\"\"\n    # Use a generator expression to group consecutive duplicates\n    grouped = (num for num, group in groupby(nums) if not group)\n    return list(grouped)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a generator object to iterate over the list\n    grouped = groupby(nums)\n    # create a new list to store the non-consecutive duplicates\n    result = []\n    # iterate over the grouped generator object\n    for key, group in grouped:\n        # check if the first item in the group is equal to the second item\n        if key == group[0]:\n            # if so, skip the second item and add all the subsequent items to the result list\n            for item in group:\n                result.append(item)\n            # skip the first item and add the second item to the result list\n            result.append(key)\n    # return the result list\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(set(nums)), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Create a groupby object to group the list by values\n    grouped_nums = groupby(nums)\n\n    # Create an empty list to store the consecutive duplicates\n    consecutive_duplicates = []\n\n    # Iterate over the grouped_nums object and for each group\n    for key, group in grouped_nums:\n        # If the group contains only one element, move to the next group\n        if len(list(group)) == 1:\n            continue\n\n        # Get the first and last elements of the group\n        first_element = next(group)\n        last_element = next(reversed(group))\n\n        # Check if the group contains consecutive duplicates\n        if last_element == first_element + 1:\n            # If consecutive duplicates are found, append the first element to the consecutive_duplicates list\n            consecutive_duplicates.append(first_element)\n            # Remove the first element from the group\n            next(group)\n        else:\n            # If the group does not contain consecutive duplicates, append the group to the consecutive_duplicates list\n            consecutive_duplicates.extend(list(group))\n\n    return consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Step 1: Find consecutive duplicates\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            # Step 2: Remove consecutive duplicates\n            nums.pop(i)\n            nums.pop(i)\n\n    # Step 3: Return the modified list\n    return nums"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # calculate the area of the base of the cone\n    base_area = math.pi * r**2\n    \n    # calculate the area of the top of the cone\n    top_area = math.pi * r**2 * h\n    \n    # calculate the total area of the cone\n    total_area = base_area + top_area\n    \n    # return the total area of the cone\n    return total_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/3)*math.pi*(r**2+h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = 2*math.pi*r*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*(r*h)**2"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi/4)*r*h**2\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r + math.pi*r*h + math.pi*r*h + math.pi*r*r\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes in the radius r and height h of a cone and calculates the lateral surface area.\n    '''\n    surface_area = math.pi * (r**2) * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'\\s|,|\\.')\n    text = pattern.sub(':', text)\n    return text\n\ntext = \"This,is,a:test\"\nprint(replace_specialchar(text))"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'\\s|\\\\|/'\n    new_text = re.sub(pattern, ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s\\d]', '', text)  # Remove special characters\n    text = re.sub(r'\\s+', ':', text)  # Replace multiple spaces with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s|,|\\.')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]|[-\\.,]', re.IGNORECASE)\n    return pattern.sub('', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for replacing special characters\n    pattern = r'[\\s,.]+'\n\n    # Replace special characters with a colon\n    text = re.sub(pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[., ]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s\\S]', '', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[., ]', ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function finds the index of the first occurrence of a given number x in a sorted array A.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left == len(A) or A[left]!= x:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n    i = 0\n    while i < len(A) - 1 and A[i] <= x:\n        i += 1\n    if A[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0  # initialize pointer to start of array\n    j = len(A) - 1  # initialize pointer to end of array\n\n    while i <= j:\n        mid = (i + j) // 2  # calculate middle index\n        if A[mid] == x:  # check if middle element matches x\n            if mid == 0 or A[mid - 1]!= x:  # check if middle element is first occurrence\n                return mid\n            j = mid - 1  # update end of array to mid-1\n        elif A[mid] < x:\n            i = mid + 1  # update start of array to mid+1\n        else:\n            j = mid - 1  # update end of array to mid-1\n\n    return -1  # if x not found, return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    if i == n:\n        return -1\n    if A[i] == x:\n        return i\n    return find_first_occurrence(A, x, i)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x in A. If x is not found in A, it returns -1.\n    \"\"\"\n    i = 0\n    n = len(A)\n    \n    # Check if the first element of the array is equal to x\n    if A[0] == x:\n        return 0\n    \n    # If not, check if the first element is greater than x\n    if A[0] > x:\n        return -1\n    \n    # If not, increment the index and start checking the remaining elements\n    while i < n:\n        if A[i] == x:\n            return i\n        \n        # If x is greater than the current element, we know that it cannot be in the first occurrence of x\n        if A[i] > x:\n            break\n        \n        i += 1\n    \n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n\n    for i in range(n):\n        prod *= arr[i]\n\n    result = 0\n\n    for i in range(n):\n        left = i\n        right = i\n\n        while left >= 0 and right < n:\n            result += prod * arr[right]\n            left -= 1\n            right += 1\n\n        result -= prod * arr[left+1]\n        prod /= arr[i]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n+1)\n\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i] += arr[j] * dp[j]\n\n    ans = 0\n    for i in range(1, n+1):\n        ans += arr[i-1] * dp[i]\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n\n    for i in range(1, n+1):\n        sub_arr = arr[0:i]\n        sub_arr_prod = 1\n        for j in range(i):\n            sub_arr_prod *= sub_arr[j]\n        res += sub_arr_prod\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    # calculate the cumulative sum of the array\n    csum = [0] * (n + 1)\n    for i in range(n):\n        csum[i + 1] = csum[i] + arr[i]\n    # initialize the result and a list to store the products\n    result = 0\n    product_list = []\n    # calculate the product of the first subarray\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    product_list.append(product)\n    # calculate the sum of products of subarrays of length 1 to n\n    for i in range(n):\n        for j in range(i, n):\n            result += product_list[j] * csum[j + 1] - product_list[i] * csum[i]\n            product *= arr[j]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0]*(2*n)\n    \n    # base case: empty list\n    if n == 0:\n        return 0\n    \n    # base case: single element list\n    if n == 1:\n        return arr[0]\n    \n    # fill dp array\n    for i in range(1, 2*n):\n        dp[i] = dp[i-1] + arr[i-1]\n    \n    # find sum of products of all possible sublists\n    subprod = 1\n    sum_prod = 0\n    for i in range(n):\n        subprod *= arr[i]\n        if i < n-1:\n            subprod *= dp[2*n-1]\n        sum_prod += subprod\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    def subarray_prod(arr, i, j):\n        if i == 0:\n            return 1\n        return arr[i] * subarray_prod(arr, i-1, j)\n    \n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1] * arr[i]\n    \n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans += subarray_prod(arr, i, j) * dp[j]\n    \n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    suffix_sum = [0] * (n + 1)\n\n    # Compute prefix and suffix sums\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n        suffix_sum[n - i + 1] = suffix_sum[n - i] + arr[n - i]\n\n    # Initialize result\n    result = 0\n\n    # Compute sum of products of all possible sublists of length k\n    for k in range(1, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            result += (prefix_sum[j + 1] - prefix_sum[i] - suffix_sum[j + 1] + suffix_sum[i + 1]) * arr[i]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    subarray_sum = []\n    for i in range(n):\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n            subarray_sum.append(temp)\n\n    # Finding sum of products of all possible sublists\n    product_sum = 0\n    for i in range(n):\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n            product_sum += subarray_sum[j]\n\n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize a list to store products of sublists\n    sublist_prod = [1] * n\n\n    # Calculate products of sublists recursively\n    for i in range(1, n):\n        for j in range(i):\n            sublist_prod[i] *= arr[i] - arr[j]\n\n    # Initialize a variable to store sum of products\n    sum_p = 0\n\n    # Calculate sum of products of sublists\n    for i in range(1, n):\n        sum_p += sublist_prod[i]\n\n    return sum_p"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n            result += product\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Take the first and the last bits\n    bit1 = n & 1\n    bit7 = n >> 7\n\n    # Toggle the other bits\n    n = n ^ (bit1 + bit7)\n\n    # Replace the first and the last bits with the original values\n    n = n & ~(bit1 + bit7)\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n >> 1) ^ (n >> 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # extract the first and last bits\n    first_bit = n & 1\n    last_bit = n >> 31\n    # toggle the middle bits\n    middle_bits = ((n & 0xAAAAAAAA) ^ 0xAAAAAAAA) >> 1\n    # concatenate the first and last bits with the middle bits\n    result = (first_bit << 31) | (middle_bits << 1) | (last_bit >> 1)\n    # return the final result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_half = n & ~(1 << (n.bit_length() // 2))\n    second_half = n ^ (1 << (n.bit_length() // 2))\n    return first_half | second_half"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n & 0x5555555555555555)   # toggle bits except the first and the last bit\n    n = n ^ (n & 0xAAAAAAAAAAAAAAAA)   # toggle bits except the first and the last bit\n    n = n ^ (n & 0x3333333333333333)   # toggle bits except the first and the last bit\n    n = n ^ (n & 0xCCCCCCCCCCCCCCCC)   # toggle bits except the first and the last bit\n    return n  \n  \n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Calculate the position of the first and last bits\n    first_bit_pos = n.bit_length() - 1\n    last_bit_pos = 0\n\n    # Toggle the middle bits\n    for i in range(len(n)):\n        if i == 0 or i == first_bit_pos or i == last_bit_pos:\n            continue\n        n[i] = not n[i]\n\n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n    # toggle the middle bits\n    middle_bits = (~first_bit & last_bit) | (first_bit & ~last_bit)\n    # combine the middle bits with the first and last bits of the number\n    n = (n & (~middle_bits)) | middle_bits\n    # return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n\n    # Iterate through each bit in the number and toggle it if it's not the first or last bit\n    for i in range(num_bits):\n        if i == 0 or i == num_bits - 1:\n            continue\n        if n & (1 << i):\n            n ^= (1 << i)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(0b11) #mask for last two bits\n    first_bit_mask = ~(0b1) #mask for first bit\n    last_bit_mask = ~(0b10) #mask for last bit\n    #set the first and last bits\n    n = (n & last_bit_mask) | (n & first_bit_mask)\n    #toggle the middle bits\n    n = (n & mask) ^ mask\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    \n    # Initialize the first and last bits as 0\n    first_bit = 0\n    last_bit = num_bits - 1\n    \n    # Toggle the bits of the number except for the first and last bits\n    for i in range(num_bits - 2):\n        if n & (1 << i):\n            n |= (1 << i) << 1\n        else:\n            n &= ~(1 << i) << 1\n    \n    # Reset the first and last bits to their original values\n    n = (n & ~(1 << first_bit)) | ((n & (1 << first_bit)) ^ (n & (1 << last_bit)))\n    \n    # Reset the last bit to the original value\n    n = (n & ~(1 << last_bit)) | ((n & (1 << last_bit)) ^ (n & (1 << first_bit)))\n    \n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    :param a: sorted list\n    :type a: list\n    :param x: specified value\n    :type x: any\n    :return: left insertion point\n    :rtype: int\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif index == 0:\n        return index\n    elif a[index-1] > x:\n        return index-1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a):\n        return len(a)\n    elif a[idx] == x:\n        return idx\n    else:\n        return idx - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the left insertion point by using binary search.\n    left_index = bisect.bisect_left(a, x)\n    # Check if the left_index is equal to the length of the sorted array or not.\n    if left_index == len(a):\n        # If it is, then the insertion point is the last element.\n        return len(a)\n    # If the value is already present in the sorted array, then the left insertion point is the previous index.\n    elif a[left_index] == x:\n        return left_index - 1\n    # If the value is not present, then the left insertion point is the left index.\n    else:\n        return left_index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the left insertion point for x in a.\n    left = bisect.bisect_left(a, x)\n    # If x is already in the sorted list, the left insertion point is the index of x.\n    if left < len(a) and a[left] == x:\n        return left\n    # Otherwise, search for the leftmost element greater than x in the sorted list.\n    elif left > 0 and a[left-1] < x:\n        return left-1\n    # If no element is found, return -1 to indicate that x should be inserted at the leftmost position.\n    else:\n        return -1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*' \n    pattern = re.compile(regex) \n    match = pattern.match(string) \n    if match: \n        print(f\"{string} starts with a vowel\") \n    else: \n        print(f\"{string} does not start with a vowel\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"The string is starting with a vowel.\")\n    else:\n        print(\"The string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 / n) * (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n, r):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1, r) - r"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    Args:\n    n (int): Positive integer n.\n\n    Returns:\n    float: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 10**(n-1)\n    for i in range(count, -1, -1):\n        triangular_num = i * (i+1) // 2\n        triangular_digits = math.log10(triangular_num) + 1\n        if triangular_digits == n:\n            return i\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return math.log10(10**n - 1) // math.log10(10) - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \n    :param n: the number of digits in the triangular number to be found.\n    :return: the index of the smallest triangular number with n digits.\n    \"\"\"\n    \n    triangular_nums = []\n    \n    for i in range(1, 10**n+1):\n        triangular_nums.append(i * (i+1) // 2)\n        \n    min_triangular_num = math.inf\n    index_of_min_triangular_num = -1\n    \n    for i in range(len(triangular_nums)):\n        if triangular_nums[i] < min_triangular_num:\n            min_triangular_num = triangular_nums[i]\n            index_of_min_triangular_num = i\n            \n    return index_of_min_triangular_num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #initialize max and min values for triangular number\n    max_tri = 10**(n-1)\n    min_tri = 1\n\n    #loop till max_tri is reached\n    while True:\n        #loop till min_tri is reached\n        while True:\n            #check if triangular number is greater than max_tri\n            if math.factorial(n) // math.factorial(n - 1) // math.factorial(max_tri) == 0:\n                #if triangular number is greater than max_tri, then increment max_tri\n                if max_tri < 10**(n-1):\n                    max_tri *= 10\n                else:\n                    max_tri += 1\n            else:\n                #if triangular number is smaller than max_tri, then decrement min_tri\n                min_tri *= 10\n\n            #if max_tri is reached, then break the outer loop\n            if max_tri > 10**(n-1):\n                break\n\n        #if min_tri is reached, then break the inner loop\n        if min_tri < 10**(n-1):\n            break\n\n    #find the index of min_tri\n    index = math.log10(min_tri)\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Initialize variables\n    index = 0\n    i = 0\n    triangular_num = 0\n    \n    # Loop to calculate the triangular numbers\n    while i <= n:\n        triangular_num = math.trunc(math.sqrt(2 * i + 1) / 2)\n        index += triangular_num\n        \n        # If n is equal to index, exit the loop\n        if n == index:\n            break\n        \n        # Increment i by 1\n        i += 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Base cases \n    if n == 1: \n        return 0\n    if n == 2: \n        return 1\n\n    # Initialize variables \n    index = 0\n    smallest_triangular_num = 1\n    temp = 1\n\n    # Iterate until the smallest triangular number is found with n digits \n    while (temp % 10**n!= 0): \n        index += 1\n        temp = smallest_triangular_num + index\n        smallest_triangular_num = temp\n\n    # Return the index of the smallest triangular number with n digits \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    for i in range(1, 10**n):\n        triangular_numbers.append(i)\n    for i in range(10**n-1, 10**(n-1)-1, -1):\n        triangular_numbers.append(i)\n    min_triangular_number = math.floor(triangular_numbers[0])\n    min_index = triangular_numbers.index(min_triangular_number)\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # calculate the maximum index for the given n\n    max_index = math.factorial(n) // (math.factorial(n-1) * 2)\n\n    # initialize variables for the smallest triangular number and its index\n    smallest_triangular = 0\n    index = 0\n\n    # loop through the maximum index and find the smallest triangular number and its index\n    for i in range(max_index):\n        triangular = i * (i+1) // 2\n\n        # check if the triangular number has n digits\n        if len(str(triangular)) == n:\n            # if the triangular number is smaller than the current smallest triangular number, update the variables\n            if triangular < smallest_triangular:\n                smallest_triangular = triangular\n                index = i\n\n    # return the smallest triangular number and its index\n    return smallest_triangular, index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function takes a positive integer n as input and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n\n    # Helper function to calculate the value of a triangular number\n    def triangular_value(n): \n        return int(math.pow(10, n) * math.log10(5 * math.pow(10, n)) + 0.5)\n\n    # Helper function to check if a number is a triangular number\n    def is_triangular(n): \n        return triangular_value(len(str(n))) == n\n\n    # Helper function to calculate the smallest triangular number with n digits\n    def smallest_triangular(n): \n        return triangular_value(n) * triangular_value(n + 1)\n\n    # Helper function to check if a number is a triangular number with n digits\n    def is_smallest_triangular(n): \n        triangular_num = smallest_triangular(n)\n        return is_triangular(triangular_num) and len(str(triangular_num)) == n\n\n    # Iterate over all the digits of n\n    for i in range(n): \n        if is_smallest_triangular(i + 1): \n            return i + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    max_value = 9 * 9 * 9 * 9 * 9 + 9 * 9 * 9 * 9 + 9 * 9 * 9 + 9 * 9 + 9\n    min_value = 10 ** (n - 1)\n\n    if min_value > max_value:\n        return \"Invalid Input\"\n\n    for i in range(min_value, max_value):\n        if math.sqrt(i) ** 2 == int(math.sqrt(i)) ** 2 + i:\n            return i\n\n    return \"Invalid Input\""
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n\n    # Traverse through the tuple elements and add them as key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The given tuple must have an even number of elements\")\n\n    # initialize an empty dictionary\n    result_dict = {}\n\n    # loop through the tuple elements and assign adjacent elements as values to keys\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    new_dict = {}\n    i = 0\n    while i < len(test_tup)-1:\n        new_dict[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Check if the input is a tuple\n    if type(test_tup)!= tuple:\n        raise TypeError(\"Input must be a tuple\")\n    \n    # Create a dictionary to store the key-value pairs\n    key_value_dict = {}\n    \n    # Iterate over the input tuple and add adjacent elements to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        key_value_dict[key] = value\n    \n    # Return the dictionary\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initializing an empty dictionary\n    result_dict = {}\n    # iterating over the tuple and adding the adjacent elements as key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Use zip to create a sequence of tuples where each tuple contains two adjacent elements from the original tuple\n    zipped = zip(test_tup[::2], test_tup[1::2])\n    # Use dict() to convert the zipped sequence into a dictionary\n    return dict(zipped)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Create an empty dictionary\n    my_dict = {}\n\n    # Iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # initialize an empty dictionary\n    dict_obj = {}\n    # loop through the tuple and add each adjacent pair to the dictionary\n    for i in range(0, len(test_tup)-1):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    # return the final dictionary\n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0] == s[0]\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string s as input and returns True if all the characters are same else it returns False.\n    \"\"\"\n    # Convert string to list\n    s_list = list(s)\n    # Check if all the characters in the list are same\n    if s_list.count(s_list[0]) == len(s_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for i in s:\n        if first_char!= i:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the string is empty or not\n    if len(s) == 0:\n        return True\n    \n    # Get the first character of the string\n    first_char = s[0]\n    \n    # Loop through the string\n    for char in s:\n        # If the character is not equal to the first character, return False\n        if char!= first_char:\n            return False\n    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    all_chars = set(s)\n    if len(all_chars) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the length of the string is greater than 0\n    if len(s) == 0:\n        return True\n    # Convert the string into a list of characters\n    characters = list(s)\n    # Check if all the characters are equal to the first character in the list\n    if characters[0] == characters[1]:\n        return all_Characters_Same(characters[2:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Checking if all the characters are same or not\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0] == s[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/2 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6*side**2/(4*math.tan(math.pi/6))\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** (1 / 2)\n    return 6 * math.pi * s ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3 * side**2) ** (1/2)\n    area = math.sqrt(s * (s - side) * (s - (side ** 2)))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the half-perimeter\n    half_perimeter = side / 2\n    \n    # calculate the area of the tetrahedron\n    area = math.sqrt(3) / 4 * half_perimeter**2\n    \n    # return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3 * side**2) / (10 * math.tan(math.pi / 3))\n    return s\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = 2 * (side + math.sqrt(3) * side)\n    \n    # calculate the area of the tetrahedron\n    area = (1/6) * side * side * side\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3*side**2)/12\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 3\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # find the number of rotations required to rotate n elements to the right by m\n    k = n - m\n    # reverse the first k elements\n    list = list[::-1]\n    # reverse the rest of the list\n    list = list[::-1]\n    # reverse the first k elements again\n    list = list[::-1]\n    # return the rotated list\n    return list[:m] + list[m:]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m %= n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    if m == 0:\n        return list\n    elif m % n == 0:\n        return list[-m:] + list[:-m]\n    else:\n        return list[-m:] + list[:-m] + list[-m+1:]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function will rotate the list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst.append(lst.pop(0))\n    lst = lst[-n:] + lst[:n-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list = list[n - m:] + list[:n - m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    n = len(list)\n    m = m % n\n\n    for i in range(m):\n        list.append(list.pop(0))\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m >= n:\n        return list\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function rotates a list to the right by m items.\n    \n    Parameters:\n    lst (list): List to be rotated.\n    m (int): Number of items to rotate by.\n    \n    Returns:\n    List: Rotated list.\n    \"\"\"\n    n = len(lst)\n    if m == 0:\n        return lst\n    elif m == n:\n        return lst[:m] + lst[-n:]\n    else:\n        return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Calculate the new length of the list after rotating\n    new_len = n - m % n\n    # Initialize the new list with zeros\n    new_list = [0] * new_len\n    # Copy the m items from the original list to the new list\n    for i in range(m):\n        new_list[i] = list[i]\n    # Copy the remaining items from the original list to the end of the new list\n    for i in range(m, n):\n        new_list[i - m] = list[i]\n    # Return the new list\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and a number m as input and returns the rotated list by m items to the right direction.\n    \"\"\"\n    # Initialize a variable to store the length of the list\n    length = len(list)\n    \n    # Check if m is greater than the length of the list\n    if m > length:\n        m = m % length\n    \n    # Initialize an empty list to store the rotated list\n    rotated_list = []\n    \n    # Traverse the list from the last to the first item and add each item to the rotated list\n    for i in range(length-m, length):\n        rotated_list.append(list[i])\n    \n    # Traverse the list from the first to the last item and add each item to the rotated list\n    for i in range(length-m, -1, -1):\n        rotated_list.append(list[i])\n    \n    return rotated_list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if it contains any none value, False otherwise.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if it contains any None value, and False otherwise.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    # define lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda num, digit: (num//digit) * digit == num\n\n    # use list comprehension to find all numbers within the given range that are divisible by every digit\n    result = [num for num in range(startnum, endnum+1) if all(is_divisible_by_digit(num, d) for d in str(num))]\n\n    # return the list of divisible numbers\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % i == 0 for d in str(x)) and x >= startnum and x <= endnum, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = []\n    for num in range(startnum, endnum+1):\n        for digit in str(num):\n            if digit not in digits:\n                digits.append(digit)\n    return lambda x: all(digit in str(x) for digit in digits)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(digit) % (num // int(digit)) == 0 for digit in str(num))\n    \n    return filter(is_divisible_by_digits, range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(n):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(d) for d in str(n)]\n        return all(d == 0 or n % d == 0 for d in digits)\n\n    # Filter the numbers within the range and check if they are divisible by every digit they contain\n    filtered_nums = list(filter(lambda x: is_divisible_by_digits(x), range(startnum, endnum+1)))\n    return filtered_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n\n    # create a list of digits in the range\n    digits = [int(digit) for digit in str(startnum) + str(endnum)]\n\n    # create a list of all possible divisors of each digit in the range\n    divisors = []\n    for digit in digits:\n        divisors.append([1, 2, 3, 4, 5, 6, 7, 8, 9]) if digit < 10 else divisors.append([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n\n    # create a list of all possible combinations of numbers and digits that meet the criteria\n    combinations = []\n    for num in range(startnum, endnum+1):\n        for digit in digits:\n            for divisor in divisors:\n                if num % divisor == 0:\n                    combinations.append(num)\n\n    return combinations"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments startnum and endnum and returns a list of all numbers within the given range\n    where every number is divisible by every digit it contains.\n    \"\"\"\n    # using a lambda function to filter out numbers that are not divisible by every digit\n    filtered_nums = list(filter(lambda x: all(d in str(x) for d in str(x)), range(startnum, endnum+1)))\n    return filtered_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        return all(num % digit == 0 for digit in str(num))\n    return list(filter(is_divisible_by_digit, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        return all(int(d) in str(num) for d in str(num))\n\n    return filter(is_divisible_by_digits, range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def check_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0 or digit > 9:\n                return False\n        return True\n\n    return list(filter(check_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is within range\n    if a > 360:\n        return None\n    \n    # Calculate area using formula\n    area = math.pi * r**2 * (1 - math.cos(math.radians(a)))\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * math.sin(math.radians(a))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Calculate the angle in radians\n    angle = math.radians(a)\n\n    # Check if the angle is within the valid range\n    if angle > math.pi:\n        return None\n\n    # Calculate the area using the formula for a circle\n    area = math.pi * r ** 2\n\n    # Return the area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r*r*math.sin(math.radians(a/2))\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Convert the angle to radians\n    a = math.radians(a)\n\n    # Check if the angle is less than 360 degrees\n    if a > math.pi:\n        return None\n\n    # Calculate the area of the sector using the formula A = \u03c0r^2 * sin(a/2)\n    area = math.pi * r**2 * math.sin(a/2)\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    a = math.radians(a)\n    \n    # Calculate area using Pythagorean theorem\n    area = 0.5*r*r*math.sin(a)\n    \n    # Return the area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a 3D table to store lengths of longest common subsequences of subsequences of X, Y, and Z\n    T = [[[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] for k in range(len(Z)+1)]\n\n    # fill the table in bottom-up manner\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    T[i][j][k] = T[i-1][j-1][k-1] + 1\n                else:\n                    T[i][j][k] = max(T[i-1][j][k], T[i][j-1][k], T[i-1][j-1][k-1])\n\n    # backtrack to find the LCS\n    i, j, k = len(X), len(Y), len(Z)\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif T[i-1][j][k] == T[i][j][k-1]:\n            i -= 1\n        elif T[i][j-1][k] == T[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the LCS and return it\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n\n    # Taking the maximum length of all the three strings \n    n = max(len(X), len(Y), len(Z)) \n\n    # Initializing the table to store the lengths of subsequences for \n    # all prefixes of X, Y and Z \n    table = [[0 for j in range(n + 1)] for i in range(n + 1)] \n\n    # Traversing through all prefixes of X, Y and Z \n    for i in range(1, n + 1): \n        for j in range(1, n + 1): \n\n            # If the characters at the i-th and j-th positions of X, Y and Z are same, then we can \n            # consider the length of their longest common subsequence as (i - 1) + (j - 1) \n            if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[i - 1]: \n                table[i][j] = table[i - 1][j - 1] + 1\n\n            # If the characters at the i-th and j-th positions of X, Y and Z are not same, then we \n            # need to take the maximum of three options: \n            # 1. Include the characters at the i-th and j-th positions in the subsequence \n            # 2. Include the character at the i-th position only in the subsequence \n            # 3. Include the character at the j-th position only in the subsequence \n            else: \n                table[i][j] = max(table[i - 1][j], table[i][j - 1], table[i - 1][j - 1])\n\n    # Returning the length of the longest common subsequence \n    return table[n][n] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    # creating a 2D table to store the length of longest common subsequence of two strings\n    # and the length of longest common subsequence of three strings\n    table = [[0 for j in range(len(Z) + 1)] for i in range(len(X) + 1)]\n\n    # filling the table row by row\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Z) + 1):\n            if X[i - 1] == Z[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # backtracking to find the actual longest common subsequence\n    i = len(X)\n    j = len(Z)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Z[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # return the longest common subsequence as a string\n    return ''.join(lcs[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 2D array to store lengths of LCS for all paths\n    dp = [[0 for j in range(o+1)] for i in range(m+1)]\n\n    # Fill the matrix in bottom up manner.\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                # If last characters are same, then LCS of this 3 strings is\n                # the LCS of the remaining 2 strings.\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                # If last character of X is same as last character of Y, then LCS\n                # of this 3 strings is LCS of the previous 3 strings and the\n                # last character of Z.\n                elif X[i-1] == Y[j-1]:\n                    dp[i][j] = dp[i-1][j]\n                # If last character of Y is same as last character of Z, then LCS\n                # of this 3 strings is LCS of the previous 2 strings and the\n                # last character of X.\n                elif Y[j-1] == Z[k-1]:\n                    dp[i][j] = dp[i][j-1]\n                # If last characters are different, then LCS of this 3 strings\n                # is the maximum of LCS of the previous 2 strings and the\n                # previous 3 strings.\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n\n    # Print the length of LCS for all paths.\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                print(dp[i][j], end=' ')\n            print()\n\n    # Return the length of LCS for all paths.\n    return dp[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = [[0] * (n+1) for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n    return p\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    def lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n\n        # create a table to store LCS lengths\n        table = [[0] * (o+1) for i in range(m+1)]\n\n        # fill table in bottom up manner\n        for i in range(m+1):\n            for j in range(n+1):\n                for k in range(o+1):\n                    if i == 0 or j == 0 or k == 0:\n                        table[i][j][k] = 0\n                    elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                        table[i][j][k] = table[i-1][j-1][k-1] + 1\n                    else:\n                        table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n        # backtrack to find LCS\n        i = m\n        j = n\n        k = o\n        lcs_str = \"\"\n        while i > 0 and j > 0 and k > 0:\n            if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                lcs_str = X[i-1] + lcs_str\n                i -= 1\n                j -= 1\n                k -= 1\n            elif table[i-1][j][k] == table[i][j][k-1]:\n                i -= 1\n            elif table[i][j-1][k] == table[i-1][j][k]:\n                j -= 1\n            else:\n                k -= 1\n\n        return lcs_str\n\n    return lcs(X, Y, Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[[0 for j in range(p + 1)] for i in range(m + 1)] for k in range(n + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    lcs = \"\"\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i][j - 1][k]:\n            i -= 1\n        elif dp[i][j - 1][k] == dp[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    L = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j]\n            elif X[i-1] == Z[j-1]:\n                L[i][j] = L[i][j-1]\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    i = m\n    j = p\n    lcs = []\n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[j-1]:\n            j -= 1\n\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for _ in range(n+1)]\n\n    # Build the matrix\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    # Build the lcs\n    i = n\n    j = m\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "Let's write the Python code for this approach.<|im_sep|>"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Using regular expressions to match and replace words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    result = re.sub(pattern, r'\\1', str1)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'(?<=[a-z])[A-Z]|(?<=\\s)[A-Z](?=[a-z])', r' \\1', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n    # Initialize a new list to store the words with spaces\n    new_words = []\n    # Loop through each word in the original list\n    for word in words:\n        # Check if the first character of the word is capital\n        if word[0].isupper():\n            # If it is, add a space and the rest of the word to the new list\n            new_words.append(\" \" + word)\n        # If the first character is not capital, just add it to the new list\n        else:\n            new_words.append(word)\n    # Join the new list of words with spaces into a single string\n    final_str = \" \".join(new_words)\n    # Return the final string with spaces between words starting with capital letters\n    return final_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub('([a-z])([A-Z])', r'\\1 \\2', str1) # Replace capital letters with spaces in the string\n    str1 = re.sub('([A-Z])([A-Z])', r'\\1 \\2', str1) # Replace capital letters with spaces in the string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # define a regular expression pattern to match capitalized words\n    pattern = re.compile(r'\\b\\w+\\b')\n    \n    # split the string into words\n    words = pattern.findall(str1)\n    \n    # join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # replace all non-alphanumeric characters with spaces\n    str2 = re.sub(r'[^\\w\\s]','', str1)\n    # split the string into words\n    words = str2.split()\n    # join the words with spaces between them\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'\\b[A-Z]+\\b', r' \\1 ', str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'\\W+', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word and join the words with spaces\n    result =''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]','', str1)\n\n    # Split the string into words\n    words = str1.split()\n\n    # Capitalize the first letter of each word and join them back with spaces\n    words = [word[0].upper() + word[1:] for word in words]\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'\\b\\w*[A-Z][a-z]*\\w*\\b'\n    words = re.findall(pattern, str1)\n    result =''.join(words)\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    # remove non-numeric strings from the list\n    nums_str = [num for num in nums_str if num.isdigit()]\n    # convert the list of numeric strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # sort the list of integers numerically\n    nums.sort()\n    # convert the sorted list of integers back to a list of strings\n    nums_str = [str(num) for num in nums]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: (int(x) if x.isdigit() else float('inf'), x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            nums.append(num_str)\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    num_list = []\n    for num_str in nums_str:\n        if num_str.isnumeric():\n            num_list.append(int(num_str))\n        else:\n            num_list.append(num_str)\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings of numbers to lists of integers\n    nums_int = [int(num_str) for num_str in nums_str if num_str.isdigit()]\n    # Sort the lists of integers\n    nums_int.sort()\n    # Convert the lists of integers back to strings of numbers\n    nums_str = [str(num) for num in nums_int]\n    # Join the sorted list of strings of numbers into a single string\n    sorted_nums_str = ''.join(nums_str)\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all the strings to integers\n    nums_int = [int(x) for x in nums_str]\n\n    # Sort the integers using the built-in `sorted()` function\n    nums_sorted = sorted(nums_int)\n\n    # Convert the sorted integers back to strings and return the list of strings\n    return [str(x) for x in nums_sorted]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    \"\"\"\n    nums = []\n    for num_str in nums_str:\n        num = float(num_str)\n        nums.append(num)\n    nums.sort()\n    result = [str(num) for num in nums]\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert the string list to a list of numeric values\n    nums_list = [int(num) for num in nums_str]\n\n    # Sort the list of numeric values in ascending order\n    nums_list.sort()\n\n    # Convert the sorted list of numeric values back to a string list\n    sorted_nums_str = [str(num) for num in nums_list]\n\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Check if the given list is empty\n    if not test_list:\n        print(\"Error: The list is empty.\")\n        return\n\n    # Check if the given tuple is empty\n    if not test_tup:\n        print(\"Error: The tuple is empty.\")\n        return\n\n    # Check if the length of the given tuple and the given list are same\n    if len(test_list)!= len(test_tup):\n        print(\"Error: The length of the tuple and the list should be same.\")\n        return\n\n    # Add the given tuple to the given list\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n\n    # Print the updated list\n    print(\"Updated list:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Using a loop to iterate over the tuple\n    for element in test_tup:\n        # Using the append method to add each element to the list\n        test_list.append(element)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Check if the input is a list and a tuple\n    if isinstance(test_list, list) and isinstance(test_tup, tuple):\n        # Concatenate the two tuples\n        result_tup = test_list + test_tup\n        # Return the result tuple\n        return result_tup\n    else:\n        # Raise an error if the input is not a list or a tuple\n        raise TypeError(\"The input must be a list and a tuple.\")"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Concatenate the two tuples into a new list\n    new_list = test_list + list(test_tup)\n    # Return the concatenated list\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n\n    return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: when we reach the end of the array, return True\n    if i >= len(arr):\n        return True\n    \n    # If the left child is smaller than the current node, then the array is not a min heap\n    if arr[2*i] > arr[i]:\n        return False\n    \n    # If the left child is smaller than the parent node, then the array is not a min heap\n    if arr[2*i] < arr[i]:\n        return False\n    \n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    if i * 2 + 1 <= len(arr) - 1 and arr[i] < arr[i*2+1]:\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    if i > len(arr) // 2:\n        return False\n    if arr[i] <= arr[i//2]:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return False\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function takes an array and an index i. The function checks if the given array is a min heap or not.\n    If the array is a min heap, then the index i will have the minimum value.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_idx = i\n\n    if left < len(arr) and arr[left] < arr[min_idx]:\n        min_idx = left\n\n    if right < len(arr) and arr[right] < arr[min_idx]:\n        min_idx = right\n\n    if min_idx!= i:\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        check_min_heap_helper(arr, min_idx)\n\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input. The function checks if the given array is a min heap or not.\n    If the array is a min heap, then the function will return True.\n    '''\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] > arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    elif arr[i] > arr[i // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a binary heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        if arr[i] < arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] > arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the root is greater than or equal to the last element in the array\n    if arr[0] >= arr[i]:\n        return False\n\n    # If the root is less than or equal to the last element in the array, then it is a min heap\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n\n    # Set the size of the array to the total number of elements in the array\n    size = len(arr)\n\n    # Traverse through the array to check if each element is a min heap\n    for i in range(size//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    # If all elements are min heaps, then the array represents a min heap\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, 2*a + b\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Find the nth Jacobsthal number.\n    \"\"\"\n    j = 0\n    a = 0\n    b = 1\n    while j < n:\n        c = (a + b) % 2\n        a = b\n        b = c\n        j += 1\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the jacobsthal number to 0 \n    jacobsthal_num = 0 \n\n    # Loop through the range of numbers from 1 to n \n    for i in range(1, n+1): \n\n        # Calculate the next jacobsthal number by adding the current jacobsthal number and 1\n        jacobsthal_num = jacobsthal_num + 1 \n\n        # If the next jacobsthal number is odd, then it is a composite number \n        if jacobsthal_num % 2 == 1: \n\n            # Calculate the sum of the first n odd numbers \n            sum_of_odds = sum([i for i in range(1, n+1) if i % 2 == 1]) \n\n            # If the sum of the odd numbers is greater than the current jacobsthal number, then the current jacobsthal number is a prime number \n            if sum_of_odds > jacobsthal_num: \n                return jacobsthal_num \n\n    # If the loop completes without finding a prime number, then the nth jacobsthal number is a composite number \n    return None "
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + (4*jacobsthal_num(n-2))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    count = 1\n    while count <= n:\n        a, b = b, a + b\n        count += 1\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1) + 1) // 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob_num = 0\n    lucas_num = 1\n    for i in range(1, n+1):\n        jacob_num = (lucas_num*lucas_num) + jacob_num\n        lucas_num = 2*lucas_num\n    return jacob_num\n\nn = int(input(\"Enter the number of terms: \"))\nresult = jacobsthal_num(n)\nprint(f\"The {n}th jacobsthal number is: {result}\")"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    jacobsthal = [0, 1]\n    for i in range(2, n):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n    return jacobsthal[-1]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize minimum count and minimum element\n    min_count = K\n    min_element = test_list[0][1]\n\n    # Traverse the list from right to left and update minimum count and minimum element\n    for i in range(len(test_list) - 1, -1, -1):\n        if len(test_list) - i >= min_count:\n            min_element = min(min_element, test_list[i][1])\n        else:\n            break\n\n    return min_element"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize the minimum count to the first k records\n    min_count = K\n\n    # Initialize the minimum element to the first k records\n    min_element = test_list[:min_count][-1][0]\n\n    # Iterate over the remaining records and update the minimum element and count if necessary\n    for i in range(min_count, len(test_list)):\n        if test_list[i][0] < min_element:\n            min_element = test_list[i][0]\n            min_count = i + 1\n\n    return min_count, min_element"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    if len(test_list) < K:\n        return \"Not enough records to find minimum K\"\n    else:\n        min_list = sorted(test_list, key=lambda x: x[1])[:K]\n        return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    min_count = float('inf')\n    min_list = []\n    \n    # sorting the list in ascending order of first element\n    test_list.sort(key=lambda x: x[0])\n    \n    # traversing the sorted list and keeping track of minimum count and minimum list\n    for i in range(K):\n        count = 1\n        temp = test_list[i]\n        for j in range(i+1, K):\n            if test_list[j] == temp:\n                count += 1\n            else:\n                break\n        if count < min_count:\n            min_count = count\n            min_list = [test_list[i]]\n        elif count == min_count:\n            min_list.append(test_list[i])\n    \n    # returning the minimum list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Create an empty dictionary to store the count of each element in the list\n    counts = {}\n    # Iterate through the list\n    for element in test_list:\n        # If the element is in the dictionary, increment its count\n        if element in counts:\n            counts[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            counts[element] = 1\n    # Sort the dictionary by values in descending order\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    # Find the minimum K counts in the sorted dictionary\n    min_counts = []\n    for i in range(K):\n        min_counts.append(sorted_counts[i][0])\n    # Return the minimum K counts\n    return min_counts"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    This function takes a list of tuples and a value K as input and returns the minimum k records from the list. \n    If there are less than k records in the list, it returns all the records.\n    '''\n    min_list = []\n    count = 0\n    for tup in test_list:\n        if count < K:\n            min_list.append(tup)\n            count += 1\n        else:\n            if tup < min_list[0]:\n                min_list[0] = tup\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_dict = {}\n    for i, record in enumerate(test_list):\n        if i < K:\n            min_dict[i] = record\n        else:\n            if record[0] < min_dict[min_dict.keys()[-1]]:\n                del min_dict[min_dict.keys()[-1]]\n                min_dict[i] = record\n\n    return min_dict.values()"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    result = []\n    count = 0\n    for i in range(len(test_list)):\n        if count < K:\n            result.append(test_list[i])\n            count += 1\n        else:\n            if test_list[i][1] < result[-1][1]:\n                result.pop()\n                result.append(test_list[i])\n    return result\n\n\ntest_list = [(10, 'A'), (20, 'B'), (30, 'C'), (40, 'D'), (50, 'E')]\nK = 2\nprint(min_k(test_list, K))"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from a list of tuples.\n    This function will return the minimum k records from the list in a list.\n    \"\"\"\n    # Initialize an empty list to store the minimum k records\n    min_k_records = []\n\n    # Sort the list of tuples by the second element (i.e., the second tuple in each tuple)\n    test_list.sort(key=lambda x: x[1])\n\n    # Iterate through the sorted list of tuples\n    for i in range(K):\n        # If the length of the current min_k_records is less than k, add the current tuple to the list\n        if len(min_k_records) < K:\n            min_k_records.append(test_list[i])\n        # If the length of the current min_k_records is greater than or equal to k, and the current tuple is smaller than the first tuple in the min_k_records, update the list\n        elif len(min_k_records) >= K and test_list[i][1] < min_k_records[0][1]:\n            min_k_records[0] = test_list[i]\n\n    # Return the list of minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    # Iterate over the list and update the count dictionary\n    for i in range(len(test_list)):\n        if test_list[i][0] in count_dict:\n            count_dict[test_list[i][0]] += 1\n        else:\n            count_dict[test_list[i][0]] = 1\n    \n    # Sort the count dictionary in ascending order\n    sorted_dict = dict(sorted(count_dict.items()))\n    \n    # Initialize minimum count and minimum record\n    min_count = sorted_dict[min(sorted_dict, key=sorted_dict.get)]\n    min_record = None\n    \n    # Iterate over the sorted dictionary and find the minimum k records\n    for i in range(len(test_list)):\n        if count_dict[test_list[i][0]] == min_count:\n            if min_record is None or (min_record is not None and test_list[i][1] < min_record[1]):\n                min_record = test_list[i]\n                if len(min_record) > 2:\n                    min_record = (min_record[0], min_record[1], min_record[2])\n        elif count_dict[test_list[i][0]] < min_count:\n            break\n    \n    # Return the minimum k records\n    return min_record"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each index in the lists\n    for i in range(len(l1)):\n        \n        # Check if the element at the current index appears in all three lists\n        if l1[i] in l2[i] and l2[i] in l3[i] and l3[i] in l1[i]:\n            \n            # If the element is common, add it to the list of common elements\n            common_elements.append(l1[i])\n            \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize a dictionary to store the common elements\n    common_elements = {}\n    # Loop through each index in the lists\n    for i in range(len(l1)):\n        # Check if the current index exists in both lists\n        if i in l2 and i in l3:\n            # If it does, check if the element at that index is common to all three lists\n            if l1[i] == l2[i] and l1[i] == l3[i]:\n                # If it is, add it to the dictionary\n                if l1[i] not in common_elements:\n                    common_elements[l1[i]] = 1\n                else:\n                    common_elements[l1[i]] += 1\n    # Return the dictionary as a list\n    return list(common_elements.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_elements = []\n    \n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            common_elements.append(l1[index])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l2[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty dictionary to store the common elements\n    common = {}\n    \n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # If the element at the current index is in l2 and l3, add it to the dictionary\n        if l1[i] in l2 and l1[i] in l3:\n            common[l1[i]] = True\n        \n        # If the element at the current index is in l2 and l3, add it to the dictionary\n        elif l1[i] in l2 and l1[i] not in l3:\n            common[l1[i]] = True\n        \n        # If the element at the current index is in l1 and l3 but not in l2, add it to the dictionary\n        elif l1[i] in l3 and l1[i] not in l2:\n            common[l1[i]] = True\n            \n    # Return the list of common elements\n    return common.keys()"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted(numbers)\n    # return the second smallest number\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"List should have at least two elements.\"\n    else:\n        min1 = min(numbers)\n        min2 = min(numbers)\n        for num in numbers:\n            if num < min1:\n                min2 = min1\n                min1 = num\n            elif num < min2 and num!= min1:\n                min2 = num\n        return min2"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None # no second smallest for a list of length 1 or 0\n    \n    smallest = numbers[0]\n    second_smallest = None\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    if len(numbers) < 2:\n        return None\n\n    numbers.sort()\n\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function finds the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"List should have at least 2 elements.\"\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:], key=lambda x: x)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=.*b)'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]{1,}'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match'\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # Define the regular expression pattern to match the text\n    pattern = r'ab+'\n    # Search the text using the pattern and return the matches\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a+b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize variables\n    count = 0\n    # Loop through each string in the list\n    for i in range(len(test_list)):\n        # Loop through each string after the current one\n        for j in range(i+1, len(test_list)):\n            # Check if the reversed version of the current string is a substring of the next string\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] and test_list[j][::-1]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(s):\n    return s == s[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    count = 0\n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i+1, len(string)+1):\n                if string[i:j] == string[j:i][::-1]:\n                    if string[i:j] not in reverse_dict:\n                        reverse_dict[string[i:j]] = 1\n                    else:\n                        reverse_dict[string[i:j]] += 1\n                    count += reverse_dict[string[i:j]]\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    reverse_dict = {}\n    count = 0\n    for i in range(len(test_list)):\n        reverse_str = test_list[i][::-1]\n        if reverse_str in reverse_dict:\n            count += reverse_dict[reverse_str]\n        reverse_dict[test_list[i]] = i\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist = tuple(sorted(sublist))  # sort the sublist to ensure consistent ordering\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    # iterate through the list and convert each list to a tuple\n    for lst in list1:\n        # if the tuple is not already in the dictionary, add it with a count of 1\n        if tuple(lst) not in count_dict:\n            count_dict[tuple(lst)] = 1\n        # otherwise, increment the count of the tuple\n        else:\n            count_dict[tuple(lst)] += 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # initialize an empty dictionary\n    sublists = {}\n\n    # iterate over each element in the list\n    for elem in list1:\n        # convert the element to a tuple if it's not already\n        if not isinstance(elem, tuple):\n            elem = (elem,)\n\n        # iterate over the elements in the tuple\n        for subelem in elem:\n            # check if the subelement is already in the dictionary\n            if subelem in sublists:\n                # increment the count for this subelement\n                sublists[subelem] += 1\n            else:\n                # add the subelement to the dictionary with a count of 1\n                sublists[subelem] = 1\n\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert the list to tuples and count their occurrence in the original list\n    count_dict = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in count_dict:\n            count_dict[item_tuple] += 1\n        else:\n            count_dict[item_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store unique sublists and their count\n    sublist_count = {}\n\n    # Loop through the list and convert each sublist to a tuple\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n\n        # If the tuple already exists in the dictionary, increment its count\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        # If the tuple does not exist in the dictionary, add it with a count of 1\n        else:\n            sublist_count[sublist_tuple] = 1\n\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # initialize an empty dictionary to store the unique sublists and their count\n    sublist_count = {}\n    \n    # loop through each item in the list\n    for item in list1:\n        # convert the item to a tuple and add it to the sublist_count dictionary\n        sublist_count[tuple(item)] = sublist_count.get(tuple(item), 0) + 1\n    \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the counts\n    counts = {}\n    # Iterate through the lists in the list1\n    for i in range(len(list1)):\n        # Convert the i-th list to a tuple\n        tuple_i = tuple(list1[i])\n        # If the tuple already exists in the dictionary, increment its count by 1\n        if tuple_i in counts:\n            counts[tuple_i] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[tuple_i] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    # iterate over the lists in the original list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in count_dict:\n            # increment the count if it does\n            count_dict[tuple(sublist)] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[tuple(sublist)] = 1\n    # return the dictionary containing the counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    counts = {}\n    for sublist in list1:\n        # convert the sublist to a tuple to allow for dictionary lookup\n        sublist_tuple = tuple(sublist)\n        # check if the sublist tuple already exists in the dictionary\n        if sublist_tuple in counts:\n            # increment the count of the sublist tuple by 1\n            counts[sublist_tuple] += 1\n        else:\n            # if the sublist tuple is not in the dictionary, add it with a count of 1\n            counts[sublist_tuple] = 1\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if num.count('.') > 1:\n            return False\n        if num.count('.') == 1:\n            decimal_part = num.split('.')[-1]\n            if len(decimal_part) > 2:\n                return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if '.' in str(float_num) and len(str(float_num).split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Check if the string is a decimal number with a precision of 2\n    if len(num) > 2 and '.' in num and '.' not in num.split('.')[-1]:\n        for char in num.split('.')[1]:\n            if char.isdigit():\n                if len(num.split('.')[1]) > 2:\n                    return False\n            else:\n                return False\n    else:\n        return False\n    \n    # Return True if the string is a decimal number with a precision of 2, False otherwise\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the string starts with a digit\n    if num[0].isdigit():\n        # Check for additional digits\n        for i in range(1, len(num)):\n            if not num[i].isdigit():\n                return False\n        # Check for a decimal point\n        if '.' not in num:\n            return False\n        # Check for a precision of 2\n        if num.count('.')!= 1:\n            return False\n        # Check for a precision of 2 in the decimal part\n        precision = num.split('.')[-1]\n        if len(precision)!= 2:\n            return False\n        # Check if the integer part is at most 999999\n        if int(num) > 999999:\n            return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    # Check if the number consists of only digits and a decimal point\n    if not num.replace('.', '', 1).isdigit():\n        return False\n\n    # Split the number into integer and fractional parts\n    integer, fractional = num.split('.')\n\n    # Check if the number of digits in the integer part is less than 2, or\n    # the number of digits in the fractional part is greater than 2\n    if len(integer) < 2 or len(fractional) > 2:\n        return False\n\n    # Check if the number of digits in the fractional part is less than 2\n    if len(fractional) < 2:\n        return False\n\n    # Check if the number of digits in the integer part is less than or equal to 18\n    if len(integer) > 18:\n        return False\n\n    # Check if the number of digits in the fractional part is less than or equal to 18\n    if len(fractional) > 18:\n        return False\n\n    # Check if the number of digits in the integer part is less than or equal to the number of digits in the fractional part\n    if len(integer) > len(fractional):\n        return False\n\n    # Check if the number of digits in the fractional part is less than or equal to the number of digits in the integer part\n    if len(fractional) > len(integer):\n        return False\n\n    # Check if the integer part consists only of digits 0 and 1\n    for digit in integer:\n        if digit not in '01':\n            return False\n\n    # Check if the fractional part consists only of digits 0 and 1\n    for digit in fractional:\n        if digit not in '01':\n            return False\n\n    # Check if the integer part is a positive number\n    if integer[0] == '0':\n        return False\n\n    # Check if the number is negative\n    if integer[0] == '-':\n        return False\n\n    # If all the checks pass, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        # Split the string into integer and decimal parts\n        integer_part, decimal_part = num.split('.')\n        if len(integer_part) > 0 and integer_part[0] == '0' and len(integer_part) > 1:\n            return False\n        if len(decimal_part) > 2:\n            return False\n        # Check if the decimal part contains only 2 digits\n        for digit in decimal_part:\n            if not digit.isdigit() or len(digit) > 2:\n                return False\n        # Check if the integer part contains only digits or a minus sign\n        for digit in integer_part:\n            if not digit.isdigit() and digit!= '-':\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num or len(num.split('.')[1]) > 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if \".\" not in num:\n            return False\n        num_parts = num.split(\".\")\n        if len(num_parts)!= 2:\n            return False\n        num_int = int(num_parts[0])\n        num_frac = int(num_parts[1])\n        if num_frac == 0:\n            return True\n        elif 0 <= num_int < 10 and 0 <= num_frac < 10:\n            return True\n        elif 0 <= num_int < 100 and 0 <= num_frac < 10:\n            return True\n        elif 0 <= num_int < 1000 and 0 <= num_frac < 100:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the list contains only one element or not\n    if len(arr) == 1:\n        return True\n    \n    # Remove the duplicates from the list\n    arr = list(set(arr))\n    \n    # Check if the length of the list is 1 or not\n    if len(arr) == 1:\n        return True\n    \n    # The list contains more than one element\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n\n    # Creating a set to store unique elements in the array\n    unique_set = set(arr)\n\n    # Checking if the length of the set is equal to 1, if so, then all the elements in the array are unique\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store the unique elements of the list\n    unique_elements = set(arr)\n    # check whether the length of the set is equal to 1\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    # initialize a set to store unique elements in the array\n    unique_set = set()\n    for num in arr:\n        # add each element to the set\n        unique_set.add(num)\n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arr):\n        # if the length is equal, return True\n        return True\n    else:\n        # if the length is not equal, return False\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and checks whether it contains only one distinct element or not.\n    \"\"\"\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    \n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(arr):\n        # if the length of the set is equal to the length of the list, then the list contains only one distinct element\n        return True\n    else:\n        # if the length of the set is not equal to the length of the list, then the list contains more than one distinct element\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the given month number is between 1 and 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    \n    # Check if the given month number contains 30 days\n    if monthnum3 % 2 == 0 and monthnum3!= 2:\n        return \"30 days\"\n    else:\n        return \"No 30 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in months:\n        if months[monthnum3] == 31 and monthnum3 in [4, 6, 9, 11]:\n            print(\"30 days in this month\")\n        else:\n            print(\"30 days in this month, but not the last day of the month\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the month number is between 1 and 12\n    if monthnum < 1 or monthnum > 12:\n        return False\n    \n    # Get the number of days in the given month\n    if monthnum == 2:\n        days_in_month = 29\n    elif monthnum in [4, 6, 9, 11]:\n        days_in_month = 30\n    else:\n        days_in_month = 31\n    \n    return days_in_month"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True\n    else:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum = int(monthnum3) # convert string to integer\n    if monthnum in [1,3,5,7,8,10,12]: # check if month number is in the list of months with 30 days\n        return True\n    elif monthnum in [4,6,9,11]: # check if month number is in the list of months with 31 days\n        return False\n    else: # if the month number is not in either list, return False\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum <= 3:\n        return False\n    elif 4 <= monthnum <= 6:\n        return True\n    elif 7 <= monthnum <= 9:\n        return True\n    elif 10 <= monthnum <= 12:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n    min_diff = float('inf')  # Initialize minimum difference to infinity\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Create an empty list to store the absolute differences of all elements\n    diff_list = []\n    # Loop through the array\n    for i in range(n):\n        # Loop through the remaining elements of the array\n        for j in range(i+1,n):\n            # Calculate the absolute difference between the current elements\n            diff = abs(arr[i] - arr[j])\n            # Add the absolute difference to the diff_list\n            diff_list.append(diff)\n    # Find the minimum difference between any two elements in the array\n    min_diff = min(diff_list)\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return 0\n\n    arr.sort()\n\n    min_diff = float('inf')\n    current_diff = abs(arr[1] - arr[0])\n\n    for i in range(1, n-1):\n        current_diff = abs(arr[i+1] - arr[i])\n        if current_diff < min_diff:\n            min_diff = current_diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"Array should have at least two elements\"\n\n    # Sort the array\n    arr.sort()\n\n    # Calculate the minimum difference\n    diff = arr[1] - arr[0]\n    min_diff = diff\n\n    # Iterate over the array and compare adjacent pairs\n    for i in range(1, n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    # Sort the array in ascending order \n    arr.sort() \n    # Initialize two variables to store the minimum difference and the minimum element \n    min_diff = arr[1] - arr[0] \n    min_elem = arr[0] \n    # Iterate through the remaining elements \n    for i in range(1,n-1): \n        # Calculate the difference between the current element and the previous element \n        diff = arr[i] - arr[i-1] \n        # If the difference is smaller than the minimum difference, update the minimum difference and element \n        if diff < min_diff: \n            min_diff = diff \n            min_elem = arr[i] \n    return min_elem"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # sort the array in ascending order\n    arr.sort()\n    # initialize two pointers: left and right\n    left = 0\n    right = n - 1\n    # initialize minimum difference to positive infinity\n    min_diff = float('inf')\n    # loop until left pointer is less than right pointer\n    while left < right:\n        # calculate the difference between the current elements\n        diff = arr[right] - arr[left]\n        # update minimum difference if current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n        # move the right pointer to the right\n        right -= 1\n        # move the left pointer to the right if the current difference is positive\n        if arr[right] - arr[left] > 0:\n            left += 1\n    # return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize the minimum difference to be positive infinity\n    min_diff = float('inf')\n    \n    # Loop through the sorted array\n    for i in range(n-1):\n        # Calculate the difference between current element and next element\n        diff = arr[i+1] - arr[i]\n        \n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 1:\n        if n % 4 == 3:\n            return n + 2\n        else:\n            return n + 1\n    else:\n        return n\n\ndef nth_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return is_polite(n) + is_polite(n-1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n\n    The nth polite number is defined as the sum of the positive integers less than or equal to n and their squares.\n\n    Example:\n    If n = 7, then the nth polite number is 34 + 36^2 + 38^2 + 40^2 = 246.\n\n    The function should return this number as an integer.\n\n    If n is less than or equal to 0, the function should return None.\n    \"\"\"\n    if n <= 0:\n        return None\n    \n    polite_num = 0\n    sum_squares = 0\n    for i in range(1, n+1):\n        sum_squares += i**2\n        polite_num += i\n    \n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_prime_except_one(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def nth_polite(n):\n        polite_count = 0\n        for i in range(1, 20):\n            if is_prime(i) and is_prime_except_one(i):\n                polite_count += 1\n                if polite_count == n:\n                    return i\n    \n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    A function to find the nth polite number. \n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return \"1st\"\n    elif n == 2:\n        return \"2nd\"\n    elif n == 3:\n        return \"3rd\"\n    else:\n        return str(n) + \"th\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the first and second polite numbers\n    polite1 = 1\n    polite2 = 5\n    \n    # Initialize the count variable\n    count = 1\n    \n    # Check if the input is valid\n    if n <= 0:\n        return None\n    \n    # Loop until the count reaches n\n    while count < n:\n        # If the count is odd, multiply the polite number by 2 and increment the count\n        if count % 2!= 0:\n            polite1 *= 2\n            count += 1\n        \n        # If the count is even, add the polite number to the sum and increment the count\n        else:\n            polite1 += polite2\n            count += 1\n    \n    # Return the polite number\n    return polite1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function returns the nth polite number.\n    A polite number is a positive integer that is a multiple of 5.\n    '''\n    if n % 5 == 0:\n        return n\n    else:\n        return n + (5 - n % 5)\n\ndef nth_polite(n):\n    '''\n    This function returns the nth polite number.\n    '''\n    i = 0\n    while i < n:\n        i += 1\n        if is_polite(i) % 10 == 0:\n            return i\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_prime_sum(num, k):\n        s = 0\n        while num > 0:\n            if num % 10 == 2:\n                s += num // 10\n            num //= 10\n        return s >= k\n    \n    def nth_polite(k):\n        count = 0\n        num = 2\n        while count < k:\n            if is_prime(num):\n                if is_prime_sum(num, 2):\n                    count += 1\n            num += 1\n        return num\n    \n    return nth_polite(n-1) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for i in range(3, n+1):\n            if is_prime(i):\n                return i\n            else:\n                return None\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 5\n    if n == 3:\n        return 15\n    if n == 4:\n        return 45\n    if n == 5:\n        return 125\n    if n == 6:\n        return 315\n    if n == 7:\n        return 825\n    if n == 8:\n        return 2435\n    if n == 9:\n        return 7235\n    if n == 10:\n        return 21025\n    if n == 11:\n        return 63075\n    if n == 12:\n        return 189475\n    if n == 13:\n        return 590435\n    if n == 14:\n        return 1655735\n    if n == 15:\n        return 4965895\n    if n == 16:\n        return 13764125\n    if n == 17:\n        return 38689175\n    if n == 18:\n        return 98877835\n    if n == 19:\n        return 298180985\n    if n == 20:\n        return 810977025"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns True if the given number is a polite number, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_polite(n // 2)\n    else:\n        return 3 * is_polite(n - 1)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(*[iter(l1)]*2))"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function counts the number of pairs whose sum is equal to'sum' in a list of numbers 'arr'.\n    '''\n\n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the difference between the two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are present in \n    list1 but not in list2. The elements are in the same order as they appear in list1.\n    \"\"\"\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing all the elements of li1 that are not present in li2.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing all the elements in `li1` that are not present in `li2`.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    sum_odd_pow_four = 0\n\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_odd_pow_four += i**4\n\n    return sum_odd_pow_four"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum\n\nn = int(input(\"Enter the number of odd natural numbers: \"))\nprint(\"The sum of fourth power of first {} odd natural numbers is {}\".format(n, odd_num_sum(n)))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i**4\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i**4\n        i += 1\n\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**4\n        i += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = []\n    for i in range(1, n+1, 2):\n        odd_nums.append(i)\n    return sum(i**4 for i in odd_nums)"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    opening_brackets = ['(', '{', '[']\n    closing_brackets = [')', '}', ']']\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            elif stack[-1] in opening_brackets:\n                stack.pop()\n            else:\n                return False\n    \n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char == ')' and not stack or stack.pop()!= '(':\n            return False\n        elif char == ']' and not stack or stack.pop()!= '[':\n            return False\n        elif char == '}' and not stack or stack.pop()!= '{':\n            return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for c in exp:\n        if c in ['(', ')']:\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Remove all words with length equal to K\n    test_str = \" \".join([word for word in test_str.split() if len(word)!= K])\n    return test_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split()\n    result_list = []\n    \n    for word in test_list:\n        if len(word)!= K:\n            result_list.append(word)\n            \n    return''.join(result_list)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # Split the string into words\n    new_words = [] # Create an empty list to store the new words\n    for word in words:\n        if len(word)!= K: # If the length of the word is not equal to K, add it to the new list\n            new_words.append(word)\n    return''.join(new_words) # Join the new words into a string with spaces"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string into a list of words\n    words = test_str.split()\n\n    # Iterate over the list of words\n    for i in range(len(words)):\n        # Check if the length of the current word is greater than or equal to k\n        if len(words[i]) >= K:\n            # Remove the word from the list\n            del words[i]\n\n    # Convert the list of words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regex to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n    \n    # If there are matches, return a tuple of the form (match, index) for each match\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n    else:\n        # If there are no matches, return None\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # Check if pattern is a valid regular expression pattern\n    if not re.match(r'^[a-zA-Z]+$', pattern):\n        return None\n\n    # Find all occurrences of the pattern in the text\n    match = re.findall(pattern, text)\n\n    # If there are no matches, return None\n    if not match:\n        return None\n\n    # Sort the matches by the starting position in the text\n    matches = sorted(match, key=lambda x: x.start())\n\n    # Find the first match with the same starting position and return its starting and ending positions\n    for m in matches:\n        if m.start() == matches[0].start():\n            return (m.start(), m.end())\n\n    # If we reach this point, there should be no matches with the same starting position, so return None\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. \n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\ntext = input(\"Enter the text: \")\npattern = input(\"Enter the pattern: \")\n\nresult = occurance_substring(text, pattern)\nif result:\n    print(\"Occurrence: \", result[0])\n    print(\"Position: \", result[1], \"to\", result[2])\nelse:\n    print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Args:\n    nums: a list of integers\n\n    Returns:\n    True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0 or nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 1):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # initialize a boolean variable to keep track of whether every odd index contains odd numbers\n    is_valid = True\n\n    # loop through each index in the list\n    for i in range(len(nums)):\n\n        # if the current index is odd\n        if i % 2!= 0:\n\n            # loop through each element in the current index\n            for j in range(i, len(nums), 2):\n\n                # if the element is odd\n                if nums[j] % 2!= 0:\n\n                    # set is_valid to False and break out of the inner loop\n                    is_valid = False\n                    break\n\n            # if is_valid is still True, we've found a pair of odd numbers at an odd index\n            if is_valid:\n                break\n\n    return is_valid"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            count = 0\n            for j in range(len(nums)):\n                if j % 2!= 0:\n                    if nums[j] % 2!= 0:\n                        count += 1\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    # loop through all the indices in the list\n    for i in range(len(nums)):\n        # if the index is odd and there are even numbers at that index, return False\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n\n    # if no odd index contains odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len(nums[i]) % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 1:  # check if index is odd\n            found = False\n            for j in range(i+1, len(nums)):\n                if nums[i] % 2!= nums[j] % 2:  # check if odd numbers at current and next index\n                    found = True\n                    break\n            if not found:  # if no odd numbers found, return False\n                return False\n    return True  # if all indexes have odd numbers, return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    prev_char = None\n    \n    for char in test_str:\n        if char in vowels and (prev_char is None or char not in vowels):\n            count += 1\n        prev_char = char\n        \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for i in range(1, len(test_str) - 1):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    # Define a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    # Initialize a count variable to zero\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)-1):\n        # If the characters are not vowels, move on to the next one\n        if test_str[i] not in vowels or test_str[i+1] not in vowels:\n            continue\n\n        # If the characters are vowels, increment the count\n        count += 1\n\n    # Return the count of vowel neighbors\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    This function finds the sum of non-repeated elements in a given list.\n    '''\n    # Creating an empty dictionary to store the count of each element in the list.\n    count = {}\n    # Initializing the sum to 0.\n    sum = 0\n    # Looping through the list.\n    for i in arr:\n        # If the element is already present in the dictionary, increment its count.\n        if i in count:\n            count[i] += 1\n        # If the element is not present in the dictionary, add it with count 1.\n        else:\n            count[i] = 1\n        # Calculate the sum of all elements that have count 1.\n        if count[i] == 1:\n            sum += i\n    # Return the final sum.\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n\n    # initialize the sum variable to 0\n    total_sum = 0\n\n    # iterate through the unique elements set and add their values to the sum\n    for element in unique_elements:\n        total_sum += element\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Convert list to set to remove duplicates\n    arr_set = set(arr)\n\n    # Find sum of unique elements\n    sum_unique = sum(arr_set)\n\n    # Return the sum\n    return sum_unique\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    non_repeated_sum = sum(unique_elements)\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Creating a set to store unique elements of the given list\n    unique_set = set(arr)\n    # Converting the set to a list and sorting it\n    sorted_list = sorted(list(unique_set))\n    # Initializing the sum variable with the first element of the sorted list\n    sum_result = sorted_list[0]\n    # Iterating through the sorted list and adding the elements to the sum variable\n    for i in range(1, len(sorted_list)):\n        sum_result += sorted_list[i]\n    return sum_result"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_elements = set(arr)\n    # initialize a variable to store the sum of unique elements\n    sum_of_unique_elements = 0\n    \n    # loop through the unique elements in the list\n    for element in unique_elements:\n        # add the unique element to the sum_of_unique_elements\n        sum_of_unique_elements += element\n        \n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a dictionary to store the counts of elements in the list\n    count_dict = {}\n\n    # Loop through the list and update the count_dict\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list to store the non-repeated elements\n    non_repeated_list = []\n\n    # Loop through the count_dict and add non-repeated elements to the non_repeated_list\n    for num, count in count_dict.items():\n        if count == 1:\n            non_repeated_list.append(num)\n\n    # Calculate the sum of non-repeated elements\n    non_repeated_sum = sum(non_repeated_list)\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of the non-repeated elements in the list.\n\n    :param arr: A list of integers\n    :return: The sum of non-repeated elements in the list\n    \"\"\"\n\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # Convert the set to a list and sum it up\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = set()\n    total = 0\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            total += num\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Convert the set back to a list to get the sum of non-repeated elements\n    sum_arr = list(unique_set)\n    # Calculate the sum of the non-repeated elements\n    sum_non_repeated = sum(sum_arr)\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if not key:\n            yield []\n        else:\n            if next(group) == key:\n                for element in group:\n                    yield [key] + [element]\n            else:\n                yield [key] + list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = [(k, list(g)) for k, g in groupby(list1) if k]\n    return grouped_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k, list(g)] for k, g in groupby(list1) if k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Iterate through the list and group consecutive duplicates using groupby() function\n    group = groupby(list1)\n\n    # Create an empty list to store the packed sublists\n    packed_list = []\n\n    # Iterate through the groups and append each group to the packed_list as a sublist\n    for key, group in group:\n        packed_list.append(list(group))\n\n    # Return the packed_list\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list elements by their index\n    grouped = groupby(enumerate(list1))\n\n    # Initialize an empty list to store the sublists\n    sublists = []\n\n    # Iterate over the grouped elements and pack consecutive duplicates into sublists\n    for key, group in grouped:\n        # Check if the group is empty or not\n        if group:\n            # Get the index of the first element in the group\n            first_index = key[0]\n\n            # Get the first element in the group\n            first_element = next(group)\n\n            # Initialize an empty list to store the sublist elements\n            sublist = []\n\n            # Iterate over the subsequent elements in the group\n            for index, element in group:\n                # If the index of the current element is different from the previous one,\n                # then the current element is the start of a new sublist\n                if index!= first_index:\n                    # Add the current sublist to the list of sublists\n                    sublists.append(sublist)\n\n                    # Initialize an empty sublist\n                    sublist = []\n\n                    # Set the first index of the new sublist to the current index\n                    first_index = index\n\n                    # Add the current element to the new sublist\n                    sublist.append(first_element)\n\n                    # Set the current element to the first element of the next group\n                    first_element = element\n\n                # If the index of the current element is the same as the previous one,\n                # then the current element is a duplicate of the previous element, so skip it\n                else:\n                    # Set the current element to None to skip it\n                    first_element = None\n\n            # Add the final sublist to the list of sublists\n            sublists.append(sublist)\n\n    # Return the list of sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pack_consecutive_duplicates(lst):\n    grouped = sorted(list(set(lst)), key=lambda x: (x[0], -len(x)))\n    groups = [list(group) for group in groupby(grouped, key=lambda x: x[0])]\n    return [g for g in groups if len(g) > 1]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    for i in list1:\n        # convert the list to tuple\n        i = tuple(i)\n        # check if the tuple is already in the dictionary\n        if i in unique_list:\n            unique_list[i] += 1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            unique_list[i] = 1\n    return unique_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    sublist_dict = {}\n    # Loop through the list of lists\n    for sublist in lst:\n        # Turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        # If the tuple is not in the dictionary, add it and set the value to 1\n        if sublist_tuple not in sublist_dict:\n            sublist_dict[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment the value by 1\n        else:\n            sublist_dict[sublist_tuple] += 1\n    # Return the dictionary of unique sublists\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if type(item) == list:\n            sublist = tuple(item)\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create an empty dictionary\n    count_dict = {}\n\n    # loop through the list and count the occurrences of each list\n    for sublist in list1:\n        count_dict[tuple(sublist)] = count_dict.get(tuple(sublist), 0) + 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Loop through each element of the list\n    for element in list1:\n        # If the element is not a list, skip it\n        if not isinstance(element, list):\n            continue\n        \n        # Turn the list into a tuple\n        sublist = tuple(element)\n        \n        # Check if the tuple is already in the dictionary\n        if sublist in count_dict:\n            # Increment the count by 1\n            count_dict[sublist] += 1\n        else:\n            # Add the tuple and its count to the dictionary\n            count_dict[sublist] = 1\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate through the list\n    for item in list1:\n        # Convert the list to a tuple and check if it's in the dictionary\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n            \n    # Return the dictionary with the counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for elem in lst:\n        if isinstance(elem, list):\n            tuple_elem = tuple(elem)\n            if tuple_elem not in counts:\n                counts[tuple_elem] = 1\n            else:\n                counts[tuple_elem] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # initialize an empty dictionary to store the counts\n    counts = {}\n    # loop through each list in the original list\n    for sublist in list1:\n        # convert the list to a tuple and check if it is already in the dictionary\n        if tuple(sublist) not in counts:\n            # if it's not, add it with a count of 1\n            counts[tuple(sublist)] = 1\n        else:\n            # if it is, increment its count by 1\n            counts[tuple(sublist)] += 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of unique sublists\n    count = {}\n    \n    # Loop through each list in the original list\n    for sublist in list1:\n        # Turn the list to a tuple and add it to the dictionary if it's not already there\n        if tuple(sublist) not in count:\n            count[tuple(sublist)] = 1\n        # Otherwise, increment the count for the tuple\n        else:\n            count[tuple(sublist)] += 1\n            \n    # Return the dictionary of unique sublists and their counts\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # create a list of all possible combinations of sums\n    all_combinations = combinations(test_list, r=len(test_list))\n\n    # filter out combinations that have duplicate elements\n    unique_combinations = set(all_combinations)\n\n    # convert the set back to a list of tuples\n    combinations_list = list(unique_combinations)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]):\n                    result.append((test_list[i], test_list[j], test_list[k]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            for k in range(j + 1, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]) and len(set(test_list[i]) & set(test_list[j]) & set(test_list[k])) == 2:\n                    print(test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Calculate the sum of all tuples in the list\n    total_sum = sum(sum(tup) for tup in test_list)\n\n    # Find all combinations of sums with tuples in the list\n    combinations_of_sums = combinations(test_list, r=2)\n\n    # Filter out combinations where the sum of the two tuples is not equal to the total sum\n    filtered_combinations = [comb for comb in combinations_of_sums if sum(tup) == total_sum]\n\n    return filtered_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    combinations_set = set()\n    n = len(test_list)\n\n    for i in range(2, n+1):\n        for comb in combinations(test_list, i):\n            sums = sum(comb)\n            if sums not in combinations_set:\n                combinations_set.add(tuple(comb))\n\n    return combinations_set\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function finds all combinations of sums from a list of tuples. \n    It takes a list of tuples as input and returns a list of all possible combinations of sums from the given list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    for m in range(l+1, len(test_list)):\n                        for n in range(m+1, len(test_list)):\n                            result.append(tuple(test_list[i][0:1]+test_list[j][0:1]+test_list[k][0:1]+test_list[l][0:1]+test_list[m][0:1]+test_list[n][0:1]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    def sum_tuple(tup):\n        return sum(tup)\n    \n    def find_combinations_helper(current_sum, remaining_tuples, combinations_list):\n        if current_sum == 0:\n            combinations_list.append(tuple(remaining_tuples))\n        else:\n            for tup in remaining_tuples:\n                if tup not in remaining_tuples:\n                    find_combinations_helper(current_sum - sum_tuple(tup), remaining_tuples, combinations_list)\n    \n    combinations_list = []\n    for tup in test_list:\n        find_combinations_helper(sum_tuple(tup), [tup], combinations_list)\n    \n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # function to find the sum of a tuple\n    def tuple_sum(tup):\n        return sum(tup)\n\n    # function to find the sum of a list of tuples\n    def list_sum(lst):\n        return sum(tup for tup in lst)\n\n    # sort the tuple list\n    test_list.sort()\n\n    # find all possible combinations of sums using itertools.combinations()\n    for combo in combinations(test_list, r=2):\n        # check if the sum of the two tuples is equal to the sum of the list of tuples\n        if tuple_sum(combo) == list_sum(test_list):\n            # print the combination\n            print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(test_list[i]) == sum(test_list[j]):\n                comb = combinations(test_list[i], j-i+1)\n                for comb_tuple in comb:\n                    if all(sum(tup) == sum(test_list[i]) for tup in comb_tuple):\n                        print(comb_tuple)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def helper(lst, start, target, index, result):\n        if target == 0:\n            result.append(tuple(lst[start:index]))\n            return\n\n        for i in range(start, len(lst)):\n            if i!= index and lst[i][1] <= target:\n                helper(lst, i+1, target-lst[i][0], i, result)\n\n    lst = sorted(test_list)\n    result = []\n    helper(lst, 0, lst[0][0], 0, result)\n    return result\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    def count_divisors_helper(num):\n        count = 0\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n        return count\n\n    count1 = count_divisors_helper(n)\n    count2 = count_divisors_helper(n + 1)\n\n    return (count1 % 2 == 0 and count2 % 2 == 0) or (count1 % 2!= 0 and count2 % 2!= 0)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    divisors.sort()\n    count = len(divisors)\n    return count%2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even or odd.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return \"The number has no divisors\"\n    elif count % 2 == 0:\n        return \"The count of divisors is even\"\n    else:\n        return \"The count of divisors is odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even.\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    count = len(divisors)\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def count_divisors_helper(num):\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    count_divisors_list = count_divisors_helper(n)\n    even_divisors = len(count_divisors_list) % 2 == 0\n\n    return even_divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even.\n    The count of divisors of a number n is the number of integers from 1 to n that divide evenly into n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            divisors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return divisors, len(divisors)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return True\n    return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2 == 1:\n                total_sum += sum(sub_arr)\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                res += sum(arr[i:j+1])\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)-1):\n        for j in range(i+2, len(arr)+1, 2):\n            sum += arr[i:j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n-1):\n        if i+2 < n:\n            sum += arr[i] + arr[i+1] + arr[i+2]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum = 0\n    \n    for i in range(n):\n        if i%2 == 0:\n            continue\n        else:\n            count += 1\n            sum += arr[i]\n            \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n\n    for i in range(n-1):\n        if i % 2 == 0 and arr[i] % 2 == 1 and arr[i+1] % 2 == 1:\n            sum += arr[i] + arr[i+1]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_arr = [0] * n\n    sum_even = 0\n\n    for i in range(n):\n        if i % 2!= 0:\n            sum_even += arr[i]\n        else:\n            sum_arr[i//2] = arr[i]\n\n    if sum_even % 2 == 0:\n        return sum_even + sum_arr[-1]\n    else:\n        return sum_even + sum_arr[-2]"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum += arr[j-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # initializing the sum variable\n    sum = 0\n    # iterating through the array\n    for i in range(len(arr)):\n        # iterating through all possible odd subarrays of the current array element\n        for j in range(i, len(arr), 2):\n            # adding the current subarray sum to the sum variable\n            sum += arr[j]\n    # returning the final sum of odd length subarrays\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    n = len(arr)\n    for i in range(n):\n        subarray_sum += arr[i]\n        if i > 0 and i % 2 == 0:\n            subarray_sum -= arr[i - 1]\n    return subarray_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = h * 60\n    \n    if h < 0:\n        h += 360\n    \n    v = cmax\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h, s, v = 0.0, 0.0, max_val\n    \n    if max_val == min_val:\n        h, s = 0.0, 0.0\n    else:\n        d = max_val - min_val\n        s = max_val / min_val\n        \n        if max_val == r:\n            h = (g - b) / d + (g < b) * 6\n        elif max_val == g:\n            h = (b - r) / d + 2\n        else:\n            h = (r - g) / d + 4\n        \n        h /= 6.0\n        \n        if h < 0:\n            h += 1.0\n    \n    return round(h * 360.0), round(s * 100.0), round(v * 100.0)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == g == b:\n        return (0, 0, 0)\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    if h < 0:\n        h += 6\n    h *= 60\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n    v = cmax\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r, g, b to floats\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n    \n    # Calculate minimum and maximum values for each color channel\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Calculate difference between maximum and minimum values for each color channel\n    delta = max_val - min_val\n    \n    # Calculate Hue value based on the color channel\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    # If Hue value is negative, add 6 to it\n    if h < 0:\n        h += 6\n    \n    # Calculate Saturation and Value based on the color channel\n    if delta == 0:\n        # If maximum and minimum values are equal, Saturation and Value are both 0\n        s = 0\n        v = max_val\n    elif max_val == r:\n        s = (g - b) / delta\n        v = max_val\n    else:\n        s = (max_val - min_val) / delta\n        v = max_val\n    \n    # Convert Hue, Saturation, and Value to percentages\n    h, s, v = map(lambda x: x * 100, [h, s, v])\n    \n    return round(h, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n    h = 0.0\n    s = 0.0\n    v = max_rgb\n    if max_rgb == min_rgb:\n        h = 0.0\n    else:\n        if max_rgb == r:\n            h = (g - b) / delta\n        elif max_rgb == g:\n            h = 2.0 + (b - r) / delta\n        else:\n            h = 4.0 + (r - g) / delta\n        h *= 60.0\n        if h < 0.0:\n            h += 360.0\n    if delta == 0.0:\n        s = 0.0\n    else:\n        s = delta / max_rgb\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    # Convert RGB to HSV\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n    h = 0\n    s = 0\n    v = max_rgb\n    if delta_rgb == 0:\n        h = 0\n        s = 0\n    else:\n        if max_rgb == r:\n            h = 60 * ((g - b) / delta_rgb)\n        elif max_rgb == g:\n            h = 60 * (2 + (b - r) / delta_rgb)\n        else:\n            h = 60 * (4 + (r - g) / delta_rgb)\n        if h < 0:\n            h += 360\n        s = delta_rgb / max_rgb\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to the range of 0 to 255\n    r, g, b = r / 255, g / 255, b / 255\n    # Find the maximum and minimum values of r, g, and b\n    max_val, min_val = max(r, g, b), min(r, g, b)\n    # Calculate the value of h\n    if max_val == min_val:\n        h = 0\n    else:\n        if r == max_val:\n            h = (g - b) / (max_val - min_val)\n        elif g == max_val:\n            h = 2 + (b - r) / (max_val - min_val)\n        else:\n            h = 4 + (r - g) / (max_val - min_val)\n        h *= 60\n    # Convert h to the range of 0 to 360\n    h = round(h)\n    # Calculate the value of s\n    if max_val == 0:\n        s = 0\n    else:\n        s = (max_val - min_val) / max_val\n    # Calculate the value of v\n    v = max_val\n    # Return the hsv values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    '''\n    # Convert r, g, b to float values\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Find the min, max, and delta values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    delta = max_val - min_val\n\n    # Calculate the hue\n    if delta == 0:\n        hue = 0\n    elif r == max_val:\n        hue = 60 * ((g - b) / delta)\n    elif g == max_val:\n        hue = 60 * ((b - r) / delta + 2)\n    else:\n        hue = 60 * ((r - g) / delta + 4)\n\n    # Calculate the saturation and value\n    if delta == 0:\n        saturation = 0\n    elif max_val == r:\n        saturation = delta / (max_val + min_val)\n    elif max_val == g:\n        saturation = delta / (max_val + min_val)\n    else:\n        saturation = delta / (max_val + min_val)\n\n    if max_val == 0:\n        value = 0\n    else:\n        value = max_val\n\n    # Convert hue, saturation, and value to integer values\n    hue, saturation, value = int(hue), int(saturation * 255), int(value * 255)\n\n    # Return the converted hsv values\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model.\n    \n    Args:\n        r (int): red component of the RGB color (0-255)\n        g (int): green component of the RGB color (0-255)\n        b (int): blue component of the RGB color (0-255)\n    \n    Returns:\n        h (float): hue (0-360)\n        s (float): saturation (0-1)\n        v (float): value (0-1)\n    \"\"\"\n\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n\n    if max_color == min_color:\n        h = 0  # achromatic\n    else:\n        if max_color == r:\n            h = (60.0 * ((g - b) / delta)) % 360.0\n        elif max_color == g:\n            h = (60.0 * ((b - r) / delta)) + 120.0\n        else:\n            h = (60.0 * ((r - g) / delta)) + 240.0\n\n        if h < 0.0:\n            h += 360.0\n\n    if max_color == 0.0:\n        s = 0.0  # achromatic\n    else:\n        s = delta / max_color\n\n    v = max_color\n\n    hsv = [h, s, v]\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_value\n\n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        delta = max_value - min_value\n        s = delta / max_value\n\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h = h / 6\n\n    return (h, s, v)\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and finds the product of the first even and odd number present in the list.\n    \"\"\"\n    even = 1\n    odd = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n            \n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count == 1 and odd_count == 1:\n            product = num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns the product of first even and odd number of the list.\n    \"\"\"\n    # Initialize two variables to store even and odd numbers respectively\n    even = 0\n    odd = 0\n\n    # Iterate through the list and check if the number is even or odd\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n\n    # Return the product of even and odd numbers\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    product = 1\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product *= num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product *= num\n                \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product = product * num\n            even_count = 0\n            odd_count = 0\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    count_even = 0\n    count_odd = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n        if count_even > 0 and count_odd > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    product = even_num * odd_num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # Check if the list is empty or contains only even and odd numbers\n    if not list1 or (not all(isinstance(num, int) for num in list1) and all(isinstance(num, int) for num in list1) and not all(num % 2 == 0 for num in list1)):\n        return \"The list is empty or contains only even and odd numbers.\"\n\n    # Initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n\n    # Iterate through the list to find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num = even_num + num\n        else:\n            odd_num = odd_num + num\n\n    # Calculate the product of even and odd numbers\n    product = even_num * odd_num\n\n    # Return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 and odd_count == 0:\n        print(\"No even and odd numbers found in the list.\")\n    else:\n        product = even_count * odd_count\n        print(\"Product of first even and odd numbers:\", product)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for num in test_str:\n        try:\n            int_tuple += (int(num),)\n        except ValueError:\n            pass\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert each string in the list to an integer\n    int_list = [int(s) for s in str_list]\n    \n    # Convert the integer list to a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(int(x) for x in test_str.split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for string in str_list:\n        int_list.append(int(string.strip()))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    The input string should be of the form '((x1, y1), (x2, y2),..., (xn, yn))' where\n    xi and yi are integers.\n\n    For example:\n    >>> tuple_str_int('((1, 2), (3, 4), (5, 6))')\n    ((1, 2), (3, 4), (5, 6))\n    \"\"\"\n    if test_str[0]!= \"(\":\n        raise ValueError(\"Input string should start with '('\")\n    if test_str[-1]!= \")\":\n        raise ValueError(\"Input string should end with ')'\")\n    test_str = test_str[1:-1]  # remove the outer parentheses\n\n    tuples = [tuple(map(int, s.split(','))) for s in test_str.split('),(')]\n\n    return tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Check if the input is a string\n    if type(test_str)!= str:\n        raise ValueError(\"Input must be a string\")\n\n    # Split the string into list of strings\n    str_list = test_str.split(\",\")\n\n    # Convert each string to integer\n    int_list = []\n    for item in str_list:\n        int_list.append(int(item))\n\n    # Convert integer list to integer tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list\n    test_list = list(test_str)\n    # Iterate over the list to convert each element to an integer\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], str):\n            test_list[i] = int(test_list[i])\n    # Convert the list back to a tuple and return it\n    return tuple(test_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for i in test_str:\n        int_tuple += (int(i),)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    # Convert each string in the list to an integer\n    int_list = [int(i) for i in str_list]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # split the string into a list of strings\n    str_list = [s for s in test_str.split()]\n    # create an empty list to store the integer values\n    int_list = []\n    # loop through the list of strings\n    for str_val in str_list:\n        # check if the string is an integer\n        try:\n            int_val = int(str_val)\n            int_list.append(int_val)\n        except ValueError:\n            pass\n    # return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = len(a) - 1\n    # Initialize the result to the left pointer\n    result = left\n    # Loop until the left pointer is greater than the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        # If the value being searched for is less than the middle element, search in the left half\n        if x < a[mid]:\n            right = mid - 1\n        # If the value being searched for is greater than the middle element, search in the right half\n        else:\n            result = mid + 1\n            left = mid + 1\n    return result"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # bisect.bisect_right returns the index where to insert x in a list a, assuming a is sorted\n    # if x is already in the list, bisect_right returns the index where it would be if inserted\n    # in the list, i.e., the index just after the last element that is greater than x\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect_left function returns the insertion point where x should be inserted in a list of sorted values.\n    # If x already exists in the list, then the function will return the index where it is present.\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx == len(a):\n        return len(a)\n    elif a[idx] == x:\n        return idx\n    elif a[idx] < x:\n        return right_insertion(a[idx:], x)\n    else:\n        return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the insertion point\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        # Value is greater than all elements in the array\n        index = len(a)\n    elif index == 0:\n        # Value is less than all elements in the array\n        index = 0\n    else:\n        # Value is between two elements in the array\n        if a[index - 1] == x:\n            # Value is already present in the array\n            return index\n        elif a[index] == x:\n            # Value is greater than the next element in the array\n            return index + 1\n        else:\n            # Value is between the previous and current elements in the array\n            return index\n    # Insert the value at the required index\n    a.insert(index, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\sb\\sb\\sb'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'a\\w{2}b'\n    match = re.search(pattern, text)\n\n    if match:\n        print(\"Match found!\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{2}b{3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tup = (test_list, test_str)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the two lists and convert to tuple\n    new_tuple = tuple(test_str + test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_list + [test_str])\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + test_str\n    \n    # Create a new tuple from the combined list\n    new_tuple = tuple(combined_list)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # convert the string to a tuple\n    test_string_tuple = tuple(test_str)\n    # concatenate the two tuples\n    final_tuple = test_tuple + test_string_tuple\n    # return the final tuple\n    return final_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple = tuple(test_str)\n    new_tuple = tuple(new_tuple)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list[0], test_str, test_list[1])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string using the \"+\" operator\n    combined = test_list + test_str\n    # Convert the concatenated string to a tuple using the \"()\" operator\n    new_tuple = tuple(combined)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(nums[i]) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # initialize a boolean variable to keep track of whether all even indices contain even numbers\n    all_even_indices = True\n\n    # loop through the list of numbers\n    for i in range(len(nums)):\n        # if the current number is not even, set the boolean variable to False\n        if nums[i] % 2!= 0:\n            all_even_indices = False\n            break\n        # if the current number is even, check if the even index contains an even number\n        elif i % 2 == 0 and nums[i] % 2 == 0:\n            # if the even index contains an even number, set the boolean variable to False\n            all_even_indices = False\n            break\n\n    # return the boolean value of all_even_indices\n    return all_even_indices"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for num in nums[i:]:\n                if num % 2 == 0:\n                    count += 1\n                else:\n                    break\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(nums[i]) % 2 == 0:\n            print(f\"{i}th index contains even numbers.\")\n        else:\n            print(f\"{i}th index does not contain even numbers.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count == len(nums)//2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if i >= len(nums):\n            break\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += nums[i]\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(nums[i]) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for inner_item in item:\n                new_tup.append(inner_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the non-nested tuples\n    non_nested = []\n    # Loop through the tuples in the input tuple\n    for tup in test_tup:\n        # Check if the tuple is a non-nested tuple\n        if type(tup) not in [list, tuple]:\n            # If the tuple is not a non-nested tuple, add it to the non-nested list\n            non_nested.append(tup)\n    # Return the non-nested list\n    return non_nested"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup += remove_nested(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # check if the input is a tuple\n    if isinstance(test_tup, tuple):\n        # loop over the items in the tuple\n        for item in test_tup:\n            # check if the item is a tuple\n            if isinstance(item, tuple):\n                # recursively call the function on the item\n                item = remove_nested(item)\n            # add the non-tuple item to a new list\n            else:\n                new_list = [item]\n                # check if the list is empty\n                if len(new_list) == 1:\n                    # if it's just one item, return it\n                    return new_list[0]\n                # otherwise, concatenate the list and return it\n                else:\n                    return new_list\n    # if the input is not a tuple, return the original input\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if isinstance(test_tup, tuple):\n        return [x for x in test_tup if not isinstance(x, tuple)]\n    else:\n        return []"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while len(test_tup) > 1:\n        new_tup = tuple(test_tup[0]) + test_tup[1:]\n        test_tup = new_tup\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                result.append(subitem)\n        else:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    Counts the number of lists in a given list of lists.\n\n    Args:\n        input_list (list): A list of lists to count.\n\n    Returns:\n        int: The number of lists in the input list.\n    \"\"\"\n    count = 0\n\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_lists(item)\n\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n        else:\n            continue\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right if arr[right] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element x in a sorted array arr.\n    \"\"\"\n    # initialize the left and right pointers\n    left, right = 0, len(arr) - 1\n\n    # loop until the left pointer is greater than or equal to the right pointer\n    while left < right:\n        # compute the middle index\n        mid = (left + right) // 2\n\n        # if the middle element is equal to x, we've found the last occurrence\n        if arr[mid] == x:\n            right = mid\n        # if the middle element is less than x, we need to search the right half\n        elif arr[mid] < x:\n            left = mid + 1\n        # if the middle element is greater than x, we need to search the left half\n        else:\n            right = mid - 1\n\n    # if x was not found in the array, we return -1\n    return left if left >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    l, r = 0, n - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            r = mid - 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return r if r >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and a target element x and returns the last index of x in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1  # move right until we find the leftmost occurrence of x\n        elif arr[mid] < x:\n            left = mid + 1  # move left until we find the rightmost occurrence of x\n        else:\n            right = mid - 1  # move right until we find the leftmost occurrence of x\n\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array and an element x as input and returns the last position of x in the array.\n    If x is not found in the array, it returns -1.\n    '''\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid+1\n        else:\n            right = mid-1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n\n    # Initialize the left and right pointers to the first and last index of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate until the left pointer is greater than or equal to the right pointer\n    while left < right:\n\n        # Find the midpoint of the current range\n        mid = (left + right) // 2\n\n        # If the midpoint element is equal to the target element, return its index\n        if arr[mid] == x:\n            return mid\n\n        # If the midpoint element is less than the target element, exclude the right half of the current range\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the midpoint element is greater than the target element, exclude the left half of the current range\n        else:\n            right = mid - 1\n\n    # If the target element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(arr) and arr[i] < x:\n        i += 1\n    return i-1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=len(arr)-1\n    while(i>=0 and arr[i]!=x):\n        i=i-1\n    return i"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?=.*a)(?=.*b)[^a]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'\\ba[^b]*b\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #initialize sum to 0\n    sum = 0\n    #loop through range from l to r\n    for i in range(l, r+1):\n        #if i is odd, add it to sum\n        if i % 2!= 0:\n            sum += i\n    #return sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initialize variables\n    sum_odd = 0\n    i = 1\n\n    # loop through odd numbers between 1 and n (inclusive)\n    while i <= n:\n        sum_odd += i\n        i += 2\n\n    # return the sum of odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if l < 1:\n        l = 1\n    if r > 100:\n        r = 100\n    if l % 2!= 1:\n        l += 1\n    if r % 2 == 0:\n        r -= 1\n    odd_sum = 0\n    for i in range(l, r+1, 2):\n        odd_sum += i\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(2, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the range of natural numbers: \").split())\n    sum_ = 0\n    for i in range(l, r+1):\n        if i%2!=0:\n            sum_ += i\n    return sum_"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n\n    # Get the range of numbers to check\n    l = 1\n    r = n\n\n    # Initialize the sum of odd numbers to 0\n    sum_odd = 0\n\n    # Check all odd numbers in the range and add to the sum_odd variable\n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n\n    return sum_odd"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(arr):\n    \"\"\"\n    Write a function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0  \n    for i in arr:  \n        sum += i  \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_array(arr):\n    '''\n    This function takes an array as an argument and returns the sum of all its elements.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary representation\n    binary_representation = bin(n)[2:]\n    # calculate the number of zeros to be shifted\n    num_zeros = d % 32\n    # append the required number of zeros at the end of the binary representation\n    binary_representation = '0' * num_zeros + binary_representation\n    # convert the binary representation to decimal\n    rotated_number = int(binary_representation, 2)\n    # return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32  # d must be less than 32\n    n = n << d | n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the input number to binary string\n    binary_str = bin(n)[2:]\n\n    # Calculate the number of bits to rotate\n    num_bits_to_rotate = len(binary_str) - d\n\n    # Add 0s to the beginning of the binary string to make it d bits long\n    binary_str = '0' * (num_bits_to_rotate - len(binary_str)) + binary_str\n\n    # Convert the binary string back to an integer\n    rotated_number = int(binary_str, 2)\n\n    # Return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the given number to binary\n    num = bin(n)[2:]\n\n    # If d is zero or negative, return the original number\n    if d == 0 or d < 0:\n        return int(num, 2)\n\n    # If d is greater than 31, rotate left by 32 bits\n    if d > 31:\n        d -= 32\n\n    # Perform the rotation\n    rotated_num = num[-d:] + num[:-d]\n\n    # Convert the rotated number back to decimal\n    rotated_num = int(rotated_num, 2)\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary_num = bin(n)[2:]\n\n    # Calculate the number of zeros to shift to the left\n    num_zeros = 32 - d\n\n    # Pad the binary number with zeros to the left\n    padded_binary = '0' * num_zeros + binary_num\n\n    # Convert the padded binary back to decimal\n    rotated_num = int(padded_binary, 2)\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n\n    # Calculate the number of bits to rotate\n    bits_to_rotate = d % 32\n    \n    # Rotate the bits\n    rotated_bits = binary_str[-bits_to_rotate:] + binary_str[:-bits_to_rotate]\n\n    # Convert the rotated bits back to decimal\n    rotated_num = int(rotated_bits, 2)\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = (1 << d) - 1\n    n = (n << d) & ((1 << 32) - 1)  # shift left by d bits and mask off excess bits\n    n = n | (n >> (32 - d)) & mask  # shift left by 32 - d bits and mask off excess bits\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    # Convert the given number to a string\n    num = str(n)\n    # If d is greater than or equal to the length of the number, rotate d%length of the number to the left\n    if d >= len(num):\n        return left_rotate(num, d % len(num))\n    # If d is less than the length of the number, rotate the remaining d bits to the left\n    else:\n        # Pad the number with zeros to ensure that there are d zeros at the left\n        padded_num = '0' * (d - len(num)) + num\n        # Rotate the padded number by d bits to the left\n        rotated_num = padded_num[-len(num):] + padded_num[:-len(num)]\n        # Convert the rotated number back to an integer\n        rotated_int = int(rotated_num, 2)\n        return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n\n    # Convert the given number to binary string\n    binary = bin(n)[2:]\n\n    # Pad the binary string with leading zeros\n    padding = '0' * d\n    binary_padded = padding + binary\n\n    # Convert the binary string to decimal\n    decimal = int(binary_padded, 2)\n\n    # Return the rotated number\n    return decimal"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all spaces using regular expressions\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    # Remove all whitespaces using regular expressions\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all spaces from the string using regular expression\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    # remove all whitespaces using regular expression\n    text = re.sub(r'\\s+','', text)\n    # remove extra spaces\n    text = re.sub(r'\\s+','', text).strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y+1):\n        for j in range(y,z+1):\n            for k in range(z,i):\n                if i==j==k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(3):\n        if x == y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z) + 1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the maximum element in the array\n    max_elem = max(arr)\n    # Initialize the count of rotations to 0\n    count = 0\n    # Iterate over all possible rotations of the array\n    for i in range(n):\n        # Initialize a flag variable to keep track of whether the current rotation is the minimum rotation\n        min_flag = True\n        # Iterate over all possible rotations of the maximum element\n        for j in range(n):\n            # If the current rotation is not the minimum rotation, we rotate the array by 1 position and check if it is sorted\n            if not sorted(arr[j:]):\n                # If the current rotation is not the minimum rotation, we increment the count of rotations and check if it is the minimum rotation\n                count += 1\n                min_flag = False\n                break\n        # If the minimum rotation was not found, we break the inner loop\n        if min_flag:\n            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return n-1\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n        if i == 0:\n            break\n        for k in range(i):\n            if arr[k] > arr[k+i]:\n                arr[k], arr[k+i] = arr[k+i], arr[k]\n    return i"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return i + 1\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the first occurrence of an element greater than the pivot\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i\n    # If no such element exists, the array is already sorted\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n\n    The approach is to use the concept of three pointers technique to solve the problem.\n\n    We maintain three pointers - i, j and k. i and j are initially set to the first and last element of the array, respectively. k is initially set to the middle element of the array.\n\n    We then compare the element pointed by i with the element pointed by k. If the element pointed by i is greater than the element pointed by k, then we know that the array is already sorted. In this case, we return the number of rotations required to generate the sorted array.\n\n    If the element pointed by i is less than the element pointed by k, then we know that the array is not sorted. In this case, we swap the elements pointed by i and k and move both i and j one step forward. We continue this process until the element pointed by i is greater than or equal to the element pointed by j. Then we return the count of rotations required to generate the sorted array.\n\n    Here is the Python code for the above approach:\n    '''\n\n    i = 0\n    j = len(arr)-1\n    k = (i+j)//2\n\n    while True:\n        if arr[i] > arr[k]:\n            return k-i\n        elif arr[i] < arr[k]:\n            arr[i], arr[k] = arr[k], arr[i]\n            i += 1\n            j -= 1\n        else:\n            return k-i"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Count the number of swaps required to sort the array\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through the array and check if each element is the smallest element\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # If array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # If array is already sorted in reverse\n    elif arr == sorted(arr, reverse=True):\n        return n\n    # If array is already sorted in reverse\n    elif arr == sorted(arr, reverse=True):\n        return n\n    # If array is partially sorted\n    elif arr[0] > arr[1]:\n        # Find the first position where the array is partially sorted\n        for i in range(2, n):\n            if arr[i] < arr[0]:\n                return i\n        return n\n    # If array is completely unsorted\n    else:\n        return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    # first check if the input is a negative number\n    if n < 0:\n        return False\n    # now check if the input is a perfect square or not\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = n ** 0.5  # finding the square root of n\n    if int(root) ** 2 == n:  # checking if the square of the square root is equal to n\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    # find the square root of n using the bisection method\n    low = 0\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        square = mid * mid\n        if square == n:\n            return True\n        elif square < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n\n    Parameters:\n    -----------\n    n : int\n        The number to be checked.\n\n    Returns:\n    --------\n    bool\n        Returns True if the given number is a perfect square, else False.\n    \"\"\"\n    if n == 1:\n        return True\n    if n == 4:\n        return False\n    a = 0\n    b = n\n    while a*a <= b:\n        c = (a + b) // 2\n        if c*c == b:\n            return True\n        elif c*c > b:\n            b = c - 1\n        else:\n            a = c + 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if number is less than 1\n    if n < 1:\n        return False\n\n    # check if number is equal to 1\n    if n == 1:\n        return True\n\n    # check if number is a perfect square\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    :param n: A positive integer.\n    :return: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = math.sqrt(n)\n    return sqrt_n == int(sqrt_n)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the number is less than or equal to 0\n    if n <= 0:\n        return False\n    # Find the square root of the number\n    sqrt_n = int(n ** 0.5) + 1\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is negative or zero\n    if n <= 0:\n        return False\n    \n    # Find the square root of the number\n    root = n ** 0.5\n    \n    # Check if the square root is an integer\n    if int(root) ** 2!= n:\n        return False\n    \n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of integers as input and returns True if the product of all numbers in the list is even, otherwise it returns False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # initialize the product variable and the flag variable\n    product = 1\n    flag = 0\n    \n    # iterate through the list\n    for num in arr:\n        # multiply the current number with the product variable\n        product *= num\n        \n        # if the product variable is odd, set the flag variable to 1 and break the loop\n        if product % 2!= 0:\n            flag = 1\n            break\n    \n    # check if the flag variable is 1\n    if flag == 1:\n        return \"Product is odd\"\n    else:\n        return \"Product is even\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    # Get the product of all numbers in the list\n    product = 1\n    for num in arr:\n        product *= num\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the max sum to be negative infinity\n    max_sum = float('-inf')\n    # Initialize the list of max sums to be an empty list\n    max_sums = []\n    \n    # Loop through each list in the input list of lists\n    for sublist in lists:\n        # Calculate the sum of elements in the sublist\n        sublist_sum = sum(sublist)\n        # If the sum is greater than the max sum, update max sum and max sums\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_sums = [sublist]\n        # Otherwise, check if the current sum is greater than the sum of the existing max sums\n        elif sublist_sum > sum(max_sums):\n            max_sums.append(sublist)\n    \n    # Return the list of max sums\n    return max_sums"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    This function takes a list of lists and returns the list whose sum of elements is the highest.\n    \"\"\"\n    max_sum = -float('inf')\n    max_list = None\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through each sublist in the list of lists\n    for sublist in lists:\n        # Add each element of the sublist to the current sum\n        current_sum += sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater than the maximum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    # Return the sublist with the maximum sum\n    return [sublist for sublist in lists if sum(sublist) == max_sum]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for lst in lists:\n        sum = 0\n        for num in lst:\n            sum += num\n        if sum > max_sum:\n            max_sum = sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = []\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = 0\n            for k in range(len(lists[i])):\n                current_sum += lists[i][k]\n                if k == len(lists[i])-1:\n                    current_sum += lists[j][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_lists = [lists[i], lists[j]]\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max_sum and current_sum to the first element in the lists\n    max_sum = lists[0][0]\n    current_sum = lists[0][0]\n\n    # Loop through each subsequent list in the lists\n    for i in range(1, len(lists)):\n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the current_sum and subtract the first element from the max_sum\n            current_sum += lists[i][j]\n            max_sum = max(max_sum, current_sum - lists[i][0])\n        # Reset the current_sum to the first element in the next list\n        current_sum = lists[i][0]\n\n    # Return the list in the lists that has the maximum sum\n    return max_sum"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    result = []\n    \n    # Iterate through each list in the input list of lists\n    for lst in lists:\n        # Initialize variables\n        current_sum = 0\n        \n        # Iterate through each element in the list\n        for num in lst:\n            # Add the current element to the running sum\n            current_sum += num\n            \n            # Check if the current sum is greater than the maximum sum found so far\n            if current_sum > max_sum:\n                # Update the maximum sum and the corresponding list\n                max_sum = current_sum\n                result = lst\n    \n    # Return the list whose sum is the highest\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Check if the input is a list of lists\n    if not all(isinstance(lst, list) for lst in lists):\n        return \"Input must be a list of lists.\"\n    \n    # Initialize variables for maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Add each element of the current list to the current sum\n        for num in lst:\n            current_sum += num\n        \n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n        if count > max_run:\n            max_run = count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Create a dictionary to store the count of uppercase characters\n    count_dict = {}\n\n    # Iterate through each character of the string\n    for char in test_str:\n        # If the character is uppercase, update its count in the dictionary\n        if char.isupper():\n            count_dict[char] = count_dict.get(char, 0) + 1\n\n    # Initialize variables for the maximum run length and current run length\n    max_run_length = 0\n    current_run_length = 0\n\n    # Iterate through the keys in the dictionary to find the longest run of uppercase characters\n    for key in count_dict:\n        if count_dict[key] > current_run_length:\n            max_run_length = current_run_length\n            current_run_length = count_dict[key]\n\n    # Return the maximum run length\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # create an empty list to store the runs of uppercase characters\n    run_list = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the current character is uppercase, append a list with one element (the current character) to the run_list\n        if char.isupper():\n            run_list.append([char])\n        # if the current character is not uppercase, check if there is a run of one or more uppercase characters in the run_list\n        elif run_list:\n            # if there is a run of one or more uppercase characters in the run_list, check if the end of the run is the current character\n            end_index = len(run_list[-1]) - 1\n            if run_list[-1][end_index] == char:\n                # if the end of the run is the current character, append a new list with one element (the current character) to the run_list\n                run_list[-1].append(char)\n            # if the end of the run is not the current character, append a new list with one element (the current character) to the run_list\n            else:\n                run_list.append([char])\n    # find the maximum length run of uppercase characters in the run_list\n    max_run_length = 0\n    for run in run_list:\n        if len(run) > max_run_length:\n            max_run_length = len(run)\n    # return the maximum run of uppercase characters\n    return max_run_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize variables for current run and maximum run\n    current_run = 0\n    max_run = 0\n    \n    # loop through the string\n    for i in range(len(test_str)):\n        \n        # if the current character is uppercase, increment the current run\n        if test_str[i].isupper():\n            current_run += 1\n        \n        # if the current character is not uppercase and the current run is greater than the maximum run, update the maximum run\n        elif current_run > max_run:\n            max_run = current_run\n        \n        # if the current character is not uppercase and the current run is equal to the maximum run, increment the current run\n        else:\n            current_run += 1\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    is_uppercase = False\n\n    # iterate over each character in the string\n    for char in test_str:\n        # if the character is uppercase and we're not already in a run of uppercase, update the max run and reset the current run\n        if char.isupper() and not is_uppercase:\n            current_run = 1\n            is_uppercase = True\n        # if the character is not uppercase and we're already in a run of uppercase, update the max run and reset the current run\n        elif not char.isupper() and is_uppercase:\n            current_run += 1\n            max_run = max(max_run, current_run)\n            current_run = 0\n            is_uppercase = False\n        # if the character is neither uppercase nor not uppercase, it's not a part of the run, so we can reset the is_uppercase flag\n        else:\n            is_uppercase = False\n\n    # if the last character in the string was uppercase, update the max run\n    if is_uppercase:\n        max_run = max(max_run, current_run + 1)\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    curr_run = 0\n    prev_char = ''\n    \n    for i in range(len(test_str)):\n        curr_char = test_str[i]\n        \n        if curr_char.isupper():\n            if prev_char.isupper():\n                curr_run += 1\n            else:\n                curr_run = 1\n            \n            max_run = max(max_run, curr_run)\n            prev_char = curr_char\n            \n        else:\n            curr_run = 0\n            prev_char = curr_char\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    # Iterate through the string\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            curr_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = test_str[0]\n    \n    # Loop through each character in the string\n    for i in range(1, len(test_str)):\n        current_char = test_str[i]\n        \n        # Check if the current character is uppercase\n        if current_char.isupper():\n            current_run += 1\n            \n            # If the current run is greater than the maximum run, update the max_run variable\n            if current_run > max_run:\n                max_run = current_run\n        \n        # If the current character is not uppercase, reset the current run to 0\n        else:\n            current_run = 0\n    \n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    curr_run = 0\n    uppercase_count = 0\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            if uppercase_count > curr_run:\n                curr_run = uppercase_count\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n            uppercase_count = 0\n    max_run = max(max_run, curr_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            curr_run = 0\n        if curr_run > max_run:\n            max_run = curr_run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[K] == 'k':\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[1] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # Check if the length of the tuple is greater than 1.\n    if len(test_tup) > 1:\n        # Check if the first element of the tuple is equal to K.\n        if test_tup[0] == K:\n            # If it is, check if the second element is also equal to K.\n            if test_tup[1] == K:\n                # If it is, then return True because the tuple contains both K.\n                return True\n            else:\n                # If the second element is not equal to K, then return False because the tuple contains only the first element.\n                return False\n        else:\n            # If the first element is not equal to K, then check if the second element is equal to K.\n            if test_tup[1] == K:\n                # If it is, then return True because the tuple contains both K.\n                return True\n            else:\n                # If the second element is not equal to K, then return False because the tuple contains only the second element.\n                return False\n    else:\n        # If the length of the tuple is less than or equal to 1, then return False because there is no way for the tuple to contain K.\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if K in test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for item in test_tup:\n        if item == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for item in test_tup:\n        if item == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[:K]:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: the two tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"Error: {test_tup1[i]} is greater than {test_tup2[i]} at index {i}.\")\n            return\n            \n    print(\"The two tuples are smaller.\")\n    return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup2)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: Element at index\", i, \"in the first tuple is greater than the element at the same index in the second tuple.\")\n            return\n        elif test_tup1[i] < test_tup2[i]:\n            print(\"Element at index\", i, \"in the first tuple is smaller than the element at the same index in the second tuple.\")\n            return\n    \n    print(\"The tuples are equal.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuple lengths are not equal.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples should have the same length')\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    }
]